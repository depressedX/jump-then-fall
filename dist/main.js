/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/.pnpm/d@1.0.1/node_modules/d/index.js":
/*!************************************************************!*\
  !*** ./node_modules/.pnpm/d@1.0.1/node_modules/d/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isValue = __webpack_require__(/*! type/value/is */ \"./node_modules/.pnpm/type@1.2.0/node_modules/type/value/is.js\"), isPlainFunction = __webpack_require__(/*! type/plain-function/is */ \"./node_modules/.pnpm/type@1.2.0/node_modules/type/plain-function/is.js\"), assign = __webpack_require__(/*! es5-ext/object/assign */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/index.js\"), normalizeOpts = __webpack_require__(/*! es5-ext/object/normalize-options */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/normalize-options.js\"), contains = __webpack_require__(/*! es5-ext/string/#/contains */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/index.js\");\nvar d = (module.exports = function (dscr, value /*, options*/) {\n    var c, e, w, options, desc;\n    if (arguments.length < 2 || typeof dscr !== \"string\") {\n        options = value;\n        value = dscr;\n        dscr = null;\n    }\n    else {\n        options = arguments[2];\n    }\n    if (isValue(dscr)) {\n        c = contains.call(dscr, \"c\");\n        e = contains.call(dscr, \"e\");\n        w = contains.call(dscr, \"w\");\n    }\n    else {\n        c = w = true;\n        e = false;\n    }\n    desc = { value: value, configurable: c, enumerable: e, writable: w };\n    return !options ? desc : assign(normalizeOpts(options), desc);\n});\nd.gs = function (dscr, get, set /*, options*/) {\n    var c, e, options, desc;\n    if (typeof dscr !== \"string\") {\n        options = set;\n        set = get;\n        get = dscr;\n        dscr = null;\n    }\n    else {\n        options = arguments[3];\n    }\n    if (!isValue(get)) {\n        get = undefined;\n    }\n    else if (!isPlainFunction(get)) {\n        options = get;\n        get = set = undefined;\n    }\n    else if (!isValue(set)) {\n        set = undefined;\n    }\n    else if (!isPlainFunction(set)) {\n        options = set;\n        set = undefined;\n    }\n    if (isValue(dscr)) {\n        c = contains.call(dscr, \"c\");\n        e = contains.call(dscr, \"e\");\n    }\n    else {\n        c = true;\n        e = false;\n    }\n    desc = { get: get, set: set, configurable: c, enumerable: e };\n    return !options ? desc : assign(normalizeOpts(options), desc);\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/d@1.0.1/node_modules/d/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/function/noop.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/function/noop.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// eslint-disable-next-line no-empty-function\nmodule.exports = function () { };\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/function/noop.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/index.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./is-implemented */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/is-implemented.js\")() ? Object.assign : __webpack_require__(/*! ./shim */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/shim.js\");\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/is-implemented.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/is-implemented.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function () {\n    var assign = Object.assign, obj;\n    if (typeof assign !== \"function\")\n        return false;\n    obj = { foo: \"raz\" };\n    assign(obj, { bar: \"dwa\" }, { trzy: \"trzy\" });\n    return obj.foo + obj.bar + obj.trzy === \"razdwatrzy\";\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/is-implemented.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/shim.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/shim.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar keys = __webpack_require__(/*! ../keys */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/index.js\"), value = __webpack_require__(/*! ../valid-value */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/valid-value.js\"), max = Math.max;\nmodule.exports = function (dest, src /*, …srcn*/) {\n    var error, i, length = max(arguments.length, 2), assign;\n    dest = Object(value(dest));\n    assign = function (key) {\n        try {\n            dest[key] = src[key];\n        }\n        catch (e) {\n            if (!error)\n                error = e;\n        }\n    };\n    for (i = 1; i < length; ++i) {\n        src = arguments[i];\n        keys(src).forEach(assign);\n    }\n    if (error !== undefined)\n        throw error;\n    return dest;\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/assign/shim.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/is-value.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/is-value.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar _undefined = __webpack_require__(/*! ../function/noop */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/function/noop.js\")(); // Support ES3 engines\nmodule.exports = function (val) { return val !== _undefined && val !== null; };\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/is-value.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/index.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./is-implemented */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/is-implemented.js\")() ? Object.keys : __webpack_require__(/*! ./shim */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/shim.js\");\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/is-implemented.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/is-implemented.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function () {\n    try {\n        Object.keys(\"primitive\");\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/is-implemented.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/shim.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/shim.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isValue = __webpack_require__(/*! ../is-value */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/is-value.js\");\nvar keys = Object.keys;\nmodule.exports = function (object) { return keys(isValue(object) ? Object(object) : object); };\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/keys/shim.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/normalize-options.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/normalize-options.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isValue = __webpack_require__(/*! ./is-value */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/is-value.js\");\nvar forEach = Array.prototype.forEach, create = Object.create;\nvar process = function (src, obj) {\n    var key;\n    for (key in src)\n        obj[key] = src[key];\n};\n// eslint-disable-next-line no-unused-vars\nmodule.exports = function (opts1 /*, …options*/) {\n    var result = create(null);\n    forEach.call(arguments, function (options) {\n        if (!isValue(options))\n            return;\n        process(Object(options), result);\n    });\n    return result;\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/normalize-options.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/valid-callable.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/valid-callable.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function (fn) {\n    if (typeof fn !== \"function\")\n        throw new TypeError(fn + \" is not a function\");\n    return fn;\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/valid-callable.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/valid-value.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/valid-value.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isValue = __webpack_require__(/*! ./is-value */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/is-value.js\");\nmodule.exports = function (value) {\n    if (!isValue(value))\n        throw new TypeError(\"Cannot use null or undefined\");\n    return value;\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/valid-value.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/index.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./is-implemented */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/is-implemented.js\")() ? String.prototype.contains : __webpack_require__(/*! ./shim */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/shim.js\");\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/is-implemented.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/is-implemented.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar str = \"razdwatrzy\";\nmodule.exports = function () {\n    if (typeof str.contains !== \"function\")\n        return false;\n    return str.contains(\"dwa\") === true && str.contains(\"foo\") === false;\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/is-implemented.js?");

/***/ }),

/***/ "./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/shim.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/shim.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar indexOf = String.prototype.indexOf;\nmodule.exports = function (searchString /*, position*/) {\n    return indexOf.call(this, searchString, arguments[1]) > -1;\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/string/#/contains/shim.js?");

/***/ }),

/***/ "./node_modules/.pnpm/event-emitter@0.3.5/node_modules/event-emitter/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/event-emitter@0.3.5/node_modules/event-emitter/index.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar d = __webpack_require__(/*! d */ \"./node_modules/.pnpm/d@1.0.1/node_modules/d/index.js\"), callable = __webpack_require__(/*! es5-ext/object/valid-callable */ \"./node_modules/.pnpm/es5-ext@0.10.62/node_modules/es5-ext/object/valid-callable.js\"), apply = Function.prototype.apply, call = Function.prototype.call, create = Object.create, defineProperty = Object.defineProperty, defineProperties = Object.defineProperties, hasOwnProperty = Object.prototype.hasOwnProperty, descriptor = { configurable: true, enumerable: false, writable: true }, on, once, off, emit, methods, descriptors, base;\non = function (type, listener) {\n    var data;\n    callable(listener);\n    if (!hasOwnProperty.call(this, '__ee__')) {\n        data = descriptor.value = create(null);\n        defineProperty(this, '__ee__', descriptor);\n        descriptor.value = null;\n    }\n    else {\n        data = this.__ee__;\n    }\n    if (!data[type])\n        data[type] = listener;\n    else if (typeof data[type] === 'object')\n        data[type].push(listener);\n    else\n        data[type] = [data[type], listener];\n    return this;\n};\nonce = function (type, listener) {\n    var once, self;\n    callable(listener);\n    self = this;\n    on.call(this, type, once = function () {\n        off.call(self, type, once);\n        apply.call(listener, this, arguments);\n    });\n    once.__eeOnceListener__ = listener;\n    return this;\n};\noff = function (type, listener) {\n    var data, listeners, candidate, i;\n    callable(listener);\n    if (!hasOwnProperty.call(this, '__ee__'))\n        return this;\n    data = this.__ee__;\n    if (!data[type])\n        return this;\n    listeners = data[type];\n    if (typeof listeners === 'object') {\n        for (i = 0; (candidate = listeners[i]); ++i) {\n            if ((candidate === listener) ||\n                (candidate.__eeOnceListener__ === listener)) {\n                if (listeners.length === 2)\n                    data[type] = listeners[i ? 0 : 1];\n                else\n                    listeners.splice(i, 1);\n            }\n        }\n    }\n    else {\n        if ((listeners === listener) ||\n            (listeners.__eeOnceListener__ === listener)) {\n            delete data[type];\n        }\n    }\n    return this;\n};\nemit = function (type) {\n    var i, l, listener, listeners, args;\n    if (!hasOwnProperty.call(this, '__ee__'))\n        return;\n    listeners = this.__ee__[type];\n    if (!listeners)\n        return;\n    if (typeof listeners === 'object') {\n        l = arguments.length;\n        args = new Array(l - 1);\n        for (i = 1; i < l; ++i)\n            args[i - 1] = arguments[i];\n        listeners = listeners.slice();\n        for (i = 0; (listener = listeners[i]); ++i) {\n            apply.call(listener, this, args);\n        }\n    }\n    else {\n        switch (arguments.length) {\n            case 1:\n                call.call(listeners, this);\n                break;\n            case 2:\n                call.call(listeners, this, arguments[1]);\n                break;\n            case 3:\n                call.call(listeners, this, arguments[1], arguments[2]);\n                break;\n            default:\n                l = arguments.length;\n                args = new Array(l - 1);\n                for (i = 1; i < l; ++i) {\n                    args[i - 1] = arguments[i];\n                }\n                apply.call(listeners, this, args);\n        }\n    }\n};\nmethods = {\n    on: on,\n    once: once,\n    off: off,\n    emit: emit\n};\ndescriptors = {\n    on: d(on),\n    once: d(once),\n    off: d(off),\n    emit: d(emit)\n};\nbase = defineProperties({}, descriptors);\nmodule.exports = exports = function (o) {\n    return (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n};\nexports.methods = methods;\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/event-emitter@0.3.5/node_modules/event-emitter/index.js?");

/***/ }),

/***/ "./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar cachedSetTimeout;\nvar cachedClearTimeout;\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        }\n        else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    }\n    catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        }\n        else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    }\n    catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n}());\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    }\n    catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        }\n        catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    }\n    catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        }\n        catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    }\n    else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n    var len = queue.length;\n    while (len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\nfunction noop() { }\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\nprocess.listeners = function (name) { return []; };\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\nprocess.cwd = function () { return '/'; };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function () { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/.pnpm/setimmediate@1.0.5/node_modules/setimmediate/setImmediate.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/setimmediate@1.0.5/node_modules/setimmediate/setImmediate.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n    if (global.setImmediate) {\n        return;\n    }\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n    function setImmediate(callback) {\n        // Callback can either be a function or a string\n        if (typeof callback !== \"function\") {\n            callback = new Function(\"\" + callback);\n        }\n        // Copy function arguments\n        var args = new Array(arguments.length - 1);\n        for (var i = 0; i < args.length; i++) {\n            args[i] = arguments[i + 1];\n        }\n        // Store and register the task\n        var task = { callback: callback, args: args };\n        tasksByHandle[nextHandle] = task;\n        registerImmediate(nextHandle);\n        return nextHandle++;\n    }\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n            case 0:\n                callback();\n                break;\n            case 1:\n                callback(args[0]);\n                break;\n            case 2:\n                callback(args[0], args[1]);\n                break;\n            case 3:\n                callback(args[0], args[1], args[2]);\n                break;\n            default:\n                callback.apply(undefined, args);\n                break;\n        }\n    }\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        }\n        else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                }\n                finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n    function installNextTickImplementation() {\n        registerImmediate = function (handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function () {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function (event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        }\n        else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n        registerImmediate = function (handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n        registerImmediate = function (handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function (handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n    function installSetTimeoutImplementation() {\n        registerImmediate = function (handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n    }\n    else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n    }\n    else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n    }\n    else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n    }\n    else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack@4.19.1_webpack-cli@2.1.5/node_modules/webpack/buildin/global.js */ \"./node_modules/.pnpm/webpack@4.19.1_webpack-cli@2.1.5/node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../process@0.11.10/node_modules/process/browser.js */ \"./node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/.pnpm/setimmediate@1.0.5/node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/.pnpm/three@0.90.0/node_modules/three/build/three.module.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/three@0.90.0/node_modules/three/build/three.module.js ***!
  \**********************************************************************************/
/*! exports provided: WebGLRenderTargetCube, WebGLRenderTarget, WebGLRenderer, ShaderLib, UniformsLib, UniformsUtils, ShaderChunk, FogExp2, Fog, Scene, Sprite, LOD, SkinnedMesh, Skeleton, Bone, Mesh, LineSegments, LineLoop, Line, Points, Group, VideoTexture, DataTexture, CompressedTexture, CubeTexture, CanvasTexture, DepthTexture, Texture, CompressedTextureLoader, DataTextureLoader, CubeTextureLoader, TextureLoader, ObjectLoader, MaterialLoader, BufferGeometryLoader, DefaultLoadingManager, LoadingManager, JSONLoader, ImageLoader, ImageBitmapLoader, FontLoader, FileLoader, Loader, LoaderUtils, Cache, AudioLoader, SpotLightShadow, SpotLight, PointLight, RectAreaLight, HemisphereLight, DirectionalLightShadow, DirectionalLight, AmbientLight, LightShadow, Light, StereoCamera, PerspectiveCamera, OrthographicCamera, CubeCamera, ArrayCamera, Camera, AudioListener, PositionalAudio, AudioContext, AudioAnalyser, Audio, VectorKeyframeTrack, StringKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack, ColorKeyframeTrack, BooleanKeyframeTrack, PropertyMixer, PropertyBinding, KeyframeTrack, AnimationUtils, AnimationObjectGroup, AnimationMixer, AnimationClip, Uniform, InstancedBufferGeometry, BufferGeometry, Geometry, InterleavedBufferAttribute, InstancedInterleavedBuffer, InterleavedBuffer, InstancedBufferAttribute, Face3, Object3D, Raycaster, Layers, EventDispatcher, Clock, QuaternionLinearInterpolant, LinearInterpolant, DiscreteInterpolant, CubicInterpolant, Interpolant, Triangle, Math, Spherical, Cylindrical, Plane, Frustum, Sphere, Ray, Matrix4, Matrix3, Box3, Box2, Line3, Euler, Vector4, Vector3, Vector2, Quaternion, Color, ImmediateRenderObject, VertexNormalsHelper, SpotLightHelper, SkeletonHelper, PointLightHelper, RectAreaLightHelper, HemisphereLightHelper, GridHelper, PolarGridHelper, FaceNormalsHelper, DirectionalLightHelper, CameraHelper, BoxHelper, Box3Helper, PlaneHelper, ArrowHelper, AxesHelper, Shape, Path, ShapePath, Font, CurvePath, Curve, ShapeUtils, WebGLUtils, WireframeGeometry, ParametricGeometry, ParametricBufferGeometry, TetrahedronGeometry, TetrahedronBufferGeometry, OctahedronGeometry, OctahedronBufferGeometry, IcosahedronGeometry, IcosahedronBufferGeometry, DodecahedronGeometry, DodecahedronBufferGeometry, PolyhedronGeometry, PolyhedronBufferGeometry, TubeGeometry, TubeBufferGeometry, TorusKnotGeometry, TorusKnotBufferGeometry, TorusGeometry, TorusBufferGeometry, TextGeometry, TextBufferGeometry, SphereGeometry, SphereBufferGeometry, RingGeometry, RingBufferGeometry, PlaneGeometry, PlaneBufferGeometry, LatheGeometry, LatheBufferGeometry, ShapeGeometry, ShapeBufferGeometry, ExtrudeGeometry, ExtrudeBufferGeometry, EdgesGeometry, ConeGeometry, ConeBufferGeometry, CylinderGeometry, CylinderBufferGeometry, CircleGeometry, CircleBufferGeometry, BoxGeometry, BoxBufferGeometry, ShadowMaterial, SpriteMaterial, RawShaderMaterial, ShaderMaterial, PointsMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshPhongMaterial, MeshToonMaterial, MeshNormalMaterial, MeshLambertMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshBasicMaterial, LineDashedMaterial, LineBasicMaterial, Material, Float64BufferAttribute, Float32BufferAttribute, Uint32BufferAttribute, Int32BufferAttribute, Uint16BufferAttribute, Int16BufferAttribute, Uint8ClampedBufferAttribute, Uint8BufferAttribute, Int8BufferAttribute, BufferAttribute, ArcCurve, CatmullRomCurve3, CubicBezierCurve, CubicBezierCurve3, EllipseCurve, LineCurve, LineCurve3, QuadraticBezierCurve, QuadraticBezierCurve3, SplineCurve, REVISION, MOUSE, CullFaceNone, CullFaceBack, CullFaceFront, CullFaceFrontBack, FrontFaceDirectionCW, FrontFaceDirectionCCW, BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, FrontSide, BackSide, DoubleSide, FlatShading, SmoothShading, NoColors, FaceColors, VertexColors, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstAlphaFactor, OneMinusDstAlphaFactor, DstColorFactor, OneMinusDstColorFactor, SrcAlphaSaturateFactor, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, MultiplyOperation, MixOperation, AddOperation, NoToneMapping, LinearToneMapping, ReinhardToneMapping, Uncharted2ToneMapping, CineonToneMapping, UVMapping, CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping, SphericalReflectionMapping, CubeUVReflectionMapping, CubeUVRefractionMapping, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestFilter, NearestMipMapNearestFilter, NearestMipMapLinearFilter, LinearFilter, LinearMipMapNearestFilter, LinearMipMapLinearFilter, UnsignedByteType, ByteType, ShortType, UnsignedShortType, IntType, UnsignedIntType, FloatType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedInt248Type, AlphaFormat, RGBFormat, RGBAFormat, LuminanceFormat, LuminanceAlphaFormat, RGBEFormat, DepthFormat, DepthStencilFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, LoopOnce, LoopRepeat, LoopPingPong, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, ZeroCurvatureEnding, ZeroSlopeEnding, WrapAroundEnding, TrianglesDrawMode, TriangleStripDrawMode, TriangleFanDrawMode, LinearEncoding, sRGBEncoding, GammaEncoding, RGBEEncoding, LogLuvEncoding, RGBM7Encoding, RGBM16Encoding, RGBDEncoding, BasicDepthPacking, RGBADepthPacking, CubeGeometry, Face4, LineStrip, LinePieces, MeshFaceMaterial, MultiMaterial, PointCloud, Particle, ParticleSystem, PointCloudMaterial, ParticleBasicMaterial, ParticleSystemMaterial, Vertex, DynamicBufferAttribute, Int8Attribute, Uint8Attribute, Uint8ClampedAttribute, Int16Attribute, Uint16Attribute, Int32Attribute, Uint32Attribute, Float32Attribute, Float64Attribute, ClosedSplineCurve3, SplineCurve3, Spline, AxisHelper, BoundingBoxHelper, EdgesHelper, WireframeHelper, XHRLoader, BinaryTextureLoader, GeometryUtils, ImageUtils, Projector, CanvasRenderer, SceneUtils, LensFlare */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGLRenderTargetCube\", function() { return WebGLRenderTargetCube; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGLRenderTarget\", function() { return WebGLRenderTarget; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGLRenderer\", function() { return WebGLRenderer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShaderLib\", function() { return ShaderLib; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UniformsLib\", function() { return UniformsLib; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UniformsUtils\", function() { return UniformsUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShaderChunk\", function() { return ShaderChunk; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FogExp2\", function() { return FogExp2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Fog\", function() { return Fog; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scene\", function() { return Scene; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sprite\", function() { return Sprite; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LOD\", function() { return LOD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SkinnedMesh\", function() { return SkinnedMesh; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Skeleton\", function() { return Skeleton; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bone\", function() { return Bone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mesh\", function() { return Mesh; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineSegments\", function() { return LineSegments; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineLoop\", function() { return LineLoop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line\", function() { return Line; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Points\", function() { return Points; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Group\", function() { return Group; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VideoTexture\", function() { return VideoTexture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DataTexture\", function() { return DataTexture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompressedTexture\", function() { return CompressedTexture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeTexture\", function() { return CubeTexture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CanvasTexture\", function() { return CanvasTexture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DepthTexture\", function() { return DepthTexture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Texture\", function() { return Texture; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CompressedTextureLoader\", function() { return CompressedTextureLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DataTextureLoader\", function() { return DataTextureLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeTextureLoader\", function() { return CubeTextureLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextureLoader\", function() { return TextureLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObjectLoader\", function() { return ObjectLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MaterialLoader\", function() { return MaterialLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BufferGeometryLoader\", function() { return BufferGeometryLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultLoadingManager\", function() { return DefaultLoadingManager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoadingManager\", function() { return LoadingManager; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"JSONLoader\", function() { return JSONLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageLoader\", function() { return ImageLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageBitmapLoader\", function() { return ImageBitmapLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FontLoader\", function() { return FontLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FileLoader\", function() { return FileLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Loader\", function() { return Loader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoaderUtils\", function() { return LoaderUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Cache\", function() { return Cache; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AudioLoader\", function() { return AudioLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpotLightShadow\", function() { return SpotLightShadow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpotLight\", function() { return SpotLight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointLight\", function() { return PointLight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RectAreaLight\", function() { return RectAreaLight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HemisphereLight\", function() { return HemisphereLight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DirectionalLightShadow\", function() { return DirectionalLightShadow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DirectionalLight\", function() { return DirectionalLight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AmbientLight\", function() { return AmbientLight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LightShadow\", function() { return LightShadow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Light\", function() { return Light; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StereoCamera\", function() { return StereoCamera; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PerspectiveCamera\", function() { return PerspectiveCamera; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OrthographicCamera\", function() { return OrthographicCamera; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeCamera\", function() { return CubeCamera; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArrayCamera\", function() { return ArrayCamera; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Camera\", function() { return Camera; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AudioListener\", function() { return AudioListener; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PositionalAudio\", function() { return PositionalAudio; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AudioContext\", function() { return AudioContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AudioAnalyser\", function() { return AudioAnalyser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Audio\", function() { return Audio; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VectorKeyframeTrack\", function() { return VectorKeyframeTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StringKeyframeTrack\", function() { return StringKeyframeTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"QuaternionKeyframeTrack\", function() { return QuaternionKeyframeTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NumberKeyframeTrack\", function() { return NumberKeyframeTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorKeyframeTrack\", function() { return ColorKeyframeTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BooleanKeyframeTrack\", function() { return BooleanKeyframeTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PropertyMixer\", function() { return PropertyMixer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PropertyBinding\", function() { return PropertyBinding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"KeyframeTrack\", function() { return KeyframeTrack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnimationUtils\", function() { return AnimationUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnimationObjectGroup\", function() { return AnimationObjectGroup; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnimationMixer\", function() { return AnimationMixer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnimationClip\", function() { return AnimationClip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uniform\", function() { return Uniform; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InstancedBufferGeometry\", function() { return InstancedBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BufferGeometry\", function() { return BufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Geometry\", function() { return Geometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InterleavedBufferAttribute\", function() { return InterleavedBufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InstancedInterleavedBuffer\", function() { return InstancedInterleavedBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InterleavedBuffer\", function() { return InterleavedBuffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InstancedBufferAttribute\", function() { return InstancedBufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Face3\", function() { return Face3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Object3D\", function() { return Object3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Raycaster\", function() { return Raycaster; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Layers\", function() { return Layers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventDispatcher\", function() { return EventDispatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Clock\", function() { return Clock; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"QuaternionLinearInterpolant\", function() { return QuaternionLinearInterpolant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinearInterpolant\", function() { return LinearInterpolant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DiscreteInterpolant\", function() { return DiscreteInterpolant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubicInterpolant\", function() { return CubicInterpolant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Interpolant\", function() { return Interpolant; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Triangle\", function() { return Triangle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Math\", function() { return _Math; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Spherical\", function() { return Spherical; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Cylindrical\", function() { return Cylindrical; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Plane\", function() { return Plane; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Frustum\", function() { return Frustum; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sphere\", function() { return Sphere; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ray\", function() { return Ray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Matrix4\", function() { return Matrix4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Matrix3\", function() { return Matrix3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Box3\", function() { return Box3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Box2\", function() { return Box2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line3\", function() { return Line3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Euler\", function() { return Euler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vector4\", function() { return Vector4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vector3\", function() { return Vector3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vector2\", function() { return Vector2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Quaternion\", function() { return Quaternion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Color\", function() { return Color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImmediateRenderObject\", function() { return ImmediateRenderObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VertexNormalsHelper\", function() { return VertexNormalsHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpotLightHelper\", function() { return SpotLightHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SkeletonHelper\", function() { return SkeletonHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointLightHelper\", function() { return PointLightHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RectAreaLightHelper\", function() { return RectAreaLightHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HemisphereLightHelper\", function() { return HemisphereLightHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GridHelper\", function() { return GridHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PolarGridHelper\", function() { return PolarGridHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FaceNormalsHelper\", function() { return FaceNormalsHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DirectionalLightHelper\", function() { return DirectionalLightHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CameraHelper\", function() { return CameraHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoxHelper\", function() { return BoxHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Box3Helper\", function() { return Box3Helper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PlaneHelper\", function() { return PlaneHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArrowHelper\", function() { return ArrowHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AxesHelper\", function() { return AxesHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shape\", function() { return Shape; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Path\", function() { return Path; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShapePath\", function() { return ShapePath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Font\", function() { return Font; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CurvePath\", function() { return CurvePath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Curve\", function() { return Curve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShapeUtils\", function() { return ShapeUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGLUtils\", function() { return WebGLUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WireframeGeometry\", function() { return WireframeGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParametricGeometry\", function() { return ParametricGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParametricBufferGeometry\", function() { return ParametricBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TetrahedronGeometry\", function() { return TetrahedronGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TetrahedronBufferGeometry\", function() { return TetrahedronBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OctahedronGeometry\", function() { return OctahedronGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OctahedronBufferGeometry\", function() { return OctahedronBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IcosahedronGeometry\", function() { return IcosahedronGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IcosahedronBufferGeometry\", function() { return IcosahedronBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DodecahedronGeometry\", function() { return DodecahedronGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DodecahedronBufferGeometry\", function() { return DodecahedronBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PolyhedronGeometry\", function() { return PolyhedronGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PolyhedronBufferGeometry\", function() { return PolyhedronBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TubeGeometry\", function() { return TubeGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TubeBufferGeometry\", function() { return TubeBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TorusKnotGeometry\", function() { return TorusKnotGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TorusKnotBufferGeometry\", function() { return TorusKnotBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TorusGeometry\", function() { return TorusGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TorusBufferGeometry\", function() { return TorusBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextGeometry\", function() { return TextGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextBufferGeometry\", function() { return TextBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SphereGeometry\", function() { return SphereGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SphereBufferGeometry\", function() { return SphereBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RingGeometry\", function() { return RingGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RingBufferGeometry\", function() { return RingBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PlaneGeometry\", function() { return PlaneGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PlaneBufferGeometry\", function() { return PlaneBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LatheGeometry\", function() { return LatheGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LatheBufferGeometry\", function() { return LatheBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShapeGeometry\", function() { return ShapeGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShapeBufferGeometry\", function() { return ShapeBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ExtrudeGeometry\", function() { return ExtrudeGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ExtrudeBufferGeometry\", function() { return ExtrudeBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EdgesGeometry\", function() { return EdgesGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConeGeometry\", function() { return ConeGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ConeBufferGeometry\", function() { return ConeBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CylinderGeometry\", function() { return CylinderGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CylinderBufferGeometry\", function() { return CylinderBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CircleGeometry\", function() { return CircleGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CircleBufferGeometry\", function() { return CircleBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoxGeometry\", function() { return BoxGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoxBufferGeometry\", function() { return BoxBufferGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShadowMaterial\", function() { return ShadowMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpriteMaterial\", function() { return SpriteMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RawShaderMaterial\", function() { return RawShaderMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShaderMaterial\", function() { return ShaderMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointsMaterial\", function() { return PointsMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshPhysicalMaterial\", function() { return MeshPhysicalMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshStandardMaterial\", function() { return MeshStandardMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshPhongMaterial\", function() { return MeshPhongMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshToonMaterial\", function() { return MeshToonMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshNormalMaterial\", function() { return MeshNormalMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshLambertMaterial\", function() { return MeshLambertMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshDepthMaterial\", function() { return MeshDepthMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshDistanceMaterial\", function() { return MeshDistanceMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshBasicMaterial\", function() { return MeshBasicMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineDashedMaterial\", function() { return LineDashedMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineBasicMaterial\", function() { return LineBasicMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Material\", function() { return Material; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Float64BufferAttribute\", function() { return Float64BufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Float32BufferAttribute\", function() { return Float32BufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uint32BufferAttribute\", function() { return Uint32BufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Int32BufferAttribute\", function() { return Int32BufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uint16BufferAttribute\", function() { return Uint16BufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Int16BufferAttribute\", function() { return Int16BufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uint8ClampedBufferAttribute\", function() { return Uint8ClampedBufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uint8BufferAttribute\", function() { return Uint8BufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Int8BufferAttribute\", function() { return Int8BufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BufferAttribute\", function() { return BufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArcCurve\", function() { return ArcCurve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CatmullRomCurve3\", function() { return CatmullRomCurve3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubicBezierCurve\", function() { return CubicBezierCurve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubicBezierCurve3\", function() { return CubicBezierCurve3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EllipseCurve\", function() { return EllipseCurve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineCurve\", function() { return LineCurve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineCurve3\", function() { return LineCurve3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"QuadraticBezierCurve\", function() { return QuadraticBezierCurve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"QuadraticBezierCurve3\", function() { return QuadraticBezierCurve3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SplineCurve\", function() { return SplineCurve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"REVISION\", function() { return REVISION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MOUSE\", function() { return MOUSE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CullFaceNone\", function() { return CullFaceNone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CullFaceBack\", function() { return CullFaceBack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CullFaceFront\", function() { return CullFaceFront; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CullFaceFrontBack\", function() { return CullFaceFrontBack; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FrontFaceDirectionCW\", function() { return FrontFaceDirectionCW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FrontFaceDirectionCCW\", function() { return FrontFaceDirectionCCW; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicShadowMap\", function() { return BasicShadowMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PCFShadowMap\", function() { return PCFShadowMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PCFSoftShadowMap\", function() { return PCFSoftShadowMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FrontSide\", function() { return FrontSide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BackSide\", function() { return BackSide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DoubleSide\", function() { return DoubleSide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FlatShading\", function() { return FlatShading; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SmoothShading\", function() { return SmoothShading; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoColors\", function() { return NoColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FaceColors\", function() { return FaceColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VertexColors\", function() { return VertexColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoBlending\", function() { return NoBlending; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NormalBlending\", function() { return NormalBlending; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AdditiveBlending\", function() { return AdditiveBlending; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubtractiveBlending\", function() { return SubtractiveBlending; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MultiplyBlending\", function() { return MultiplyBlending; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CustomBlending\", function() { return CustomBlending; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AddEquation\", function() { return AddEquation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubtractEquation\", function() { return SubtractEquation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ReverseSubtractEquation\", function() { return ReverseSubtractEquation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MinEquation\", function() { return MinEquation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MaxEquation\", function() { return MaxEquation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ZeroFactor\", function() { return ZeroFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OneFactor\", function() { return OneFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SrcColorFactor\", function() { return SrcColorFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OneMinusSrcColorFactor\", function() { return OneMinusSrcColorFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SrcAlphaFactor\", function() { return SrcAlphaFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OneMinusSrcAlphaFactor\", function() { return OneMinusSrcAlphaFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DstAlphaFactor\", function() { return DstAlphaFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OneMinusDstAlphaFactor\", function() { return OneMinusDstAlphaFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DstColorFactor\", function() { return DstColorFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OneMinusDstColorFactor\", function() { return OneMinusDstColorFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SrcAlphaSaturateFactor\", function() { return SrcAlphaSaturateFactor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NeverDepth\", function() { return NeverDepth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AlwaysDepth\", function() { return AlwaysDepth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LessDepth\", function() { return LessDepth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LessEqualDepth\", function() { return LessEqualDepth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EqualDepth\", function() { return EqualDepth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GreaterEqualDepth\", function() { return GreaterEqualDepth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GreaterDepth\", function() { return GreaterDepth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NotEqualDepth\", function() { return NotEqualDepth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MultiplyOperation\", function() { return MultiplyOperation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MixOperation\", function() { return MixOperation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AddOperation\", function() { return AddOperation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NoToneMapping\", function() { return NoToneMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinearToneMapping\", function() { return LinearToneMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ReinhardToneMapping\", function() { return ReinhardToneMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uncharted2ToneMapping\", function() { return Uncharted2ToneMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CineonToneMapping\", function() { return CineonToneMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UVMapping\", function() { return UVMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeReflectionMapping\", function() { return CubeReflectionMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeRefractionMapping\", function() { return CubeRefractionMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EquirectangularReflectionMapping\", function() { return EquirectangularReflectionMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EquirectangularRefractionMapping\", function() { return EquirectangularRefractionMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SphericalReflectionMapping\", function() { return SphericalReflectionMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeUVReflectionMapping\", function() { return CubeUVReflectionMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeUVRefractionMapping\", function() { return CubeUVRefractionMapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RepeatWrapping\", function() { return RepeatWrapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ClampToEdgeWrapping\", function() { return ClampToEdgeWrapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MirroredRepeatWrapping\", function() { return MirroredRepeatWrapping; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NearestFilter\", function() { return NearestFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NearestMipMapNearestFilter\", function() { return NearestMipMapNearestFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NearestMipMapLinearFilter\", function() { return NearestMipMapLinearFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinearFilter\", function() { return LinearFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinearMipMapNearestFilter\", function() { return LinearMipMapNearestFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinearMipMapLinearFilter\", function() { return LinearMipMapLinearFilter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnsignedByteType\", function() { return UnsignedByteType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ByteType\", function() { return ByteType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShortType\", function() { return ShortType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnsignedShortType\", function() { return UnsignedShortType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IntType\", function() { return IntType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnsignedIntType\", function() { return UnsignedIntType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FloatType\", function() { return FloatType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HalfFloatType\", function() { return HalfFloatType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnsignedShort4444Type\", function() { return UnsignedShort4444Type; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnsignedShort5551Type\", function() { return UnsignedShort5551Type; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnsignedShort565Type\", function() { return UnsignedShort565Type; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UnsignedInt248Type\", function() { return UnsignedInt248Type; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AlphaFormat\", function() { return AlphaFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBFormat\", function() { return RGBFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBAFormat\", function() { return RGBAFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LuminanceFormat\", function() { return LuminanceFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LuminanceAlphaFormat\", function() { return LuminanceAlphaFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBEFormat\", function() { return RGBEFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DepthFormat\", function() { return DepthFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DepthStencilFormat\", function() { return DepthStencilFormat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGB_S3TC_DXT1_Format\", function() { return RGB_S3TC_DXT1_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_S3TC_DXT1_Format\", function() { return RGBA_S3TC_DXT1_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_S3TC_DXT3_Format\", function() { return RGBA_S3TC_DXT3_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_S3TC_DXT5_Format\", function() { return RGBA_S3TC_DXT5_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGB_PVRTC_4BPPV1_Format\", function() { return RGB_PVRTC_4BPPV1_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGB_PVRTC_2BPPV1_Format\", function() { return RGB_PVRTC_2BPPV1_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_PVRTC_4BPPV1_Format\", function() { return RGBA_PVRTC_4BPPV1_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_PVRTC_2BPPV1_Format\", function() { return RGBA_PVRTC_2BPPV1_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGB_ETC1_Format\", function() { return RGB_ETC1_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_4x4_Format\", function() { return RGBA_ASTC_4x4_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_5x4_Format\", function() { return RGBA_ASTC_5x4_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_5x5_Format\", function() { return RGBA_ASTC_5x5_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_6x5_Format\", function() { return RGBA_ASTC_6x5_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_6x6_Format\", function() { return RGBA_ASTC_6x6_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_8x5_Format\", function() { return RGBA_ASTC_8x5_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_8x6_Format\", function() { return RGBA_ASTC_8x6_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_8x8_Format\", function() { return RGBA_ASTC_8x8_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_10x5_Format\", function() { return RGBA_ASTC_10x5_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_10x6_Format\", function() { return RGBA_ASTC_10x6_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_10x8_Format\", function() { return RGBA_ASTC_10x8_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_10x10_Format\", function() { return RGBA_ASTC_10x10_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_12x10_Format\", function() { return RGBA_ASTC_12x10_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBA_ASTC_12x12_Format\", function() { return RGBA_ASTC_12x12_Format; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoopOnce\", function() { return LoopOnce; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoopRepeat\", function() { return LoopRepeat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoopPingPong\", function() { return LoopPingPong; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InterpolateDiscrete\", function() { return InterpolateDiscrete; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InterpolateLinear\", function() { return InterpolateLinear; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InterpolateSmooth\", function() { return InterpolateSmooth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ZeroCurvatureEnding\", function() { return ZeroCurvatureEnding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ZeroSlopeEnding\", function() { return ZeroSlopeEnding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WrapAroundEnding\", function() { return WrapAroundEnding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TrianglesDrawMode\", function() { return TrianglesDrawMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TriangleStripDrawMode\", function() { return TriangleStripDrawMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TriangleFanDrawMode\", function() { return TriangleFanDrawMode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinearEncoding\", function() { return LinearEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sRGBEncoding\", function() { return sRGBEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GammaEncoding\", function() { return GammaEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBEEncoding\", function() { return RGBEEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LogLuvEncoding\", function() { return LogLuvEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBM7Encoding\", function() { return RGBM7Encoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBM16Encoding\", function() { return RGBM16Encoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBDEncoding\", function() { return RGBDEncoding; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasicDepthPacking\", function() { return BasicDepthPacking; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RGBADepthPacking\", function() { return RGBADepthPacking; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeGeometry\", function() { return BoxGeometry; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Face4\", function() { return Face4; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LineStrip\", function() { return LineStrip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinePieces\", function() { return LinePieces; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshFaceMaterial\", function() { return MeshFaceMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MultiMaterial\", function() { return MultiMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointCloud\", function() { return PointCloud; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Particle\", function() { return Particle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParticleSystem\", function() { return ParticleSystem; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointCloudMaterial\", function() { return PointCloudMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParticleBasicMaterial\", function() { return ParticleBasicMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ParticleSystemMaterial\", function() { return ParticleSystemMaterial; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Vertex\", function() { return Vertex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DynamicBufferAttribute\", function() { return DynamicBufferAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Int8Attribute\", function() { return Int8Attribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uint8Attribute\", function() { return Uint8Attribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uint8ClampedAttribute\", function() { return Uint8ClampedAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Int16Attribute\", function() { return Int16Attribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uint16Attribute\", function() { return Uint16Attribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Int32Attribute\", function() { return Int32Attribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Uint32Attribute\", function() { return Uint32Attribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Float32Attribute\", function() { return Float32Attribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Float64Attribute\", function() { return Float64Attribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ClosedSplineCurve3\", function() { return ClosedSplineCurve3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SplineCurve3\", function() { return SplineCurve3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Spline\", function() { return Spline; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AxisHelper\", function() { return AxisHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoundingBoxHelper\", function() { return BoundingBoxHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EdgesHelper\", function() { return EdgesHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WireframeHelper\", function() { return WireframeHelper; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"XHRLoader\", function() { return XHRLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BinaryTextureLoader\", function() { return BinaryTextureLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GeometryUtils\", function() { return GeometryUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ImageUtils\", function() { return ImageUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Projector\", function() { return Projector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CanvasRenderer\", function() { return CanvasRenderer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SceneUtils\", function() { return SceneUtils; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LensFlare\", function() { return LensFlare; });\n// Polyfills\nif (Number.EPSILON === undefined) {\n    Number.EPSILON = Math.pow(2, -52);\n}\nif (Number.isInteger === undefined) {\n    // Missing in IE\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n    Number.isInteger = function (value) {\n        return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n    };\n}\n//\nif (Math.sign === undefined) {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n    Math.sign = function (x) {\n        return (x < 0) ? -1 : (x > 0) ? 1 : +x;\n    };\n}\nif ('name' in Function.prototype === false) {\n    // Missing in IE\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n    Object.defineProperty(Function.prototype, 'name', {\n        get: function () {\n            return this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1];\n        }\n    });\n}\nif (Object.assign === undefined) {\n    // Missing in IE\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    (function () {\n        Object.assign = function (target) {\n            if (target === undefined || target === null) {\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n            var output = Object(target);\n            for (var index = 1; index < arguments.length; index++) {\n                var source = arguments[index];\n                if (source !== undefined && source !== null) {\n                    for (var nextKey in source) {\n                        if (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n                            output[nextKey] = source[nextKey];\n                        }\n                    }\n                }\n            }\n            return output;\n        };\n    })();\n}\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\nfunction EventDispatcher() { }\nObject.assign(EventDispatcher.prototype, {\n    addEventListener: function (type, listener) {\n        if (this._listeners === undefined)\n            this._listeners = {};\n        var listeners = this._listeners;\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n        if (listeners[type].indexOf(listener) === -1) {\n            listeners[type].push(listener);\n        }\n    },\n    hasEventListener: function (type, listener) {\n        if (this._listeners === undefined)\n            return false;\n        var listeners = this._listeners;\n        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n    },\n    removeEventListener: function (type, listener) {\n        if (this._listeners === undefined)\n            return;\n        var listeners = this._listeners;\n        var listenerArray = listeners[type];\n        if (listenerArray !== undefined) {\n            var index = listenerArray.indexOf(listener);\n            if (index !== -1) {\n                listenerArray.splice(index, 1);\n            }\n        }\n    },\n    dispatchEvent: function (event) {\n        if (this._listeners === undefined)\n            return;\n        var listeners = this._listeners;\n        var listenerArray = listeners[event.type];\n        if (listenerArray !== undefined) {\n            event.target = this;\n            var array = listenerArray.slice(0);\n            for (var i = 0, l = array.length; i < l; i++) {\n                array[i].call(this, event);\n            }\n        }\n    }\n});\nvar REVISION = '90';\nvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\nvar CullFaceNone = 0;\nvar CullFaceBack = 1;\nvar CullFaceFront = 2;\nvar CullFaceFrontBack = 3;\nvar FrontFaceDirectionCW = 0;\nvar FrontFaceDirectionCCW = 1;\nvar BasicShadowMap = 0;\nvar PCFShadowMap = 1;\nvar PCFSoftShadowMap = 2;\nvar FrontSide = 0;\nvar BackSide = 1;\nvar DoubleSide = 2;\nvar FlatShading = 1;\nvar SmoothShading = 2;\nvar NoColors = 0;\nvar FaceColors = 1;\nvar VertexColors = 2;\nvar NoBlending = 0;\nvar NormalBlending = 1;\nvar AdditiveBlending = 2;\nvar SubtractiveBlending = 3;\nvar MultiplyBlending = 4;\nvar CustomBlending = 5;\nvar AddEquation = 100;\nvar SubtractEquation = 101;\nvar ReverseSubtractEquation = 102;\nvar MinEquation = 103;\nvar MaxEquation = 104;\nvar ZeroFactor = 200;\nvar OneFactor = 201;\nvar SrcColorFactor = 202;\nvar OneMinusSrcColorFactor = 203;\nvar SrcAlphaFactor = 204;\nvar OneMinusSrcAlphaFactor = 205;\nvar DstAlphaFactor = 206;\nvar OneMinusDstAlphaFactor = 207;\nvar DstColorFactor = 208;\nvar OneMinusDstColorFactor = 209;\nvar SrcAlphaSaturateFactor = 210;\nvar NeverDepth = 0;\nvar AlwaysDepth = 1;\nvar LessDepth = 2;\nvar LessEqualDepth = 3;\nvar EqualDepth = 4;\nvar GreaterEqualDepth = 5;\nvar GreaterDepth = 6;\nvar NotEqualDepth = 7;\nvar MultiplyOperation = 0;\nvar MixOperation = 1;\nvar AddOperation = 2;\nvar NoToneMapping = 0;\nvar LinearToneMapping = 1;\nvar ReinhardToneMapping = 2;\nvar Uncharted2ToneMapping = 3;\nvar CineonToneMapping = 4;\nvar UVMapping = 300;\nvar CubeReflectionMapping = 301;\nvar CubeRefractionMapping = 302;\nvar EquirectangularReflectionMapping = 303;\nvar EquirectangularRefractionMapping = 304;\nvar SphericalReflectionMapping = 305;\nvar CubeUVReflectionMapping = 306;\nvar CubeUVRefractionMapping = 307;\nvar RepeatWrapping = 1000;\nvar ClampToEdgeWrapping = 1001;\nvar MirroredRepeatWrapping = 1002;\nvar NearestFilter = 1003;\nvar NearestMipMapNearestFilter = 1004;\nvar NearestMipMapLinearFilter = 1005;\nvar LinearFilter = 1006;\nvar LinearMipMapNearestFilter = 1007;\nvar LinearMipMapLinearFilter = 1008;\nvar UnsignedByteType = 1009;\nvar ByteType = 1010;\nvar ShortType = 1011;\nvar UnsignedShortType = 1012;\nvar IntType = 1013;\nvar UnsignedIntType = 1014;\nvar FloatType = 1015;\nvar HalfFloatType = 1016;\nvar UnsignedShort4444Type = 1017;\nvar UnsignedShort5551Type = 1018;\nvar UnsignedShort565Type = 1019;\nvar UnsignedInt248Type = 1020;\nvar AlphaFormat = 1021;\nvar RGBFormat = 1022;\nvar RGBAFormat = 1023;\nvar LuminanceFormat = 1024;\nvar LuminanceAlphaFormat = 1025;\nvar RGBEFormat = RGBAFormat;\nvar DepthFormat = 1026;\nvar DepthStencilFormat = 1027;\nvar RGB_S3TC_DXT1_Format = 33776;\nvar RGBA_S3TC_DXT1_Format = 33777;\nvar RGBA_S3TC_DXT3_Format = 33778;\nvar RGBA_S3TC_DXT5_Format = 33779;\nvar RGB_PVRTC_4BPPV1_Format = 35840;\nvar RGB_PVRTC_2BPPV1_Format = 35841;\nvar RGBA_PVRTC_4BPPV1_Format = 35842;\nvar RGBA_PVRTC_2BPPV1_Format = 35843;\nvar RGB_ETC1_Format = 36196;\nvar RGBA_ASTC_4x4_Format = 37808;\nvar RGBA_ASTC_5x4_Format = 37809;\nvar RGBA_ASTC_5x5_Format = 37810;\nvar RGBA_ASTC_6x5_Format = 37811;\nvar RGBA_ASTC_6x6_Format = 37812;\nvar RGBA_ASTC_8x5_Format = 37813;\nvar RGBA_ASTC_8x6_Format = 37814;\nvar RGBA_ASTC_8x8_Format = 37815;\nvar RGBA_ASTC_10x5_Format = 37816;\nvar RGBA_ASTC_10x6_Format = 37817;\nvar RGBA_ASTC_10x8_Format = 37818;\nvar RGBA_ASTC_10x10_Format = 37819;\nvar RGBA_ASTC_12x10_Format = 37820;\nvar RGBA_ASTC_12x12_Format = 37821;\nvar LoopOnce = 2200;\nvar LoopRepeat = 2201;\nvar LoopPingPong = 2202;\nvar InterpolateDiscrete = 2300;\nvar InterpolateLinear = 2301;\nvar InterpolateSmooth = 2302;\nvar ZeroCurvatureEnding = 2400;\nvar ZeroSlopeEnding = 2401;\nvar WrapAroundEnding = 2402;\nvar TrianglesDrawMode = 0;\nvar TriangleStripDrawMode = 1;\nvar TriangleFanDrawMode = 2;\nvar LinearEncoding = 3000;\nvar sRGBEncoding = 3001;\nvar GammaEncoding = 3007;\nvar RGBEEncoding = 3002;\nvar LogLuvEncoding = 3003;\nvar RGBM7Encoding = 3004;\nvar RGBM16Encoding = 3005;\nvar RGBDEncoding = 3006;\nvar BasicDepthPacking = 3200;\nvar RGBADepthPacking = 3201;\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\nvar _Math = {\n    DEG2RAD: Math.PI / 180,\n    RAD2DEG: 180 / Math.PI,\n    generateUUID: (function () {\n        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n        var lut = [];\n        for (var i = 0; i < 256; i++) {\n            lut[i] = (i < 16 ? '0' : '') + (i).toString(16).toUpperCase();\n        }\n        return function generateUUID() {\n            var d0 = Math.random() * 0xffffffff | 0;\n            var d1 = Math.random() * 0xffffffff | 0;\n            var d2 = Math.random() * 0xffffffff | 0;\n            var d3 = Math.random() * 0xffffffff | 0;\n            return lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff] + '-' +\n                lut[d1 & 0xff] + lut[d1 >> 8 & 0xff] + '-' + lut[d1 >> 16 & 0x0f | 0x40] + lut[d1 >> 24 & 0xff] + '-' +\n                lut[d2 & 0x3f | 0x80] + lut[d2 >> 8 & 0xff] + '-' + lut[d2 >> 16 & 0xff] + lut[d2 >> 24 & 0xff] +\n                lut[d3 & 0xff] + lut[d3 >> 8 & 0xff] + lut[d3 >> 16 & 0xff] + lut[d3 >> 24 & 0xff];\n        };\n    })(),\n    clamp: function (value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    },\n    // compute euclidian modulo of m % n\n    // https://en.wikipedia.org/wiki/Modulo_operation\n    euclideanModulo: function (n, m) {\n        return ((n % m) + m) % m;\n    },\n    // Linear mapping from range <a1, a2> to range <b1, b2>\n    mapLinear: function (x, a1, a2, b1, b2) {\n        return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n    },\n    // https://en.wikipedia.org/wiki/Linear_interpolation\n    lerp: function (x, y, t) {\n        return (1 - t) * x + t * y;\n    },\n    // http://en.wikipedia.org/wiki/Smoothstep\n    smoothstep: function (x, min, max) {\n        if (x <= min)\n            return 0;\n        if (x >= max)\n            return 1;\n        x = (x - min) / (max - min);\n        return x * x * (3 - 2 * x);\n    },\n    smootherstep: function (x, min, max) {\n        if (x <= min)\n            return 0;\n        if (x >= max)\n            return 1;\n        x = (x - min) / (max - min);\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    },\n    // Random integer from <low, high> interval\n    randInt: function (low, high) {\n        return low + Math.floor(Math.random() * (high - low + 1));\n    },\n    // Random float from <low, high> interval\n    randFloat: function (low, high) {\n        return low + Math.random() * (high - low);\n    },\n    // Random float from <-range/2, range/2> interval\n    randFloatSpread: function (range) {\n        return range * (0.5 - Math.random());\n    },\n    degToRad: function (degrees) {\n        return degrees * _Math.DEG2RAD;\n    },\n    radToDeg: function (radians) {\n        return radians * _Math.RAD2DEG;\n    },\n    isPowerOfTwo: function (value) {\n        return (value & (value - 1)) === 0 && value !== 0;\n    },\n    ceilPowerOfTwo: function (value) {\n        return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n    },\n    floorPowerOfTwo: function (value) {\n        return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n    }\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author philogb / http://blog.thejit.org/\n * @author egraether / http://egraether.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\nfunction Vector2(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n}\nObject.defineProperties(Vector2.prototype, {\n    \"width\": {\n        get: function () {\n            return this.x;\n        },\n        set: function (value) {\n            this.x = value;\n        }\n    },\n    \"height\": {\n        get: function () {\n            return this.y;\n        },\n        set: function (value) {\n            this.y = value;\n        }\n    }\n});\nObject.assign(Vector2.prototype, {\n    isVector2: true,\n    set: function (x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n    setScalar: function (scalar) {\n        this.x = scalar;\n        this.y = scalar;\n        return this;\n    },\n    setX: function (x) {\n        this.x = x;\n        return this;\n    },\n    setY: function (y) {\n        this.y = y;\n        return this;\n    },\n    setComponent: function (index, value) {\n        switch (index) {\n            case 0:\n                this.x = value;\n                break;\n            case 1:\n                this.y = value;\n                break;\n            default: throw new Error('index is out of range: ' + index);\n        }\n        return this;\n    },\n    getComponent: function (index) {\n        switch (index) {\n            case 0: return this.x;\n            case 1: return this.y;\n            default: throw new Error('index is out of range: ' + index);\n        }\n    },\n    clone: function () {\n        return new this.constructor(this.x, this.y);\n    },\n    copy: function (v) {\n        this.x = v.x;\n        this.y = v.y;\n        return this;\n    },\n    add: function (v, w) {\n        if (w !== undefined) {\n            console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n            return this.addVectors(v, w);\n        }\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n    },\n    addScalar: function (s) {\n        this.x += s;\n        this.y += s;\n        return this;\n    },\n    addVectors: function (a, b) {\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n        return this;\n    },\n    addScaledVector: function (v, s) {\n        this.x += v.x * s;\n        this.y += v.y * s;\n        return this;\n    },\n    sub: function (v, w) {\n        if (w !== undefined) {\n            console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n            return this.subVectors(v, w);\n        }\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n    },\n    subScalar: function (s) {\n        this.x -= s;\n        this.y -= s;\n        return this;\n    },\n    subVectors: function (a, b) {\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n        return this;\n    },\n    multiply: function (v) {\n        this.x *= v.x;\n        this.y *= v.y;\n        return this;\n    },\n    multiplyScalar: function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    },\n    divide: function (v) {\n        this.x /= v.x;\n        this.y /= v.y;\n        return this;\n    },\n    divideScalar: function (scalar) {\n        return this.multiplyScalar(1 / scalar);\n    },\n    applyMatrix3: function (m) {\n        var x = this.x, y = this.y;\n        var e = m.elements;\n        this.x = e[0] * x + e[3] * y + e[6];\n        this.y = e[1] * x + e[4] * y + e[7];\n        return this;\n    },\n    min: function (v) {\n        this.x = Math.min(this.x, v.x);\n        this.y = Math.min(this.y, v.y);\n        return this;\n    },\n    max: function (v) {\n        this.x = Math.max(this.x, v.x);\n        this.y = Math.max(this.y, v.y);\n        return this;\n    },\n    clamp: function (min, max) {\n        // assumes min < max, componentwise\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\n        return this;\n    },\n    clampScalar: function () {\n        var min = new Vector2();\n        var max = new Vector2();\n        return function clampScalar(minVal, maxVal) {\n            min.set(minVal, minVal);\n            max.set(maxVal, maxVal);\n            return this.clamp(min, max);\n        };\n    }(),\n    clampLength: function (min, max) {\n        var length = this.length();\n        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n    },\n    floor: function () {\n        this.x = Math.floor(this.x);\n        this.y = Math.floor(this.y);\n        return this;\n    },\n    ceil: function () {\n        this.x = Math.ceil(this.x);\n        this.y = Math.ceil(this.y);\n        return this;\n    },\n    round: function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    },\n    roundToZero: function () {\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\n        return this;\n    },\n    negate: function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    },\n    dot: function (v) {\n        return this.x * v.x + this.y * v.y;\n    },\n    lengthSq: function () {\n        return this.x * this.x + this.y * this.y;\n    },\n    length: function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n    manhattanLength: function () {\n        return Math.abs(this.x) + Math.abs(this.y);\n    },\n    normalize: function () {\n        return this.divideScalar(this.length() || 1);\n    },\n    angle: function () {\n        // computes the angle in radians with respect to the positive x-axis\n        var angle = Math.atan2(this.y, this.x);\n        if (angle < 0)\n            angle += 2 * Math.PI;\n        return angle;\n    },\n    distanceTo: function (v) {\n        return Math.sqrt(this.distanceToSquared(v));\n    },\n    distanceToSquared: function (v) {\n        var dx = this.x - v.x, dy = this.y - v.y;\n        return dx * dx + dy * dy;\n    },\n    manhattanDistanceTo: function (v) {\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n    },\n    setLength: function (length) {\n        return this.normalize().multiplyScalar(length);\n    },\n    lerp: function (v, alpha) {\n        this.x += (v.x - this.x) * alpha;\n        this.y += (v.y - this.y) * alpha;\n        return this;\n    },\n    lerpVectors: function (v1, v2, alpha) {\n        return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n    },\n    equals: function (v) {\n        return ((v.x === this.x) && (v.y === this.y));\n    },\n    fromArray: function (array, offset) {\n        if (offset === undefined)\n            offset = 0;\n        this.x = array[offset];\n        this.y = array[offset + 1];\n        return this;\n    },\n    toArray: function (array, offset) {\n        if (array === undefined)\n            array = [];\n        if (offset === undefined)\n            offset = 0;\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        return array;\n    },\n    fromBufferAttribute: function (attribute, index, offset) {\n        if (offset !== undefined) {\n            console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n        }\n        this.x = attribute.getX(index);\n        this.y = attribute.getY(index);\n        return this;\n    },\n    rotateAround: function (center, angle) {\n        var c = Math.cos(angle), s = Math.sin(angle);\n        var x = this.x - center.x;\n        var y = this.y - center.y;\n        this.x = x * c - y * s + center.x;\n        this.y = x * s + y * c + center.y;\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction Matrix4() {\n    this.elements = [\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        0, 0, 0, 1\n    ];\n    if (arguments.length > 0) {\n        console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n    }\n}\nObject.assign(Matrix4.prototype, {\n    isMatrix4: true,\n    set: function (n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n        var te = this.elements;\n        te[0] = n11;\n        te[4] = n12;\n        te[8] = n13;\n        te[12] = n14;\n        te[1] = n21;\n        te[5] = n22;\n        te[9] = n23;\n        te[13] = n24;\n        te[2] = n31;\n        te[6] = n32;\n        te[10] = n33;\n        te[14] = n34;\n        te[3] = n41;\n        te[7] = n42;\n        te[11] = n43;\n        te[15] = n44;\n        return this;\n    },\n    identity: function () {\n        this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        return this;\n    },\n    clone: function () {\n        return new Matrix4().fromArray(this.elements);\n    },\n    copy: function (m) {\n        var te = this.elements;\n        var me = m.elements;\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n        te[9] = me[9];\n        te[10] = me[10];\n        te[11] = me[11];\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        te[15] = me[15];\n        return this;\n    },\n    copyPosition: function (m) {\n        var te = this.elements, me = m.elements;\n        te[12] = me[12];\n        te[13] = me[13];\n        te[14] = me[14];\n        return this;\n    },\n    extractBasis: function (xAxis, yAxis, zAxis) {\n        xAxis.setFromMatrixColumn(this, 0);\n        yAxis.setFromMatrixColumn(this, 1);\n        zAxis.setFromMatrixColumn(this, 2);\n        return this;\n    },\n    makeBasis: function (xAxis, yAxis, zAxis) {\n        this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n        return this;\n    },\n    extractRotation: function () {\n        var v1 = new Vector3();\n        return function extractRotation(m) {\n            var te = this.elements;\n            var me = m.elements;\n            var scaleX = 1 / v1.setFromMatrixColumn(m, 0).length();\n            var scaleY = 1 / v1.setFromMatrixColumn(m, 1).length();\n            var scaleZ = 1 / v1.setFromMatrixColumn(m, 2).length();\n            te[0] = me[0] * scaleX;\n            te[1] = me[1] * scaleX;\n            te[2] = me[2] * scaleX;\n            te[4] = me[4] * scaleY;\n            te[5] = me[5] * scaleY;\n            te[6] = me[6] * scaleY;\n            te[8] = me[8] * scaleZ;\n            te[9] = me[9] * scaleZ;\n            te[10] = me[10] * scaleZ;\n            return this;\n        };\n    }(),\n    makeRotationFromEuler: function (euler) {\n        if (!(euler && euler.isEuler)) {\n            console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n        }\n        var te = this.elements;\n        var x = euler.x, y = euler.y, z = euler.z;\n        var a = Math.cos(x), b = Math.sin(x);\n        var c = Math.cos(y), d = Math.sin(y);\n        var e = Math.cos(z), f = Math.sin(z);\n        if (euler.order === 'XYZ') {\n            var ae = a * e, af = a * f, be = b * e, bf = b * f;\n            te[0] = c * e;\n            te[4] = -c * f;\n            te[8] = d;\n            te[1] = af + be * d;\n            te[5] = ae - bf * d;\n            te[9] = -b * c;\n            te[2] = bf - ae * d;\n            te[6] = be + af * d;\n            te[10] = a * c;\n        }\n        else if (euler.order === 'YXZ') {\n            var ce = c * e, cf = c * f, de = d * e, df = d * f;\n            te[0] = ce + df * b;\n            te[4] = de * b - cf;\n            te[8] = a * d;\n            te[1] = a * f;\n            te[5] = a * e;\n            te[9] = -b;\n            te[2] = cf * b - de;\n            te[6] = df + ce * b;\n            te[10] = a * c;\n        }\n        else if (euler.order === 'ZXY') {\n            var ce = c * e, cf = c * f, de = d * e, df = d * f;\n            te[0] = ce - df * b;\n            te[4] = -a * f;\n            te[8] = de + cf * b;\n            te[1] = cf + de * b;\n            te[5] = a * e;\n            te[9] = df - ce * b;\n            te[2] = -a * d;\n            te[6] = b;\n            te[10] = a * c;\n        }\n        else if (euler.order === 'ZYX') {\n            var ae = a * e, af = a * f, be = b * e, bf = b * f;\n            te[0] = c * e;\n            te[4] = be * d - af;\n            te[8] = ae * d + bf;\n            te[1] = c * f;\n            te[5] = bf * d + ae;\n            te[9] = af * d - be;\n            te[2] = -d;\n            te[6] = b * c;\n            te[10] = a * c;\n        }\n        else if (euler.order === 'YZX') {\n            var ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n            te[0] = c * e;\n            te[4] = bd - ac * f;\n            te[8] = bc * f + ad;\n            te[1] = f;\n            te[5] = a * e;\n            te[9] = -b * e;\n            te[2] = -d * e;\n            te[6] = ad * f + bc;\n            te[10] = ac - bd * f;\n        }\n        else if (euler.order === 'XZY') {\n            var ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n            te[0] = c * e;\n            te[4] = -f;\n            te[8] = d * e;\n            te[1] = ac * f + bd;\n            te[5] = a * e;\n            te[9] = ad * f - bc;\n            te[2] = bc * f - ad;\n            te[6] = b * e;\n            te[10] = bd * f + ac;\n        }\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n        return this;\n    },\n    makeRotationFromQuaternion: function (q) {\n        var te = this.elements;\n        var x = q._x, y = q._y, z = q._z, w = q._w;\n        var x2 = x + x, y2 = y + y, z2 = z + z;\n        var xx = x * x2, xy = x * y2, xz = x * z2;\n        var yy = y * y2, yz = y * z2, zz = z * z2;\n        var wx = w * x2, wy = w * y2, wz = w * z2;\n        te[0] = 1 - (yy + zz);\n        te[4] = xy - wz;\n        te[8] = xz + wy;\n        te[1] = xy + wz;\n        te[5] = 1 - (xx + zz);\n        te[9] = yz - wx;\n        te[2] = xz - wy;\n        te[6] = yz + wx;\n        te[10] = 1 - (xx + yy);\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n        return this;\n    },\n    lookAt: function () {\n        var x = new Vector3();\n        var y = new Vector3();\n        var z = new Vector3();\n        return function lookAt(eye, target, up) {\n            var te = this.elements;\n            z.subVectors(eye, target);\n            if (z.lengthSq() === 0) {\n                // eye and target are in the same position\n                z.z = 1;\n            }\n            z.normalize();\n            x.crossVectors(up, z);\n            if (x.lengthSq() === 0) {\n                // up and z are parallel\n                if (Math.abs(up.z) === 1) {\n                    z.x += 0.0001;\n                }\n                else {\n                    z.z += 0.0001;\n                }\n                z.normalize();\n                x.crossVectors(up, z);\n            }\n            x.normalize();\n            y.crossVectors(z, x);\n            te[0] = x.x;\n            te[4] = y.x;\n            te[8] = z.x;\n            te[1] = x.y;\n            te[5] = y.y;\n            te[9] = z.y;\n            te[2] = x.z;\n            te[6] = y.z;\n            te[10] = z.z;\n            return this;\n        };\n    }(),\n    multiply: function (m, n) {\n        if (n !== undefined) {\n            console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n            return this.multiplyMatrices(m, n);\n        }\n        return this.multiplyMatrices(this, m);\n    },\n    premultiply: function (m) {\n        return this.multiplyMatrices(m, this);\n    },\n    multiplyMatrices: function (a, b) {\n        var ae = a.elements;\n        var be = b.elements;\n        var te = this.elements;\n        var a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];\n        var a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];\n        var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];\n        var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];\n        var b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];\n        var b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];\n        var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];\n        var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n        return this;\n    },\n    multiplyScalar: function (s) {\n        var te = this.elements;\n        te[0] *= s;\n        te[4] *= s;\n        te[8] *= s;\n        te[12] *= s;\n        te[1] *= s;\n        te[5] *= s;\n        te[9] *= s;\n        te[13] *= s;\n        te[2] *= s;\n        te[6] *= s;\n        te[10] *= s;\n        te[14] *= s;\n        te[3] *= s;\n        te[7] *= s;\n        te[11] *= s;\n        te[15] *= s;\n        return this;\n    },\n    applyToBufferAttribute: function () {\n        var v1 = new Vector3();\n        return function applyToBufferAttribute(attribute) {\n            for (var i = 0, l = attribute.count; i < l; i++) {\n                v1.x = attribute.getX(i);\n                v1.y = attribute.getY(i);\n                v1.z = attribute.getZ(i);\n                v1.applyMatrix4(this);\n                attribute.setXYZ(i, v1.x, v1.y, v1.z);\n            }\n            return attribute;\n        };\n    }(),\n    determinant: function () {\n        var te = this.elements;\n        var n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];\n        var n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];\n        var n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];\n        var n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];\n        //TODO: make this more efficient\n        //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n        return (n41 * (+n14 * n23 * n32\n            - n13 * n24 * n32\n            - n14 * n22 * n33\n            + n12 * n24 * n33\n            + n13 * n22 * n34\n            - n12 * n23 * n34) +\n            n42 * (+n11 * n23 * n34\n                - n11 * n24 * n33\n                + n14 * n21 * n33\n                - n13 * n21 * n34\n                + n13 * n24 * n31\n                - n14 * n23 * n31) +\n            n43 * (+n11 * n24 * n32\n                - n11 * n22 * n34\n                - n14 * n21 * n32\n                + n12 * n21 * n34\n                + n14 * n22 * n31\n                - n12 * n24 * n31) +\n            n44 * (-n13 * n22 * n31\n                - n11 * n23 * n32\n                + n11 * n22 * n33\n                + n13 * n21 * n32\n                - n12 * n21 * n33\n                + n12 * n23 * n31));\n    },\n    transpose: function () {\n        var te = this.elements;\n        var tmp;\n        tmp = te[1];\n        te[1] = te[4];\n        te[4] = tmp;\n        tmp = te[2];\n        te[2] = te[8];\n        te[8] = tmp;\n        tmp = te[6];\n        te[6] = te[9];\n        te[9] = tmp;\n        tmp = te[3];\n        te[3] = te[12];\n        te[12] = tmp;\n        tmp = te[7];\n        te[7] = te[13];\n        te[13] = tmp;\n        tmp = te[11];\n        te[11] = te[14];\n        te[14] = tmp;\n        return this;\n    },\n    setPosition: function (v) {\n        var te = this.elements;\n        te[12] = v.x;\n        te[13] = v.y;\n        te[14] = v.z;\n        return this;\n    },\n    getInverse: function (m, throwOnDegenerate) {\n        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n        var te = this.elements, me = m.elements, n11 = me[0], n21 = me[1], n31 = me[2], n41 = me[3], n12 = me[4], n22 = me[5], n32 = me[6], n42 = me[7], n13 = me[8], n23 = me[9], n33 = me[10], n43 = me[11], n14 = me[12], n24 = me[13], n34 = me[14], n44 = me[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n        var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n        if (det === 0) {\n            var msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n            if (throwOnDegenerate === true) {\n                throw new Error(msg);\n            }\n            else {\n                console.warn(msg);\n            }\n            return this.identity();\n        }\n        var detInv = 1 / det;\n        te[0] = t11 * detInv;\n        te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n        te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n        te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n        te[4] = t12 * detInv;\n        te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n        te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n        te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n        te[8] = t13 * detInv;\n        te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n        te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n        te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n        te[12] = t14 * detInv;\n        te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n        te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n        te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n        return this;\n    },\n    scale: function (v) {\n        var te = this.elements;\n        var x = v.x, y = v.y, z = v.z;\n        te[0] *= x;\n        te[4] *= y;\n        te[8] *= z;\n        te[1] *= x;\n        te[5] *= y;\n        te[9] *= z;\n        te[2] *= x;\n        te[6] *= y;\n        te[10] *= z;\n        te[3] *= x;\n        te[7] *= y;\n        te[11] *= z;\n        return this;\n    },\n    getMaxScaleOnAxis: function () {\n        var te = this.elements;\n        var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n        var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n        var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n    },\n    makeTranslation: function (x, y, z) {\n        this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n        return this;\n    },\n    makeRotationX: function (theta) {\n        var c = Math.cos(theta), s = Math.sin(theta);\n        this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n        return this;\n    },\n    makeRotationY: function (theta) {\n        var c = Math.cos(theta), s = Math.sin(theta);\n        this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n        return this;\n    },\n    makeRotationZ: function (theta) {\n        var c = Math.cos(theta), s = Math.sin(theta);\n        this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        return this;\n    },\n    makeRotationAxis: function (axis, angle) {\n        // Based on http://www.gamedev.net/reference/articles/article1199.asp\n        var c = Math.cos(angle);\n        var s = Math.sin(angle);\n        var t = 1 - c;\n        var x = axis.x, y = axis.y, z = axis.z;\n        var tx = t * x, ty = t * y;\n        this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n        return this;\n    },\n    makeScale: function (x, y, z) {\n        this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n        return this;\n    },\n    makeShear: function (x, y, z) {\n        this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n        return this;\n    },\n    compose: function (position, quaternion, scale) {\n        this.makeRotationFromQuaternion(quaternion);\n        this.scale(scale);\n        this.setPosition(position);\n        return this;\n    },\n    decompose: function () {\n        var vector = new Vector3();\n        var matrix = new Matrix4();\n        return function decompose(position, quaternion, scale) {\n            var te = this.elements;\n            var sx = vector.set(te[0], te[1], te[2]).length();\n            var sy = vector.set(te[4], te[5], te[6]).length();\n            var sz = vector.set(te[8], te[9], te[10]).length();\n            // if determine is negative, we need to invert one scale\n            var det = this.determinant();\n            if (det < 0)\n                sx = -sx;\n            position.x = te[12];\n            position.y = te[13];\n            position.z = te[14];\n            // scale the rotation part\n            matrix.copy(this);\n            var invSX = 1 / sx;\n            var invSY = 1 / sy;\n            var invSZ = 1 / sz;\n            matrix.elements[0] *= invSX;\n            matrix.elements[1] *= invSX;\n            matrix.elements[2] *= invSX;\n            matrix.elements[4] *= invSY;\n            matrix.elements[5] *= invSY;\n            matrix.elements[6] *= invSY;\n            matrix.elements[8] *= invSZ;\n            matrix.elements[9] *= invSZ;\n            matrix.elements[10] *= invSZ;\n            quaternion.setFromRotationMatrix(matrix);\n            scale.x = sx;\n            scale.y = sy;\n            scale.z = sz;\n            return this;\n        };\n    }(),\n    makePerspective: function (left, right, top, bottom, near, far) {\n        if (far === undefined) {\n            console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n        }\n        var te = this.elements;\n        var x = 2 * near / (right - left);\n        var y = 2 * near / (top - bottom);\n        var a = (right + left) / (right - left);\n        var b = (top + bottom) / (top - bottom);\n        var c = -(far + near) / (far - near);\n        var d = -2 * far * near / (far - near);\n        te[0] = x;\n        te[4] = 0;\n        te[8] = a;\n        te[12] = 0;\n        te[1] = 0;\n        te[5] = y;\n        te[9] = b;\n        te[13] = 0;\n        te[2] = 0;\n        te[6] = 0;\n        te[10] = c;\n        te[14] = d;\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = -1;\n        te[15] = 0;\n        return this;\n    },\n    makeOrthographic: function (left, right, top, bottom, near, far) {\n        var te = this.elements;\n        var w = 1.0 / (right - left);\n        var h = 1.0 / (top - bottom);\n        var p = 1.0 / (far - near);\n        var x = (right + left) * w;\n        var y = (top + bottom) * h;\n        var z = (far + near) * p;\n        te[0] = 2 * w;\n        te[4] = 0;\n        te[8] = 0;\n        te[12] = -x;\n        te[1] = 0;\n        te[5] = 2 * h;\n        te[9] = 0;\n        te[13] = -y;\n        te[2] = 0;\n        te[6] = 0;\n        te[10] = -2 * p;\n        te[14] = -z;\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n        te[15] = 1;\n        return this;\n    },\n    equals: function (matrix) {\n        var te = this.elements;\n        var me = matrix.elements;\n        for (var i = 0; i < 16; i++) {\n            if (te[i] !== me[i])\n                return false;\n        }\n        return true;\n    },\n    fromArray: function (array, offset) {\n        if (offset === undefined)\n            offset = 0;\n        for (var i = 0; i < 16; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    },\n    toArray: function (array, offset) {\n        if (array === undefined)\n            array = [];\n        if (offset === undefined)\n            offset = 0;\n        var te = this.elements;\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n        array[offset + 3] = te[3];\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n        array[offset + 8] = te[8];\n        array[offset + 9] = te[9];\n        array[offset + 10] = te[10];\n        array[offset + 11] = te[11];\n        array[offset + 12] = te[12];\n        array[offset + 13] = te[13];\n        array[offset + 14] = te[14];\n        array[offset + 15] = te[15];\n        return array;\n    }\n});\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\nfunction Quaternion(x, y, z, w) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._z = z || 0;\n    this._w = (w !== undefined) ? w : 1;\n}\nObject.assign(Quaternion, {\n    slerp: function (qa, qb, qm, t) {\n        return qm.copy(qa).slerp(qb, t);\n    },\n    slerpFlat: function (dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n        // fuzz-free, array-based Quaternion SLERP operation\n        var x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3], x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];\n        if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n            var s = 1 - t, cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = (cos >= 0 ? 1 : -1), sqrSin = 1 - cos * cos;\n            // Skip the Slerp for tiny steps to avoid numeric problems:\n            if (sqrSin > Number.EPSILON) {\n                var sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);\n                s = Math.sin(s * len) / sin;\n                t = Math.sin(t * len) / sin;\n            }\n            var tDir = t * dir;\n            x0 = x0 * s + x1 * tDir;\n            y0 = y0 * s + y1 * tDir;\n            z0 = z0 * s + z1 * tDir;\n            w0 = w0 * s + w1 * tDir;\n            // Normalize in case we just did a lerp:\n            if (s === 1 - t) {\n                var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n                x0 *= f;\n                y0 *= f;\n                z0 *= f;\n                w0 *= f;\n            }\n        }\n        dst[dstOffset] = x0;\n        dst[dstOffset + 1] = y0;\n        dst[dstOffset + 2] = z0;\n        dst[dstOffset + 3] = w0;\n    }\n});\nObject.defineProperties(Quaternion.prototype, {\n    x: {\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            this._x = value;\n            this.onChangeCallback();\n        }\n    },\n    y: {\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            this._y = value;\n            this.onChangeCallback();\n        }\n    },\n    z: {\n        get: function () {\n            return this._z;\n        },\n        set: function (value) {\n            this._z = value;\n            this.onChangeCallback();\n        }\n    },\n    w: {\n        get: function () {\n            return this._w;\n        },\n        set: function (value) {\n            this._w = value;\n            this.onChangeCallback();\n        }\n    }\n});\nObject.assign(Quaternion.prototype, {\n    set: function (x, y, z, w) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._w = w;\n        this.onChangeCallback();\n        return this;\n    },\n    clone: function () {\n        return new this.constructor(this._x, this._y, this._z, this._w);\n    },\n    copy: function (quaternion) {\n        this._x = quaternion.x;\n        this._y = quaternion.y;\n        this._z = quaternion.z;\n        this._w = quaternion.w;\n        this.onChangeCallback();\n        return this;\n    },\n    setFromEuler: function (euler, update) {\n        if (!(euler && euler.isEuler)) {\n            throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n        }\n        var x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n        // http://www.mathworks.com/matlabcentral/fileexchange/\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n        //\tcontent/SpinCalc.m\n        var cos = Math.cos;\n        var sin = Math.sin;\n        var c1 = cos(x / 2);\n        var c2 = cos(y / 2);\n        var c3 = cos(z / 2);\n        var s1 = sin(x / 2);\n        var s2 = sin(y / 2);\n        var s3 = sin(z / 2);\n        if (order === 'XYZ') {\n            this._x = s1 * c2 * c3 + c1 * s2 * s3;\n            this._y = c1 * s2 * c3 - s1 * c2 * s3;\n            this._z = c1 * c2 * s3 + s1 * s2 * c3;\n            this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        }\n        else if (order === 'YXZ') {\n            this._x = s1 * c2 * c3 + c1 * s2 * s3;\n            this._y = c1 * s2 * c3 - s1 * c2 * s3;\n            this._z = c1 * c2 * s3 - s1 * s2 * c3;\n            this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n        else if (order === 'ZXY') {\n            this._x = s1 * c2 * c3 - c1 * s2 * s3;\n            this._y = c1 * s2 * c3 + s1 * c2 * s3;\n            this._z = c1 * c2 * s3 + s1 * s2 * c3;\n            this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        }\n        else if (order === 'ZYX') {\n            this._x = s1 * c2 * c3 - c1 * s2 * s3;\n            this._y = c1 * s2 * c3 + s1 * c2 * s3;\n            this._z = c1 * c2 * s3 - s1 * s2 * c3;\n            this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n        else if (order === 'YZX') {\n            this._x = s1 * c2 * c3 + c1 * s2 * s3;\n            this._y = c1 * s2 * c3 + s1 * c2 * s3;\n            this._z = c1 * c2 * s3 - s1 * s2 * c3;\n            this._w = c1 * c2 * c3 - s1 * s2 * s3;\n        }\n        else if (order === 'XZY') {\n            this._x = s1 * c2 * c3 - c1 * s2 * s3;\n            this._y = c1 * s2 * c3 - s1 * c2 * s3;\n            this._z = c1 * c2 * s3 + s1 * s2 * c3;\n            this._w = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n        if (update !== false)\n            this.onChangeCallback();\n        return this;\n    },\n    setFromAxisAngle: function (axis, angle) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n        // assumes axis is normalized\n        var halfAngle = angle / 2, s = Math.sin(halfAngle);\n        this._x = axis.x * s;\n        this._y = axis.y * s;\n        this._z = axis.z * s;\n        this._w = Math.cos(halfAngle);\n        this.onChangeCallback();\n        return this;\n    },\n    setFromRotationMatrix: function (m) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n        var te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33, s;\n        if (trace > 0) {\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            this._w = 0.25 / s;\n            this._x = (m32 - m23) * s;\n            this._y = (m13 - m31) * s;\n            this._z = (m21 - m12) * s;\n        }\n        else if (m11 > m22 && m11 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n            this._w = (m32 - m23) / s;\n            this._x = 0.25 * s;\n            this._y = (m12 + m21) / s;\n            this._z = (m13 + m31) / s;\n        }\n        else if (m22 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n            this._w = (m13 - m31) / s;\n            this._x = (m12 + m21) / s;\n            this._y = 0.25 * s;\n            this._z = (m23 + m32) / s;\n        }\n        else {\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n            this._w = (m21 - m12) / s;\n            this._x = (m13 + m31) / s;\n            this._y = (m23 + m32) / s;\n            this._z = 0.25 * s;\n        }\n        this.onChangeCallback();\n        return this;\n    },\n    setFromUnitVectors: function () {\n        // assumes direction vectors vFrom and vTo are normalized\n        var v1 = new Vector3();\n        var r;\n        var EPS = 0.000001;\n        return function setFromUnitVectors(vFrom, vTo) {\n            if (v1 === undefined)\n                v1 = new Vector3();\n            r = vFrom.dot(vTo) + 1;\n            if (r < EPS) {\n                r = 0;\n                if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n                    v1.set(-vFrom.y, vFrom.x, 0);\n                }\n                else {\n                    v1.set(0, -vFrom.z, vFrom.y);\n                }\n            }\n            else {\n                v1.crossVectors(vFrom, vTo);\n            }\n            this._x = v1.x;\n            this._y = v1.y;\n            this._z = v1.z;\n            this._w = r;\n            return this.normalize();\n        };\n    }(),\n    inverse: function () {\n        // quaternion is assumed to have unit length\n        return this.conjugate();\n    },\n    conjugate: function () {\n        this._x *= -1;\n        this._y *= -1;\n        this._z *= -1;\n        this.onChangeCallback();\n        return this;\n    },\n    dot: function (v) {\n        return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n    },\n    lengthSq: function () {\n        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n    },\n    length: function () {\n        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n    },\n    normalize: function () {\n        var l = this.length();\n        if (l === 0) {\n            this._x = 0;\n            this._y = 0;\n            this._z = 0;\n            this._w = 1;\n        }\n        else {\n            l = 1 / l;\n            this._x = this._x * l;\n            this._y = this._y * l;\n            this._z = this._z * l;\n            this._w = this._w * l;\n        }\n        this.onChangeCallback();\n        return this;\n    },\n    multiply: function (q, p) {\n        if (p !== undefined) {\n            console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n            return this.multiplyQuaternions(q, p);\n        }\n        return this.multiplyQuaternions(this, q);\n    },\n    premultiply: function (q) {\n        return this.multiplyQuaternions(q, this);\n    },\n    multiplyQuaternions: function (a, b) {\n        // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n        var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n        var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n        this.onChangeCallback();\n        return this;\n    },\n    slerp: function (qb, t) {\n        if (t === 0)\n            return this;\n        if (t === 1)\n            return this.copy(qb);\n        var x = this._x, y = this._y, z = this._z, w = this._w;\n        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n        var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n        if (cosHalfTheta < 0) {\n            this._w = -qb._w;\n            this._x = -qb._x;\n            this._y = -qb._y;\n            this._z = -qb._z;\n            cosHalfTheta = -cosHalfTheta;\n        }\n        else {\n            this.copy(qb);\n        }\n        if (cosHalfTheta >= 1.0) {\n            this._w = w;\n            this._x = x;\n            this._y = y;\n            this._z = z;\n            return this;\n        }\n        var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n        if (Math.abs(sinHalfTheta) < 0.001) {\n            this._w = 0.5 * (w + this._w);\n            this._x = 0.5 * (x + this._x);\n            this._y = 0.5 * (y + this._y);\n            this._z = 0.5 * (z + this._z);\n            return this;\n        }\n        var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n        var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n        this._w = (w * ratioA + this._w * ratioB);\n        this._x = (x * ratioA + this._x * ratioB);\n        this._y = (y * ratioA + this._y * ratioB);\n        this._z = (z * ratioA + this._z * ratioB);\n        this.onChangeCallback();\n        return this;\n    },\n    equals: function (quaternion) {\n        return (quaternion._x === this._x) && (quaternion._y === this._y) && (quaternion._z === this._z) && (quaternion._w === this._w);\n    },\n    fromArray: function (array, offset) {\n        if (offset === undefined)\n            offset = 0;\n        this._x = array[offset];\n        this._y = array[offset + 1];\n        this._z = array[offset + 2];\n        this._w = array[offset + 3];\n        this.onChangeCallback();\n        return this;\n    },\n    toArray: function (array, offset) {\n        if (array === undefined)\n            array = [];\n        if (offset === undefined)\n            offset = 0;\n        array[offset] = this._x;\n        array[offset + 1] = this._y;\n        array[offset + 2] = this._z;\n        array[offset + 3] = this._w;\n        return array;\n    },\n    onChange: function (callback) {\n        this.onChangeCallback = callback;\n        return this;\n    },\n    onChangeCallback: function () { }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction Vector3(x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n}\nObject.assign(Vector3.prototype, {\n    isVector3: true,\n    set: function (x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    },\n    setScalar: function (scalar) {\n        this.x = scalar;\n        this.y = scalar;\n        this.z = scalar;\n        return this;\n    },\n    setX: function (x) {\n        this.x = x;\n        return this;\n    },\n    setY: function (y) {\n        this.y = y;\n        return this;\n    },\n    setZ: function (z) {\n        this.z = z;\n        return this;\n    },\n    setComponent: function (index, value) {\n        switch (index) {\n            case 0:\n                this.x = value;\n                break;\n            case 1:\n                this.y = value;\n                break;\n            case 2:\n                this.z = value;\n                break;\n            default: throw new Error('index is out of range: ' + index);\n        }\n        return this;\n    },\n    getComponent: function (index) {\n        switch (index) {\n            case 0: return this.x;\n            case 1: return this.y;\n            case 2: return this.z;\n            default: throw new Error('index is out of range: ' + index);\n        }\n    },\n    clone: function () {\n        return new this.constructor(this.x, this.y, this.z);\n    },\n    copy: function (v) {\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n        return this;\n    },\n    add: function (v, w) {\n        if (w !== undefined) {\n            console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n            return this.addVectors(v, w);\n        }\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        return this;\n    },\n    addScalar: function (s) {\n        this.x += s;\n        this.y += s;\n        this.z += s;\n        return this;\n    },\n    addVectors: function (a, b) {\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n        this.z = a.z + b.z;\n        return this;\n    },\n    addScaledVector: function (v, s) {\n        this.x += v.x * s;\n        this.y += v.y * s;\n        this.z += v.z * s;\n        return this;\n    },\n    sub: function (v, w) {\n        if (w !== undefined) {\n            console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n            return this.subVectors(v, w);\n        }\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        return this;\n    },\n    subScalar: function (s) {\n        this.x -= s;\n        this.y -= s;\n        this.z -= s;\n        return this;\n    },\n    subVectors: function (a, b) {\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n        this.z = a.z - b.z;\n        return this;\n    },\n    multiply: function (v, w) {\n        if (w !== undefined) {\n            console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n            return this.multiplyVectors(v, w);\n        }\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n        return this;\n    },\n    multiplyScalar: function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        return this;\n    },\n    multiplyVectors: function (a, b) {\n        this.x = a.x * b.x;\n        this.y = a.y * b.y;\n        this.z = a.z * b.z;\n        return this;\n    },\n    applyEuler: function () {\n        var quaternion = new Quaternion();\n        return function applyEuler(euler) {\n            if (!(euler && euler.isEuler)) {\n                console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n            }\n            return this.applyQuaternion(quaternion.setFromEuler(euler));\n        };\n    }(),\n    applyAxisAngle: function () {\n        var quaternion = new Quaternion();\n        return function applyAxisAngle(axis, angle) {\n            return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));\n        };\n    }(),\n    applyMatrix3: function (m) {\n        var x = this.x, y = this.y, z = this.z;\n        var e = m.elements;\n        this.x = e[0] * x + e[3] * y + e[6] * z;\n        this.y = e[1] * x + e[4] * y + e[7] * z;\n        this.z = e[2] * x + e[5] * y + e[8] * z;\n        return this;\n    },\n    applyMatrix4: function (m) {\n        var x = this.x, y = this.y, z = this.z;\n        var e = m.elements;\n        var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n        this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n        this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n        this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n        return this;\n    },\n    applyQuaternion: function (q) {\n        var x = this.x, y = this.y, z = this.z;\n        var qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n        // calculate quat * vector\n        var ix = qw * x + qy * z - qz * y;\n        var iy = qw * y + qz * x - qx * z;\n        var iz = qw * z + qx * y - qy * x;\n        var iw = -qx * x - qy * y - qz * z;\n        // calculate result * inverse quat\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return this;\n    },\n    project: function () {\n        var matrix = new Matrix4();\n        return function project(camera) {\n            matrix.multiplyMatrices(camera.projectionMatrix, matrix.getInverse(camera.matrixWorld));\n            return this.applyMatrix4(matrix);\n        };\n    }(),\n    unproject: function () {\n        var matrix = new Matrix4();\n        return function unproject(camera) {\n            matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix));\n            return this.applyMatrix4(matrix);\n        };\n    }(),\n    transformDirection: function (m) {\n        // input: THREE.Matrix4 affine matrix\n        // vector interpreted as a direction\n        var x = this.x, y = this.y, z = this.z;\n        var e = m.elements;\n        this.x = e[0] * x + e[4] * y + e[8] * z;\n        this.y = e[1] * x + e[5] * y + e[9] * z;\n        this.z = e[2] * x + e[6] * y + e[10] * z;\n        return this.normalize();\n    },\n    divide: function (v) {\n        this.x /= v.x;\n        this.y /= v.y;\n        this.z /= v.z;\n        return this;\n    },\n    divideScalar: function (scalar) {\n        return this.multiplyScalar(1 / scalar);\n    },\n    min: function (v) {\n        this.x = Math.min(this.x, v.x);\n        this.y = Math.min(this.y, v.y);\n        this.z = Math.min(this.z, v.z);\n        return this;\n    },\n    max: function (v) {\n        this.x = Math.max(this.x, v.x);\n        this.y = Math.max(this.y, v.y);\n        this.z = Math.max(this.z, v.z);\n        return this;\n    },\n    clamp: function (min, max) {\n        // assumes min < max, componentwise\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\n        this.z = Math.max(min.z, Math.min(max.z, this.z));\n        return this;\n    },\n    clampScalar: function () {\n        var min = new Vector3();\n        var max = new Vector3();\n        return function clampScalar(minVal, maxVal) {\n            min.set(minVal, minVal, minVal);\n            max.set(maxVal, maxVal, maxVal);\n            return this.clamp(min, max);\n        };\n    }(),\n    clampLength: function (min, max) {\n        var length = this.length();\n        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n    },\n    floor: function () {\n        this.x = Math.floor(this.x);\n        this.y = Math.floor(this.y);\n        this.z = Math.floor(this.z);\n        return this;\n    },\n    ceil: function () {\n        this.x = Math.ceil(this.x);\n        this.y = Math.ceil(this.y);\n        this.z = Math.ceil(this.z);\n        return this;\n    },\n    round: function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        this.z = Math.round(this.z);\n        return this;\n    },\n    roundToZero: function () {\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\n        this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);\n        return this;\n    },\n    negate: function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n        return this;\n    },\n    dot: function (v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    },\n    // TODO lengthSquared?\n    lengthSq: function () {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    },\n    length: function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    },\n    manhattanLength: function () {\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n    },\n    normalize: function () {\n        return this.divideScalar(this.length() || 1);\n    },\n    setLength: function (length) {\n        return this.normalize().multiplyScalar(length);\n    },\n    lerp: function (v, alpha) {\n        this.x += (v.x - this.x) * alpha;\n        this.y += (v.y - this.y) * alpha;\n        this.z += (v.z - this.z) * alpha;\n        return this;\n    },\n    lerpVectors: function (v1, v2, alpha) {\n        return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n    },\n    cross: function (v, w) {\n        if (w !== undefined) {\n            console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n            return this.crossVectors(v, w);\n        }\n        return this.crossVectors(this, v);\n    },\n    crossVectors: function (a, b) {\n        var ax = a.x, ay = a.y, az = a.z;\n        var bx = b.x, by = b.y, bz = b.z;\n        this.x = ay * bz - az * by;\n        this.y = az * bx - ax * bz;\n        this.z = ax * by - ay * bx;\n        return this;\n    },\n    projectOnVector: function (vector) {\n        var scalar = vector.dot(this) / vector.lengthSq();\n        return this.copy(vector).multiplyScalar(scalar);\n    },\n    projectOnPlane: function () {\n        var v1 = new Vector3();\n        return function projectOnPlane(planeNormal) {\n            v1.copy(this).projectOnVector(planeNormal);\n            return this.sub(v1);\n        };\n    }(),\n    reflect: function () {\n        // reflect incident vector off plane orthogonal to normal\n        // normal is assumed to have unit length\n        var v1 = new Vector3();\n        return function reflect(normal) {\n            return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));\n        };\n    }(),\n    angleTo: function (v) {\n        var theta = this.dot(v) / (Math.sqrt(this.lengthSq() * v.lengthSq()));\n        // clamp, to handle numerical problems\n        return Math.acos(_Math.clamp(theta, -1, 1));\n    },\n    distanceTo: function (v) {\n        return Math.sqrt(this.distanceToSquared(v));\n    },\n    distanceToSquared: function (v) {\n        var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n        return dx * dx + dy * dy + dz * dz;\n    },\n    manhattanDistanceTo: function (v) {\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n    },\n    setFromSpherical: function (s) {\n        var sinPhiRadius = Math.sin(s.phi) * s.radius;\n        this.x = sinPhiRadius * Math.sin(s.theta);\n        this.y = Math.cos(s.phi) * s.radius;\n        this.z = sinPhiRadius * Math.cos(s.theta);\n        return this;\n    },\n    setFromCylindrical: function (c) {\n        this.x = c.radius * Math.sin(c.theta);\n        this.y = c.y;\n        this.z = c.radius * Math.cos(c.theta);\n        return this;\n    },\n    setFromMatrixPosition: function (m) {\n        var e = m.elements;\n        this.x = e[12];\n        this.y = e[13];\n        this.z = e[14];\n        return this;\n    },\n    setFromMatrixScale: function (m) {\n        var sx = this.setFromMatrixColumn(m, 0).length();\n        var sy = this.setFromMatrixColumn(m, 1).length();\n        var sz = this.setFromMatrixColumn(m, 2).length();\n        this.x = sx;\n        this.y = sy;\n        this.z = sz;\n        return this;\n    },\n    setFromMatrixColumn: function (m, index) {\n        return this.fromArray(m.elements, index * 4);\n    },\n    equals: function (v) {\n        return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z));\n    },\n    fromArray: function (array, offset) {\n        if (offset === undefined)\n            offset = 0;\n        this.x = array[offset];\n        this.y = array[offset + 1];\n        this.z = array[offset + 2];\n        return this;\n    },\n    toArray: function (array, offset) {\n        if (array === undefined)\n            array = [];\n        if (offset === undefined)\n            offset = 0;\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        return array;\n    },\n    fromBufferAttribute: function (attribute, index, offset) {\n        if (offset !== undefined) {\n            console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n        }\n        this.x = attribute.getX(index);\n        this.y = attribute.getY(index);\n        this.z = attribute.getZ(index);\n        return this;\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n * @author tschw\n */\nfunction Matrix3() {\n    this.elements = [\n        1, 0, 0,\n        0, 1, 0,\n        0, 0, 1\n    ];\n    if (arguments.length > 0) {\n        console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n    }\n}\nObject.assign(Matrix3.prototype, {\n    isMatrix3: true,\n    set: function (n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n        var te = this.elements;\n        te[0] = n11;\n        te[1] = n21;\n        te[2] = n31;\n        te[3] = n12;\n        te[4] = n22;\n        te[5] = n32;\n        te[6] = n13;\n        te[7] = n23;\n        te[8] = n33;\n        return this;\n    },\n    identity: function () {\n        this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().fromArray(this.elements);\n    },\n    copy: function (m) {\n        var te = this.elements;\n        var me = m.elements;\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[3];\n        te[4] = me[4];\n        te[5] = me[5];\n        te[6] = me[6];\n        te[7] = me[7];\n        te[8] = me[8];\n        return this;\n    },\n    setFromMatrix4: function (m) {\n        var me = m.elements;\n        this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n        return this;\n    },\n    applyToBufferAttribute: function () {\n        var v1 = new Vector3();\n        return function applyToBufferAttribute(attribute) {\n            for (var i = 0, l = attribute.count; i < l; i++) {\n                v1.x = attribute.getX(i);\n                v1.y = attribute.getY(i);\n                v1.z = attribute.getZ(i);\n                v1.applyMatrix3(this);\n                attribute.setXYZ(i, v1.x, v1.y, v1.z);\n            }\n            return attribute;\n        };\n    }(),\n    multiply: function (m) {\n        return this.multiplyMatrices(this, m);\n    },\n    premultiply: function (m) {\n        return this.multiplyMatrices(m, this);\n    },\n    multiplyMatrices: function (a, b) {\n        var ae = a.elements;\n        var be = b.elements;\n        var te = this.elements;\n        var a11 = ae[0], a12 = ae[3], a13 = ae[6];\n        var a21 = ae[1], a22 = ae[4], a23 = ae[7];\n        var a31 = ae[2], a32 = ae[5], a33 = ae[8];\n        var b11 = be[0], b12 = be[3], b13 = be[6];\n        var b21 = be[1], b22 = be[4], b23 = be[7];\n        var b31 = be[2], b32 = be[5], b33 = be[8];\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n        return this;\n    },\n    multiplyScalar: function (s) {\n        var te = this.elements;\n        te[0] *= s;\n        te[3] *= s;\n        te[6] *= s;\n        te[1] *= s;\n        te[4] *= s;\n        te[7] *= s;\n        te[2] *= s;\n        te[5] *= s;\n        te[8] *= s;\n        return this;\n    },\n    determinant: function () {\n        var te = this.elements;\n        var a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];\n        return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n    },\n    getInverse: function (matrix, throwOnDegenerate) {\n        if (matrix && matrix.isMatrix4) {\n            console.error(\"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\");\n        }\n        var me = matrix.elements, te = this.elements, n11 = me[0], n21 = me[1], n31 = me[2], n12 = me[3], n22 = me[4], n32 = me[5], n13 = me[6], n23 = me[7], n33 = me[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;\n        if (det === 0) {\n            var msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n            if (throwOnDegenerate === true) {\n                throw new Error(msg);\n            }\n            else {\n                console.warn(msg);\n            }\n            return this.identity();\n        }\n        var detInv = 1 / det;\n        te[0] = t11 * detInv;\n        te[1] = (n31 * n23 - n33 * n21) * detInv;\n        te[2] = (n32 * n21 - n31 * n22) * detInv;\n        te[3] = t12 * detInv;\n        te[4] = (n33 * n11 - n31 * n13) * detInv;\n        te[5] = (n31 * n12 - n32 * n11) * detInv;\n        te[6] = t13 * detInv;\n        te[7] = (n21 * n13 - n23 * n11) * detInv;\n        te[8] = (n22 * n11 - n21 * n12) * detInv;\n        return this;\n    },\n    transpose: function () {\n        var tmp, m = this.elements;\n        tmp = m[1];\n        m[1] = m[3];\n        m[3] = tmp;\n        tmp = m[2];\n        m[2] = m[6];\n        m[6] = tmp;\n        tmp = m[5];\n        m[5] = m[7];\n        m[7] = tmp;\n        return this;\n    },\n    getNormalMatrix: function (matrix4) {\n        return this.setFromMatrix4(matrix4).getInverse(this).transpose();\n    },\n    transposeIntoArray: function (r) {\n        var m = this.elements;\n        r[0] = m[0];\n        r[1] = m[3];\n        r[2] = m[6];\n        r[3] = m[1];\n        r[4] = m[4];\n        r[5] = m[7];\n        r[6] = m[2];\n        r[7] = m[5];\n        r[8] = m[8];\n        return this;\n    },\n    setUvTransform: function (tx, ty, sx, sy, rotation, cx, cy) {\n        var c = Math.cos(rotation);\n        var s = Math.sin(rotation);\n        this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n    },\n    scale: function (sx, sy) {\n        var te = this.elements;\n        te[0] *= sx;\n        te[3] *= sx;\n        te[6] *= sx;\n        te[1] *= sy;\n        te[4] *= sy;\n        te[7] *= sy;\n        return this;\n    },\n    rotate: function (theta) {\n        var c = Math.cos(theta);\n        var s = Math.sin(theta);\n        var te = this.elements;\n        var a11 = te[0], a12 = te[3], a13 = te[6];\n        var a21 = te[1], a22 = te[4], a23 = te[7];\n        te[0] = c * a11 + s * a21;\n        te[3] = c * a12 + s * a22;\n        te[6] = c * a13 + s * a23;\n        te[1] = -s * a11 + c * a21;\n        te[4] = -s * a12 + c * a22;\n        te[7] = -s * a13 + c * a23;\n        return this;\n    },\n    translate: function (tx, ty) {\n        var te = this.elements;\n        te[0] += tx * te[2];\n        te[3] += tx * te[5];\n        te[6] += tx * te[8];\n        te[1] += ty * te[2];\n        te[4] += ty * te[5];\n        te[7] += ty * te[8];\n        return this;\n    },\n    equals: function (matrix) {\n        var te = this.elements;\n        var me = matrix.elements;\n        for (var i = 0; i < 9; i++) {\n            if (te[i] !== me[i])\n                return false;\n        }\n        return true;\n    },\n    fromArray: function (array, offset) {\n        if (offset === undefined)\n            offset = 0;\n        for (var i = 0; i < 9; i++) {\n            this.elements[i] = array[i + offset];\n        }\n        return this;\n    },\n    toArray: function (array, offset) {\n        if (array === undefined)\n            array = [];\n        if (offset === undefined)\n            offset = 0;\n        var te = this.elements;\n        array[offset] = te[0];\n        array[offset + 1] = te[1];\n        array[offset + 2] = te[2];\n        array[offset + 3] = te[3];\n        array[offset + 4] = te[4];\n        array[offset + 5] = te[5];\n        array[offset + 6] = te[6];\n        array[offset + 7] = te[7];\n        array[offset + 8] = te[8];\n        return array;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n */\nvar textureId = 0;\nfunction Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n    Object.defineProperty(this, 'id', { value: textureId++ });\n    this.uuid = _Math.generateUUID();\n    this.name = '';\n    this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n    this.mipmaps = [];\n    this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n    this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n    this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n    this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n    this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n    this.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n    this.format = format !== undefined ? format : RGBAFormat;\n    this.type = type !== undefined ? type : UnsignedByteType;\n    this.offset = new Vector2(0, 0);\n    this.repeat = new Vector2(1, 1);\n    this.center = new Vector2(0, 0);\n    this.rotation = 0;\n    this.matrixAutoUpdate = true;\n    this.matrix = new Matrix3();\n    this.generateMipmaps = true;\n    this.premultiplyAlpha = false;\n    this.flipY = true;\n    this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n    // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n    //\n    // Also changing the encoding after already used by a Material will not automatically make the Material\n    // update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n    this.encoding = encoding !== undefined ? encoding : LinearEncoding;\n    this.version = 0;\n    this.onUpdate = null;\n}\nTexture.DEFAULT_IMAGE = undefined;\nTexture.DEFAULT_MAPPING = UVMapping;\nTexture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: Texture,\n    isTexture: true,\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (source) {\n        this.name = source.name;\n        this.image = source.image;\n        this.mipmaps = source.mipmaps.slice(0);\n        this.mapping = source.mapping;\n        this.wrapS = source.wrapS;\n        this.wrapT = source.wrapT;\n        this.magFilter = source.magFilter;\n        this.minFilter = source.minFilter;\n        this.anisotropy = source.anisotropy;\n        this.format = source.format;\n        this.type = source.type;\n        this.offset.copy(source.offset);\n        this.repeat.copy(source.repeat);\n        this.center.copy(source.center);\n        this.rotation = source.rotation;\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrix.copy(source.matrix);\n        this.generateMipmaps = source.generateMipmaps;\n        this.premultiplyAlpha = source.premultiplyAlpha;\n        this.flipY = source.flipY;\n        this.unpackAlignment = source.unpackAlignment;\n        this.encoding = source.encoding;\n        return this;\n    },\n    toJSON: function (meta) {\n        var isRootObject = (meta === undefined || typeof meta === 'string');\n        if (!isRootObject && meta.textures[this.uuid] !== undefined) {\n            return meta.textures[this.uuid];\n        }\n        function getDataURL(image) {\n            var canvas;\n            if (image instanceof HTMLCanvasElement) {\n                canvas = image;\n            }\n            else {\n                canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n                canvas.width = image.width;\n                canvas.height = image.height;\n                var context = canvas.getContext('2d');\n                if (image instanceof ImageData) {\n                    context.putImageData(image, 0, 0);\n                }\n                else {\n                    context.drawImage(image, 0, 0, image.width, image.height);\n                }\n            }\n            if (canvas.width > 2048 || canvas.height > 2048) {\n                return canvas.toDataURL('image/jpeg', 0.6);\n            }\n            else {\n                return canvas.toDataURL('image/png');\n            }\n        }\n        var output = {\n            metadata: {\n                version: 4.5,\n                type: 'Texture',\n                generator: 'Texture.toJSON'\n            },\n            uuid: this.uuid,\n            name: this.name,\n            mapping: this.mapping,\n            repeat: [this.repeat.x, this.repeat.y],\n            offset: [this.offset.x, this.offset.y],\n            center: [this.center.x, this.center.y],\n            rotation: this.rotation,\n            wrap: [this.wrapS, this.wrapT],\n            minFilter: this.minFilter,\n            magFilter: this.magFilter,\n            anisotropy: this.anisotropy,\n            flipY: this.flipY\n        };\n        if (this.image !== undefined) {\n            // TODO: Move to THREE.Image\n            var image = this.image;\n            if (image.uuid === undefined) {\n                image.uuid = _Math.generateUUID(); // UGH\n            }\n            if (!isRootObject && meta.images[image.uuid] === undefined) {\n                meta.images[image.uuid] = {\n                    uuid: image.uuid,\n                    url: getDataURL(image)\n                };\n            }\n            output.image = image.uuid;\n        }\n        if (!isRootObject) {\n            meta.textures[this.uuid] = output;\n        }\n        return output;\n    },\n    dispose: function () {\n        this.dispatchEvent({ type: 'dispose' });\n    },\n    transformUv: function (uv) {\n        if (this.mapping !== UVMapping)\n            return;\n        uv.applyMatrix3(this.matrix);\n        if (uv.x < 0 || uv.x > 1) {\n            switch (this.wrapS) {\n                case RepeatWrapping:\n                    uv.x = uv.x - Math.floor(uv.x);\n                    break;\n                case ClampToEdgeWrapping:\n                    uv.x = uv.x < 0 ? 0 : 1;\n                    break;\n                case MirroredRepeatWrapping:\n                    if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n                        uv.x = Math.ceil(uv.x) - uv.x;\n                    }\n                    else {\n                        uv.x = uv.x - Math.floor(uv.x);\n                    }\n                    break;\n            }\n        }\n        if (uv.y < 0 || uv.y > 1) {\n            switch (this.wrapT) {\n                case RepeatWrapping:\n                    uv.y = uv.y - Math.floor(uv.y);\n                    break;\n                case ClampToEdgeWrapping:\n                    uv.y = uv.y < 0 ? 0 : 1;\n                    break;\n                case MirroredRepeatWrapping:\n                    if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n                        uv.y = Math.ceil(uv.y) - uv.y;\n                    }\n                    else {\n                        uv.y = uv.y - Math.floor(uv.y);\n                    }\n                    break;\n            }\n        }\n        if (this.flipY) {\n            uv.y = 1 - uv.y;\n        }\n    }\n});\nObject.defineProperty(Texture.prototype, \"needsUpdate\", {\n    set: function (value) {\n        if (value === true)\n            this.version++;\n    }\n});\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction Vector4(x, y, z, w) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n    this.w = (w !== undefined) ? w : 1;\n}\nObject.assign(Vector4.prototype, {\n    isVector4: true,\n    set: function (x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n        return this;\n    },\n    setScalar: function (scalar) {\n        this.x = scalar;\n        this.y = scalar;\n        this.z = scalar;\n        this.w = scalar;\n        return this;\n    },\n    setX: function (x) {\n        this.x = x;\n        return this;\n    },\n    setY: function (y) {\n        this.y = y;\n        return this;\n    },\n    setZ: function (z) {\n        this.z = z;\n        return this;\n    },\n    setW: function (w) {\n        this.w = w;\n        return this;\n    },\n    setComponent: function (index, value) {\n        switch (index) {\n            case 0:\n                this.x = value;\n                break;\n            case 1:\n                this.y = value;\n                break;\n            case 2:\n                this.z = value;\n                break;\n            case 3:\n                this.w = value;\n                break;\n            default: throw new Error('index is out of range: ' + index);\n        }\n        return this;\n    },\n    getComponent: function (index) {\n        switch (index) {\n            case 0: return this.x;\n            case 1: return this.y;\n            case 2: return this.z;\n            case 3: return this.w;\n            default: throw new Error('index is out of range: ' + index);\n        }\n    },\n    clone: function () {\n        return new this.constructor(this.x, this.y, this.z, this.w);\n    },\n    copy: function (v) {\n        this.x = v.x;\n        this.y = v.y;\n        this.z = v.z;\n        this.w = (v.w !== undefined) ? v.w : 1;\n        return this;\n    },\n    add: function (v, w) {\n        if (w !== undefined) {\n            console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n            return this.addVectors(v, w);\n        }\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        this.w += v.w;\n        return this;\n    },\n    addScalar: function (s) {\n        this.x += s;\n        this.y += s;\n        this.z += s;\n        this.w += s;\n        return this;\n    },\n    addVectors: function (a, b) {\n        this.x = a.x + b.x;\n        this.y = a.y + b.y;\n        this.z = a.z + b.z;\n        this.w = a.w + b.w;\n        return this;\n    },\n    addScaledVector: function (v, s) {\n        this.x += v.x * s;\n        this.y += v.y * s;\n        this.z += v.z * s;\n        this.w += v.w * s;\n        return this;\n    },\n    sub: function (v, w) {\n        if (w !== undefined) {\n            console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n            return this.subVectors(v, w);\n        }\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        this.w -= v.w;\n        return this;\n    },\n    subScalar: function (s) {\n        this.x -= s;\n        this.y -= s;\n        this.z -= s;\n        this.w -= s;\n        return this;\n    },\n    subVectors: function (a, b) {\n        this.x = a.x - b.x;\n        this.y = a.y - b.y;\n        this.z = a.z - b.z;\n        this.w = a.w - b.w;\n        return this;\n    },\n    multiplyScalar: function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        this.w *= scalar;\n        return this;\n    },\n    applyMatrix4: function (m) {\n        var x = this.x, y = this.y, z = this.z, w = this.w;\n        var e = m.elements;\n        this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n        this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n        this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n        this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n        return this;\n    },\n    divideScalar: function (scalar) {\n        return this.multiplyScalar(1 / scalar);\n    },\n    setAxisAngleFromQuaternion: function (q) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n        // q is assumed to be normalized\n        this.w = 2 * Math.acos(q.w);\n        var s = Math.sqrt(1 - q.w * q.w);\n        if (s < 0.0001) {\n            this.x = 1;\n            this.y = 0;\n            this.z = 0;\n        }\n        else {\n            this.x = q.x / s;\n            this.y = q.y / s;\n            this.z = q.z / s;\n        }\n        return this;\n    },\n    setAxisAngleFromRotationMatrix: function (m) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n        var angle, x, y, z, // variables for result\n        epsilon = 0.01, // margin to allow for rounding errors\n        epsilon2 = 0.1, // margin to distinguish between 0 and 180 degrees\n        te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];\n        if ((Math.abs(m12 - m21) < epsilon) &&\n            (Math.abs(m13 - m31) < epsilon) &&\n            (Math.abs(m23 - m32) < epsilon)) {\n            // singularity found\n            // first check for identity matrix which must have +1 for all terms\n            // in leading diagonal and zero in other terms\n            if ((Math.abs(m12 + m21) < epsilon2) &&\n                (Math.abs(m13 + m31) < epsilon2) &&\n                (Math.abs(m23 + m32) < epsilon2) &&\n                (Math.abs(m11 + m22 + m33 - 3) < epsilon2)) {\n                // this singularity is identity matrix so angle = 0\n                this.set(1, 0, 0, 0);\n                return this; // zero angle, arbitrary axis\n            }\n            // otherwise this singularity is angle = 180\n            angle = Math.PI;\n            var xx = (m11 + 1) / 2;\n            var yy = (m22 + 1) / 2;\n            var zz = (m33 + 1) / 2;\n            var xy = (m12 + m21) / 4;\n            var xz = (m13 + m31) / 4;\n            var yz = (m23 + m32) / 4;\n            if ((xx > yy) && (xx > zz)) {\n                // m11 is the largest diagonal term\n                if (xx < epsilon) {\n                    x = 0;\n                    y = 0.707106781;\n                    z = 0.707106781;\n                }\n                else {\n                    x = Math.sqrt(xx);\n                    y = xy / x;\n                    z = xz / x;\n                }\n            }\n            else if (yy > zz) {\n                // m22 is the largest diagonal term\n                if (yy < epsilon) {\n                    x = 0.707106781;\n                    y = 0;\n                    z = 0.707106781;\n                }\n                else {\n                    y = Math.sqrt(yy);\n                    x = xy / y;\n                    z = yz / y;\n                }\n            }\n            else {\n                // m33 is the largest diagonal term so base result on this\n                if (zz < epsilon) {\n                    x = 0.707106781;\n                    y = 0.707106781;\n                    z = 0;\n                }\n                else {\n                    z = Math.sqrt(zz);\n                    x = xz / z;\n                    y = yz / z;\n                }\n            }\n            this.set(x, y, z, angle);\n            return this; // return 180 deg rotation\n        }\n        // as we have reached here there are no singularities so we can handle normally\n        var s = Math.sqrt((m32 - m23) * (m32 - m23) +\n            (m13 - m31) * (m13 - m31) +\n            (m21 - m12) * (m21 - m12)); // used to normalize\n        if (Math.abs(s) < 0.001)\n            s = 1;\n        // prevent divide by zero, should not happen if matrix is orthogonal and should be\n        // caught by singularity test above, but I've left it in just in case\n        this.x = (m32 - m23) / s;\n        this.y = (m13 - m31) / s;\n        this.z = (m21 - m12) / s;\n        this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n        return this;\n    },\n    min: function (v) {\n        this.x = Math.min(this.x, v.x);\n        this.y = Math.min(this.y, v.y);\n        this.z = Math.min(this.z, v.z);\n        this.w = Math.min(this.w, v.w);\n        return this;\n    },\n    max: function (v) {\n        this.x = Math.max(this.x, v.x);\n        this.y = Math.max(this.y, v.y);\n        this.z = Math.max(this.z, v.z);\n        this.w = Math.max(this.w, v.w);\n        return this;\n    },\n    clamp: function (min, max) {\n        // assumes min < max, componentwise\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\n        this.z = Math.max(min.z, Math.min(max.z, this.z));\n        this.w = Math.max(min.w, Math.min(max.w, this.w));\n        return this;\n    },\n    clampScalar: function () {\n        var min, max;\n        return function clampScalar(minVal, maxVal) {\n            if (min === undefined) {\n                min = new Vector4();\n                max = new Vector4();\n            }\n            min.set(minVal, minVal, minVal, minVal);\n            max.set(maxVal, maxVal, maxVal, maxVal);\n            return this.clamp(min, max);\n        };\n    }(),\n    clampLength: function (min, max) {\n        var length = this.length();\n        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n    },\n    floor: function () {\n        this.x = Math.floor(this.x);\n        this.y = Math.floor(this.y);\n        this.z = Math.floor(this.z);\n        this.w = Math.floor(this.w);\n        return this;\n    },\n    ceil: function () {\n        this.x = Math.ceil(this.x);\n        this.y = Math.ceil(this.y);\n        this.z = Math.ceil(this.z);\n        this.w = Math.ceil(this.w);\n        return this;\n    },\n    round: function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        this.z = Math.round(this.z);\n        this.w = Math.round(this.w);\n        return this;\n    },\n    roundToZero: function () {\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\n        this.z = (this.z < 0) ? Math.ceil(this.z) : Math.floor(this.z);\n        this.w = (this.w < 0) ? Math.ceil(this.w) : Math.floor(this.w);\n        return this;\n    },\n    negate: function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        this.z = -this.z;\n        this.w = -this.w;\n        return this;\n    },\n    dot: function (v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    },\n    lengthSq: function () {\n        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    },\n    length: function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    },\n    manhattanLength: function () {\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n    },\n    normalize: function () {\n        return this.divideScalar(this.length() || 1);\n    },\n    setLength: function (length) {\n        return this.normalize().multiplyScalar(length);\n    },\n    lerp: function (v, alpha) {\n        this.x += (v.x - this.x) * alpha;\n        this.y += (v.y - this.y) * alpha;\n        this.z += (v.z - this.z) * alpha;\n        this.w += (v.w - this.w) * alpha;\n        return this;\n    },\n    lerpVectors: function (v1, v2, alpha) {\n        return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n    },\n    equals: function (v) {\n        return ((v.x === this.x) && (v.y === this.y) && (v.z === this.z) && (v.w === this.w));\n    },\n    fromArray: function (array, offset) {\n        if (offset === undefined)\n            offset = 0;\n        this.x = array[offset];\n        this.y = array[offset + 1];\n        this.z = array[offset + 2];\n        this.w = array[offset + 3];\n        return this;\n    },\n    toArray: function (array, offset) {\n        if (array === undefined)\n            array = [];\n        if (offset === undefined)\n            offset = 0;\n        array[offset] = this.x;\n        array[offset + 1] = this.y;\n        array[offset + 2] = this.z;\n        array[offset + 3] = this.w;\n        return array;\n    },\n    fromBufferAttribute: function (attribute, index, offset) {\n        if (offset !== undefined) {\n            console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n        }\n        this.x = attribute.getX(index);\n        this.y = attribute.getY(index);\n        this.z = attribute.getZ(index);\n        this.w = attribute.getW(index);\n        return this;\n    }\n});\n/**\n * @author szimek / https://github.com/szimek/\n * @author alteredq / http://alteredqualia.com/\n * @author Marius Kintel / https://github.com/kintel\n */\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nfunction WebGLRenderTarget(width, height, options) {\n    this.uuid = _Math.generateUUID();\n    this.width = width;\n    this.height = height;\n    this.scissor = new Vector4(0, 0, width, height);\n    this.scissorTest = false;\n    this.viewport = new Vector4(0, 0, width, height);\n    options = options || {};\n    if (options.minFilter === undefined)\n        options.minFilter = LinearFilter;\n    this.texture = new Texture(undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n    this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n    this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n    this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n}\nWebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: WebGLRenderTarget,\n    isWebGLRenderTarget: true,\n    setSize: function (width, height) {\n        if (this.width !== width || this.height !== height) {\n            this.width = width;\n            this.height = height;\n            this.dispose();\n        }\n        this.viewport.set(0, 0, width, height);\n        this.scissor.set(0, 0, width, height);\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (source) {\n        this.width = source.width;\n        this.height = source.height;\n        this.viewport.copy(source.viewport);\n        this.texture = source.texture.clone();\n        this.depthBuffer = source.depthBuffer;\n        this.stencilBuffer = source.stencilBuffer;\n        this.depthTexture = source.depthTexture;\n        return this;\n    },\n    dispose: function () {\n        this.dispatchEvent({ type: 'dispose' });\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com\n */\nfunction WebGLRenderTargetCube(width, height, options) {\n    WebGLRenderTarget.call(this, width, height, options);\n    this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n    this.activeMipMapLevel = 0;\n}\nWebGLRenderTargetCube.prototype = Object.create(WebGLRenderTarget.prototype);\nWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\nWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nfunction DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n    Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n    this.image = { data: data, width: width, height: height };\n    this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n    this.generateMipmaps = false;\n    this.flipY = false;\n    this.unpackAlignment = 1;\n}\nDataTexture.prototype = Object.create(Texture.prototype);\nDataTexture.prototype.constructor = DataTexture;\nDataTexture.prototype.isDataTexture = true;\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n    images = images !== undefined ? images : [];\n    mapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n    Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n    this.flipY = false;\n}\nCubeTexture.prototype = Object.create(Texture.prototype);\nCubeTexture.prototype.constructor = CubeTexture;\nCubeTexture.prototype.isCubeTexture = true;\nObject.defineProperty(CubeTexture.prototype, 'images', {\n    get: function () {\n        return this.image;\n    },\n    set: function (value) {\n        this.image = value;\n    }\n});\n/**\n * @author tschw\n *\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [renderer] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'renderer' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (renderer factorizations):\n *\n * .upload( gl, seq, values, renderer )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (renderer factorizations):\n *\n * .setValue( gl, name, value )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .set( gl, obj, prop )\n *\n * \t\tsets uniform from object and property with same name than uniform\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\nvar emptyTexture = new Texture();\nvar emptyCubeTexture = new CubeTexture();\n// --- Base for inner nodes (including the root) ---\nfunction UniformContainer() {\n    this.seq = [];\n    this.map = {};\n}\n// --- Utilities ---\n// Array Caches (provide typed arrays for temporary by size)\nvar arrayCacheF32 = [];\nvar arrayCacheI32 = [];\n// Float32Array caches used for uploading Matrix uniforms\nvar mat4array = new Float32Array(16);\nvar mat3array = new Float32Array(9);\n// Flattening for arrays of vectors and matrices\nfunction flatten(array, nBlocks, blockSize) {\n    var firstElem = array[0];\n    if (firstElem <= 0 || firstElem > 0)\n        return array;\n    // unoptimized: ! isNaN( firstElem )\n    // see http://jacksondunstan.com/articles/983\n    var n = nBlocks * blockSize, r = arrayCacheF32[n];\n    if (r === undefined) {\n        r = new Float32Array(n);\n        arrayCacheF32[n] = r;\n    }\n    if (nBlocks !== 0) {\n        firstElem.toArray(r, 0);\n        for (var i = 1, offset = 0; i !== nBlocks; ++i) {\n            offset += blockSize;\n            array[i].toArray(r, offset);\n        }\n    }\n    return r;\n}\n// Texture unit allocation\nfunction allocTexUnits(renderer, n) {\n    var r = arrayCacheI32[n];\n    if (r === undefined) {\n        r = new Int32Array(n);\n        arrayCacheI32[n] = r;\n    }\n    for (var i = 0; i !== n; ++i)\n        r[i] = renderer.allocTextureUnit();\n    return r;\n}\n// --- Setters ---\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n// Single scalar\nfunction setValue1f(gl, v) {\n    gl.uniform1f(this.addr, v);\n}\nfunction setValue1i(gl, v) {\n    gl.uniform1i(this.addr, v);\n}\n// Single float vector (from flat array or THREE.VectorN)\nfunction setValue2fv(gl, v) {\n    if (v.x === undefined) {\n        gl.uniform2fv(this.addr, v);\n    }\n    else {\n        gl.uniform2f(this.addr, v.x, v.y);\n    }\n}\nfunction setValue3fv(gl, v) {\n    if (v.x !== undefined) {\n        gl.uniform3f(this.addr, v.x, v.y, v.z);\n    }\n    else if (v.r !== undefined) {\n        gl.uniform3f(this.addr, v.r, v.g, v.b);\n    }\n    else {\n        gl.uniform3fv(this.addr, v);\n    }\n}\nfunction setValue4fv(gl, v) {\n    if (v.x === undefined) {\n        gl.uniform4fv(this.addr, v);\n    }\n    else {\n        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n    }\n}\n// Single matrix (from flat array or MatrixN)\nfunction setValue2fm(gl, v) {\n    gl.uniformMatrix2fv(this.addr, false, v.elements || v);\n}\nfunction setValue3fm(gl, v) {\n    if (v.elements === undefined) {\n        gl.uniformMatrix3fv(this.addr, false, v);\n    }\n    else {\n        mat3array.set(v.elements);\n        gl.uniformMatrix3fv(this.addr, false, mat3array);\n    }\n}\nfunction setValue4fm(gl, v) {\n    if (v.elements === undefined) {\n        gl.uniformMatrix4fv(this.addr, false, v);\n    }\n    else {\n        mat4array.set(v.elements);\n        gl.uniformMatrix4fv(this.addr, false, mat4array);\n    }\n}\n// Single texture (2D / Cube)\nfunction setValueT1(gl, v, renderer) {\n    var unit = renderer.allocTextureUnit();\n    gl.uniform1i(this.addr, unit);\n    renderer.setTexture2D(v || emptyTexture, unit);\n}\nfunction setValueT6(gl, v, renderer) {\n    var unit = renderer.allocTextureUnit();\n    gl.uniform1i(this.addr, unit);\n    renderer.setTextureCube(v || emptyCubeTexture, unit);\n}\n// Integer / Boolean vectors or arrays thereof (always flat arrays)\nfunction setValue2iv(gl, v) {\n    gl.uniform2iv(this.addr, v);\n}\nfunction setValue3iv(gl, v) {\n    gl.uniform3iv(this.addr, v);\n}\nfunction setValue4iv(gl, v) {\n    gl.uniform4iv(this.addr, v);\n}\n// Helper to pick the right setter for the singular case\nfunction getSingularSetter(type) {\n    switch (type) {\n        case 0x1406: return setValue1f; // FLOAT\n        case 0x8b50: return setValue2fv; // _VEC2\n        case 0x8b51: return setValue3fv; // _VEC3\n        case 0x8b52: return setValue4fv; // _VEC4\n        case 0x8b5a: return setValue2fm; // _MAT2\n        case 0x8b5b: return setValue3fm; // _MAT3\n        case 0x8b5c: return setValue4fm; // _MAT4\n        case 0x8b5e:\n        case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n        case 0x8b60: return setValueT6; // SAMPLER_CUBE\n        case 0x1404:\n        case 0x8b56: return setValue1i; // INT, BOOL\n        case 0x8b53:\n        case 0x8b57: return setValue2iv; // _VEC2\n        case 0x8b54:\n        case 0x8b58: return setValue3iv; // _VEC3\n        case 0x8b55:\n        case 0x8b59: return setValue4iv; // _VEC4\n    }\n}\n// Array of scalars\nfunction setValue1fv(gl, v) {\n    gl.uniform1fv(this.addr, v);\n}\nfunction setValue1iv(gl, v) {\n    gl.uniform1iv(this.addr, v);\n}\n// Array of vectors (flat or from THREE classes)\nfunction setValueV2a(gl, v) {\n    gl.uniform2fv(this.addr, flatten(v, this.size, 2));\n}\nfunction setValueV3a(gl, v) {\n    gl.uniform3fv(this.addr, flatten(v, this.size, 3));\n}\nfunction setValueV4a(gl, v) {\n    gl.uniform4fv(this.addr, flatten(v, this.size, 4));\n}\n// Array of matrices (flat or from THREE clases)\nfunction setValueM2a(gl, v) {\n    gl.uniformMatrix2fv(this.addr, false, flatten(v, this.size, 4));\n}\nfunction setValueM3a(gl, v) {\n    gl.uniformMatrix3fv(this.addr, false, flatten(v, this.size, 9));\n}\nfunction setValueM4a(gl, v) {\n    gl.uniformMatrix4fv(this.addr, false, flatten(v, this.size, 16));\n}\n// Array of textures (2D / Cube)\nfunction setValueT1a(gl, v, renderer) {\n    var n = v.length, units = allocTexUnits(renderer, n);\n    gl.uniform1iv(this.addr, units);\n    for (var i = 0; i !== n; ++i) {\n        renderer.setTexture2D(v[i] || emptyTexture, units[i]);\n    }\n}\nfunction setValueT6a(gl, v, renderer) {\n    var n = v.length, units = allocTexUnits(renderer, n);\n    gl.uniform1iv(this.addr, units);\n    for (var i = 0; i !== n; ++i) {\n        renderer.setTextureCube(v[i] || emptyCubeTexture, units[i]);\n    }\n}\n// Helper to pick the right setter for a pure (bottom-level) array\nfunction getPureArraySetter(type) {\n    switch (type) {\n        case 0x1406: return setValue1fv; // FLOAT\n        case 0x8b50: return setValueV2a; // _VEC2\n        case 0x8b51: return setValueV3a; // _VEC3\n        case 0x8b52: return setValueV4a; // _VEC4\n        case 0x8b5a: return setValueM2a; // _MAT2\n        case 0x8b5b: return setValueM3a; // _MAT3\n        case 0x8b5c: return setValueM4a; // _MAT4\n        case 0x8b5e: return setValueT1a; // SAMPLER_2D\n        case 0x8b60: return setValueT6a; // SAMPLER_CUBE\n        case 0x1404:\n        case 0x8b56: return setValue1iv; // INT, BOOL\n        case 0x8b53:\n        case 0x8b57: return setValue2iv; // _VEC2\n        case 0x8b54:\n        case 0x8b58: return setValue3iv; // _VEC3\n        case 0x8b55:\n        case 0x8b59: return setValue4iv; // _VEC4\n    }\n}\n// --- Uniform Classes ---\nfunction SingleUniform(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.setValue = getSingularSetter(activeInfo.type);\n    // this.path = activeInfo.name; // DEBUG\n}\nfunction PureArrayUniform(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.size = activeInfo.size;\n    this.setValue = getPureArraySetter(activeInfo.type);\n    // this.path = activeInfo.name; // DEBUG\n}\nfunction StructuredUniform(id) {\n    this.id = id;\n    UniformContainer.call(this); // mix-in\n}\nStructuredUniform.prototype.setValue = function (gl, value) {\n    // Note: Don't need an extra 'renderer' parameter, since samplers\n    // are not allowed in structured uniforms.\n    var seq = this.seq;\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n        var u = seq[i];\n        u.setValue(gl, value[u.id]);\n    }\n};\n// --- Top-level ---\n// Parser - builds up the property tree from the path strings\nvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\nfunction addUniform(container, uniformObject) {\n    container.seq.push(uniformObject);\n    container.map[uniformObject.id] = uniformObject;\n}\nfunction parseUniform(activeInfo, addr, container) {\n    var path = activeInfo.name, pathLength = path.length;\n    // reset RegExp object, because of the early exit of a previous run\n    RePathPart.lastIndex = 0;\n    for (;;) {\n        var match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex, id = match[1], idIsIndex = match[2] === ']', subscript = match[3];\n        if (idIsIndex)\n            id = id | 0; // convert to integer\n        if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n            // bare name or \"pure\" bottom-level array \"[0]\" suffix\n            addUniform(container, subscript === undefined ?\n                new SingleUniform(id, activeInfo, addr) :\n                new PureArrayUniform(id, activeInfo, addr));\n            break;\n        }\n        else {\n            // step into inner node / create it in case it doesn't exist\n            var map = container.map, next = map[id];\n            if (next === undefined) {\n                next = new StructuredUniform(id);\n                addUniform(container, next);\n            }\n            container = next;\n        }\n    }\n}\n// Root Container\nfunction WebGLUniforms(gl, program, renderer) {\n    UniformContainer.call(this);\n    this.renderer = renderer;\n    var n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (var i = 0; i < n; ++i) {\n        var info = gl.getActiveUniform(program, i), path = info.name, addr = gl.getUniformLocation(program, path);\n        parseUniform(info, addr, this);\n    }\n}\nWebGLUniforms.prototype.setValue = function (gl, name, value) {\n    var u = this.map[name];\n    if (u !== undefined)\n        u.setValue(gl, value, this.renderer);\n};\nWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n    var v = object[name];\n    if (v !== undefined)\n        this.setValue(gl, name, v);\n};\n// Static interface\nWebGLUniforms.upload = function (gl, seq, values, renderer) {\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n        var u = seq[i], v = values[u.id];\n        if (v.needsUpdate !== false) {\n            // note: always updating when .needsUpdate is undefined\n            u.setValue(gl, v.value, renderer);\n        }\n    }\n};\nWebGLUniforms.seqWithValue = function (seq, values) {\n    var r = [];\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n        var u = seq[i];\n        if (u.id in values)\n            r.push(u);\n    }\n    return r;\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nvar ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n    'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n    'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n    'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n    'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n    'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n    'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n    'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n    'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n    'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n    'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n    'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n    'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n    'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n    'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n    'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n    'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n    'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n    'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n    'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n    'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n    'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n    'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n    'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\nfunction Color(r, g, b) {\n    if (g === undefined && b === undefined) {\n        // r is THREE.Color, hex or string\n        return this.set(r);\n    }\n    return this.setRGB(r, g, b);\n}\nObject.assign(Color.prototype, {\n    isColor: true,\n    r: 1, g: 1, b: 1,\n    set: function (value) {\n        if (value && value.isColor) {\n            this.copy(value);\n        }\n        else if (typeof value === 'number') {\n            this.setHex(value);\n        }\n        else if (typeof value === 'string') {\n            this.setStyle(value);\n        }\n        return this;\n    },\n    setScalar: function (scalar) {\n        this.r = scalar;\n        this.g = scalar;\n        this.b = scalar;\n        return this;\n    },\n    setHex: function (hex) {\n        hex = Math.floor(hex);\n        this.r = (hex >> 16 & 255) / 255;\n        this.g = (hex >> 8 & 255) / 255;\n        this.b = (hex & 255) / 255;\n        return this;\n    },\n    setRGB: function (r, g, b) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        return this;\n    },\n    setHSL: function () {\n        function hue2rgb(p, q, t) {\n            if (t < 0)\n                t += 1;\n            if (t > 1)\n                t -= 1;\n            if (t < 1 / 6)\n                return p + (q - p) * 6 * t;\n            if (t < 1 / 2)\n                return q;\n            if (t < 2 / 3)\n                return p + (q - p) * 6 * (2 / 3 - t);\n            return p;\n        }\n        return function setHSL(h, s, l) {\n            // h,s,l ranges are in 0.0 - 1.0\n            h = _Math.euclideanModulo(h, 1);\n            s = _Math.clamp(s, 0, 1);\n            l = _Math.clamp(l, 0, 1);\n            if (s === 0) {\n                this.r = this.g = this.b = l;\n            }\n            else {\n                var p = l <= 0.5 ? l * (1 + s) : l + s - (l * s);\n                var q = (2 * l) - p;\n                this.r = hue2rgb(q, p, h + 1 / 3);\n                this.g = hue2rgb(q, p, h);\n                this.b = hue2rgb(q, p, h - 1 / 3);\n            }\n            return this;\n        };\n    }(),\n    setStyle: function (style) {\n        function handleAlpha(string) {\n            if (string === undefined)\n                return;\n            if (parseFloat(string) < 1) {\n                console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n            }\n        }\n        var m;\n        if (m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style)) {\n            // rgb / hsl\n            var color;\n            var name = m[1];\n            var components = m[2];\n            switch (name) {\n                case 'rgb':\n                case 'rgba':\n                    if (color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n                        // rgb(255,0,0) rgba(255,0,0,0.5)\n                        this.r = Math.min(255, parseInt(color[1], 10)) / 255;\n                        this.g = Math.min(255, parseInt(color[2], 10)) / 255;\n                        this.b = Math.min(255, parseInt(color[3], 10)) / 255;\n                        handleAlpha(color[5]);\n                        return this;\n                    }\n                    if (color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n                        // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n                        this.r = Math.min(100, parseInt(color[1], 10)) / 100;\n                        this.g = Math.min(100, parseInt(color[2], 10)) / 100;\n                        this.b = Math.min(100, parseInt(color[3], 10)) / 100;\n                        handleAlpha(color[5]);\n                        return this;\n                    }\n                    break;\n                case 'hsl':\n                case 'hsla':\n                    if (color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n                        // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n                        var h = parseFloat(color[1]) / 360;\n                        var s = parseInt(color[2], 10) / 100;\n                        var l = parseInt(color[3], 10) / 100;\n                        handleAlpha(color[5]);\n                        return this.setHSL(h, s, l);\n                    }\n                    break;\n            }\n        }\n        else if (m = /^\\#([A-Fa-f0-9]+)$/.exec(style)) {\n            // hex color\n            var hex = m[1];\n            var size = hex.length;\n            if (size === 3) {\n                // #ff0\n                this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n                this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n                this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n                return this;\n            }\n            else if (size === 6) {\n                // #ff0000\n                this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n                this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n                this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n                return this;\n            }\n        }\n        if (style && style.length > 0) {\n            // color keywords\n            var hex = ColorKeywords[style];\n            if (hex !== undefined) {\n                // red\n                this.setHex(hex);\n            }\n            else {\n                // unknown color\n                console.warn('THREE.Color: Unknown color ' + style);\n            }\n        }\n        return this;\n    },\n    clone: function () {\n        return new this.constructor(this.r, this.g, this.b);\n    },\n    copy: function (color) {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n        return this;\n    },\n    copyGammaToLinear: function (color, gammaFactor) {\n        if (gammaFactor === undefined)\n            gammaFactor = 2.0;\n        this.r = Math.pow(color.r, gammaFactor);\n        this.g = Math.pow(color.g, gammaFactor);\n        this.b = Math.pow(color.b, gammaFactor);\n        return this;\n    },\n    copyLinearToGamma: function (color, gammaFactor) {\n        if (gammaFactor === undefined)\n            gammaFactor = 2.0;\n        var safeInverse = (gammaFactor > 0) ? (1.0 / gammaFactor) : 1.0;\n        this.r = Math.pow(color.r, safeInverse);\n        this.g = Math.pow(color.g, safeInverse);\n        this.b = Math.pow(color.b, safeInverse);\n        return this;\n    },\n    convertGammaToLinear: function () {\n        var r = this.r, g = this.g, b = this.b;\n        this.r = r * r;\n        this.g = g * g;\n        this.b = b * b;\n        return this;\n    },\n    convertLinearToGamma: function () {\n        this.r = Math.sqrt(this.r);\n        this.g = Math.sqrt(this.g);\n        this.b = Math.sqrt(this.b);\n        return this;\n    },\n    getHex: function () {\n        return (this.r * 255) << 16 ^ (this.g * 255) << 8 ^ (this.b * 255) << 0;\n    },\n    getHexString: function () {\n        return ('000000' + this.getHex().toString(16)).slice(-6);\n    },\n    getHSL: function (optionalTarget) {\n        // h,s,l ranges are in 0.0 - 1.0\n        var hsl = optionalTarget || { h: 0, s: 0, l: 0 };\n        var r = this.r, g = this.g, b = this.b;\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var hue, saturation;\n        var lightness = (min + max) / 2.0;\n        if (min === max) {\n            hue = 0;\n            saturation = 0;\n        }\n        else {\n            var delta = max - min;\n            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n            switch (max) {\n                case r:\n                    hue = (g - b) / delta + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    hue = (b - r) / delta + 2;\n                    break;\n                case b:\n                    hue = (r - g) / delta + 4;\n                    break;\n            }\n            hue /= 6;\n        }\n        hsl.h = hue;\n        hsl.s = saturation;\n        hsl.l = lightness;\n        return hsl;\n    },\n    getStyle: function () {\n        return 'rgb(' + ((this.r * 255) | 0) + ',' + ((this.g * 255) | 0) + ',' + ((this.b * 255) | 0) + ')';\n    },\n    offsetHSL: function (h, s, l) {\n        var hsl = this.getHSL();\n        hsl.h += h;\n        hsl.s += s;\n        hsl.l += l;\n        this.setHSL(hsl.h, hsl.s, hsl.l);\n        return this;\n    },\n    add: function (color) {\n        this.r += color.r;\n        this.g += color.g;\n        this.b += color.b;\n        return this;\n    },\n    addColors: function (color1, color2) {\n        this.r = color1.r + color2.r;\n        this.g = color1.g + color2.g;\n        this.b = color1.b + color2.b;\n        return this;\n    },\n    addScalar: function (s) {\n        this.r += s;\n        this.g += s;\n        this.b += s;\n        return this;\n    },\n    sub: function (color) {\n        this.r = Math.max(0, this.r - color.r);\n        this.g = Math.max(0, this.g - color.g);\n        this.b = Math.max(0, this.b - color.b);\n        return this;\n    },\n    multiply: function (color) {\n        this.r *= color.r;\n        this.g *= color.g;\n        this.b *= color.b;\n        return this;\n    },\n    multiplyScalar: function (s) {\n        this.r *= s;\n        this.g *= s;\n        this.b *= s;\n        return this;\n    },\n    lerp: function (color, alpha) {\n        this.r += (color.r - this.r) * alpha;\n        this.g += (color.g - this.g) * alpha;\n        this.b += (color.b - this.b) * alpha;\n        return this;\n    },\n    equals: function (c) {\n        return (c.r === this.r) && (c.g === this.g) && (c.b === this.b);\n    },\n    fromArray: function (array, offset) {\n        if (offset === undefined)\n            offset = 0;\n        this.r = array[offset];\n        this.g = array[offset + 1];\n        this.b = array[offset + 2];\n        return this;\n    },\n    toArray: function (array, offset) {\n        if (array === undefined)\n            array = [];\n        if (offset === undefined)\n            offset = 0;\n        array[offset] = this.r;\n        array[offset + 1] = this.g;\n        array[offset + 2] = this.b;\n        return array;\n    },\n    toJSON: function () {\n        return this.getHex();\n    }\n});\n/**\n * Uniforms library for shared webgl shaders\n */\nvar UniformsLib = {\n    common: {\n        diffuse: { value: new Color(0xeeeeee) },\n        opacity: { value: 1.0 },\n        map: { value: null },\n        uvTransform: { value: new Matrix3() },\n        alphaMap: { value: null },\n    },\n    specularmap: {\n        specularMap: { value: null },\n    },\n    envmap: {\n        envMap: { value: null },\n        flipEnvMap: { value: -1 },\n        reflectivity: { value: 1.0 },\n        refractionRatio: { value: 0.98 }\n    },\n    aomap: {\n        aoMap: { value: null },\n        aoMapIntensity: { value: 1 }\n    },\n    lightmap: {\n        lightMap: { value: null },\n        lightMapIntensity: { value: 1 }\n    },\n    emissivemap: {\n        emissiveMap: { value: null }\n    },\n    bumpmap: {\n        bumpMap: { value: null },\n        bumpScale: { value: 1 }\n    },\n    normalmap: {\n        normalMap: { value: null },\n        normalScale: { value: new Vector2(1, 1) }\n    },\n    displacementmap: {\n        displacementMap: { value: null },\n        displacementScale: { value: 1 },\n        displacementBias: { value: 0 }\n    },\n    roughnessmap: {\n        roughnessMap: { value: null }\n    },\n    metalnessmap: {\n        metalnessMap: { value: null }\n    },\n    gradientmap: {\n        gradientMap: { value: null }\n    },\n    fog: {\n        fogDensity: { value: 0.00025 },\n        fogNear: { value: 1 },\n        fogFar: { value: 2000 },\n        fogColor: { value: new Color(0xffffff) }\n    },\n    lights: {\n        ambientLightColor: { value: [] },\n        directionalLights: { value: [], properties: {\n                direction: {},\n                color: {},\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {}\n            } },\n        directionalShadowMap: { value: [] },\n        directionalShadowMatrix: { value: [] },\n        spotLights: { value: [], properties: {\n                color: {},\n                position: {},\n                direction: {},\n                distance: {},\n                coneCos: {},\n                penumbraCos: {},\n                decay: {},\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {}\n            } },\n        spotShadowMap: { value: [] },\n        spotShadowMatrix: { value: [] },\n        pointLights: { value: [], properties: {\n                color: {},\n                position: {},\n                decay: {},\n                distance: {},\n                shadow: {},\n                shadowBias: {},\n                shadowRadius: {},\n                shadowMapSize: {},\n                shadowCameraNear: {},\n                shadowCameraFar: {}\n            } },\n        pointShadowMap: { value: [] },\n        pointShadowMatrix: { value: [] },\n        hemisphereLights: { value: [], properties: {\n                direction: {},\n                skyColor: {},\n                groundColor: {}\n            } },\n        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n        rectAreaLights: { value: [], properties: {\n                color: {},\n                position: {},\n                width: {},\n                height: {}\n            } }\n    },\n    points: {\n        diffuse: { value: new Color(0xeeeeee) },\n        opacity: { value: 1.0 },\n        size: { value: 1.0 },\n        scale: { value: 1.0 },\n        map: { value: null },\n        uvTransform: { value: new Matrix3() }\n    }\n};\n/**\n * Uniform Utilities\n */\nvar UniformsUtils = {\n    merge: function (uniforms) {\n        var merged = {};\n        for (var u = 0; u < uniforms.length; u++) {\n            var tmp = this.clone(uniforms[u]);\n            for (var p in tmp) {\n                merged[p] = tmp[p];\n            }\n        }\n        return merged;\n    },\n    clone: function (uniforms_src) {\n        var uniforms_dst = {};\n        for (var u in uniforms_src) {\n            uniforms_dst[u] = {};\n            for (var p in uniforms_src[u]) {\n                var parameter_src = uniforms_src[u][p];\n                if (parameter_src && (parameter_src.isColor ||\n                    parameter_src.isMatrix3 || parameter_src.isMatrix4 ||\n                    parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||\n                    parameter_src.isTexture)) {\n                    uniforms_dst[u][p] = parameter_src.clone();\n                }\n                else if (Array.isArray(parameter_src)) {\n                    uniforms_dst[u][p] = parameter_src.slice();\n                }\n                else {\n                    uniforms_dst[u][p] = parameter_src;\n                }\n            }\n        }\n        return uniforms_dst;\n    }\n};\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\\n\";\nvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\\n\";\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\nvar begin_vertex = \"\\nvec3 transformed = vec3( position );\\n\";\nvar beginnormal_vertex = \"\\nvec3 objectNormal = vec3( normal );\\n\";\nvar bsdfs = \"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\\t}\\n\\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\\n\";\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\\n\";\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n\";\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\nvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\nvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\\n\";\nvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\nvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\nvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\n\";\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\nvar defaultnormal_vertex = \"vec3 transformedNormal = normalMatrix * objectNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n\";\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\\n\";\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\\n\";\nvar encodings_fragment = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\nvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract(Le);\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\\n\";\nvar envmap_pars_fragment = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\\tuniform float reflectivity;\\n\\tuniform float envMapIntensity;\\n#endif\\n#ifdef USE_ENVMAP\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\tuniform float flipEnvMap;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\\n\";\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\\n\";\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\n\";\nvar fog_vertex = \"\\n#ifdef USE_FOG\\nfogDepth = -mvPosition.z;\\n#endif\";\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n  varying float fogDepth;\\n#endif\\n\";\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\\n\";\nvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\nvar lights_pars = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\\n\";\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\\n\";\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.clearCoat = saturate( clearCoat );\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\";\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoat;\\n\\t\\tfloat clearCoatRoughness;\\n\\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifndef STANDARD\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifndef STANDARD\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\tfloat dotNL = dotNV;\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\\t#else\\n\\t\\tfloat clearCoatDHR = 0.0;\\n\\t#endif\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\\t#ifndef STANDARD\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\\t#endif\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\nvar lights_template = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#ifdef USE_SHADOWMAP\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\\t#endif\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\\t#ifndef STANDARD\\n\\t\\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\\t#else\\n\\t\\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\\t#endif\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\";\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\nvar logdepthbuf_pars_fragment = \"#ifdef USE_LOGDEPTHBUF\\n\\tuniform float logDepthBufFC;\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n#endif\\n\";\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t#endif\\n\\tuniform float logDepthBufFC;\\n#endif\";\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t#else\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\tgl_Position.z *= gl_Position.w;\\n\\t#endif\\n#endif\\n\";\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\\n\";\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n\";\nvar map_particle_fragment = \"#ifdef USE_MAP\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\nvar map_particle_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform mat3 uvTransform;\\n\\tuniform sampler2D map;\\n#endif\\n\";\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\\n\";\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\\n\";\nvar normal_fragment = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\\t\\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t\\tmapN.xy = normalScale * mapN.xy;\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\\n\";\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\nvar project_vertex = \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\ngl_Position = projectionMatrix * mvPosition;\\n\";\nvar dithering_fragment = \"#if defined( DITHERING )\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\\n\";\nvar dithering_pars_fragment = \"#if defined( DITHERING )\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\\n\";\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\\n\";\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\\n\";\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\\t#endif\\n#endif\\n\";\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\\n\";\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHTS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHTS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHTS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\\n\";\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\\n\";\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\\n\";\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\nvar uv_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n#endif\";\nvar uv_pars_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\n\";\nvar uv_vertex = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n#endif\\n\";\nvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\nvoid main() {\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\\tgl_FragColor.a *= opacity;\\n}\\n\";\nvar cube_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\\n\";\nvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\\n\";\nvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\\n\";\nvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\\n\";\nvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\";\nvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldPosition );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\";\nvar equirect_vert = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\\n\";\nvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\nvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\nvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\nvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\nvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\nvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\nvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\nvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\nvar meshphysical_frag = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\\tuniform float clearCoat;\\n\\tuniform float clearCoatRoughness;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_template>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\\n\";\nvar meshphysical_vert = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\nvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\\n\";\nvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\\n\";\nvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\\n\";\nvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\\t#else\\n\\t\\tgl_PointSize = size;\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\nvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\\n\";\nvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\\n\";\nvar ShaderChunk = {\n    alphamap_fragment: alphamap_fragment,\n    alphamap_pars_fragment: alphamap_pars_fragment,\n    alphatest_fragment: alphatest_fragment,\n    aomap_fragment: aomap_fragment,\n    aomap_pars_fragment: aomap_pars_fragment,\n    begin_vertex: begin_vertex,\n    beginnormal_vertex: beginnormal_vertex,\n    bsdfs: bsdfs,\n    bumpmap_pars_fragment: bumpmap_pars_fragment,\n    clipping_planes_fragment: clipping_planes_fragment,\n    clipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    clipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    clipping_planes_vertex: clipping_planes_vertex,\n    color_fragment: color_fragment,\n    color_pars_fragment: color_pars_fragment,\n    color_pars_vertex: color_pars_vertex,\n    color_vertex: color_vertex,\n    common: common,\n    cube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    defaultnormal_vertex: defaultnormal_vertex,\n    displacementmap_pars_vertex: displacementmap_pars_vertex,\n    displacementmap_vertex: displacementmap_vertex,\n    emissivemap_fragment: emissivemap_fragment,\n    emissivemap_pars_fragment: emissivemap_pars_fragment,\n    encodings_fragment: encodings_fragment,\n    encodings_pars_fragment: encodings_pars_fragment,\n    envmap_fragment: envmap_fragment,\n    envmap_pars_fragment: envmap_pars_fragment,\n    envmap_pars_vertex: envmap_pars_vertex,\n    envmap_vertex: envmap_vertex,\n    fog_vertex: fog_vertex,\n    fog_pars_vertex: fog_pars_vertex,\n    fog_fragment: fog_fragment,\n    fog_pars_fragment: fog_pars_fragment,\n    gradientmap_pars_fragment: gradientmap_pars_fragment,\n    lightmap_fragment: lightmap_fragment,\n    lightmap_pars_fragment: lightmap_pars_fragment,\n    lights_lambert_vertex: lights_lambert_vertex,\n    lights_pars: lights_pars,\n    lights_phong_fragment: lights_phong_fragment,\n    lights_phong_pars_fragment: lights_phong_pars_fragment,\n    lights_physical_fragment: lights_physical_fragment,\n    lights_physical_pars_fragment: lights_physical_pars_fragment,\n    lights_template: lights_template,\n    logdepthbuf_fragment: logdepthbuf_fragment,\n    logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    logdepthbuf_vertex: logdepthbuf_vertex,\n    map_fragment: map_fragment,\n    map_pars_fragment: map_pars_fragment,\n    map_particle_fragment: map_particle_fragment,\n    map_particle_pars_fragment: map_particle_pars_fragment,\n    metalnessmap_fragment: metalnessmap_fragment,\n    metalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    morphnormal_vertex: morphnormal_vertex,\n    morphtarget_pars_vertex: morphtarget_pars_vertex,\n    morphtarget_vertex: morphtarget_vertex,\n    normal_fragment: normal_fragment,\n    normalmap_pars_fragment: normalmap_pars_fragment,\n    packing: packing,\n    premultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    project_vertex: project_vertex,\n    dithering_fragment: dithering_fragment,\n    dithering_pars_fragment: dithering_pars_fragment,\n    roughnessmap_fragment: roughnessmap_fragment,\n    roughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    shadowmap_pars_fragment: shadowmap_pars_fragment,\n    shadowmap_pars_vertex: shadowmap_pars_vertex,\n    shadowmap_vertex: shadowmap_vertex,\n    shadowmask_pars_fragment: shadowmask_pars_fragment,\n    skinbase_vertex: skinbase_vertex,\n    skinning_pars_vertex: skinning_pars_vertex,\n    skinning_vertex: skinning_vertex,\n    skinnormal_vertex: skinnormal_vertex,\n    specularmap_fragment: specularmap_fragment,\n    specularmap_pars_fragment: specularmap_pars_fragment,\n    tonemapping_fragment: tonemapping_fragment,\n    tonemapping_pars_fragment: tonemapping_pars_fragment,\n    uv_pars_fragment: uv_pars_fragment,\n    uv_pars_vertex: uv_pars_vertex,\n    uv_vertex: uv_vertex,\n    uv2_pars_fragment: uv2_pars_fragment,\n    uv2_pars_vertex: uv2_pars_vertex,\n    uv2_vertex: uv2_vertex,\n    worldpos_vertex: worldpos_vertex,\n    cube_frag: cube_frag,\n    cube_vert: cube_vert,\n    depth_frag: depth_frag,\n    depth_vert: depth_vert,\n    distanceRGBA_frag: distanceRGBA_frag,\n    distanceRGBA_vert: distanceRGBA_vert,\n    equirect_frag: equirect_frag,\n    equirect_vert: equirect_vert,\n    linedashed_frag: linedashed_frag,\n    linedashed_vert: linedashed_vert,\n    meshbasic_frag: meshbasic_frag,\n    meshbasic_vert: meshbasic_vert,\n    meshlambert_frag: meshlambert_frag,\n    meshlambert_vert: meshlambert_vert,\n    meshphong_frag: meshphong_frag,\n    meshphong_vert: meshphong_vert,\n    meshphysical_frag: meshphysical_frag,\n    meshphysical_vert: meshphysical_vert,\n    normal_frag: normal_frag,\n    normal_vert: normal_vert,\n    points_frag: points_frag,\n    points_vert: points_vert,\n    shadow_frag: shadow_frag,\n    shadow_vert: shadow_vert\n};\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n */\nvar ShaderLib = {\n    basic: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.fog\n        ]),\n        vertexShader: ShaderChunk.meshbasic_vert,\n        fragmentShader: ShaderChunk.meshbasic_frag\n    },\n    lambert: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color(0x000000) }\n            }\n        ]),\n        vertexShader: ShaderChunk.meshlambert_vert,\n        fragmentShader: ShaderChunk.meshlambert_frag\n    },\n    phong: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.specularmap,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.gradientmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color(0x000000) },\n                specular: { value: new Color(0x111111) },\n                shininess: { value: 30 }\n            }\n        ]),\n        vertexShader: ShaderChunk.meshphong_vert,\n        fragmentShader: ShaderChunk.meshphong_frag\n    },\n    standard: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.envmap,\n            UniformsLib.aomap,\n            UniformsLib.lightmap,\n            UniformsLib.emissivemap,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            UniformsLib.roughnessmap,\n            UniformsLib.metalnessmap,\n            UniformsLib.fog,\n            UniformsLib.lights,\n            {\n                emissive: { value: new Color(0x000000) },\n                roughness: { value: 0.5 },\n                metalness: { value: 0.5 },\n                envMapIntensity: { value: 1 } // temporary\n            }\n        ]),\n        vertexShader: ShaderChunk.meshphysical_vert,\n        fragmentShader: ShaderChunk.meshphysical_frag\n    },\n    points: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.points,\n            UniformsLib.fog\n        ]),\n        vertexShader: ShaderChunk.points_vert,\n        fragmentShader: ShaderChunk.points_frag\n    },\n    dashed: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.fog,\n            {\n                scale: { value: 1 },\n                dashSize: { value: 1 },\n                totalSize: { value: 2 }\n            }\n        ]),\n        vertexShader: ShaderChunk.linedashed_vert,\n        fragmentShader: ShaderChunk.linedashed_frag\n    },\n    depth: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.displacementmap\n        ]),\n        vertexShader: ShaderChunk.depth_vert,\n        fragmentShader: ShaderChunk.depth_frag\n    },\n    normal: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.bumpmap,\n            UniformsLib.normalmap,\n            UniformsLib.displacementmap,\n            {\n                opacity: { value: 1.0 }\n            }\n        ]),\n        vertexShader: ShaderChunk.normal_vert,\n        fragmentShader: ShaderChunk.normal_frag\n    },\n    /* -------------------------------------------------------------------------\n    //\tCube map shader\n     ------------------------------------------------------------------------- */\n    cube: {\n        uniforms: {\n            tCube: { value: null },\n            tFlip: { value: -1 },\n            opacity: { value: 1.0 }\n        },\n        vertexShader: ShaderChunk.cube_vert,\n        fragmentShader: ShaderChunk.cube_frag\n    },\n    equirect: {\n        uniforms: {\n            tEquirect: { value: null },\n        },\n        vertexShader: ShaderChunk.equirect_vert,\n        fragmentShader: ShaderChunk.equirect_frag\n    },\n    distanceRGBA: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.common,\n            UniformsLib.displacementmap,\n            {\n                referencePosition: { value: new Vector3() },\n                nearDistance: { value: 1 },\n                farDistance: { value: 1000 }\n            }\n        ]),\n        vertexShader: ShaderChunk.distanceRGBA_vert,\n        fragmentShader: ShaderChunk.distanceRGBA_frag\n    },\n    shadow: {\n        uniforms: UniformsUtils.merge([\n            UniformsLib.lights,\n            UniformsLib.fog,\n            {\n                color: { value: new Color(0x00000) },\n                opacity: { value: 1.0 }\n            },\n        ]),\n        vertexShader: ShaderChunk.shadow_vert,\n        fragmentShader: ShaderChunk.shadow_frag\n    }\n};\nShaderLib.physical = {\n    uniforms: UniformsUtils.merge([\n        ShaderLib.standard.uniforms,\n        {\n            clearCoat: { value: 0 },\n            clearCoatRoughness: { value: 0 }\n        }\n    ]),\n    vertexShader: ShaderChunk.meshphysical_vert,\n    fragmentShader: ShaderChunk.meshphysical_frag\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n    Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n    this.needsUpdate = true;\n}\nCanvasTexture.prototype = Object.create(Texture.prototype);\nCanvasTexture.prototype.constructor = CanvasTexture;\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\nfunction WebGLSpriteRenderer(renderer, gl, state, textures, capabilities) {\n    var vertexBuffer, elementBuffer;\n    var program, attributes, uniforms;\n    var texture;\n    // decompose matrixWorld\n    var spritePosition = new Vector3();\n    var spriteRotation = new Quaternion();\n    var spriteScale = new Vector3();\n    function init() {\n        var vertices = new Float32Array([\n            -0.5, -0.5, 0, 0,\n            0.5, -0.5, 1, 0,\n            0.5, 0.5, 1, 1,\n            -0.5, 0.5, 0, 1\n        ]);\n        var faces = new Uint16Array([\n            0, 1, 2,\n            0, 2, 3\n        ]);\n        vertexBuffer = gl.createBuffer();\n        elementBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW);\n        program = createProgram();\n        attributes = {\n            position: gl.getAttribLocation(program, 'position'),\n            uv: gl.getAttribLocation(program, 'uv')\n        };\n        uniforms = {\n            uvOffset: gl.getUniformLocation(program, 'uvOffset'),\n            uvScale: gl.getUniformLocation(program, 'uvScale'),\n            rotation: gl.getUniformLocation(program, 'rotation'),\n            center: gl.getUniformLocation(program, 'center'),\n            scale: gl.getUniformLocation(program, 'scale'),\n            color: gl.getUniformLocation(program, 'color'),\n            map: gl.getUniformLocation(program, 'map'),\n            opacity: gl.getUniformLocation(program, 'opacity'),\n            modelViewMatrix: gl.getUniformLocation(program, 'modelViewMatrix'),\n            projectionMatrix: gl.getUniformLocation(program, 'projectionMatrix'),\n            fogType: gl.getUniformLocation(program, 'fogType'),\n            fogDensity: gl.getUniformLocation(program, 'fogDensity'),\n            fogNear: gl.getUniformLocation(program, 'fogNear'),\n            fogFar: gl.getUniformLocation(program, 'fogFar'),\n            fogColor: gl.getUniformLocation(program, 'fogColor'),\n            fogDepth: gl.getUniformLocation(program, 'fogDepth'),\n            alphaTest: gl.getUniformLocation(program, 'alphaTest')\n        };\n        var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n        canvas.width = 8;\n        canvas.height = 8;\n        var context = canvas.getContext('2d');\n        context.fillStyle = 'white';\n        context.fillRect(0, 0, 8, 8);\n        texture = new CanvasTexture(canvas);\n    }\n    this.render = function (sprites, scene, camera) {\n        if (sprites.length === 0)\n            return;\n        // setup gl\n        if (program === undefined) {\n            init();\n        }\n        state.useProgram(program);\n        state.initAttributes();\n        state.enableAttribute(attributes.position);\n        state.enableAttribute(attributes.uv);\n        state.disableUnusedAttributes();\n        state.disable(gl.CULL_FACE);\n        state.enable(gl.BLEND);\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n        gl.vertexAttribPointer(attributes.position, 2, gl.FLOAT, false, 2 * 8, 0);\n        gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n        gl.uniformMatrix4fv(uniforms.projectionMatrix, false, camera.projectionMatrix.elements);\n        state.activeTexture(gl.TEXTURE0);\n        gl.uniform1i(uniforms.map, 0);\n        var oldFogType = 0;\n        var sceneFogType = 0;\n        var fog = scene.fog;\n        if (fog) {\n            gl.uniform3f(uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b);\n            if (fog.isFog) {\n                gl.uniform1f(uniforms.fogNear, fog.near);\n                gl.uniform1f(uniforms.fogFar, fog.far);\n                gl.uniform1i(uniforms.fogType, 1);\n                oldFogType = 1;\n                sceneFogType = 1;\n            }\n            else if (fog.isFogExp2) {\n                gl.uniform1f(uniforms.fogDensity, fog.density);\n                gl.uniform1i(uniforms.fogType, 2);\n                oldFogType = 2;\n                sceneFogType = 2;\n            }\n        }\n        else {\n            gl.uniform1i(uniforms.fogType, 0);\n            oldFogType = 0;\n            sceneFogType = 0;\n        }\n        // update positions and sort\n        for (var i = 0, l = sprites.length; i < l; i++) {\n            var sprite = sprites[i];\n            sprite.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, sprite.matrixWorld);\n            sprite.z = -sprite.modelViewMatrix.elements[14];\n        }\n        sprites.sort(painterSortStable);\n        // render all sprites\n        var scale = [];\n        var center = [];\n        for (var i = 0, l = sprites.length; i < l; i++) {\n            var sprite = sprites[i];\n            var material = sprite.material;\n            if (material.visible === false)\n                continue;\n            sprite.onBeforeRender(renderer, scene, camera, undefined, material, undefined);\n            gl.uniform1f(uniforms.alphaTest, material.alphaTest);\n            gl.uniformMatrix4fv(uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements);\n            sprite.matrixWorld.decompose(spritePosition, spriteRotation, spriteScale);\n            scale[0] = spriteScale.x;\n            scale[1] = spriteScale.y;\n            center[0] = sprite.center.x - 0.5;\n            center[1] = sprite.center.y - 0.5;\n            var fogType = 0;\n            if (scene.fog && material.fog) {\n                fogType = sceneFogType;\n            }\n            if (oldFogType !== fogType) {\n                gl.uniform1i(uniforms.fogType, fogType);\n                oldFogType = fogType;\n            }\n            if (material.map !== null) {\n                gl.uniform2f(uniforms.uvOffset, material.map.offset.x, material.map.offset.y);\n                gl.uniform2f(uniforms.uvScale, material.map.repeat.x, material.map.repeat.y);\n            }\n            else {\n                gl.uniform2f(uniforms.uvOffset, 0, 0);\n                gl.uniform2f(uniforms.uvScale, 1, 1);\n            }\n            gl.uniform1f(uniforms.opacity, material.opacity);\n            gl.uniform3f(uniforms.color, material.color.r, material.color.g, material.color.b);\n            gl.uniform1f(uniforms.rotation, material.rotation);\n            gl.uniform2fv(uniforms.center, center);\n            gl.uniform2fv(uniforms.scale, scale);\n            state.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n            state.buffers.depth.setTest(material.depthTest);\n            state.buffers.depth.setMask(material.depthWrite);\n            state.buffers.color.setMask(material.colorWrite);\n            textures.setTexture2D(material.map || texture, 0);\n            gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n            sprite.onAfterRender(renderer, scene, camera, undefined, material, undefined);\n        }\n        // restore gl\n        state.enable(gl.CULL_FACE);\n        state.reset();\n    };\n    function createProgram() {\n        var program = gl.createProgram();\n        var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(vertexShader, [\n            'precision ' + capabilities.precision + ' float;',\n            '#define SHADER_NAME ' + 'SpriteMaterial',\n            'uniform mat4 modelViewMatrix;',\n            'uniform mat4 projectionMatrix;',\n            'uniform float rotation;',\n            'uniform vec2 center;',\n            'uniform vec2 scale;',\n            'uniform vec2 uvOffset;',\n            'uniform vec2 uvScale;',\n            'attribute vec2 position;',\n            'attribute vec2 uv;',\n            'varying vec2 vUV;',\n            'varying float fogDepth;',\n            'void main() {',\n            '\tvUV = uvOffset + uv * uvScale;',\n            '\tvec2 alignedPosition = ( position - center ) * scale;',\n            '\tvec2 rotatedPosition;',\n            '\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\n            '\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\n            '\tvec4 mvPosition;',\n            '\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\n            '\tmvPosition.xy += rotatedPosition;',\n            '\tgl_Position = projectionMatrix * mvPosition;',\n            '\tfogDepth = - mvPosition.z;',\n            '}'\n        ].join('\\n'));\n        gl.shaderSource(fragmentShader, [\n            'precision ' + capabilities.precision + ' float;',\n            '#define SHADER_NAME ' + 'SpriteMaterial',\n            'uniform vec3 color;',\n            'uniform sampler2D map;',\n            'uniform float opacity;',\n            'uniform int fogType;',\n            'uniform vec3 fogColor;',\n            'uniform float fogDensity;',\n            'uniform float fogNear;',\n            'uniform float fogFar;',\n            'uniform float alphaTest;',\n            'varying vec2 vUV;',\n            'varying float fogDepth;',\n            'void main() {',\n            '\tvec4 texture = texture2D( map, vUV );',\n            '\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\n            '\tif ( gl_FragColor.a < alphaTest ) discard;',\n            '\tif ( fogType > 0 ) {',\n            '\t\tfloat fogFactor = 0.0;',\n            '\t\tif ( fogType == 1 ) {',\n            '\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n            '\t\t} else {',\n            '\t\t\tconst float LOG2 = 1.442695;',\n            '\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',\n            '\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\n            '\t\t}',\n            '\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',\n            '\t}',\n            '}'\n        ].join('\\n'));\n        gl.compileShader(vertexShader);\n        gl.compileShader(fragmentShader);\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.linkProgram(program);\n        return program;\n    }\n    function painterSortStable(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        else if (a.z !== b.z) {\n            return b.z - a.z;\n        }\n        else {\n            return b.id - a.id;\n        }\n    }\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\nvar materialId = 0;\nfunction Material() {\n    Object.defineProperty(this, 'id', { value: materialId++ });\n    this.uuid = _Math.generateUUID();\n    this.name = '';\n    this.type = 'Material';\n    this.fog = true;\n    this.lights = true;\n    this.blending = NormalBlending;\n    this.side = FrontSide;\n    this.flatShading = false;\n    this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n    this.opacity = 1;\n    this.transparent = false;\n    this.blendSrc = SrcAlphaFactor;\n    this.blendDst = OneMinusSrcAlphaFactor;\n    this.blendEquation = AddEquation;\n    this.blendSrcAlpha = null;\n    this.blendDstAlpha = null;\n    this.blendEquationAlpha = null;\n    this.depthFunc = LessEqualDepth;\n    this.depthTest = true;\n    this.depthWrite = true;\n    this.clippingPlanes = null;\n    this.clipIntersection = false;\n    this.clipShadows = false;\n    this.shadowSide = null;\n    this.colorWrite = true;\n    this.precision = null; // override the renderer's default precision for this material\n    this.polygonOffset = false;\n    this.polygonOffsetFactor = 0;\n    this.polygonOffsetUnits = 0;\n    this.dithering = false;\n    this.alphaTest = 0;\n    this.premultipliedAlpha = false;\n    this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n    this.visible = true;\n    this.userData = {};\n    this.needsUpdate = true;\n}\nMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: Material,\n    isMaterial: true,\n    onBeforeCompile: function () { },\n    setValues: function (values) {\n        if (values === undefined)\n            return;\n        for (var key in values) {\n            var newValue = values[key];\n            if (newValue === undefined) {\n                console.warn(\"THREE.Material: '\" + key + \"' parameter is undefined.\");\n                continue;\n            }\n            // for backward compatability if shading is set in the constructor\n            if (key === 'shading') {\n                console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n                this.flatShading = (newValue === FlatShading) ? true : false;\n                continue;\n            }\n            var currentValue = this[key];\n            if (currentValue === undefined) {\n                console.warn(\"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\");\n                continue;\n            }\n            if (currentValue && currentValue.isColor) {\n                currentValue.set(newValue);\n            }\n            else if ((currentValue && currentValue.isVector3) && (newValue && newValue.isVector3)) {\n                currentValue.copy(newValue);\n            }\n            else if (key === 'overdraw') {\n                // ensure overdraw is backwards-compatible with legacy boolean type\n                this[key] = Number(newValue);\n            }\n            else {\n                this[key] = newValue;\n            }\n        }\n    },\n    toJSON: function (meta) {\n        var isRoot = (meta === undefined || typeof meta === 'string');\n        if (isRoot) {\n            meta = {\n                textures: {},\n                images: {}\n            };\n        }\n        var data = {\n            metadata: {\n                version: 4.5,\n                type: 'Material',\n                generator: 'Material.toJSON'\n            }\n        };\n        // standard Material serialization\n        data.uuid = this.uuid;\n        data.type = this.type;\n        if (this.name !== '')\n            data.name = this.name;\n        if (this.color && this.color.isColor)\n            data.color = this.color.getHex();\n        if (this.roughness !== undefined)\n            data.roughness = this.roughness;\n        if (this.metalness !== undefined)\n            data.metalness = this.metalness;\n        if (this.emissive && this.emissive.isColor)\n            data.emissive = this.emissive.getHex();\n        if (this.emissiveIntensity !== 1)\n            data.emissiveIntensity = this.emissiveIntensity;\n        if (this.specular && this.specular.isColor)\n            data.specular = this.specular.getHex();\n        if (this.shininess !== undefined)\n            data.shininess = this.shininess;\n        if (this.clearCoat !== undefined)\n            data.clearCoat = this.clearCoat;\n        if (this.clearCoatRoughness !== undefined)\n            data.clearCoatRoughness = this.clearCoatRoughness;\n        if (this.map && this.map.isTexture)\n            data.map = this.map.toJSON(meta).uuid;\n        if (this.alphaMap && this.alphaMap.isTexture)\n            data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n        if (this.lightMap && this.lightMap.isTexture)\n            data.lightMap = this.lightMap.toJSON(meta).uuid;\n        if (this.bumpMap && this.bumpMap.isTexture) {\n            data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n            data.bumpScale = this.bumpScale;\n        }\n        if (this.normalMap && this.normalMap.isTexture) {\n            data.normalMap = this.normalMap.toJSON(meta).uuid;\n            data.normalScale = this.normalScale.toArray();\n        }\n        if (this.displacementMap && this.displacementMap.isTexture) {\n            data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n            data.displacementScale = this.displacementScale;\n            data.displacementBias = this.displacementBias;\n        }\n        if (this.roughnessMap && this.roughnessMap.isTexture)\n            data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n        if (this.metalnessMap && this.metalnessMap.isTexture)\n            data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n        if (this.emissiveMap && this.emissiveMap.isTexture)\n            data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n        if (this.specularMap && this.specularMap.isTexture)\n            data.specularMap = this.specularMap.toJSON(meta).uuid;\n        if (this.envMap && this.envMap.isTexture) {\n            data.envMap = this.envMap.toJSON(meta).uuid;\n            data.reflectivity = this.reflectivity; // Scale behind envMap\n        }\n        if (this.gradientMap && this.gradientMap.isTexture) {\n            data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n        }\n        if (this.size !== undefined)\n            data.size = this.size;\n        if (this.sizeAttenuation !== undefined)\n            data.sizeAttenuation = this.sizeAttenuation;\n        if (this.blending !== NormalBlending)\n            data.blending = this.blending;\n        if (this.flatShading === true)\n            data.flatShading = this.flatShading;\n        if (this.side !== FrontSide)\n            data.side = this.side;\n        if (this.vertexColors !== NoColors)\n            data.vertexColors = this.vertexColors;\n        if (this.opacity < 1)\n            data.opacity = this.opacity;\n        if (this.transparent === true)\n            data.transparent = this.transparent;\n        data.depthFunc = this.depthFunc;\n        data.depthTest = this.depthTest;\n        data.depthWrite = this.depthWrite;\n        // rotation (SpriteMaterial)\n        if (this.rotation !== 0)\n            data.rotation = this.rotation;\n        if (this.linewidth !== 1)\n            data.linewidth = this.linewidth;\n        if (this.dashSize !== undefined)\n            data.dashSize = this.dashSize;\n        if (this.gapSize !== undefined)\n            data.gapSize = this.gapSize;\n        if (this.scale !== undefined)\n            data.scale = this.scale;\n        if (this.dithering === true)\n            data.dithering = true;\n        if (this.alphaTest > 0)\n            data.alphaTest = this.alphaTest;\n        if (this.premultipliedAlpha === true)\n            data.premultipliedAlpha = this.premultipliedAlpha;\n        if (this.wireframe === true)\n            data.wireframe = this.wireframe;\n        if (this.wireframeLinewidth > 1)\n            data.wireframeLinewidth = this.wireframeLinewidth;\n        if (this.wireframeLinecap !== 'round')\n            data.wireframeLinecap = this.wireframeLinecap;\n        if (this.wireframeLinejoin !== 'round')\n            data.wireframeLinejoin = this.wireframeLinejoin;\n        if (this.morphTargets === true)\n            data.morphTargets = true;\n        if (this.skinning === true)\n            data.skinning = true;\n        if (this.visible === false)\n            data.visible = false;\n        if (JSON.stringify(this.userData) !== '{}')\n            data.userData = this.userData;\n        // TODO: Copied from Object3D.toJSON\n        function extractFromCache(cache) {\n            var values = [];\n            for (var key in cache) {\n                var data = cache[key];\n                delete data.metadata;\n                values.push(data);\n            }\n            return values;\n        }\n        if (isRoot) {\n            var textures = extractFromCache(meta.textures);\n            var images = extractFromCache(meta.images);\n            if (textures.length > 0)\n                data.textures = textures;\n            if (images.length > 0)\n                data.images = images;\n        }\n        return data;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (source) {\n        this.name = source.name;\n        this.fog = source.fog;\n        this.lights = source.lights;\n        this.blending = source.blending;\n        this.side = source.side;\n        this.flatShading = source.flatShading;\n        this.vertexColors = source.vertexColors;\n        this.opacity = source.opacity;\n        this.transparent = source.transparent;\n        this.blendSrc = source.blendSrc;\n        this.blendDst = source.blendDst;\n        this.blendEquation = source.blendEquation;\n        this.blendSrcAlpha = source.blendSrcAlpha;\n        this.blendDstAlpha = source.blendDstAlpha;\n        this.blendEquationAlpha = source.blendEquationAlpha;\n        this.depthFunc = source.depthFunc;\n        this.depthTest = source.depthTest;\n        this.depthWrite = source.depthWrite;\n        this.colorWrite = source.colorWrite;\n        this.precision = source.precision;\n        this.polygonOffset = source.polygonOffset;\n        this.polygonOffsetFactor = source.polygonOffsetFactor;\n        this.polygonOffsetUnits = source.polygonOffsetUnits;\n        this.dithering = source.dithering;\n        this.alphaTest = source.alphaTest;\n        this.premultipliedAlpha = source.premultipliedAlpha;\n        this.overdraw = source.overdraw;\n        this.visible = source.visible;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        this.clipShadows = source.clipShadows;\n        this.clipIntersection = source.clipIntersection;\n        var srcPlanes = source.clippingPlanes, dstPlanes = null;\n        if (srcPlanes !== null) {\n            var n = srcPlanes.length;\n            dstPlanes = new Array(n);\n            for (var i = 0; i !== n; ++i)\n                dstPlanes[i] = srcPlanes[i].clone();\n        }\n        this.clippingPlanes = dstPlanes;\n        this.shadowSide = source.shadowSide;\n        return this;\n    },\n    dispose: function () {\n        this.dispatchEvent({ type: 'dispose' });\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / https://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\nfunction MeshDepthMaterial(parameters) {\n    Material.call(this);\n    this.type = 'MeshDepthMaterial';\n    this.depthPacking = BasicDepthPacking;\n    this.skinning = false;\n    this.morphTargets = false;\n    this.map = null;\n    this.alphaMap = null;\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.fog = false;\n    this.lights = false;\n    this.setValues(parameters);\n}\nMeshDepthMaterial.prototype = Object.create(Material.prototype);\nMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\nMeshDepthMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.depthPacking = source.depthPacking;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    return this;\n};\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *\n *  referencePosition: <float>,\n *  nearDistance: <float>,\n *  farDistance: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>\n *\n * }\n */\nfunction MeshDistanceMaterial(parameters) {\n    Material.call(this);\n    this.type = 'MeshDistanceMaterial';\n    this.referencePosition = new Vector3();\n    this.nearDistance = 1;\n    this.farDistance = 1000;\n    this.skinning = false;\n    this.morphTargets = false;\n    this.map = null;\n    this.alphaMap = null;\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n    this.fog = false;\n    this.lights = false;\n    this.setValues(parameters);\n}\nMeshDistanceMaterial.prototype = Object.create(Material.prototype);\nMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\nMeshDistanceMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.referencePosition.copy(source.referencePosition);\n    this.nearDistance = source.nearDistance;\n    this.farDistance = source.farDistance;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    return this;\n};\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction Box3(min, max) {\n    this.min = (min !== undefined) ? min : new Vector3(+Infinity, +Infinity, +Infinity);\n    this.max = (max !== undefined) ? max : new Vector3(-Infinity, -Infinity, -Infinity);\n}\nObject.assign(Box3.prototype, {\n    isBox3: true,\n    set: function (min, max) {\n        this.min.copy(min);\n        this.max.copy(max);\n        return this;\n    },\n    setFromArray: function (array) {\n        var minX = +Infinity;\n        var minY = +Infinity;\n        var minZ = +Infinity;\n        var maxX = -Infinity;\n        var maxY = -Infinity;\n        var maxZ = -Infinity;\n        for (var i = 0, l = array.length; i < l; i += 3) {\n            var x = array[i];\n            var y = array[i + 1];\n            var z = array[i + 2];\n            if (x < minX)\n                minX = x;\n            if (y < minY)\n                minY = y;\n            if (z < minZ)\n                minZ = z;\n            if (x > maxX)\n                maxX = x;\n            if (y > maxY)\n                maxY = y;\n            if (z > maxZ)\n                maxZ = z;\n        }\n        this.min.set(minX, minY, minZ);\n        this.max.set(maxX, maxY, maxZ);\n        return this;\n    },\n    setFromBufferAttribute: function (attribute) {\n        var minX = +Infinity;\n        var minY = +Infinity;\n        var minZ = +Infinity;\n        var maxX = -Infinity;\n        var maxY = -Infinity;\n        var maxZ = -Infinity;\n        for (var i = 0, l = attribute.count; i < l; i++) {\n            var x = attribute.getX(i);\n            var y = attribute.getY(i);\n            var z = attribute.getZ(i);\n            if (x < minX)\n                minX = x;\n            if (y < minY)\n                minY = y;\n            if (z < minZ)\n                minZ = z;\n            if (x > maxX)\n                maxX = x;\n            if (y > maxY)\n                maxY = y;\n            if (z > maxZ)\n                maxZ = z;\n        }\n        this.min.set(minX, minY, minZ);\n        this.max.set(maxX, maxY, maxZ);\n        return this;\n    },\n    setFromPoints: function (points) {\n        this.makeEmpty();\n        for (var i = 0, il = points.length; i < il; i++) {\n            this.expandByPoint(points[i]);\n        }\n        return this;\n    },\n    setFromCenterAndSize: function () {\n        var v1 = new Vector3();\n        return function setFromCenterAndSize(center, size) {\n            var halfSize = v1.copy(size).multiplyScalar(0.5);\n            this.min.copy(center).sub(halfSize);\n            this.max.copy(center).add(halfSize);\n            return this;\n        };\n    }(),\n    setFromObject: function (object) {\n        this.makeEmpty();\n        return this.expandByObject(object);\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (box) {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n        return this;\n    },\n    makeEmpty: function () {\n        this.min.x = this.min.y = this.min.z = +Infinity;\n        this.max.x = this.max.y = this.max.z = -Infinity;\n        return this;\n    },\n    isEmpty: function () {\n        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n        return (this.max.x < this.min.x) || (this.max.y < this.min.y) || (this.max.z < this.min.z);\n    },\n    getCenter: function (optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return this.isEmpty() ? result.set(0, 0, 0) : result.addVectors(this.min, this.max).multiplyScalar(0.5);\n    },\n    getSize: function (optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return this.isEmpty() ? result.set(0, 0, 0) : result.subVectors(this.max, this.min);\n    },\n    expandByPoint: function (point) {\n        this.min.min(point);\n        this.max.max(point);\n        return this;\n    },\n    expandByVector: function (vector) {\n        this.min.sub(vector);\n        this.max.add(vector);\n        return this;\n    },\n    expandByScalar: function (scalar) {\n        this.min.addScalar(-scalar);\n        this.max.addScalar(scalar);\n        return this;\n    },\n    expandByObject: function () {\n        // Computes the world-axis-aligned bounding box of an object (including its children),\n        // accounting for both the object's, and children's, world transforms\n        var scope, i, l;\n        var v1 = new Vector3();\n        function traverse(node) {\n            var geometry = node.geometry;\n            if (geometry !== undefined) {\n                if (geometry.isGeometry) {\n                    var vertices = geometry.vertices;\n                    for (i = 0, l = vertices.length; i < l; i++) {\n                        v1.copy(vertices[i]);\n                        v1.applyMatrix4(node.matrixWorld);\n                        scope.expandByPoint(v1);\n                    }\n                }\n                else if (geometry.isBufferGeometry) {\n                    var attribute = geometry.attributes.position;\n                    if (attribute !== undefined) {\n                        for (i = 0, l = attribute.count; i < l; i++) {\n                            v1.fromBufferAttribute(attribute, i).applyMatrix4(node.matrixWorld);\n                            scope.expandByPoint(v1);\n                        }\n                    }\n                }\n            }\n        }\n        return function expandByObject(object) {\n            scope = this;\n            object.updateMatrixWorld(true);\n            object.traverse(traverse);\n            return this;\n        };\n    }(),\n    containsPoint: function (point) {\n        return point.x < this.min.x || point.x > this.max.x ||\n            point.y < this.min.y || point.y > this.max.y ||\n            point.z < this.min.z || point.z > this.max.z ? false : true;\n    },\n    containsBox: function (box) {\n        return this.min.x <= box.min.x && box.max.x <= this.max.x &&\n            this.min.y <= box.min.y && box.max.y <= this.max.y &&\n            this.min.z <= box.min.z && box.max.z <= this.max.z;\n    },\n    getParameter: function (point, optionalTarget) {\n        // This can potentially have a divide by zero if the box\n        // has a size dimension of 0.\n        var result = optionalTarget || new Vector3();\n        return result.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n    },\n    intersectsBox: function (box) {\n        // using 6 splitting planes to rule out intersections.\n        return box.max.x < this.min.x || box.min.x > this.max.x ||\n            box.max.y < this.min.y || box.min.y > this.max.y ||\n            box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n    },\n    intersectsSphere: (function () {\n        var closestPoint = new Vector3();\n        return function intersectsSphere(sphere) {\n            // Find the point on the AABB closest to the sphere center.\n            this.clampPoint(sphere.center, closestPoint);\n            // If that point is inside the sphere, the AABB and sphere intersect.\n            return closestPoint.distanceToSquared(sphere.center) <= (sphere.radius * sphere.radius);\n        };\n    })(),\n    intersectsPlane: function (plane) {\n        // We compute the minimum and maximum dot product values. If those values\n        // are on the same side (back or front) of the plane, then there is no intersection.\n        var min, max;\n        if (plane.normal.x > 0) {\n            min = plane.normal.x * this.min.x;\n            max = plane.normal.x * this.max.x;\n        }\n        else {\n            min = plane.normal.x * this.max.x;\n            max = plane.normal.x * this.min.x;\n        }\n        if (plane.normal.y > 0) {\n            min += plane.normal.y * this.min.y;\n            max += plane.normal.y * this.max.y;\n        }\n        else {\n            min += plane.normal.y * this.max.y;\n            max += plane.normal.y * this.min.y;\n        }\n        if (plane.normal.z > 0) {\n            min += plane.normal.z * this.min.z;\n            max += plane.normal.z * this.max.z;\n        }\n        else {\n            min += plane.normal.z * this.max.z;\n            max += plane.normal.z * this.min.z;\n        }\n        return (min <= plane.constant && max >= plane.constant);\n    },\n    intersectsTriangle: (function () {\n        // triangle centered vertices\n        var v0 = new Vector3();\n        var v1 = new Vector3();\n        var v2 = new Vector3();\n        // triangle edge vectors\n        var f0 = new Vector3();\n        var f1 = new Vector3();\n        var f2 = new Vector3();\n        var testAxis = new Vector3();\n        var center = new Vector3();\n        var extents = new Vector3();\n        var triangleNormal = new Vector3();\n        function satForAxes(axes) {\n            var i, j;\n            for (i = 0, j = axes.length - 3; i <= j; i += 3) {\n                testAxis.fromArray(axes, i);\n                // project the aabb onto the seperating axis\n                var r = extents.x * Math.abs(testAxis.x) + extents.y * Math.abs(testAxis.y) + extents.z * Math.abs(testAxis.z);\n                // project all 3 vertices of the triangle onto the seperating axis\n                var p0 = v0.dot(testAxis);\n                var p1 = v1.dot(testAxis);\n                var p2 = v2.dot(testAxis);\n                // actual test, basically see if either of the most extreme of the triangle points intersects r\n                if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n                    // points of the projected triangle are outside the projected half-length of the aabb\n                    // the axis is seperating and we can exit\n                    return false;\n                }\n            }\n            return true;\n        }\n        return function intersectsTriangle(triangle) {\n            if (this.isEmpty()) {\n                return false;\n            }\n            // compute box center and extents\n            this.getCenter(center);\n            extents.subVectors(this.max, center);\n            // translate triangle to aabb origin\n            v0.subVectors(triangle.a, center);\n            v1.subVectors(triangle.b, center);\n            v2.subVectors(triangle.c, center);\n            // compute edge vectors for triangle\n            f0.subVectors(v1, v0);\n            f1.subVectors(v2, v1);\n            f2.subVectors(v0, v2);\n            // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n            // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n            // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n            var axes = [\n                0, -f0.z, f0.y, 0, -f1.z, f1.y, 0, -f2.z, f2.y,\n                f0.z, 0, -f0.x, f1.z, 0, -f1.x, f2.z, 0, -f2.x,\n                -f0.y, f0.x, 0, -f1.y, f1.x, 0, -f2.y, f2.x, 0\n            ];\n            if (!satForAxes(axes)) {\n                return false;\n            }\n            // test 3 face normals from the aabb\n            axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n            if (!satForAxes(axes)) {\n                return false;\n            }\n            // finally testing the face normal of the triangle\n            // use already existing triangle edge vectors here\n            triangleNormal.crossVectors(f0, f1);\n            axes = [triangleNormal.x, triangleNormal.y, triangleNormal.z];\n            return satForAxes(axes);\n        };\n    })(),\n    clampPoint: function (point, optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return result.copy(point).clamp(this.min, this.max);\n    },\n    distanceToPoint: function () {\n        var v1 = new Vector3();\n        return function distanceToPoint(point) {\n            var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n            return clampedPoint.sub(point).length();\n        };\n    }(),\n    getBoundingSphere: function () {\n        var v1 = new Vector3();\n        return function getBoundingSphere(optionalTarget) {\n            var result = optionalTarget || new Sphere();\n            this.getCenter(result.center);\n            result.radius = this.getSize(v1).length() * 0.5;\n            return result;\n        };\n    }(),\n    intersect: function (box) {\n        this.min.max(box.min);\n        this.max.min(box.max);\n        // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n        if (this.isEmpty())\n            this.makeEmpty();\n        return this;\n    },\n    union: function (box) {\n        this.min.min(box.min);\n        this.max.max(box.max);\n        return this;\n    },\n    applyMatrix4: function () {\n        var points = [\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3(),\n            new Vector3()\n        ];\n        return function applyMatrix4(matrix) {\n            // transform of empty box is an empty box.\n            if (this.isEmpty())\n                return this;\n            // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n            points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n            points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n            points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n            points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n            points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n            points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n            points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n            points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n            this.setFromPoints(points);\n            return this;\n        };\n    }(),\n    translate: function (offset) {\n        this.min.add(offset);\n        this.max.add(offset);\n        return this;\n    },\n    equals: function (box) {\n        return box.min.equals(this.min) && box.max.equals(this.max);\n    }\n});\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Sphere(center, radius) {\n    this.center = (center !== undefined) ? center : new Vector3();\n    this.radius = (radius !== undefined) ? radius : 0;\n}\nObject.assign(Sphere.prototype, {\n    set: function (center, radius) {\n        this.center.copy(center);\n        this.radius = radius;\n        return this;\n    },\n    setFromPoints: function () {\n        var box = new Box3();\n        return function setFromPoints(points, optionalCenter) {\n            var center = this.center;\n            if (optionalCenter !== undefined) {\n                center.copy(optionalCenter);\n            }\n            else {\n                box.setFromPoints(points).getCenter(center);\n            }\n            var maxRadiusSq = 0;\n            for (var i = 0, il = points.length; i < il; i++) {\n                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n            }\n            this.radius = Math.sqrt(maxRadiusSq);\n            return this;\n        };\n    }(),\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (sphere) {\n        this.center.copy(sphere.center);\n        this.radius = sphere.radius;\n        return this;\n    },\n    empty: function () {\n        return (this.radius <= 0);\n    },\n    containsPoint: function (point) {\n        return (point.distanceToSquared(this.center) <= (this.radius * this.radius));\n    },\n    distanceToPoint: function (point) {\n        return (point.distanceTo(this.center) - this.radius);\n    },\n    intersectsSphere: function (sphere) {\n        var radiusSum = this.radius + sphere.radius;\n        return sphere.center.distanceToSquared(this.center) <= (radiusSum * radiusSum);\n    },\n    intersectsBox: function (box) {\n        return box.intersectsSphere(this);\n    },\n    intersectsPlane: function (plane) {\n        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n    },\n    clampPoint: function (point, optionalTarget) {\n        var deltaLengthSq = this.center.distanceToSquared(point);\n        var result = optionalTarget || new Vector3();\n        result.copy(point);\n        if (deltaLengthSq > (this.radius * this.radius)) {\n            result.sub(this.center).normalize();\n            result.multiplyScalar(this.radius).add(this.center);\n        }\n        return result;\n    },\n    getBoundingBox: function (optionalTarget) {\n        var box = optionalTarget || new Box3();\n        box.set(this.center, this.center);\n        box.expandByScalar(this.radius);\n        return box;\n    },\n    applyMatrix4: function (matrix) {\n        this.center.applyMatrix4(matrix);\n        this.radius = this.radius * matrix.getMaxScaleOnAxis();\n        return this;\n    },\n    translate: function (offset) {\n        this.center.add(offset);\n        return this;\n    },\n    equals: function (sphere) {\n        return sphere.center.equals(this.center) && (sphere.radius === this.radius);\n    }\n});\n/**\n * @author bhouston / http://clara.io\n */\nfunction Plane(normal, constant) {\n    // normal is assumed to be normalized\n    this.normal = (normal !== undefined) ? normal : new Vector3(1, 0, 0);\n    this.constant = (constant !== undefined) ? constant : 0;\n}\nObject.assign(Plane.prototype, {\n    set: function (normal, constant) {\n        this.normal.copy(normal);\n        this.constant = constant;\n        return this;\n    },\n    setComponents: function (x, y, z, w) {\n        this.normal.set(x, y, z);\n        this.constant = w;\n        return this;\n    },\n    setFromNormalAndCoplanarPoint: function (normal, point) {\n        this.normal.copy(normal);\n        this.constant = -point.dot(this.normal);\n        return this;\n    },\n    setFromCoplanarPoints: function () {\n        var v1 = new Vector3();\n        var v2 = new Vector3();\n        return function setFromCoplanarPoints(a, b, c) {\n            var normal = v1.subVectors(c, b).cross(v2.subVectors(a, b)).normalize();\n            // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n            this.setFromNormalAndCoplanarPoint(normal, a);\n            return this;\n        };\n    }(),\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (plane) {\n        this.normal.copy(plane.normal);\n        this.constant = plane.constant;\n        return this;\n    },\n    normalize: function () {\n        // Note: will lead to a divide by zero if the plane is invalid.\n        var inverseNormalLength = 1.0 / this.normal.length();\n        this.normal.multiplyScalar(inverseNormalLength);\n        this.constant *= inverseNormalLength;\n        return this;\n    },\n    negate: function () {\n        this.constant *= -1;\n        this.normal.negate();\n        return this;\n    },\n    distanceToPoint: function (point) {\n        return this.normal.dot(point) + this.constant;\n    },\n    distanceToSphere: function (sphere) {\n        return this.distanceToPoint(sphere.center) - sphere.radius;\n    },\n    projectPoint: function (point, optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return result.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n    },\n    intersectLine: function () {\n        var v1 = new Vector3();\n        return function intersectLine(line, optionalTarget) {\n            var result = optionalTarget || new Vector3();\n            var direction = line.delta(v1);\n            var denominator = this.normal.dot(direction);\n            if (denominator === 0) {\n                // line is coplanar, return origin\n                if (this.distanceToPoint(line.start) === 0) {\n                    return result.copy(line.start);\n                }\n                // Unsure if this is the correct method to handle this case.\n                return undefined;\n            }\n            var t = -(line.start.dot(this.normal) + this.constant) / denominator;\n            if (t < 0 || t > 1) {\n                return undefined;\n            }\n            return result.copy(direction).multiplyScalar(t).add(line.start);\n        };\n    }(),\n    intersectsLine: function (line) {\n        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n        var startSign = this.distanceToPoint(line.start);\n        var endSign = this.distanceToPoint(line.end);\n        return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);\n    },\n    intersectsBox: function (box) {\n        return box.intersectsPlane(this);\n    },\n    intersectsSphere: function (sphere) {\n        return sphere.intersectsPlane(this);\n    },\n    coplanarPoint: function (optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return result.copy(this.normal).multiplyScalar(-this.constant);\n    },\n    applyMatrix4: function () {\n        var v1 = new Vector3();\n        var m1 = new Matrix3();\n        return function applyMatrix4(matrix, optionalNormalMatrix) {\n            var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix(matrix);\n            var referencePoint = this.coplanarPoint(v1).applyMatrix4(matrix);\n            var normal = this.normal.applyMatrix3(normalMatrix).normalize();\n            this.constant = -referencePoint.dot(normal);\n            return this;\n        };\n    }(),\n    translate: function (offset) {\n        this.constant -= offset.dot(this.normal);\n        return this;\n    },\n    equals: function (plane) {\n        return plane.normal.equals(this.normal) && (plane.constant === this.constant);\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\nfunction Frustum(p0, p1, p2, p3, p4, p5) {\n    this.planes = [\n        (p0 !== undefined) ? p0 : new Plane(),\n        (p1 !== undefined) ? p1 : new Plane(),\n        (p2 !== undefined) ? p2 : new Plane(),\n        (p3 !== undefined) ? p3 : new Plane(),\n        (p4 !== undefined) ? p4 : new Plane(),\n        (p5 !== undefined) ? p5 : new Plane()\n    ];\n}\nObject.assign(Frustum.prototype, {\n    set: function (p0, p1, p2, p3, p4, p5) {\n        var planes = this.planes;\n        planes[0].copy(p0);\n        planes[1].copy(p1);\n        planes[2].copy(p2);\n        planes[3].copy(p3);\n        planes[4].copy(p4);\n        planes[5].copy(p5);\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (frustum) {\n        var planes = this.planes;\n        for (var i = 0; i < 6; i++) {\n            planes[i].copy(frustum.planes[i]);\n        }\n        return this;\n    },\n    setFromMatrix: function (m) {\n        var planes = this.planes;\n        var me = m.elements;\n        var me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];\n        var me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];\n        var me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];\n        var me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];\n        planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n        planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n        planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n        planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n        planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n        planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n        return this;\n    },\n    intersectsObject: function () {\n        var sphere = new Sphere();\n        return function intersectsObject(object) {\n            var geometry = object.geometry;\n            if (geometry.boundingSphere === null)\n                geometry.computeBoundingSphere();\n            sphere.copy(geometry.boundingSphere)\n                .applyMatrix4(object.matrixWorld);\n            return this.intersectsSphere(sphere);\n        };\n    }(),\n    intersectsSprite: function () {\n        var sphere = new Sphere();\n        return function intersectsSprite(sprite) {\n            sphere.center.set(0, 0, 0);\n            sphere.radius = 0.7071067811865476;\n            sphere.applyMatrix4(sprite.matrixWorld);\n            return this.intersectsSphere(sphere);\n        };\n    }(),\n    intersectsSphere: function (sphere) {\n        var planes = this.planes;\n        var center = sphere.center;\n        var negRadius = -sphere.radius;\n        for (var i = 0; i < 6; i++) {\n            var distance = planes[i].distanceToPoint(center);\n            if (distance < negRadius) {\n                return false;\n            }\n        }\n        return true;\n    },\n    intersectsBox: function () {\n        var p1 = new Vector3(), p2 = new Vector3();\n        return function intersectsBox(box) {\n            var planes = this.planes;\n            for (var i = 0; i < 6; i++) {\n                var plane = planes[i];\n                p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n                p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n                p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n                p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n                p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n                p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n                var d1 = plane.distanceToPoint(p1);\n                var d2 = plane.distanceToPoint(p2);\n                // if both outside plane, no intersection\n                if (d1 < 0 && d2 < 0) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }(),\n    containsPoint: function (point) {\n        var planes = this.planes;\n        for (var i = 0; i < 6; i++) {\n            if (planes[i].distanceToPoint(point) < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLShadowMap(_renderer, _objects, maxTextureSize) {\n    var _frustum = new Frustum(), _projScreenMatrix = new Matrix4(), _shadowMapSize = new Vector2(), _maxShadowMapSize = new Vector2(maxTextureSize, maxTextureSize), _lookTarget = new Vector3(), _lightPositionWorld = new Vector3(), _MorphingFlag = 1, _SkinningFlag = 2, _NumberOfMaterialVariants = (_MorphingFlag | _SkinningFlag) + 1, _depthMaterials = new Array(_NumberOfMaterialVariants), _distanceMaterials = new Array(_NumberOfMaterialVariants), _materialCache = {};\n    var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n    var cubeDirections = [\n        new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1),\n        new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)\n    ];\n    var cubeUps = [\n        new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0),\n        new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)\n    ];\n    var cube2DViewPorts = [\n        new Vector4(), new Vector4(), new Vector4(),\n        new Vector4(), new Vector4(), new Vector4()\n    ];\n    // init\n    for (var i = 0; i !== _NumberOfMaterialVariants; ++i) {\n        var useMorphing = (i & _MorphingFlag) !== 0;\n        var useSkinning = (i & _SkinningFlag) !== 0;\n        var depthMaterial = new MeshDepthMaterial({\n            depthPacking: RGBADepthPacking,\n            morphTargets: useMorphing,\n            skinning: useSkinning\n        });\n        _depthMaterials[i] = depthMaterial;\n        //\n        var distanceMaterial = new MeshDistanceMaterial({\n            morphTargets: useMorphing,\n            skinning: useSkinning\n        });\n        _distanceMaterials[i] = distanceMaterial;\n    }\n    //\n    var scope = this;\n    this.enabled = false;\n    this.autoUpdate = true;\n    this.needsUpdate = false;\n    this.type = PCFShadowMap;\n    this.render = function (lights, scene, camera) {\n        if (scope.enabled === false)\n            return;\n        if (scope.autoUpdate === false && scope.needsUpdate === false)\n            return;\n        if (lights.length === 0)\n            return;\n        // TODO Clean up (needed in case of contextlost)\n        var _gl = _renderer.context;\n        var _state = _renderer.state;\n        // Set GL state for depth map.\n        _state.disable(_gl.BLEND);\n        _state.buffers.color.setClear(1, 1, 1, 1);\n        _state.buffers.depth.setTest(true);\n        _state.setScissorTest(false);\n        // render depth map\n        var faceCount;\n        for (var i = 0, il = lights.length; i < il; i++) {\n            var light = lights[i];\n            var shadow = light.shadow;\n            var isPointLight = light && light.isPointLight;\n            if (shadow === undefined) {\n                console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n                continue;\n            }\n            var shadowCamera = shadow.camera;\n            _shadowMapSize.copy(shadow.mapSize);\n            _shadowMapSize.min(_maxShadowMapSize);\n            if (isPointLight) {\n                var vpWidth = _shadowMapSize.x;\n                var vpHeight = _shadowMapSize.y;\n                // These viewports map a cube-map onto a 2D texture with the\n                // following orientation:\n                //\n                //  xzXZ\n                //   y Y\n                //\n                // X - Positive x direction\n                // x - Negative x direction\n                // Y - Positive y direction\n                // y - Negative y direction\n                // Z - Positive z direction\n                // z - Negative z direction\n                // positive X\n                cube2DViewPorts[0].set(vpWidth * 2, vpHeight, vpWidth, vpHeight);\n                // negative X\n                cube2DViewPorts[1].set(0, vpHeight, vpWidth, vpHeight);\n                // positive Z\n                cube2DViewPorts[2].set(vpWidth * 3, vpHeight, vpWidth, vpHeight);\n                // negative Z\n                cube2DViewPorts[3].set(vpWidth, vpHeight, vpWidth, vpHeight);\n                // positive Y\n                cube2DViewPorts[4].set(vpWidth * 3, 0, vpWidth, vpHeight);\n                // negative Y\n                cube2DViewPorts[5].set(vpWidth, 0, vpWidth, vpHeight);\n                _shadowMapSize.x *= 4.0;\n                _shadowMapSize.y *= 2.0;\n            }\n            if (shadow.map === null) {\n                var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n                shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n                shadow.map.texture.name = light.name + \".shadowMap\";\n                shadowCamera.updateProjectionMatrix();\n            }\n            if (shadow.isSpotLightShadow) {\n                shadow.update(light);\n            }\n            var shadowMap = shadow.map;\n            var shadowMatrix = shadow.matrix;\n            _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n            shadowCamera.position.copy(_lightPositionWorld);\n            if (isPointLight) {\n                faceCount = 6;\n                // for point lights we set the shadow matrix to be a translation-only matrix\n                // equal to inverse of the light's position\n                shadowMatrix.makeTranslation(-_lightPositionWorld.x, -_lightPositionWorld.y, -_lightPositionWorld.z);\n            }\n            else {\n                faceCount = 1;\n                _lookTarget.setFromMatrixPosition(light.target.matrixWorld);\n                shadowCamera.lookAt(_lookTarget);\n                shadowCamera.updateMatrixWorld();\n                // compute shadow matrix\n                shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n                shadowMatrix.multiply(shadowCamera.projectionMatrix);\n                shadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n            }\n            _renderer.setRenderTarget(shadowMap);\n            _renderer.clear();\n            // render shadow map for each cube face (if omni-directional) or\n            // run a single pass if not\n            for (var face = 0; face < faceCount; face++) {\n                if (isPointLight) {\n                    _lookTarget.copy(shadowCamera.position);\n                    _lookTarget.add(cubeDirections[face]);\n                    shadowCamera.up.copy(cubeUps[face]);\n                    shadowCamera.lookAt(_lookTarget);\n                    shadowCamera.updateMatrixWorld();\n                    var vpDimensions = cube2DViewPorts[face];\n                    _state.viewport(vpDimensions);\n                }\n                // update camera matrices and frustum\n                _projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n                _frustum.setFromMatrix(_projScreenMatrix);\n                // set object matrices & frustum culling\n                renderObject(scene, camera, shadowCamera, isPointLight);\n            }\n        }\n        scope.needsUpdate = false;\n    };\n    function getDepthMaterial(object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar) {\n        var geometry = object.geometry;\n        var result = null;\n        var materialVariants = _depthMaterials;\n        var customMaterial = object.customDepthMaterial;\n        if (isPointLight) {\n            materialVariants = _distanceMaterials;\n            customMaterial = object.customDistanceMaterial;\n        }\n        if (!customMaterial) {\n            var useMorphing = false;\n            if (material.morphTargets) {\n                if (geometry && geometry.isBufferGeometry) {\n                    useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n                }\n                else if (geometry && geometry.isGeometry) {\n                    useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n                }\n            }\n            if (object.isSkinnedMesh && material.skinning === false) {\n                console.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);\n            }\n            var useSkinning = object.isSkinnedMesh && material.skinning;\n            var variantIndex = 0;\n            if (useMorphing)\n                variantIndex |= _MorphingFlag;\n            if (useSkinning)\n                variantIndex |= _SkinningFlag;\n            result = materialVariants[variantIndex];\n        }\n        else {\n            result = customMaterial;\n        }\n        if (_renderer.localClippingEnabled &&\n            material.clipShadows === true &&\n            material.clippingPlanes.length !== 0) {\n            // in this case we need a unique material instance reflecting the\n            // appropriate state\n            var keyA = result.uuid, keyB = material.uuid;\n            var materialsForVariant = _materialCache[keyA];\n            if (materialsForVariant === undefined) {\n                materialsForVariant = {};\n                _materialCache[keyA] = materialsForVariant;\n            }\n            var cachedMaterial = materialsForVariant[keyB];\n            if (cachedMaterial === undefined) {\n                cachedMaterial = result.clone();\n                materialsForVariant[keyB] = cachedMaterial;\n            }\n            result = cachedMaterial;\n        }\n        result.visible = material.visible;\n        result.wireframe = material.wireframe;\n        result.side = (material.shadowSide != null) ? material.shadowSide : shadowSide[material.side];\n        result.clipShadows = material.clipShadows;\n        result.clippingPlanes = material.clippingPlanes;\n        result.clipIntersection = material.clipIntersection;\n        result.wireframeLinewidth = material.wireframeLinewidth;\n        result.linewidth = material.linewidth;\n        if (isPointLight && result.isMeshDistanceMaterial) {\n            result.referencePosition.copy(lightPositionWorld);\n            result.nearDistance = shadowCameraNear;\n            result.farDistance = shadowCameraFar;\n        }\n        return result;\n    }\n    function renderObject(object, camera, shadowCamera, isPointLight) {\n        if (object.visible === false)\n            return;\n        var visible = object.layers.test(camera.layers);\n        if (visible && (object.isMesh || object.isLine || object.isPoints)) {\n            if (object.castShadow && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n                object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n                var geometry = _objects.update(object);\n                var material = object.material;\n                if (Array.isArray(material)) {\n                    var groups = geometry.groups;\n                    for (var k = 0, kl = groups.length; k < kl; k++) {\n                        var group = groups[k];\n                        var groupMaterial = material[group.materialIndex];\n                        if (groupMaterial && groupMaterial.visible) {\n                            var depthMaterial = getDepthMaterial(object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far);\n                            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n                        }\n                    }\n                }\n                else if (material.visible) {\n                    var depthMaterial = getDepthMaterial(object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far);\n                    _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n                }\n            }\n        }\n        var children = object.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n            renderObject(children[i], camera, shadowCamera, isPointLight);\n        }\n    }\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLAttributes(gl) {\n    var buffers = {};\n    function createBuffer(attribute, bufferType) {\n        var array = attribute.array;\n        var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n        var buffer = gl.createBuffer();\n        gl.bindBuffer(bufferType, buffer);\n        gl.bufferData(bufferType, array, usage);\n        attribute.onUploadCallback();\n        var type = gl.FLOAT;\n        if (array instanceof Float32Array) {\n            type = gl.FLOAT;\n        }\n        else if (array instanceof Float64Array) {\n            console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n        }\n        else if (array instanceof Uint16Array) {\n            type = gl.UNSIGNED_SHORT;\n        }\n        else if (array instanceof Int16Array) {\n            type = gl.SHORT;\n        }\n        else if (array instanceof Uint32Array) {\n            type = gl.UNSIGNED_INT;\n        }\n        else if (array instanceof Int32Array) {\n            type = gl.INT;\n        }\n        else if (array instanceof Int8Array) {\n            type = gl.BYTE;\n        }\n        else if (array instanceof Uint8Array) {\n            type = gl.UNSIGNED_BYTE;\n        }\n        return {\n            buffer: buffer,\n            type: type,\n            bytesPerElement: array.BYTES_PER_ELEMENT,\n            version: attribute.version\n        };\n    }\n    function updateBuffer(buffer, attribute, bufferType) {\n        var array = attribute.array;\n        var updateRange = attribute.updateRange;\n        gl.bindBuffer(bufferType, buffer);\n        if (attribute.dynamic === false) {\n            gl.bufferData(bufferType, array, gl.STATIC_DRAW);\n        }\n        else if (updateRange.count === -1) {\n            // Not using update ranges\n            gl.bufferSubData(bufferType, 0, array);\n        }\n        else if (updateRange.count === 0) {\n            console.error('THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.');\n        }\n        else {\n            gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n            updateRange.count = -1; // reset range\n        }\n    }\n    //\n    function get(attribute) {\n        if (attribute.isInterleavedBufferAttribute)\n            attribute = attribute.data;\n        return buffers[attribute.uuid];\n    }\n    function remove(attribute) {\n        if (attribute.isInterleavedBufferAttribute)\n            attribute = attribute.data;\n        var data = buffers[attribute.uuid];\n        if (data) {\n            gl.deleteBuffer(data.buffer);\n            delete buffers[attribute.uuid];\n        }\n    }\n    function update(attribute, bufferType) {\n        if (attribute.isInterleavedBufferAttribute)\n            attribute = attribute.data;\n        var data = buffers[attribute.uuid];\n        if (data === undefined) {\n            buffers[attribute.uuid] = createBuffer(attribute, bufferType);\n        }\n        else if (data.version < attribute.version) {\n            updateBuffer(data.buffer, attribute, bufferType);\n            data.version = attribute.version;\n        }\n    }\n    return {\n        get: get,\n        remove: remove,\n        update: update\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\nfunction Euler(x, y, z, order) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._z = z || 0;\n    this._order = order || Euler.DefaultOrder;\n}\nEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\nEuler.DefaultOrder = 'XYZ';\nObject.defineProperties(Euler.prototype, {\n    x: {\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            this._x = value;\n            this.onChangeCallback();\n        }\n    },\n    y: {\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            this._y = value;\n            this.onChangeCallback();\n        }\n    },\n    z: {\n        get: function () {\n            return this._z;\n        },\n        set: function (value) {\n            this._z = value;\n            this.onChangeCallback();\n        }\n    },\n    order: {\n        get: function () {\n            return this._order;\n        },\n        set: function (value) {\n            this._order = value;\n            this.onChangeCallback();\n        }\n    }\n});\nObject.assign(Euler.prototype, {\n    isEuler: true,\n    set: function (x, y, z, order) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._order = order || this._order;\n        this.onChangeCallback();\n        return this;\n    },\n    clone: function () {\n        return new this.constructor(this._x, this._y, this._z, this._order);\n    },\n    copy: function (euler) {\n        this._x = euler._x;\n        this._y = euler._y;\n        this._z = euler._z;\n        this._order = euler._order;\n        this.onChangeCallback();\n        return this;\n    },\n    setFromRotationMatrix: function (m, order, update) {\n        var clamp = _Math.clamp;\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n        var te = m.elements;\n        var m11 = te[0], m12 = te[4], m13 = te[8];\n        var m21 = te[1], m22 = te[5], m23 = te[9];\n        var m31 = te[2], m32 = te[6], m33 = te[10];\n        order = order || this._order;\n        if (order === 'XYZ') {\n            this._y = Math.asin(clamp(m13, -1, 1));\n            if (Math.abs(m13) < 0.99999) {\n                this._x = Math.atan2(-m23, m33);\n                this._z = Math.atan2(-m12, m11);\n            }\n            else {\n                this._x = Math.atan2(m32, m22);\n                this._z = 0;\n            }\n        }\n        else if (order === 'YXZ') {\n            this._x = Math.asin(-clamp(m23, -1, 1));\n            if (Math.abs(m23) < 0.99999) {\n                this._y = Math.atan2(m13, m33);\n                this._z = Math.atan2(m21, m22);\n            }\n            else {\n                this._y = Math.atan2(-m31, m11);\n                this._z = 0;\n            }\n        }\n        else if (order === 'ZXY') {\n            this._x = Math.asin(clamp(m32, -1, 1));\n            if (Math.abs(m32) < 0.99999) {\n                this._y = Math.atan2(-m31, m33);\n                this._z = Math.atan2(-m12, m22);\n            }\n            else {\n                this._y = 0;\n                this._z = Math.atan2(m21, m11);\n            }\n        }\n        else if (order === 'ZYX') {\n            this._y = Math.asin(-clamp(m31, -1, 1));\n            if (Math.abs(m31) < 0.99999) {\n                this._x = Math.atan2(m32, m33);\n                this._z = Math.atan2(m21, m11);\n            }\n            else {\n                this._x = 0;\n                this._z = Math.atan2(-m12, m22);\n            }\n        }\n        else if (order === 'YZX') {\n            this._z = Math.asin(clamp(m21, -1, 1));\n            if (Math.abs(m21) < 0.99999) {\n                this._x = Math.atan2(-m23, m22);\n                this._y = Math.atan2(-m31, m11);\n            }\n            else {\n                this._x = 0;\n                this._y = Math.atan2(m13, m33);\n            }\n        }\n        else if (order === 'XZY') {\n            this._z = Math.asin(-clamp(m12, -1, 1));\n            if (Math.abs(m12) < 0.99999) {\n                this._x = Math.atan2(m32, m22);\n                this._y = Math.atan2(m13, m11);\n            }\n            else {\n                this._x = Math.atan2(-m23, m33);\n                this._y = 0;\n            }\n        }\n        else {\n            console.warn('THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order);\n        }\n        this._order = order;\n        if (update !== false)\n            this.onChangeCallback();\n        return this;\n    },\n    setFromQuaternion: function () {\n        var matrix = new Matrix4();\n        return function setFromQuaternion(q, order, update) {\n            matrix.makeRotationFromQuaternion(q);\n            return this.setFromRotationMatrix(matrix, order, update);\n        };\n    }(),\n    setFromVector3: function (v, order) {\n        return this.set(v.x, v.y, v.z, order || this._order);\n    },\n    reorder: function () {\n        // WARNING: this discards revolution information -bhouston\n        var q = new Quaternion();\n        return function reorder(newOrder) {\n            q.setFromEuler(this);\n            return this.setFromQuaternion(q, newOrder);\n        };\n    }(),\n    equals: function (euler) {\n        return (euler._x === this._x) && (euler._y === this._y) && (euler._z === this._z) && (euler._order === this._order);\n    },\n    fromArray: function (array) {\n        this._x = array[0];\n        this._y = array[1];\n        this._z = array[2];\n        if (array[3] !== undefined)\n            this._order = array[3];\n        this.onChangeCallback();\n        return this;\n    },\n    toArray: function (array, offset) {\n        if (array === undefined)\n            array = [];\n        if (offset === undefined)\n            offset = 0;\n        array[offset] = this._x;\n        array[offset + 1] = this._y;\n        array[offset + 2] = this._z;\n        array[offset + 3] = this._order;\n        return array;\n    },\n    toVector3: function (optionalResult) {\n        if (optionalResult) {\n            return optionalResult.set(this._x, this._y, this._z);\n        }\n        else {\n            return new Vector3(this._x, this._y, this._z);\n        }\n    },\n    onChange: function (callback) {\n        this.onChangeCallback = callback;\n        return this;\n    },\n    onChangeCallback: function () { }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Layers() {\n    this.mask = 1 | 0;\n}\nObject.assign(Layers.prototype, {\n    set: function (channel) {\n        this.mask = 1 << channel | 0;\n    },\n    enable: function (channel) {\n        this.mask |= 1 << channel | 0;\n    },\n    toggle: function (channel) {\n        this.mask ^= 1 << channel | 0;\n    },\n    disable: function (channel) {\n        this.mask &= ~(1 << channel | 0);\n    },\n    test: function (layers) {\n        return (this.mask & layers.mask) !== 0;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author elephantatwork / www.elephantatwork.ch\n */\nvar object3DId = 0;\nfunction Object3D() {\n    Object.defineProperty(this, 'id', { value: object3DId++ });\n    this.uuid = _Math.generateUUID();\n    this.name = '';\n    this.type = 'Object3D';\n    this.parent = null;\n    this.children = [];\n    this.up = Object3D.DefaultUp.clone();\n    var position = new Vector3();\n    var rotation = new Euler();\n    var quaternion = new Quaternion();\n    var scale = new Vector3(1, 1, 1);\n    function onRotationChange() {\n        quaternion.setFromEuler(rotation, false);\n    }\n    function onQuaternionChange() {\n        rotation.setFromQuaternion(quaternion, undefined, false);\n    }\n    rotation.onChange(onRotationChange);\n    quaternion.onChange(onQuaternionChange);\n    Object.defineProperties(this, {\n        position: {\n            enumerable: true,\n            value: position\n        },\n        rotation: {\n            enumerable: true,\n            value: rotation\n        },\n        quaternion: {\n            enumerable: true,\n            value: quaternion\n        },\n        scale: {\n            enumerable: true,\n            value: scale\n        },\n        modelViewMatrix: {\n            value: new Matrix4()\n        },\n        normalMatrix: {\n            value: new Matrix3()\n        }\n    });\n    this.matrix = new Matrix4();\n    this.matrixWorld = new Matrix4();\n    this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    this.matrixWorldNeedsUpdate = false;\n    this.layers = new Layers();\n    this.visible = true;\n    this.castShadow = false;\n    this.receiveShadow = false;\n    this.frustumCulled = true;\n    this.renderOrder = 0;\n    this.userData = {};\n}\nObject3D.DefaultUp = new Vector3(0, 1, 0);\nObject3D.DefaultMatrixAutoUpdate = true;\nObject3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: Object3D,\n    isObject3D: true,\n    onBeforeRender: function () { },\n    onAfterRender: function () { },\n    applyMatrix: function (matrix) {\n        this.matrix.multiplyMatrices(matrix, this.matrix);\n        this.matrix.decompose(this.position, this.quaternion, this.scale);\n    },\n    applyQuaternion: function (q) {\n        this.quaternion.premultiply(q);\n        return this;\n    },\n    setRotationFromAxisAngle: function (axis, angle) {\n        // assumes axis is normalized\n        this.quaternion.setFromAxisAngle(axis, angle);\n    },\n    setRotationFromEuler: function (euler) {\n        this.quaternion.setFromEuler(euler, true);\n    },\n    setRotationFromMatrix: function (m) {\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n        this.quaternion.setFromRotationMatrix(m);\n    },\n    setRotationFromQuaternion: function (q) {\n        // assumes q is normalized\n        this.quaternion.copy(q);\n    },\n    rotateOnAxis: function () {\n        // rotate object on axis in object space\n        // axis is assumed to be normalized\n        var q1 = new Quaternion();\n        return function rotateOnAxis(axis, angle) {\n            q1.setFromAxisAngle(axis, angle);\n            this.quaternion.multiply(q1);\n            return this;\n        };\n    }(),\n    rotateOnWorldAxis: function () {\n        // rotate object on axis in world space\n        // axis is assumed to be normalized\n        // method assumes no rotated parent\n        var q1 = new Quaternion();\n        return function rotateOnWorldAxis(axis, angle) {\n            q1.setFromAxisAngle(axis, angle);\n            this.quaternion.premultiply(q1);\n            return this;\n        };\n    }(),\n    rotateX: function () {\n        var v1 = new Vector3(1, 0, 0);\n        return function rotateX(angle) {\n            return this.rotateOnAxis(v1, angle);\n        };\n    }(),\n    rotateY: function () {\n        var v1 = new Vector3(0, 1, 0);\n        return function rotateY(angle) {\n            return this.rotateOnAxis(v1, angle);\n        };\n    }(),\n    rotateZ: function () {\n        var v1 = new Vector3(0, 0, 1);\n        return function rotateZ(angle) {\n            return this.rotateOnAxis(v1, angle);\n        };\n    }(),\n    translateOnAxis: function () {\n        // translate object by distance along axis in object space\n        // axis is assumed to be normalized\n        var v1 = new Vector3();\n        return function translateOnAxis(axis, distance) {\n            v1.copy(axis).applyQuaternion(this.quaternion);\n            this.position.add(v1.multiplyScalar(distance));\n            return this;\n        };\n    }(),\n    translateX: function () {\n        var v1 = new Vector3(1, 0, 0);\n        return function translateX(distance) {\n            return this.translateOnAxis(v1, distance);\n        };\n    }(),\n    translateY: function () {\n        var v1 = new Vector3(0, 1, 0);\n        return function translateY(distance) {\n            return this.translateOnAxis(v1, distance);\n        };\n    }(),\n    translateZ: function () {\n        var v1 = new Vector3(0, 0, 1);\n        return function translateZ(distance) {\n            return this.translateOnAxis(v1, distance);\n        };\n    }(),\n    localToWorld: function (vector) {\n        return vector.applyMatrix4(this.matrixWorld);\n    },\n    worldToLocal: function () {\n        var m1 = new Matrix4();\n        return function worldToLocal(vector) {\n            return vector.applyMatrix4(m1.getInverse(this.matrixWorld));\n        };\n    }(),\n    lookAt: function () {\n        // This method does not support objects with rotated and/or translated parent(s)\n        var m1 = new Matrix4();\n        var vector = new Vector3();\n        return function lookAt(x, y, z) {\n            if (x.isVector3) {\n                vector.copy(x);\n            }\n            else {\n                vector.set(x, y, z);\n            }\n            if (this.isCamera) {\n                m1.lookAt(this.position, vector, this.up);\n            }\n            else {\n                m1.lookAt(vector, this.position, this.up);\n            }\n            this.quaternion.setFromRotationMatrix(m1);\n        };\n    }(),\n    add: function (object) {\n        if (arguments.length > 1) {\n            for (var i = 0; i < arguments.length; i++) {\n                this.add(arguments[i]);\n            }\n            return this;\n        }\n        if (object === this) {\n            console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\", object);\n            return this;\n        }\n        if ((object && object.isObject3D)) {\n            if (object.parent !== null) {\n                object.parent.remove(object);\n            }\n            object.parent = this;\n            object.dispatchEvent({ type: 'added' });\n            this.children.push(object);\n        }\n        else {\n            console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object);\n        }\n        return this;\n    },\n    remove: function (object) {\n        if (arguments.length > 1) {\n            for (var i = 0; i < arguments.length; i++) {\n                this.remove(arguments[i]);\n            }\n            return this;\n        }\n        var index = this.children.indexOf(object);\n        if (index !== -1) {\n            object.parent = null;\n            object.dispatchEvent({ type: 'removed' });\n            this.children.splice(index, 1);\n        }\n        return this;\n    },\n    getObjectById: function (id) {\n        return this.getObjectByProperty('id', id);\n    },\n    getObjectByName: function (name) {\n        return this.getObjectByProperty('name', name);\n    },\n    getObjectByProperty: function (name, value) {\n        if (this[name] === value)\n            return this;\n        for (var i = 0, l = this.children.length; i < l; i++) {\n            var child = this.children[i];\n            var object = child.getObjectByProperty(name, value);\n            if (object !== undefined) {\n                return object;\n            }\n        }\n        return undefined;\n    },\n    getWorldPosition: function (optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        this.updateMatrixWorld(true);\n        return result.setFromMatrixPosition(this.matrixWorld);\n    },\n    getWorldQuaternion: function () {\n        var position = new Vector3();\n        var scale = new Vector3();\n        return function getWorldQuaternion(optionalTarget) {\n            var result = optionalTarget || new Quaternion();\n            this.updateMatrixWorld(true);\n            this.matrixWorld.decompose(position, result, scale);\n            return result;\n        };\n    }(),\n    getWorldRotation: function () {\n        var quaternion = new Quaternion();\n        return function getWorldRotation(optionalTarget) {\n            var result = optionalTarget || new Euler();\n            this.getWorldQuaternion(quaternion);\n            return result.setFromQuaternion(quaternion, this.rotation.order, false);\n        };\n    }(),\n    getWorldScale: function () {\n        var position = new Vector3();\n        var quaternion = new Quaternion();\n        return function getWorldScale(optionalTarget) {\n            var result = optionalTarget || new Vector3();\n            this.updateMatrixWorld(true);\n            this.matrixWorld.decompose(position, quaternion, result);\n            return result;\n        };\n    }(),\n    getWorldDirection: function () {\n        var quaternion = new Quaternion();\n        return function getWorldDirection(optionalTarget) {\n            var result = optionalTarget || new Vector3();\n            this.getWorldQuaternion(quaternion);\n            return result.set(0, 0, 1).applyQuaternion(quaternion);\n        };\n    }(),\n    raycast: function () { },\n    traverse: function (callback) {\n        callback(this);\n        var children = this.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n            children[i].traverse(callback);\n        }\n    },\n    traverseVisible: function (callback) {\n        if (this.visible === false)\n            return;\n        callback(this);\n        var children = this.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n            children[i].traverseVisible(callback);\n        }\n    },\n    traverseAncestors: function (callback) {\n        var parent = this.parent;\n        if (parent !== null) {\n            callback(parent);\n            parent.traverseAncestors(callback);\n        }\n    },\n    updateMatrix: function () {\n        this.matrix.compose(this.position, this.quaternion, this.scale);\n        this.matrixWorldNeedsUpdate = true;\n    },\n    updateMatrixWorld: function (force) {\n        if (this.matrixAutoUpdate)\n            this.updateMatrix();\n        if (this.matrixWorldNeedsUpdate || force) {\n            if (this.parent === null) {\n                this.matrixWorld.copy(this.matrix);\n            }\n            else {\n                this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n            }\n            this.matrixWorldNeedsUpdate = false;\n            force = true;\n        }\n        // update children\n        var children = this.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n            children[i].updateMatrixWorld(force);\n        }\n    },\n    toJSON: function (meta) {\n        // meta is a string when called from JSON.stringify\n        var isRootObject = (meta === undefined || typeof meta === 'string');\n        var output = {};\n        // meta is a hash used to collect geometries, materials.\n        // not providing it implies that this is the root object\n        // being serialized.\n        if (isRootObject) {\n            // initialize meta obj\n            meta = {\n                geometries: {},\n                materials: {},\n                textures: {},\n                images: {},\n                shapes: {}\n            };\n            output.metadata = {\n                version: 4.5,\n                type: 'Object',\n                generator: 'Object3D.toJSON'\n            };\n        }\n        // standard Object3D serialization\n        var object = {};\n        object.uuid = this.uuid;\n        object.type = this.type;\n        if (this.name !== '')\n            object.name = this.name;\n        if (this.castShadow === true)\n            object.castShadow = true;\n        if (this.receiveShadow === true)\n            object.receiveShadow = true;\n        if (this.visible === false)\n            object.visible = false;\n        if (JSON.stringify(this.userData) !== '{}')\n            object.userData = this.userData;\n        object.matrix = this.matrix.toArray();\n        //\n        function serialize(library, element) {\n            if (library[element.uuid] === undefined) {\n                library[element.uuid] = element.toJSON(meta);\n            }\n            return element.uuid;\n        }\n        if (this.geometry !== undefined) {\n            object.geometry = serialize(meta.geometries, this.geometry);\n            var parameters = this.geometry.parameters;\n            if (parameters !== undefined && parameters.shapes !== undefined) {\n                var shapes = parameters.shapes;\n                if (Array.isArray(shapes)) {\n                    for (var i = 0, l = shapes.length; i < l; i++) {\n                        var shape = shapes[i];\n                        serialize(meta.shapes, shape);\n                    }\n                }\n                else {\n                    serialize(meta.shapes, shapes);\n                }\n            }\n        }\n        if (this.material !== undefined) {\n            if (Array.isArray(this.material)) {\n                var uuids = [];\n                for (var i = 0, l = this.material.length; i < l; i++) {\n                    uuids.push(serialize(meta.materials, this.material[i]));\n                }\n                object.material = uuids;\n            }\n            else {\n                object.material = serialize(meta.materials, this.material);\n            }\n        }\n        //\n        if (this.children.length > 0) {\n            object.children = [];\n            for (var i = 0; i < this.children.length; i++) {\n                object.children.push(this.children[i].toJSON(meta).object);\n            }\n        }\n        if (isRootObject) {\n            var geometries = extractFromCache(meta.geometries);\n            var materials = extractFromCache(meta.materials);\n            var textures = extractFromCache(meta.textures);\n            var images = extractFromCache(meta.images);\n            var shapes = extractFromCache(meta.shapes);\n            if (geometries.length > 0)\n                output.geometries = geometries;\n            if (materials.length > 0)\n                output.materials = materials;\n            if (textures.length > 0)\n                output.textures = textures;\n            if (images.length > 0)\n                output.images = images;\n            if (shapes.length > 0)\n                output.shapes = shapes;\n        }\n        output.object = object;\n        return output;\n        // extract data from the cache hash\n        // remove metadata on each item\n        // and return as array\n        function extractFromCache(cache) {\n            var values = [];\n            for (var key in cache) {\n                var data = cache[key];\n                delete data.metadata;\n                values.push(data);\n            }\n            return values;\n        }\n    },\n    clone: function (recursive) {\n        return new this.constructor().copy(this, recursive);\n    },\n    copy: function (source, recursive) {\n        if (recursive === undefined)\n            recursive = true;\n        this.name = source.name;\n        this.up.copy(source.up);\n        this.position.copy(source.position);\n        this.quaternion.copy(source.quaternion);\n        this.scale.copy(source.scale);\n        this.matrix.copy(source.matrix);\n        this.matrixWorld.copy(source.matrixWorld);\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n        this.layers.mask = source.layers.mask;\n        this.visible = source.visible;\n        this.castShadow = source.castShadow;\n        this.receiveShadow = source.receiveShadow;\n        this.frustumCulled = source.frustumCulled;\n        this.renderOrder = source.renderOrder;\n        this.userData = JSON.parse(JSON.stringify(source.userData));\n        if (recursive === true) {\n            for (var i = 0; i < source.children.length; i++) {\n                var child = source.children[i];\n                this.add(child.clone());\n            }\n        }\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\nfunction Camera() {\n    Object3D.call(this);\n    this.type = 'Camera';\n    this.matrixWorldInverse = new Matrix4();\n    this.projectionMatrix = new Matrix4();\n}\nCamera.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Camera,\n    isCamera: true,\n    copy: function (source, recursive) {\n        Object3D.prototype.copy.call(this, source, recursive);\n        this.matrixWorldInverse.copy(source.matrixWorldInverse);\n        this.projectionMatrix.copy(source.projectionMatrix);\n        return this;\n    },\n    getWorldDirection: function () {\n        var quaternion = new Quaternion();\n        return function getWorldDirection(optionalTarget) {\n            var result = optionalTarget || new Vector3();\n            this.getWorldQuaternion(quaternion);\n            return result.set(0, 0, -1).applyQuaternion(quaternion);\n        };\n    }(),\n    updateMatrixWorld: function (force) {\n        Object3D.prototype.updateMatrixWorld.call(this, force);\n        this.matrixWorldInverse.getInverse(this.matrixWorld);\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author arose / http://github.com/arose\n */\nfunction OrthographicCamera(left, right, top, bottom, near, far) {\n    Camera.call(this);\n    this.type = 'OrthographicCamera';\n    this.zoom = 1;\n    this.view = null;\n    this.left = left;\n    this.right = right;\n    this.top = top;\n    this.bottom = bottom;\n    this.near = (near !== undefined) ? near : 0.1;\n    this.far = (far !== undefined) ? far : 2000;\n    this.updateProjectionMatrix();\n}\nOrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n    constructor: OrthographicCamera,\n    isOrthographicCamera: true,\n    copy: function (source, recursive) {\n        Camera.prototype.copy.call(this, source, recursive);\n        this.left = source.left;\n        this.right = source.right;\n        this.top = source.top;\n        this.bottom = source.bottom;\n        this.near = source.near;\n        this.far = source.far;\n        this.zoom = source.zoom;\n        this.view = source.view === null ? null : Object.assign({}, source.view);\n        return this;\n    },\n    setViewOffset: function (fullWidth, fullHeight, x, y, width, height) {\n        if (this.view === null) {\n            this.view = {\n                enabled: true,\n                fullWidth: 1,\n                fullHeight: 1,\n                offsetX: 0,\n                offsetY: 0,\n                width: 1,\n                height: 1\n            };\n        }\n        this.view.enabled = true;\n        this.view.fullWidth = fullWidth;\n        this.view.fullHeight = fullHeight;\n        this.view.offsetX = x;\n        this.view.offsetY = y;\n        this.view.width = width;\n        this.view.height = height;\n        this.updateProjectionMatrix();\n    },\n    clearViewOffset: function () {\n        if (this.view !== null) {\n            this.view.enabled = false;\n        }\n        this.updateProjectionMatrix();\n    },\n    updateProjectionMatrix: function () {\n        var dx = (this.right - this.left) / (2 * this.zoom);\n        var dy = (this.top - this.bottom) / (2 * this.zoom);\n        var cx = (this.right + this.left) / 2;\n        var cy = (this.top + this.bottom) / 2;\n        var left = cx - dx;\n        var right = cx + dx;\n        var top = cy + dy;\n        var bottom = cy - dy;\n        if (this.view !== null && this.view.enabled) {\n            var zoomW = this.zoom / (this.view.width / this.view.fullWidth);\n            var zoomH = this.zoom / (this.view.height / this.view.fullHeight);\n            var scaleW = (this.right - this.left) / this.view.width;\n            var scaleH = (this.top - this.bottom) / this.view.height;\n            left += scaleW * (this.view.offsetX / zoomW);\n            right = left + scaleW * (this.view.width / zoomW);\n            top -= scaleH * (this.view.offsetY / zoomH);\n            bottom = top - scaleH * (this.view.height / zoomH);\n        }\n        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n    },\n    toJSON: function (meta) {\n        var data = Object3D.prototype.toJSON.call(this, meta);\n        data.object.zoom = this.zoom;\n        data.object.left = this.left;\n        data.object.right = this.right;\n        data.object.top = this.top;\n        data.object.bottom = this.bottom;\n        data.object.near = this.near;\n        data.object.far = this.far;\n        if (this.view !== null)\n            data.object.view = Object.assign({}, this.view);\n        return data;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\nfunction Face3(a, b, c, normal, color, materialIndex) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = (normal && normal.isVector3) ? normal : new Vector3();\n    this.vertexNormals = Array.isArray(normal) ? normal : [];\n    this.color = (color && color.isColor) ? color : new Color();\n    this.vertexColors = Array.isArray(color) ? color : [];\n    this.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n}\nObject.assign(Face3.prototype, {\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (source) {\n        this.a = source.a;\n        this.b = source.b;\n        this.c = source.c;\n        this.normal.copy(source.normal);\n        this.color.copy(source.color);\n        this.materialIndex = source.materialIndex;\n        for (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n            this.vertexNormals[i] = source.vertexNormals[i].clone();\n        }\n        for (var i = 0, il = source.vertexColors.length; i < il; i++) {\n            this.vertexColors[i] = source.vertexColors[i].clone();\n        }\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author bhouston / http://clara.io\n */\nvar geometryId = 0; // Geometry uses even numbers as Id\nfunction Geometry() {\n    Object.defineProperty(this, 'id', { value: geometryId += 2 });\n    this.uuid = _Math.generateUUID();\n    this.name = '';\n    this.type = 'Geometry';\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    this.morphTargets = [];\n    this.morphNormals = [];\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    // update flags\n    this.elementsNeedUpdate = false;\n    this.verticesNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.lineDistancesNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n}\nGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: Geometry,\n    isGeometry: true,\n    applyMatrix: function (matrix) {\n        var normalMatrix = new Matrix3().getNormalMatrix(matrix);\n        for (var i = 0, il = this.vertices.length; i < il; i++) {\n            var vertex = this.vertices[i];\n            vertex.applyMatrix4(matrix);\n        }\n        for (var i = 0, il = this.faces.length; i < il; i++) {\n            var face = this.faces[i];\n            face.normal.applyMatrix3(normalMatrix).normalize();\n            for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n                face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n            }\n        }\n        if (this.boundingBox !== null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n            this.computeBoundingSphere();\n        }\n        this.verticesNeedUpdate = true;\n        this.normalsNeedUpdate = true;\n        return this;\n    },\n    rotateX: function () {\n        // rotate geometry around world x-axis\n        var m1 = new Matrix4();\n        return function rotateX(angle) {\n            m1.makeRotationX(angle);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    rotateY: function () {\n        // rotate geometry around world y-axis\n        var m1 = new Matrix4();\n        return function rotateY(angle) {\n            m1.makeRotationY(angle);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    rotateZ: function () {\n        // rotate geometry around world z-axis\n        var m1 = new Matrix4();\n        return function rotateZ(angle) {\n            m1.makeRotationZ(angle);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    translate: function () {\n        // translate geometry\n        var m1 = new Matrix4();\n        return function translate(x, y, z) {\n            m1.makeTranslation(x, y, z);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    scale: function () {\n        // scale geometry\n        var m1 = new Matrix4();\n        return function scale(x, y, z) {\n            m1.makeScale(x, y, z);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    lookAt: function () {\n        var obj = new Object3D();\n        return function lookAt(vector) {\n            obj.lookAt(vector);\n            obj.updateMatrix();\n            this.applyMatrix(obj.matrix);\n        };\n    }(),\n    fromBufferGeometry: function (geometry) {\n        var scope = this;\n        var indices = geometry.index !== null ? geometry.index.array : undefined;\n        var attributes = geometry.attributes;\n        var positions = attributes.position.array;\n        var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n        var colors = attributes.color !== undefined ? attributes.color.array : undefined;\n        var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n        var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n        if (uvs2 !== undefined)\n            this.faceVertexUvs[1] = [];\n        var tempNormals = [];\n        var tempUVs = [];\n        var tempUVs2 = [];\n        for (var i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n            scope.vertices.push(new Vector3(positions[i], positions[i + 1], positions[i + 2]));\n            if (normals !== undefined) {\n                tempNormals.push(new Vector3(normals[i], normals[i + 1], normals[i + 2]));\n            }\n            if (colors !== undefined) {\n                scope.colors.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n            }\n            if (uvs !== undefined) {\n                tempUVs.push(new Vector2(uvs[j], uvs[j + 1]));\n            }\n            if (uvs2 !== undefined) {\n                tempUVs2.push(new Vector2(uvs2[j], uvs2[j + 1]));\n            }\n        }\n        function addFace(a, b, c, materialIndex) {\n            var vertexNormals = normals !== undefined ? [tempNormals[a].clone(), tempNormals[b].clone(), tempNormals[c].clone()] : [];\n            var vertexColors = colors !== undefined ? [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()] : [];\n            var face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n            scope.faces.push(face);\n            if (uvs !== undefined) {\n                scope.faceVertexUvs[0].push([tempUVs[a].clone(), tempUVs[b].clone(), tempUVs[c].clone()]);\n            }\n            if (uvs2 !== undefined) {\n                scope.faceVertexUvs[1].push([tempUVs2[a].clone(), tempUVs2[b].clone(), tempUVs2[c].clone()]);\n            }\n        }\n        var groups = geometry.groups;\n        if (groups.length > 0) {\n            for (var i = 0; i < groups.length; i++) {\n                var group = groups[i];\n                var start = group.start;\n                var count = group.count;\n                for (var j = start, jl = start + count; j < jl; j += 3) {\n                    if (indices !== undefined) {\n                        addFace(indices[j], indices[j + 1], indices[j + 2], group.materialIndex);\n                    }\n                    else {\n                        addFace(j, j + 1, j + 2, group.materialIndex);\n                    }\n                }\n            }\n        }\n        else {\n            if (indices !== undefined) {\n                for (var i = 0; i < indices.length; i += 3) {\n                    addFace(indices[i], indices[i + 1], indices[i + 2]);\n                }\n            }\n            else {\n                for (var i = 0; i < positions.length / 3; i += 3) {\n                    addFace(i, i + 1, i + 2);\n                }\n            }\n        }\n        this.computeFaceNormals();\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        return this;\n    },\n    center: function () {\n        this.computeBoundingBox();\n        var offset = this.boundingBox.getCenter().negate();\n        this.translate(offset.x, offset.y, offset.z);\n        return offset;\n    },\n    normalize: function () {\n        this.computeBoundingSphere();\n        var center = this.boundingSphere.center;\n        var radius = this.boundingSphere.radius;\n        var s = radius === 0 ? 1 : 1.0 / radius;\n        var matrix = new Matrix4();\n        matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n        this.applyMatrix(matrix);\n        return this;\n    },\n    computeFaceNormals: function () {\n        var cb = new Vector3(), ab = new Vector3();\n        for (var f = 0, fl = this.faces.length; f < fl; f++) {\n            var face = this.faces[f];\n            var vA = this.vertices[face.a];\n            var vB = this.vertices[face.b];\n            var vC = this.vertices[face.c];\n            cb.subVectors(vC, vB);\n            ab.subVectors(vA, vB);\n            cb.cross(ab);\n            cb.normalize();\n            face.normal.copy(cb);\n        }\n    },\n    computeVertexNormals: function (areaWeighted) {\n        if (areaWeighted === undefined)\n            areaWeighted = true;\n        var v, vl, f, fl, face, vertices;\n        vertices = new Array(this.vertices.length);\n        for (v = 0, vl = this.vertices.length; v < vl; v++) {\n            vertices[v] = new Vector3();\n        }\n        if (areaWeighted) {\n            // vertex normals weighted by triangle areas\n            // http://www.iquilezles.org/www/articles/normals/normals.htm\n            var vA, vB, vC;\n            var cb = new Vector3(), ab = new Vector3();\n            for (f = 0, fl = this.faces.length; f < fl; f++) {\n                face = this.faces[f];\n                vA = this.vertices[face.a];\n                vB = this.vertices[face.b];\n                vC = this.vertices[face.c];\n                cb.subVectors(vC, vB);\n                ab.subVectors(vA, vB);\n                cb.cross(ab);\n                vertices[face.a].add(cb);\n                vertices[face.b].add(cb);\n                vertices[face.c].add(cb);\n            }\n        }\n        else {\n            this.computeFaceNormals();\n            for (f = 0, fl = this.faces.length; f < fl; f++) {\n                face = this.faces[f];\n                vertices[face.a].add(face.normal);\n                vertices[face.b].add(face.normal);\n                vertices[face.c].add(face.normal);\n            }\n        }\n        for (v = 0, vl = this.vertices.length; v < vl; v++) {\n            vertices[v].normalize();\n        }\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n            face = this.faces[f];\n            var vertexNormals = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                vertexNormals[0].copy(vertices[face.a]);\n                vertexNormals[1].copy(vertices[face.b]);\n                vertexNormals[2].copy(vertices[face.c]);\n            }\n            else {\n                vertexNormals[0] = vertices[face.a].clone();\n                vertexNormals[1] = vertices[face.b].clone();\n                vertexNormals[2] = vertices[face.c].clone();\n            }\n        }\n        if (this.faces.length > 0) {\n            this.normalsNeedUpdate = true;\n        }\n    },\n    computeFlatVertexNormals: function () {\n        var f, fl, face;\n        this.computeFaceNormals();\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n            face = this.faces[f];\n            var vertexNormals = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                vertexNormals[0].copy(face.normal);\n                vertexNormals[1].copy(face.normal);\n                vertexNormals[2].copy(face.normal);\n            }\n            else {\n                vertexNormals[0] = face.normal.clone();\n                vertexNormals[1] = face.normal.clone();\n                vertexNormals[2] = face.normal.clone();\n            }\n        }\n        if (this.faces.length > 0) {\n            this.normalsNeedUpdate = true;\n        }\n    },\n    computeMorphNormals: function () {\n        var i, il, f, fl, face;\n        // save original normals\n        // - create temp variables on first access\n        //   otherwise just copy (for faster repeated calls)\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n            face = this.faces[f];\n            if (!face.__originalFaceNormal) {\n                face.__originalFaceNormal = face.normal.clone();\n            }\n            else {\n                face.__originalFaceNormal.copy(face.normal);\n            }\n            if (!face.__originalVertexNormals)\n                face.__originalVertexNormals = [];\n            for (i = 0, il = face.vertexNormals.length; i < il; i++) {\n                if (!face.__originalVertexNormals[i]) {\n                    face.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n                }\n                else {\n                    face.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n                }\n            }\n        }\n        // use temp geometry to compute face and vertex normals for each morph\n        var tmpGeo = new Geometry();\n        tmpGeo.faces = this.faces;\n        for (i = 0, il = this.morphTargets.length; i < il; i++) {\n            // create on first access\n            if (!this.morphNormals[i]) {\n                this.morphNormals[i] = {};\n                this.morphNormals[i].faceNormals = [];\n                this.morphNormals[i].vertexNormals = [];\n                var dstNormalsFace = this.morphNormals[i].faceNormals;\n                var dstNormalsVertex = this.morphNormals[i].vertexNormals;\n                var faceNormal, vertexNormals;\n                for (f = 0, fl = this.faces.length; f < fl; f++) {\n                    faceNormal = new Vector3();\n                    vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n                    dstNormalsFace.push(faceNormal);\n                    dstNormalsVertex.push(vertexNormals);\n                }\n            }\n            var morphNormals = this.morphNormals[i];\n            // set vertices to morph target\n            tmpGeo.vertices = this.morphTargets[i].vertices;\n            // compute morph normals\n            tmpGeo.computeFaceNormals();\n            tmpGeo.computeVertexNormals();\n            // store morph normals\n            var faceNormal, vertexNormals;\n            for (f = 0, fl = this.faces.length; f < fl; f++) {\n                face = this.faces[f];\n                faceNormal = morphNormals.faceNormals[f];\n                vertexNormals = morphNormals.vertexNormals[f];\n                faceNormal.copy(face.normal);\n                vertexNormals.a.copy(face.vertexNormals[0]);\n                vertexNormals.b.copy(face.vertexNormals[1]);\n                vertexNormals.c.copy(face.vertexNormals[2]);\n            }\n        }\n        // restore original normals\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n            face = this.faces[f];\n            face.normal = face.__originalFaceNormal;\n            face.vertexNormals = face.__originalVertexNormals;\n        }\n    },\n    computeBoundingBox: function () {\n        if (this.boundingBox === null) {\n            this.boundingBox = new Box3();\n        }\n        this.boundingBox.setFromPoints(this.vertices);\n    },\n    computeBoundingSphere: function () {\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new Sphere();\n        }\n        this.boundingSphere.setFromPoints(this.vertices);\n    },\n    merge: function (geometry, matrix, materialIndexOffset) {\n        if (!(geometry && geometry.isGeometry)) {\n            console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);\n            return;\n        }\n        var normalMatrix, vertexOffset = this.vertices.length, vertices1 = this.vertices, vertices2 = geometry.vertices, faces1 = this.faces, faces2 = geometry.faces, uvs1 = this.faceVertexUvs[0], uvs2 = geometry.faceVertexUvs[0], colors1 = this.colors, colors2 = geometry.colors;\n        if (materialIndexOffset === undefined)\n            materialIndexOffset = 0;\n        if (matrix !== undefined) {\n            normalMatrix = new Matrix3().getNormalMatrix(matrix);\n        }\n        // vertices\n        for (var i = 0, il = vertices2.length; i < il; i++) {\n            var vertex = vertices2[i];\n            var vertexCopy = vertex.clone();\n            if (matrix !== undefined)\n                vertexCopy.applyMatrix4(matrix);\n            vertices1.push(vertexCopy);\n        }\n        // colors\n        for (var i = 0, il = colors2.length; i < il; i++) {\n            colors1.push(colors2[i].clone());\n        }\n        // faces\n        for (i = 0, il = faces2.length; i < il; i++) {\n            var face = faces2[i], faceCopy, normal, color, faceVertexNormals = face.vertexNormals, faceVertexColors = face.vertexColors;\n            faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n            faceCopy.normal.copy(face.normal);\n            if (normalMatrix !== undefined) {\n                faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n            }\n            for (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n                normal = faceVertexNormals[j].clone();\n                if (normalMatrix !== undefined) {\n                    normal.applyMatrix3(normalMatrix).normalize();\n                }\n                faceCopy.vertexNormals.push(normal);\n            }\n            faceCopy.color.copy(face.color);\n            for (var j = 0, jl = faceVertexColors.length; j < jl; j++) {\n                color = faceVertexColors[j];\n                faceCopy.vertexColors.push(color.clone());\n            }\n            faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n            faces1.push(faceCopy);\n        }\n        // uvs\n        for (i = 0, il = uvs2.length; i < il; i++) {\n            var uv = uvs2[i], uvCopy = [];\n            if (uv === undefined) {\n                continue;\n            }\n            for (var j = 0, jl = uv.length; j < jl; j++) {\n                uvCopy.push(uv[j].clone());\n            }\n            uvs1.push(uvCopy);\n        }\n    },\n    mergeMesh: function (mesh) {\n        if (!(mesh && mesh.isMesh)) {\n            console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);\n            return;\n        }\n        mesh.matrixAutoUpdate && mesh.updateMatrix();\n        this.merge(mesh.geometry, mesh.matrix);\n    },\n    /*\n     * Checks for duplicate vertices with hashmap.\n     * Duplicated vertices are removed\n     * and faces' vertices are updated.\n     */\n    mergeVertices: function () {\n        var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        var unique = [], changes = [];\n        var v, key;\n        var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        var precision = Math.pow(10, precisionPoints);\n        var i, il, face;\n        var indices, j, jl;\n        for (i = 0, il = this.vertices.length; i < il; i++) {\n            v = this.vertices[i];\n            key = Math.round(v.x * precision) + '_' + Math.round(v.y * precision) + '_' + Math.round(v.z * precision);\n            if (verticesMap[key] === undefined) {\n                verticesMap[key] = i;\n                unique.push(this.vertices[i]);\n                changes[i] = unique.length - 1;\n            }\n            else {\n                //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n                changes[i] = changes[verticesMap[key]];\n            }\n        }\n        // if faces are completely degenerate after merging vertices, we\n        // have to remove them from the geometry.\n        var faceIndicesToRemove = [];\n        for (i = 0, il = this.faces.length; i < il; i++) {\n            face = this.faces[i];\n            face.a = changes[face.a];\n            face.b = changes[face.b];\n            face.c = changes[face.c];\n            indices = [face.a, face.b, face.c];\n            // if any duplicate vertices are found in a Face3\n            // we have to remove the face as nothing can be saved\n            for (var n = 0; n < 3; n++) {\n                if (indices[n] === indices[(n + 1) % 3]) {\n                    faceIndicesToRemove.push(i);\n                    break;\n                }\n            }\n        }\n        for (i = faceIndicesToRemove.length - 1; i >= 0; i--) {\n            var idx = faceIndicesToRemove[i];\n            this.faces.splice(idx, 1);\n            for (j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n                this.faceVertexUvs[j].splice(idx, 1);\n            }\n        }\n        // Use unique set of vertices\n        var diff = this.vertices.length - unique.length;\n        this.vertices = unique;\n        return diff;\n    },\n    setFromPoints: function (points) {\n        this.vertices = [];\n        for (var i = 0, l = points.length; i < l; i++) {\n            var point = points[i];\n            this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n        }\n        return this;\n    },\n    sortFacesByMaterialIndex: function () {\n        var faces = this.faces;\n        var length = faces.length;\n        // tag faces\n        for (var i = 0; i < length; i++) {\n            faces[i]._id = i;\n        }\n        // sort faces\n        function materialIndexSort(a, b) {\n            return a.materialIndex - b.materialIndex;\n        }\n        faces.sort(materialIndexSort);\n        // sort uvs\n        var uvs1 = this.faceVertexUvs[0];\n        var uvs2 = this.faceVertexUvs[1];\n        var newUvs1, newUvs2;\n        if (uvs1 && uvs1.length === length)\n            newUvs1 = [];\n        if (uvs2 && uvs2.length === length)\n            newUvs2 = [];\n        for (var i = 0; i < length; i++) {\n            var id = faces[i]._id;\n            if (newUvs1)\n                newUvs1.push(uvs1[id]);\n            if (newUvs2)\n                newUvs2.push(uvs2[id]);\n        }\n        if (newUvs1)\n            this.faceVertexUvs[0] = newUvs1;\n        if (newUvs2)\n            this.faceVertexUvs[1] = newUvs2;\n    },\n    toJSON: function () {\n        var data = {\n            metadata: {\n                version: 4.5,\n                type: 'Geometry',\n                generator: 'Geometry.toJSON'\n            }\n        };\n        // standard Geometry serialization\n        data.uuid = this.uuid;\n        data.type = this.type;\n        if (this.name !== '')\n            data.name = this.name;\n        if (this.parameters !== undefined) {\n            var parameters = this.parameters;\n            for (var key in parameters) {\n                if (parameters[key] !== undefined)\n                    data[key] = parameters[key];\n            }\n            return data;\n        }\n        var vertices = [];\n        for (var i = 0; i < this.vertices.length; i++) {\n            var vertex = this.vertices[i];\n            vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n        var faces = [];\n        var normals = [];\n        var normalsHash = {};\n        var colors = [];\n        var colorsHash = {};\n        var uvs = [];\n        var uvsHash = {};\n        for (var i = 0; i < this.faces.length; i++) {\n            var face = this.faces[i];\n            var hasMaterial = true;\n            var hasFaceUv = false; // deprecated\n            var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;\n            var hasFaceNormal = face.normal.length() > 0;\n            var hasFaceVertexNormal = face.vertexNormals.length > 0;\n            var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n            var hasFaceVertexColor = face.vertexColors.length > 0;\n            var faceType = 0;\n            faceType = setBit(faceType, 0, 0); // isQuad\n            faceType = setBit(faceType, 1, hasMaterial);\n            faceType = setBit(faceType, 2, hasFaceUv);\n            faceType = setBit(faceType, 3, hasFaceVertexUv);\n            faceType = setBit(faceType, 4, hasFaceNormal);\n            faceType = setBit(faceType, 5, hasFaceVertexNormal);\n            faceType = setBit(faceType, 6, hasFaceColor);\n            faceType = setBit(faceType, 7, hasFaceVertexColor);\n            faces.push(faceType);\n            faces.push(face.a, face.b, face.c);\n            faces.push(face.materialIndex);\n            if (hasFaceVertexUv) {\n                var faceVertexUvs = this.faceVertexUvs[0][i];\n                faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n            }\n            if (hasFaceNormal) {\n                faces.push(getNormalIndex(face.normal));\n            }\n            if (hasFaceVertexNormal) {\n                var vertexNormals = face.vertexNormals;\n                faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n            }\n            if (hasFaceColor) {\n                faces.push(getColorIndex(face.color));\n            }\n            if (hasFaceVertexColor) {\n                var vertexColors = face.vertexColors;\n                faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n            }\n        }\n        function setBit(value, position, enabled) {\n            return enabled ? value | (1 << position) : value & (~(1 << position));\n        }\n        function getNormalIndex(normal) {\n            var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n            if (normalsHash[hash] !== undefined) {\n                return normalsHash[hash];\n            }\n            normalsHash[hash] = normals.length / 3;\n            normals.push(normal.x, normal.y, normal.z);\n            return normalsHash[hash];\n        }\n        function getColorIndex(color) {\n            var hash = color.r.toString() + color.g.toString() + color.b.toString();\n            if (colorsHash[hash] !== undefined) {\n                return colorsHash[hash];\n            }\n            colorsHash[hash] = colors.length;\n            colors.push(color.getHex());\n            return colorsHash[hash];\n        }\n        function getUvIndex(uv) {\n            var hash = uv.x.toString() + uv.y.toString();\n            if (uvsHash[hash] !== undefined) {\n                return uvsHash[hash];\n            }\n            uvsHash[hash] = uvs.length / 2;\n            uvs.push(uv.x, uv.y);\n            return uvsHash[hash];\n        }\n        data.data = {};\n        data.data.vertices = vertices;\n        data.data.normals = normals;\n        if (colors.length > 0)\n            data.data.colors = colors;\n        if (uvs.length > 0)\n            data.data.uvs = [uvs]; // temporal backward compatibility\n        data.data.faces = faces;\n        return data;\n    },\n    clone: function () {\n        /*\n         // Handle primitives\n\n         var parameters = this.parameters;\n\n         if ( parameters !== undefined ) {\n\n         var values = [];\n\n         for ( var key in parameters ) {\n\n         values.push( parameters[ key ] );\n\n         }\n\n         var geometry = Object.create( this.constructor.prototype );\n         this.constructor.apply( geometry, values );\n         return geometry;\n\n         }\n\n         return new this.constructor().copy( this );\n         */\n        return new Geometry().copy(this);\n    },\n    copy: function (source) {\n        var i, il, j, jl, k, kl;\n        // reset\n        this.vertices = [];\n        this.colors = [];\n        this.faces = [];\n        this.faceVertexUvs = [[]];\n        this.morphTargets = [];\n        this.morphNormals = [];\n        this.skinWeights = [];\n        this.skinIndices = [];\n        this.lineDistances = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        // name\n        this.name = source.name;\n        // vertices\n        var vertices = source.vertices;\n        for (i = 0, il = vertices.length; i < il; i++) {\n            this.vertices.push(vertices[i].clone());\n        }\n        // colors\n        var colors = source.colors;\n        for (i = 0, il = colors.length; i < il; i++) {\n            this.colors.push(colors[i].clone());\n        }\n        // faces\n        var faces = source.faces;\n        for (i = 0, il = faces.length; i < il; i++) {\n            this.faces.push(faces[i].clone());\n        }\n        // face vertex uvs\n        for (i = 0, il = source.faceVertexUvs.length; i < il; i++) {\n            var faceVertexUvs = source.faceVertexUvs[i];\n            if (this.faceVertexUvs[i] === undefined) {\n                this.faceVertexUvs[i] = [];\n            }\n            for (j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n                var uvs = faceVertexUvs[j], uvsCopy = [];\n                for (k = 0, kl = uvs.length; k < kl; k++) {\n                    var uv = uvs[k];\n                    uvsCopy.push(uv.clone());\n                }\n                this.faceVertexUvs[i].push(uvsCopy);\n            }\n        }\n        // morph targets\n        var morphTargets = source.morphTargets;\n        for (i = 0, il = morphTargets.length; i < il; i++) {\n            var morphTarget = {};\n            morphTarget.name = morphTargets[i].name;\n            // vertices\n            if (morphTargets[i].vertices !== undefined) {\n                morphTarget.vertices = [];\n                for (j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {\n                    morphTarget.vertices.push(morphTargets[i].vertices[j].clone());\n                }\n            }\n            // normals\n            if (morphTargets[i].normals !== undefined) {\n                morphTarget.normals = [];\n                for (j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {\n                    morphTarget.normals.push(morphTargets[i].normals[j].clone());\n                }\n            }\n            this.morphTargets.push(morphTarget);\n        }\n        // morph normals\n        var morphNormals = source.morphNormals;\n        for (i = 0, il = morphNormals.length; i < il; i++) {\n            var morphNormal = {};\n            // vertex normals\n            if (morphNormals[i].vertexNormals !== undefined) {\n                morphNormal.vertexNormals = [];\n                for (j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {\n                    var srcVertexNormal = morphNormals[i].vertexNormals[j];\n                    var destVertexNormal = {};\n                    destVertexNormal.a = srcVertexNormal.a.clone();\n                    destVertexNormal.b = srcVertexNormal.b.clone();\n                    destVertexNormal.c = srcVertexNormal.c.clone();\n                    morphNormal.vertexNormals.push(destVertexNormal);\n                }\n            }\n            // face normals\n            if (morphNormals[i].faceNormals !== undefined) {\n                morphNormal.faceNormals = [];\n                for (j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {\n                    morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());\n                }\n            }\n            this.morphNormals.push(morphNormal);\n        }\n        // skin weights\n        var skinWeights = source.skinWeights;\n        for (i = 0, il = skinWeights.length; i < il; i++) {\n            this.skinWeights.push(skinWeights[i].clone());\n        }\n        // skin indices\n        var skinIndices = source.skinIndices;\n        for (i = 0, il = skinIndices.length; i < il; i++) {\n            this.skinIndices.push(skinIndices[i].clone());\n        }\n        // line distances\n        var lineDistances = source.lineDistances;\n        for (i = 0, il = lineDistances.length; i < il; i++) {\n            this.lineDistances.push(lineDistances[i]);\n        }\n        // bounding box\n        var boundingBox = source.boundingBox;\n        if (boundingBox !== null) {\n            this.boundingBox = boundingBox.clone();\n        }\n        // bounding sphere\n        var boundingSphere = source.boundingSphere;\n        if (boundingSphere !== null) {\n            this.boundingSphere = boundingSphere.clone();\n        }\n        // update flags\n        this.elementsNeedUpdate = source.elementsNeedUpdate;\n        this.verticesNeedUpdate = source.verticesNeedUpdate;\n        this.uvsNeedUpdate = source.uvsNeedUpdate;\n        this.normalsNeedUpdate = source.normalsNeedUpdate;\n        this.colorsNeedUpdate = source.colorsNeedUpdate;\n        this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n        this.groupsNeedUpdate = source.groupsNeedUpdate;\n        return this;\n    },\n    dispose: function () {\n        this.dispatchEvent({ type: 'dispose' });\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction BufferAttribute(array, itemSize, normalized) {\n    if (Array.isArray(array)) {\n        throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n    }\n    this.uuid = _Math.generateUUID();\n    this.name = '';\n    this.array = array;\n    this.itemSize = itemSize;\n    this.count = array !== undefined ? array.length / itemSize : 0;\n    this.normalized = normalized === true;\n    this.dynamic = false;\n    this.updateRange = { offset: 0, count: -1 };\n    this.onUploadCallback = function () { };\n    this.version = 0;\n}\nObject.defineProperty(BufferAttribute.prototype, 'needsUpdate', {\n    set: function (value) {\n        if (value === true)\n            this.version++;\n    }\n});\nObject.assign(BufferAttribute.prototype, {\n    isBufferAttribute: true,\n    setArray: function (array) {\n        if (Array.isArray(array)) {\n            throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n        }\n        this.count = array !== undefined ? array.length / this.itemSize : 0;\n        this.array = array;\n    },\n    setDynamic: function (value) {\n        this.dynamic = value;\n        return this;\n    },\n    copy: function (source) {\n        this.array = new source.array.constructor(source.array);\n        this.itemSize = source.itemSize;\n        this.count = source.count;\n        this.normalized = source.normalized;\n        this.dynamic = source.dynamic;\n        return this;\n    },\n    copyAt: function (index1, attribute, index2) {\n        index1 *= this.itemSize;\n        index2 *= attribute.itemSize;\n        for (var i = 0, l = this.itemSize; i < l; i++) {\n            this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n    },\n    copyArray: function (array) {\n        this.array.set(array);\n        return this;\n    },\n    copyColorsArray: function (colors) {\n        var array = this.array, offset = 0;\n        for (var i = 0, l = colors.length; i < l; i++) {\n            var color = colors[i];\n            if (color === undefined) {\n                console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n                color = new Color();\n            }\n            array[offset++] = color.r;\n            array[offset++] = color.g;\n            array[offset++] = color.b;\n        }\n        return this;\n    },\n    copyIndicesArray: function (indices) {\n        var array = this.array, offset = 0;\n        for (var i = 0, l = indices.length; i < l; i++) {\n            var index = indices[i];\n            array[offset++] = index.a;\n            array[offset++] = index.b;\n            array[offset++] = index.c;\n        }\n        return this;\n    },\n    copyVector2sArray: function (vectors) {\n        var array = this.array, offset = 0;\n        for (var i = 0, l = vectors.length; i < l; i++) {\n            var vector = vectors[i];\n            if (vector === undefined) {\n                console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n                vector = new Vector2();\n            }\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n        }\n        return this;\n    },\n    copyVector3sArray: function (vectors) {\n        var array = this.array, offset = 0;\n        for (var i = 0, l = vectors.length; i < l; i++) {\n            var vector = vectors[i];\n            if (vector === undefined) {\n                console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n                vector = new Vector3();\n            }\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n            array[offset++] = vector.z;\n        }\n        return this;\n    },\n    copyVector4sArray: function (vectors) {\n        var array = this.array, offset = 0;\n        for (var i = 0, l = vectors.length; i < l; i++) {\n            var vector = vectors[i];\n            if (vector === undefined) {\n                console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n                vector = new Vector4();\n            }\n            array[offset++] = vector.x;\n            array[offset++] = vector.y;\n            array[offset++] = vector.z;\n            array[offset++] = vector.w;\n        }\n        return this;\n    },\n    set: function (value, offset) {\n        if (offset === undefined)\n            offset = 0;\n        this.array.set(value, offset);\n        return this;\n    },\n    getX: function (index) {\n        return this.array[index * this.itemSize];\n    },\n    setX: function (index, x) {\n        this.array[index * this.itemSize] = x;\n        return this;\n    },\n    getY: function (index) {\n        return this.array[index * this.itemSize + 1];\n    },\n    setY: function (index, y) {\n        this.array[index * this.itemSize + 1] = y;\n        return this;\n    },\n    getZ: function (index) {\n        return this.array[index * this.itemSize + 2];\n    },\n    setZ: function (index, z) {\n        this.array[index * this.itemSize + 2] = z;\n        return this;\n    },\n    getW: function (index) {\n        return this.array[index * this.itemSize + 3];\n    },\n    setW: function (index, w) {\n        this.array[index * this.itemSize + 3] = w;\n        return this;\n    },\n    setXY: function (index, x, y) {\n        index *= this.itemSize;\n        this.array[index + 0] = x;\n        this.array[index + 1] = y;\n        return this;\n    },\n    setXYZ: function (index, x, y, z) {\n        index *= this.itemSize;\n        this.array[index + 0] = x;\n        this.array[index + 1] = y;\n        this.array[index + 2] = z;\n        return this;\n    },\n    setXYZW: function (index, x, y, z, w) {\n        index *= this.itemSize;\n        this.array[index + 0] = x;\n        this.array[index + 1] = y;\n        this.array[index + 2] = z;\n        this.array[index + 3] = w;\n        return this;\n    },\n    onUpload: function (callback) {\n        this.onUploadCallback = callback;\n        return this;\n    },\n    clone: function () {\n        return new this.constructor(this.array, this.itemSize).copy(this);\n    }\n});\n//\nfunction Int8BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n}\nInt8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\nfunction Uint8BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n}\nUint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\nfunction Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);\n}\nUint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\nfunction Int16BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n}\nInt16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\nfunction Uint16BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n}\nUint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\nfunction Int32BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n}\nInt32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\nfunction Uint32BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n}\nUint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\nfunction Float32BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n}\nFloat32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\nfunction Float64BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n}\nFloat64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\nFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction DirectGeometry() {\n    this.indices = [];\n    this.vertices = [];\n    this.normals = [];\n    this.colors = [];\n    this.uvs = [];\n    this.uvs2 = [];\n    this.groups = [];\n    this.morphTargets = {};\n    this.skinWeights = [];\n    this.skinIndices = [];\n    // this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    // update flags\n    this.verticesNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n}\nObject.assign(DirectGeometry.prototype, {\n    computeGroups: function (geometry) {\n        var group;\n        var groups = [];\n        var materialIndex = undefined;\n        var faces = geometry.faces;\n        for (var i = 0; i < faces.length; i++) {\n            var face = faces[i];\n            // materials\n            if (face.materialIndex !== materialIndex) {\n                materialIndex = face.materialIndex;\n                if (group !== undefined) {\n                    group.count = (i * 3) - group.start;\n                    groups.push(group);\n                }\n                group = {\n                    start: i * 3,\n                    materialIndex: materialIndex\n                };\n            }\n        }\n        if (group !== undefined) {\n            group.count = (i * 3) - group.start;\n            groups.push(group);\n        }\n        this.groups = groups;\n    },\n    fromGeometry: function (geometry) {\n        var faces = geometry.faces;\n        var vertices = geometry.vertices;\n        var faceVertexUvs = geometry.faceVertexUvs;\n        var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n        var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;\n        // morphs\n        var morphTargets = geometry.morphTargets;\n        var morphTargetsLength = morphTargets.length;\n        var morphTargetsPosition;\n        if (morphTargetsLength > 0) {\n            morphTargetsPosition = [];\n            for (var i = 0; i < morphTargetsLength; i++) {\n                morphTargetsPosition[i] = [];\n            }\n            this.morphTargets.position = morphTargetsPosition;\n        }\n        var morphNormals = geometry.morphNormals;\n        var morphNormalsLength = morphNormals.length;\n        var morphTargetsNormal;\n        if (morphNormalsLength > 0) {\n            morphTargetsNormal = [];\n            for (var i = 0; i < morphNormalsLength; i++) {\n                morphTargetsNormal[i] = [];\n            }\n            this.morphTargets.normal = morphTargetsNormal;\n        }\n        // skins\n        var skinIndices = geometry.skinIndices;\n        var skinWeights = geometry.skinWeights;\n        var hasSkinIndices = skinIndices.length === vertices.length;\n        var hasSkinWeights = skinWeights.length === vertices.length;\n        //\n        for (var i = 0; i < faces.length; i++) {\n            var face = faces[i];\n            this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n            var vertexNormals = face.vertexNormals;\n            if (vertexNormals.length === 3) {\n                this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n            }\n            else {\n                var normal = face.normal;\n                this.normals.push(normal, normal, normal);\n            }\n            var vertexColors = face.vertexColors;\n            if (vertexColors.length === 3) {\n                this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n            }\n            else {\n                var color = face.color;\n                this.colors.push(color, color, color);\n            }\n            if (hasFaceVertexUv === true) {\n                var vertexUvs = faceVertexUvs[0][i];\n                if (vertexUvs !== undefined) {\n                    this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n                }\n                else {\n                    console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i);\n                    this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n                }\n            }\n            if (hasFaceVertexUv2 === true) {\n                var vertexUvs = faceVertexUvs[1][i];\n                if (vertexUvs !== undefined) {\n                    this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n                }\n                else {\n                    console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i);\n                    this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n                }\n            }\n            // morphs\n            for (var j = 0; j < morphTargetsLength; j++) {\n                var morphTarget = morphTargets[j].vertices;\n                morphTargetsPosition[j].push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n            }\n            for (var j = 0; j < morphNormalsLength; j++) {\n                var morphNormal = morphNormals[j].vertexNormals[i];\n                morphTargetsNormal[j].push(morphNormal.a, morphNormal.b, morphNormal.c);\n            }\n            // skins\n            if (hasSkinIndices) {\n                this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n            }\n            if (hasSkinWeights) {\n                this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n            }\n        }\n        this.computeGroups(geometry);\n        this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n        this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n        this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n        this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n        this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction arrayMax(array) {\n    if (array.length === 0)\n        return -Infinity;\n    var max = array[0];\n    for (var i = 1, l = array.length; i < l; ++i) {\n        if (array[i] > max)\n            max = array[i];\n    }\n    return max;\n}\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\nvar bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\nfunction BufferGeometry() {\n    Object.defineProperty(this, 'id', { value: bufferGeometryId += 2 });\n    this.uuid = _Math.generateUUID();\n    this.name = '';\n    this.type = 'BufferGeometry';\n    this.index = null;\n    this.attributes = {};\n    this.morphAttributes = {};\n    this.groups = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    this.drawRange = { start: 0, count: Infinity };\n}\nBufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: BufferGeometry,\n    isBufferGeometry: true,\n    getIndex: function () {\n        return this.index;\n    },\n    setIndex: function (index) {\n        if (Array.isArray(index)) {\n            this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n        }\n        else {\n            this.index = index;\n        }\n    },\n    addAttribute: function (name, attribute) {\n        if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n            console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n            this.addAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n            return;\n        }\n        if (name === 'index') {\n            console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n            this.setIndex(attribute);\n            return;\n        }\n        this.attributes[name] = attribute;\n        return this;\n    },\n    getAttribute: function (name) {\n        return this.attributes[name];\n    },\n    removeAttribute: function (name) {\n        delete this.attributes[name];\n        return this;\n    },\n    addGroup: function (start, count, materialIndex) {\n        this.groups.push({\n            start: start,\n            count: count,\n            materialIndex: materialIndex !== undefined ? materialIndex : 0\n        });\n    },\n    clearGroups: function () {\n        this.groups = [];\n    },\n    setDrawRange: function (start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    },\n    applyMatrix: function (matrix) {\n        var position = this.attributes.position;\n        if (position !== undefined) {\n            matrix.applyToBufferAttribute(position);\n            position.needsUpdate = true;\n        }\n        var normal = this.attributes.normal;\n        if (normal !== undefined) {\n            var normalMatrix = new Matrix3().getNormalMatrix(matrix);\n            normalMatrix.applyToBufferAttribute(normal);\n            normal.needsUpdate = true;\n        }\n        if (this.boundingBox !== null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere !== null) {\n            this.computeBoundingSphere();\n        }\n        return this;\n    },\n    rotateX: function () {\n        // rotate geometry around world x-axis\n        var m1 = new Matrix4();\n        return function rotateX(angle) {\n            m1.makeRotationX(angle);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    rotateY: function () {\n        // rotate geometry around world y-axis\n        var m1 = new Matrix4();\n        return function rotateY(angle) {\n            m1.makeRotationY(angle);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    rotateZ: function () {\n        // rotate geometry around world z-axis\n        var m1 = new Matrix4();\n        return function rotateZ(angle) {\n            m1.makeRotationZ(angle);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    translate: function () {\n        // translate geometry\n        var m1 = new Matrix4();\n        return function translate(x, y, z) {\n            m1.makeTranslation(x, y, z);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    scale: function () {\n        // scale geometry\n        var m1 = new Matrix4();\n        return function scale(x, y, z) {\n            m1.makeScale(x, y, z);\n            this.applyMatrix(m1);\n            return this;\n        };\n    }(),\n    lookAt: function () {\n        var obj = new Object3D();\n        return function lookAt(vector) {\n            obj.lookAt(vector);\n            obj.updateMatrix();\n            this.applyMatrix(obj.matrix);\n        };\n    }(),\n    center: function () {\n        this.computeBoundingBox();\n        var offset = this.boundingBox.getCenter().negate();\n        this.translate(offset.x, offset.y, offset.z);\n        return offset;\n    },\n    setFromObject: function (object) {\n        // console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n        var geometry = object.geometry;\n        if (object.isPoints || object.isLine) {\n            var positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n            var colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n            this.addAttribute('position', positions.copyVector3sArray(geometry.vertices));\n            this.addAttribute('color', colors.copyColorsArray(geometry.colors));\n            if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n                var lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);\n                this.addAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));\n            }\n            if (geometry.boundingSphere !== null) {\n                this.boundingSphere = geometry.boundingSphere.clone();\n            }\n            if (geometry.boundingBox !== null) {\n                this.boundingBox = geometry.boundingBox.clone();\n            }\n        }\n        else if (object.isMesh) {\n            if (geometry && geometry.isGeometry) {\n                this.fromGeometry(geometry);\n            }\n        }\n        return this;\n    },\n    setFromPoints: function (points) {\n        var position = [];\n        for (var i = 0, l = points.length; i < l; i++) {\n            var point = points[i];\n            position.push(point.x, point.y, point.z || 0);\n        }\n        this.addAttribute('position', new Float32BufferAttribute(position, 3));\n        return this;\n    },\n    updateFromObject: function (object) {\n        var geometry = object.geometry;\n        if (object.isMesh) {\n            var direct = geometry.__directGeometry;\n            if (geometry.elementsNeedUpdate === true) {\n                direct = undefined;\n                geometry.elementsNeedUpdate = false;\n            }\n            if (direct === undefined) {\n                return this.fromGeometry(geometry);\n            }\n            direct.verticesNeedUpdate = geometry.verticesNeedUpdate;\n            direct.normalsNeedUpdate = geometry.normalsNeedUpdate;\n            direct.colorsNeedUpdate = geometry.colorsNeedUpdate;\n            direct.uvsNeedUpdate = geometry.uvsNeedUpdate;\n            direct.groupsNeedUpdate = geometry.groupsNeedUpdate;\n            geometry.verticesNeedUpdate = false;\n            geometry.normalsNeedUpdate = false;\n            geometry.colorsNeedUpdate = false;\n            geometry.uvsNeedUpdate = false;\n            geometry.groupsNeedUpdate = false;\n            geometry = direct;\n        }\n        var attribute;\n        if (geometry.verticesNeedUpdate === true) {\n            attribute = this.attributes.position;\n            if (attribute !== undefined) {\n                attribute.copyVector3sArray(geometry.vertices);\n                attribute.needsUpdate = true;\n            }\n            geometry.verticesNeedUpdate = false;\n        }\n        if (geometry.normalsNeedUpdate === true) {\n            attribute = this.attributes.normal;\n            if (attribute !== undefined) {\n                attribute.copyVector3sArray(geometry.normals);\n                attribute.needsUpdate = true;\n            }\n            geometry.normalsNeedUpdate = false;\n        }\n        if (geometry.colorsNeedUpdate === true) {\n            attribute = this.attributes.color;\n            if (attribute !== undefined) {\n                attribute.copyColorsArray(geometry.colors);\n                attribute.needsUpdate = true;\n            }\n            geometry.colorsNeedUpdate = false;\n        }\n        if (geometry.uvsNeedUpdate) {\n            attribute = this.attributes.uv;\n            if (attribute !== undefined) {\n                attribute.copyVector2sArray(geometry.uvs);\n                attribute.needsUpdate = true;\n            }\n            geometry.uvsNeedUpdate = false;\n        }\n        if (geometry.lineDistancesNeedUpdate) {\n            attribute = this.attributes.lineDistance;\n            if (attribute !== undefined) {\n                attribute.copyArray(geometry.lineDistances);\n                attribute.needsUpdate = true;\n            }\n            geometry.lineDistancesNeedUpdate = false;\n        }\n        if (geometry.groupsNeedUpdate) {\n            geometry.computeGroups(object.geometry);\n            this.groups = geometry.groups;\n            geometry.groupsNeedUpdate = false;\n        }\n        return this;\n    },\n    fromGeometry: function (geometry) {\n        geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);\n        return this.fromDirectGeometry(geometry.__directGeometry);\n    },\n    fromDirectGeometry: function (geometry) {\n        var positions = new Float32Array(geometry.vertices.length * 3);\n        this.addAttribute('position', new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n        if (geometry.normals.length > 0) {\n            var normals = new Float32Array(geometry.normals.length * 3);\n            this.addAttribute('normal', new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n        }\n        if (geometry.colors.length > 0) {\n            var colors = new Float32Array(geometry.colors.length * 3);\n            this.addAttribute('color', new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n        }\n        if (geometry.uvs.length > 0) {\n            var uvs = new Float32Array(geometry.uvs.length * 2);\n            this.addAttribute('uv', new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n        }\n        if (geometry.uvs2.length > 0) {\n            var uvs2 = new Float32Array(geometry.uvs2.length * 2);\n            this.addAttribute('uv2', new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n        }\n        if (geometry.indices.length > 0) {\n            var TypeArray = arrayMax(geometry.indices) > 65535 ? Uint32Array : Uint16Array;\n            var indices = new TypeArray(geometry.indices.length * 3);\n            this.setIndex(new BufferAttribute(indices, 1).copyIndicesArray(geometry.indices));\n        }\n        // groups\n        this.groups = geometry.groups;\n        // morphs\n        for (var name in geometry.morphTargets) {\n            var array = [];\n            var morphTargets = geometry.morphTargets[name];\n            for (var i = 0, l = morphTargets.length; i < l; i++) {\n                var morphTarget = morphTargets[i];\n                var attribute = new Float32BufferAttribute(morphTarget.length * 3, 3);\n                array.push(attribute.copyVector3sArray(morphTarget));\n            }\n            this.morphAttributes[name] = array;\n        }\n        // skinning\n        if (geometry.skinIndices.length > 0) {\n            var skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);\n            this.addAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));\n        }\n        if (geometry.skinWeights.length > 0) {\n            var skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);\n            this.addAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));\n        }\n        //\n        if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n        }\n        if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n        }\n        return this;\n    },\n    computeBoundingBox: function () {\n        if (this.boundingBox === null) {\n            this.boundingBox = new Box3();\n        }\n        var position = this.attributes.position;\n        if (position !== undefined) {\n            this.boundingBox.setFromBufferAttribute(position);\n        }\n        else {\n            this.boundingBox.makeEmpty();\n        }\n        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n            console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n        }\n    },\n    computeBoundingSphere: function () {\n        var box = new Box3();\n        var vector = new Vector3();\n        return function computeBoundingSphere() {\n            if (this.boundingSphere === null) {\n                this.boundingSphere = new Sphere();\n            }\n            var position = this.attributes.position;\n            if (position) {\n                var center = this.boundingSphere.center;\n                box.setFromBufferAttribute(position);\n                box.getCenter(center);\n                // hoping to find a boundingSphere with a radius smaller than the\n                // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n                var maxRadiusSq = 0;\n                for (var i = 0, il = position.count; i < il; i++) {\n                    vector.x = position.getX(i);\n                    vector.y = position.getY(i);\n                    vector.z = position.getZ(i);\n                    maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n                }\n                this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n                if (isNaN(this.boundingSphere.radius)) {\n                    console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n                }\n            }\n        };\n    }(),\n    computeFaceNormals: function () {\n        // backwards compatibility\n    },\n    computeVertexNormals: function () {\n        var index = this.index;\n        var attributes = this.attributes;\n        var groups = this.groups;\n        if (attributes.position) {\n            var positions = attributes.position.array;\n            if (attributes.normal === undefined) {\n                this.addAttribute('normal', new BufferAttribute(new Float32Array(positions.length), 3));\n            }\n            else {\n                // reset existing normals to zero\n                var array = attributes.normal.array;\n                for (var i = 0, il = array.length; i < il; i++) {\n                    array[i] = 0;\n                }\n            }\n            var normals = attributes.normal.array;\n            var vA, vB, vC;\n            var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n            var cb = new Vector3(), ab = new Vector3();\n            // indexed elements\n            if (index) {\n                var indices = index.array;\n                if (groups.length === 0) {\n                    this.addGroup(0, indices.length);\n                }\n                for (var j = 0, jl = groups.length; j < jl; ++j) {\n                    var group = groups[j];\n                    var start = group.start;\n                    var count = group.count;\n                    for (var i = start, il = start + count; i < il; i += 3) {\n                        vA = indices[i + 0] * 3;\n                        vB = indices[i + 1] * 3;\n                        vC = indices[i + 2] * 3;\n                        pA.fromArray(positions, vA);\n                        pB.fromArray(positions, vB);\n                        pC.fromArray(positions, vC);\n                        cb.subVectors(pC, pB);\n                        ab.subVectors(pA, pB);\n                        cb.cross(ab);\n                        normals[vA] += cb.x;\n                        normals[vA + 1] += cb.y;\n                        normals[vA + 2] += cb.z;\n                        normals[vB] += cb.x;\n                        normals[vB + 1] += cb.y;\n                        normals[vB + 2] += cb.z;\n                        normals[vC] += cb.x;\n                        normals[vC + 1] += cb.y;\n                        normals[vC + 2] += cb.z;\n                    }\n                }\n            }\n            else {\n                // non-indexed elements (unconnected triangle soup)\n                for (var i = 0, il = positions.length; i < il; i += 9) {\n                    pA.fromArray(positions, i);\n                    pB.fromArray(positions, i + 3);\n                    pC.fromArray(positions, i + 6);\n                    cb.subVectors(pC, pB);\n                    ab.subVectors(pA, pB);\n                    cb.cross(ab);\n                    normals[i] = cb.x;\n                    normals[i + 1] = cb.y;\n                    normals[i + 2] = cb.z;\n                    normals[i + 3] = cb.x;\n                    normals[i + 4] = cb.y;\n                    normals[i + 5] = cb.z;\n                    normals[i + 6] = cb.x;\n                    normals[i + 7] = cb.y;\n                    normals[i + 8] = cb.z;\n                }\n            }\n            this.normalizeNormals();\n            attributes.normal.needsUpdate = true;\n        }\n    },\n    merge: function (geometry, offset) {\n        if (!(geometry && geometry.isBufferGeometry)) {\n            console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n            return;\n        }\n        if (offset === undefined)\n            offset = 0;\n        var attributes = this.attributes;\n        for (var key in attributes) {\n            if (geometry.attributes[key] === undefined)\n                continue;\n            var attribute1 = attributes[key];\n            var attributeArray1 = attribute1.array;\n            var attribute2 = geometry.attributes[key];\n            var attributeArray2 = attribute2.array;\n            var attributeSize = attribute2.itemSize;\n            for (var i = 0, j = attributeSize * offset; i < attributeArray2.length; i++, j++) {\n                attributeArray1[j] = attributeArray2[i];\n            }\n        }\n        return this;\n    },\n    normalizeNormals: function () {\n        var vector = new Vector3();\n        return function normalizeNormals() {\n            var normals = this.attributes.normal;\n            for (var i = 0, il = normals.count; i < il; i++) {\n                vector.x = normals.getX(i);\n                vector.y = normals.getY(i);\n                vector.z = normals.getZ(i);\n                vector.normalize();\n                normals.setXYZ(i, vector.x, vector.y, vector.z);\n            }\n        };\n    }(),\n    toNonIndexed: function () {\n        if (this.index === null) {\n            console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');\n            return this;\n        }\n        var geometry2 = new BufferGeometry();\n        var indices = this.index.array;\n        var attributes = this.attributes;\n        for (var name in attributes) {\n            var attribute = attributes[name];\n            var array = attribute.array;\n            var itemSize = attribute.itemSize;\n            var array2 = new array.constructor(indices.length * itemSize);\n            var index = 0, index2 = 0;\n            for (var i = 0, l = indices.length; i < l; i++) {\n                index = indices[i] * itemSize;\n                for (var j = 0; j < itemSize; j++) {\n                    array2[index2++] = array[index++];\n                }\n            }\n            geometry2.addAttribute(name, new BufferAttribute(array2, itemSize));\n        }\n        return geometry2;\n    },\n    toJSON: function () {\n        var data = {\n            metadata: {\n                version: 4.5,\n                type: 'BufferGeometry',\n                generator: 'BufferGeometry.toJSON'\n            }\n        };\n        // standard BufferGeometry serialization\n        data.uuid = this.uuid;\n        data.type = this.type;\n        if (this.name !== '')\n            data.name = this.name;\n        if (this.parameters !== undefined) {\n            var parameters = this.parameters;\n            for (var key in parameters) {\n                if (parameters[key] !== undefined)\n                    data[key] = parameters[key];\n            }\n            return data;\n        }\n        data.data = { attributes: {} };\n        var index = this.index;\n        if (index !== null) {\n            var array = Array.prototype.slice.call(index.array);\n            data.data.index = {\n                type: index.array.constructor.name,\n                array: array\n            };\n        }\n        var attributes = this.attributes;\n        for (var key in attributes) {\n            var attribute = attributes[key];\n            var array = Array.prototype.slice.call(attribute.array);\n            data.data.attributes[key] = {\n                itemSize: attribute.itemSize,\n                type: attribute.array.constructor.name,\n                array: array,\n                normalized: attribute.normalized\n            };\n        }\n        var groups = this.groups;\n        if (groups.length > 0) {\n            data.data.groups = JSON.parse(JSON.stringify(groups));\n        }\n        var boundingSphere = this.boundingSphere;\n        if (boundingSphere !== null) {\n            data.data.boundingSphere = {\n                center: boundingSphere.center.toArray(),\n                radius: boundingSphere.radius\n            };\n        }\n        return data;\n    },\n    clone: function () {\n        /*\n         // Handle primitives\n\n         var parameters = this.parameters;\n\n         if ( parameters !== undefined ) {\n\n         var values = [];\n\n         for ( var key in parameters ) {\n\n         values.push( parameters[ key ] );\n\n         }\n\n         var geometry = Object.create( this.constructor.prototype );\n         this.constructor.apply( geometry, values );\n         return geometry;\n\n         }\n\n         return new this.constructor().copy( this );\n         */\n        return new BufferGeometry().copy(this);\n    },\n    copy: function (source) {\n        var name, i, l;\n        // reset\n        this.index = null;\n        this.attributes = {};\n        this.morphAttributes = {};\n        this.groups = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n        // name\n        this.name = source.name;\n        // index\n        var index = source.index;\n        if (index !== null) {\n            this.setIndex(index.clone());\n        }\n        // attributes\n        var attributes = source.attributes;\n        for (name in attributes) {\n            var attribute = attributes[name];\n            this.addAttribute(name, attribute.clone());\n        }\n        // morph attributes\n        var morphAttributes = source.morphAttributes;\n        for (name in morphAttributes) {\n            var array = [];\n            var morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n            for (i = 0, l = morphAttribute.length; i < l; i++) {\n                array.push(morphAttribute[i].clone());\n            }\n            this.morphAttributes[name] = array;\n        }\n        // groups\n        var groups = source.groups;\n        for (i = 0, l = groups.length; i < l; i++) {\n            var group = groups[i];\n            this.addGroup(group.start, group.count, group.materialIndex);\n        }\n        // bounding box\n        var boundingBox = source.boundingBox;\n        if (boundingBox !== null) {\n            this.boundingBox = boundingBox.clone();\n        }\n        // bounding sphere\n        var boundingSphere = source.boundingSphere;\n        if (boundingSphere !== null) {\n            this.boundingSphere = boundingSphere.clone();\n        }\n        // draw range\n        this.drawRange.start = source.drawRange.start;\n        this.drawRange.count = source.drawRange.count;\n        return this;\n    },\n    dispose: function () {\n        this.dispatchEvent({ type: 'dispose' });\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n// BoxGeometry\nfunction BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n    Geometry.call(this);\n    this.type = 'BoxGeometry';\n    this.parameters = {\n        width: width,\n        height: height,\n        depth: depth,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments,\n        depthSegments: depthSegments\n    };\n    this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));\n    this.mergeVertices();\n}\nBoxGeometry.prototype = Object.create(Geometry.prototype);\nBoxGeometry.prototype.constructor = BoxGeometry;\n// BoxBufferGeometry\nfunction BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n    BufferGeometry.call(this);\n    this.type = 'BoxBufferGeometry';\n    this.parameters = {\n        width: width,\n        height: height,\n        depth: depth,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments,\n        depthSegments: depthSegments\n    };\n    var scope = this;\n    width = width || 1;\n    height = height || 1;\n    depth = depth || 1;\n    // segments\n    widthSegments = Math.floor(widthSegments) || 1;\n    heightSegments = Math.floor(heightSegments) || 1;\n    depthSegments = Math.floor(depthSegments) || 1;\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    // helper variables\n    var numberOfVertices = 0;\n    var groupStart = 0;\n    // build each side of the box geometry\n    buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n    buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n    buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n    buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n    buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n    buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n        var segmentWidth = width / gridX;\n        var segmentHeight = height / gridY;\n        var widthHalf = width / 2;\n        var heightHalf = height / 2;\n        var depthHalf = depth / 2;\n        var gridX1 = gridX + 1;\n        var gridY1 = gridY + 1;\n        var vertexCounter = 0;\n        var groupCount = 0;\n        var ix, iy;\n        var vector = new Vector3();\n        // generate vertices, normals and uvs\n        for (iy = 0; iy < gridY1; iy++) {\n            var y = iy * segmentHeight - heightHalf;\n            for (ix = 0; ix < gridX1; ix++) {\n                var x = ix * segmentWidth - widthHalf;\n                // set values to correct vector component\n                vector[u] = x * udir;\n                vector[v] = y * vdir;\n                vector[w] = depthHalf;\n                // now apply vector to vertex buffer\n                vertices.push(vector.x, vector.y, vector.z);\n                // set values to correct vector component\n                vector[u] = 0;\n                vector[v] = 0;\n                vector[w] = depth > 0 ? 1 : -1;\n                // now apply vector to normal buffer\n                normals.push(vector.x, vector.y, vector.z);\n                // uvs\n                uvs.push(ix / gridX);\n                uvs.push(1 - (iy / gridY));\n                // counters\n                vertexCounter += 1;\n            }\n        }\n        // indices\n        // 1. you need three indices to draw a single face\n        // 2. a single segment consists of two faces\n        // 3. so we need to generate six (2*3) indices per segment\n        for (iy = 0; iy < gridY; iy++) {\n            for (ix = 0; ix < gridX; ix++) {\n                var a = numberOfVertices + ix + gridX1 * iy;\n                var b = numberOfVertices + ix + gridX1 * (iy + 1);\n                var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n                var d = numberOfVertices + (ix + 1) + gridX1 * iy;\n                // faces\n                indices.push(a, b, d);\n                indices.push(b, c, d);\n                // increase counter\n                groupCount += 6;\n            }\n        }\n        // add a group to the geometry. this will ensure multi material support\n        scope.addGroup(groupStart, groupCount, materialIndex);\n        // calculate new start value for groups\n        groupStart += groupCount;\n        // update total number of vertices\n        numberOfVertices += vertexCounter;\n    }\n}\nBoxBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n// PlaneGeometry\nfunction PlaneGeometry(width, height, widthSegments, heightSegments) {\n    Geometry.call(this);\n    this.type = 'PlaneGeometry';\n    this.parameters = {\n        width: width,\n        height: height,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments\n    };\n    this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));\n    this.mergeVertices();\n}\nPlaneGeometry.prototype = Object.create(Geometry.prototype);\nPlaneGeometry.prototype.constructor = PlaneGeometry;\n// PlaneBufferGeometry\nfunction PlaneBufferGeometry(width, height, widthSegments, heightSegments) {\n    BufferGeometry.call(this);\n    this.type = 'PlaneBufferGeometry';\n    this.parameters = {\n        width: width,\n        height: height,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments\n    };\n    width = width || 1;\n    height = height || 1;\n    var width_half = width / 2;\n    var height_half = height / 2;\n    var gridX = Math.floor(widthSegments) || 1;\n    var gridY = Math.floor(heightSegments) || 1;\n    var gridX1 = gridX + 1;\n    var gridY1 = gridY + 1;\n    var segment_width = width / gridX;\n    var segment_height = height / gridY;\n    var ix, iy;\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    // generate vertices, normals and uvs\n    for (iy = 0; iy < gridY1; iy++) {\n        var y = iy * segment_height - height_half;\n        for (ix = 0; ix < gridX1; ix++) {\n            var x = ix * segment_width - width_half;\n            vertices.push(x, -y, 0);\n            normals.push(0, 0, 1);\n            uvs.push(ix / gridX);\n            uvs.push(1 - (iy / gridY));\n        }\n    }\n    // indices\n    for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n            var a = ix + gridX1 * iy;\n            var b = ix + gridX1 * (iy + 1);\n            var c = (ix + 1) + gridX1 * (iy + 1);\n            var d = (ix + 1) + gridX1 * iy;\n            // faces\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\nPlaneBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>\n * }\n */\nfunction MeshBasicMaterial(parameters) {\n    Material.call(this);\n    this.type = 'MeshBasicMaterial';\n    this.color = new Color(0xffffff); // emissive\n    this.map = null;\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n    this.specularMap = null;\n    this.alphaMap = null;\n    this.envMap = null;\n    this.combine = MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n    this.skinning = false;\n    this.morphTargets = false;\n    this.lights = false;\n    this.setValues(parameters);\n}\nMeshBasicMaterial.prototype = Object.create(Material.prototype);\nMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\nMeshBasicMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    return this;\n};\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\nfunction ShaderMaterial(parameters) {\n    Material.call(this);\n    this.type = 'ShaderMaterial';\n    this.defines = {};\n    this.uniforms = {};\n    this.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n    this.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n    this.linewidth = 1;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.fog = false; // set to use scene fog\n    this.lights = false; // set to use scene lights\n    this.clipping = false; // set to use user-defined clipping planes\n    this.skinning = false; // set to use skinning attribute streams\n    this.morphTargets = false; // set to use morph targets\n    this.morphNormals = false; // set to use morph normals\n    this.extensions = {\n        derivatives: false,\n        fragDepth: false,\n        drawBuffers: false,\n        shaderTextureLOD: false // set to use shader texture LOD\n    };\n    // When rendered geometry doesn't include these attributes but the material does,\n    // use these default values in WebGL. This avoids errors when buffer data is missing.\n    this.defaultAttributeValues = {\n        'color': [1, 1, 1],\n        'uv': [0, 0],\n        'uv2': [0, 0]\n    };\n    this.index0AttributeName = undefined;\n    this.uniformsNeedUpdate = false;\n    if (parameters !== undefined) {\n        if (parameters.attributes !== undefined) {\n            console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n        }\n        this.setValues(parameters);\n    }\n}\nShaderMaterial.prototype = Object.create(Material.prototype);\nShaderMaterial.prototype.constructor = ShaderMaterial;\nShaderMaterial.prototype.isShaderMaterial = true;\nShaderMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.fragmentShader = source.fragmentShader;\n    this.vertexShader = source.vertexShader;\n    this.uniforms = UniformsUtils.clone(source.uniforms);\n    this.defines = source.defines;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.lights = source.lights;\n    this.clipping = source.clipping;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n    this.extensions = source.extensions;\n    return this;\n};\nShaderMaterial.prototype.toJSON = function (meta) {\n    var data = Material.prototype.toJSON.call(this, meta);\n    data.uniforms = this.uniforms;\n    data.vertexShader = this.vertexShader;\n    data.fragmentShader = this.fragmentShader;\n    return data;\n};\n/**\n * @author bhouston / http://clara.io\n */\nfunction Ray(origin, direction) {\n    this.origin = (origin !== undefined) ? origin : new Vector3();\n    this.direction = (direction !== undefined) ? direction : new Vector3();\n}\nObject.assign(Ray.prototype, {\n    set: function (origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction);\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (ray) {\n        this.origin.copy(ray.origin);\n        this.direction.copy(ray.direction);\n        return this;\n    },\n    at: function (t, optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return result.copy(this.direction).multiplyScalar(t).add(this.origin);\n    },\n    lookAt: function (v) {\n        this.direction.copy(v).sub(this.origin).normalize();\n        return this;\n    },\n    recast: function () {\n        var v1 = new Vector3();\n        return function recast(t) {\n            this.origin.copy(this.at(t, v1));\n            return this;\n        };\n    }(),\n    closestPointToPoint: function (point, optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        result.subVectors(point, this.origin);\n        var directionDistance = result.dot(this.direction);\n        if (directionDistance < 0) {\n            return result.copy(this.origin);\n        }\n        return result.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n    },\n    distanceToPoint: function (point) {\n        return Math.sqrt(this.distanceSqToPoint(point));\n    },\n    distanceSqToPoint: function () {\n        var v1 = new Vector3();\n        return function distanceSqToPoint(point) {\n            var directionDistance = v1.subVectors(point, this.origin).dot(this.direction);\n            // point behind the ray\n            if (directionDistance < 0) {\n                return this.origin.distanceToSquared(point);\n            }\n            v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n            return v1.distanceToSquared(point);\n        };\n    }(),\n    distanceSqToSegment: function () {\n        var segCenter = new Vector3();\n        var segDir = new Vector3();\n        var diff = new Vector3();\n        return function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n            // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n            // It returns the min distance between the ray and the segment\n            // defined by v0 and v1\n            // It can also set two optional targets :\n            // - The closest point on the ray\n            // - The closest point on the segment\n            segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n            segDir.copy(v1).sub(v0).normalize();\n            diff.copy(this.origin).sub(segCenter);\n            var segExtent = v0.distanceTo(v1) * 0.5;\n            var a01 = -this.direction.dot(segDir);\n            var b0 = diff.dot(this.direction);\n            var b1 = -diff.dot(segDir);\n            var c = diff.lengthSq();\n            var det = Math.abs(1 - a01 * a01);\n            var s0, s1, sqrDist, extDet;\n            if (det > 0) {\n                // The ray and segment are not parallel.\n                s0 = a01 * b1 - b0;\n                s1 = a01 * b0 - b1;\n                extDet = segExtent * det;\n                if (s0 >= 0) {\n                    if (s1 >= -extDet) {\n                        if (s1 <= extDet) {\n                            // region 0\n                            // Minimum at interior points of ray and segment.\n                            var invDet = 1 / det;\n                            s0 *= invDet;\n                            s1 *= invDet;\n                            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n                        }\n                        else {\n                            // region 1\n                            s1 = segExtent;\n                            s0 = Math.max(0, -(a01 * s1 + b0));\n                            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                        }\n                    }\n                    else {\n                        // region 5\n                        s1 = -segExtent;\n                        s0 = Math.max(0, -(a01 * s1 + b0));\n                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                    }\n                }\n                else {\n                    if (s1 <= -extDet) {\n                        // region 4\n                        s0 = Math.max(0, -(-a01 * segExtent + b0));\n                        s1 = (s0 > 0) ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                    }\n                    else if (s1 <= extDet) {\n                        // region 3\n                        s0 = 0;\n                        s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n                        sqrDist = s1 * (s1 + 2 * b1) + c;\n                    }\n                    else {\n                        // region 2\n                        s0 = Math.max(0, -(a01 * segExtent + b0));\n                        s1 = (s0 > 0) ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n                    }\n                }\n            }\n            else {\n                // Ray and segment are parallel.\n                s1 = (a01 > 0) ? -segExtent : segExtent;\n                s0 = Math.max(0, -(a01 * s1 + b0));\n                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            }\n            if (optionalPointOnRay) {\n                optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n            }\n            if (optionalPointOnSegment) {\n                optionalPointOnSegment.copy(segDir).multiplyScalar(s1).add(segCenter);\n            }\n            return sqrDist;\n        };\n    }(),\n    intersectSphere: function () {\n        var v1 = new Vector3();\n        return function intersectSphere(sphere, optionalTarget) {\n            v1.subVectors(sphere.center, this.origin);\n            var tca = v1.dot(this.direction);\n            var d2 = v1.dot(v1) - tca * tca;\n            var radius2 = sphere.radius * sphere.radius;\n            if (d2 > radius2)\n                return null;\n            var thc = Math.sqrt(radius2 - d2);\n            // t0 = first intersect point - entrance on front of sphere\n            var t0 = tca - thc;\n            // t1 = second intersect point - exit point on back of sphere\n            var t1 = tca + thc;\n            // test to see if both t0 and t1 are behind the ray - if so, return null\n            if (t0 < 0 && t1 < 0)\n                return null;\n            // test to see if t0 is behind the ray:\n            // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n            // in order to always return an intersect point that is in front of the ray.\n            if (t0 < 0)\n                return this.at(t1, optionalTarget);\n            // else t0 is in front of the ray, so return the first collision point scaled by t0\n            return this.at(t0, optionalTarget);\n        };\n    }(),\n    intersectsSphere: function (sphere) {\n        return this.distanceToPoint(sphere.center) <= sphere.radius;\n    },\n    distanceToPlane: function (plane) {\n        var denominator = plane.normal.dot(this.direction);\n        if (denominator === 0) {\n            // line is coplanar, return origin\n            if (plane.distanceToPoint(this.origin) === 0) {\n                return 0;\n            }\n            // Null is preferable to undefined since undefined means.... it is undefined\n            return null;\n        }\n        var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;\n        // Return if the ray never intersects the plane\n        return t >= 0 ? t : null;\n    },\n    intersectPlane: function (plane, optionalTarget) {\n        var t = this.distanceToPlane(plane);\n        if (t === null) {\n            return null;\n        }\n        return this.at(t, optionalTarget);\n    },\n    intersectsPlane: function (plane) {\n        // check if the ray lies on the plane first\n        var distToPoint = plane.distanceToPoint(this.origin);\n        if (distToPoint === 0) {\n            return true;\n        }\n        var denominator = plane.normal.dot(this.direction);\n        if (denominator * distToPoint < 0) {\n            return true;\n        }\n        // ray origin is behind the plane (and is pointing behind it)\n        return false;\n    },\n    intersectBox: function (box, optionalTarget) {\n        var tmin, tmax, tymin, tymax, tzmin, tzmax;\n        var invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;\n        var origin = this.origin;\n        if (invdirx >= 0) {\n            tmin = (box.min.x - origin.x) * invdirx;\n            tmax = (box.max.x - origin.x) * invdirx;\n        }\n        else {\n            tmin = (box.max.x - origin.x) * invdirx;\n            tmax = (box.min.x - origin.x) * invdirx;\n        }\n        if (invdiry >= 0) {\n            tymin = (box.min.y - origin.y) * invdiry;\n            tymax = (box.max.y - origin.y) * invdiry;\n        }\n        else {\n            tymin = (box.max.y - origin.y) * invdiry;\n            tymax = (box.min.y - origin.y) * invdiry;\n        }\n        if ((tmin > tymax) || (tymin > tmax))\n            return null;\n        // These lines also handle the case where tmin or tmax is NaN\n        // (result of 0 * Infinity). x !== x returns true if x is NaN\n        if (tymin > tmin || tmin !== tmin)\n            tmin = tymin;\n        if (tymax < tmax || tmax !== tmax)\n            tmax = tymax;\n        if (invdirz >= 0) {\n            tzmin = (box.min.z - origin.z) * invdirz;\n            tzmax = (box.max.z - origin.z) * invdirz;\n        }\n        else {\n            tzmin = (box.max.z - origin.z) * invdirz;\n            tzmax = (box.min.z - origin.z) * invdirz;\n        }\n        if ((tmin > tzmax) || (tzmin > tmax))\n            return null;\n        if (tzmin > tmin || tmin !== tmin)\n            tmin = tzmin;\n        if (tzmax < tmax || tmax !== tmax)\n            tmax = tzmax;\n        //return point closest to the ray (positive side)\n        if (tmax < 0)\n            return null;\n        return this.at(tmin >= 0 ? tmin : tmax, optionalTarget);\n    },\n    intersectsBox: (function () {\n        var v = new Vector3();\n        return function intersectsBox(box) {\n            return this.intersectBox(box, v) !== null;\n        };\n    })(),\n    intersectTriangle: function () {\n        // Compute the offset origin, edges, and normal.\n        var diff = new Vector3();\n        var edge1 = new Vector3();\n        var edge2 = new Vector3();\n        var normal = new Vector3();\n        return function intersectTriangle(a, b, c, backfaceCulling, optionalTarget) {\n            // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n            edge1.subVectors(b, a);\n            edge2.subVectors(c, a);\n            normal.crossVectors(edge1, edge2);\n            // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n            // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n            //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n            //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n            //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n            var DdN = this.direction.dot(normal);\n            var sign;\n            if (DdN > 0) {\n                if (backfaceCulling)\n                    return null;\n                sign = 1;\n            }\n            else if (DdN < 0) {\n                sign = -1;\n                DdN = -DdN;\n            }\n            else {\n                return null;\n            }\n            diff.subVectors(this.origin, a);\n            var DdQxE2 = sign * this.direction.dot(edge2.crossVectors(diff, edge2));\n            // b1 < 0, no intersection\n            if (DdQxE2 < 0) {\n                return null;\n            }\n            var DdE1xQ = sign * this.direction.dot(edge1.cross(diff));\n            // b2 < 0, no intersection\n            if (DdE1xQ < 0) {\n                return null;\n            }\n            // b1+b2 > 1, no intersection\n            if (DdQxE2 + DdE1xQ > DdN) {\n                return null;\n            }\n            // Line intersects triangle, check if ray does.\n            var QdN = -sign * diff.dot(normal);\n            // t < 0, no intersection\n            if (QdN < 0) {\n                return null;\n            }\n            // Ray intersects triangle.\n            return this.at(QdN / DdN, optionalTarget);\n        };\n    }(),\n    applyMatrix4: function (matrix4) {\n        this.origin.applyMatrix4(matrix4);\n        this.direction.transformDirection(matrix4);\n        return this;\n    },\n    equals: function (ray) {\n        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n    }\n});\n/**\n * @author bhouston / http://clara.io\n */\nfunction Line3(start, end) {\n    this.start = (start !== undefined) ? start : new Vector3();\n    this.end = (end !== undefined) ? end : new Vector3();\n}\nObject.assign(Line3.prototype, {\n    set: function (start, end) {\n        this.start.copy(start);\n        this.end.copy(end);\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (line) {\n        this.start.copy(line.start);\n        this.end.copy(line.end);\n        return this;\n    },\n    getCenter: function (optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return result.addVectors(this.start, this.end).multiplyScalar(0.5);\n    },\n    delta: function (optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return result.subVectors(this.end, this.start);\n    },\n    distanceSq: function () {\n        return this.start.distanceToSquared(this.end);\n    },\n    distance: function () {\n        return this.start.distanceTo(this.end);\n    },\n    at: function (t, optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return this.delta(result).multiplyScalar(t).add(this.start);\n    },\n    closestPointToPointParameter: function () {\n        var startP = new Vector3();\n        var startEnd = new Vector3();\n        return function closestPointToPointParameter(point, clampToLine) {\n            startP.subVectors(point, this.start);\n            startEnd.subVectors(this.end, this.start);\n            var startEnd2 = startEnd.dot(startEnd);\n            var startEnd_startP = startEnd.dot(startP);\n            var t = startEnd_startP / startEnd2;\n            if (clampToLine) {\n                t = _Math.clamp(t, 0, 1);\n            }\n            return t;\n        };\n    }(),\n    closestPointToPoint: function (point, clampToLine, optionalTarget) {\n        var t = this.closestPointToPointParameter(point, clampToLine);\n        var result = optionalTarget || new Vector3();\n        return this.delta(result).multiplyScalar(t).add(this.start);\n    },\n    applyMatrix4: function (matrix) {\n        this.start.applyMatrix4(matrix);\n        this.end.applyMatrix4(matrix);\n        return this;\n    },\n    equals: function (line) {\n        return line.start.equals(this.start) && line.end.equals(this.end);\n    }\n});\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Triangle(a, b, c) {\n    this.a = (a !== undefined) ? a : new Vector3();\n    this.b = (b !== undefined) ? b : new Vector3();\n    this.c = (c !== undefined) ? c : new Vector3();\n}\nObject.assign(Triangle, {\n    normal: function () {\n        var v0 = new Vector3();\n        return function normal(a, b, c, optionalTarget) {\n            var result = optionalTarget || new Vector3();\n            result.subVectors(c, b);\n            v0.subVectors(a, b);\n            result.cross(v0);\n            var resultLengthSq = result.lengthSq();\n            if (resultLengthSq > 0) {\n                return result.multiplyScalar(1 / Math.sqrt(resultLengthSq));\n            }\n            return result.set(0, 0, 0);\n        };\n    }(),\n    // static/instance method to calculate barycentric coordinates\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n    barycoordFromPoint: function () {\n        var v0 = new Vector3();\n        var v1 = new Vector3();\n        var v2 = new Vector3();\n        return function barycoordFromPoint(point, a, b, c, optionalTarget) {\n            v0.subVectors(c, a);\n            v1.subVectors(b, a);\n            v2.subVectors(point, a);\n            var dot00 = v0.dot(v0);\n            var dot01 = v0.dot(v1);\n            var dot02 = v0.dot(v2);\n            var dot11 = v1.dot(v1);\n            var dot12 = v1.dot(v2);\n            var denom = (dot00 * dot11 - dot01 * dot01);\n            var result = optionalTarget || new Vector3();\n            // collinear or singular triangle\n            if (denom === 0) {\n                // arbitrary location outside of triangle?\n                // not sure if this is the best idea, maybe should be returning undefined\n                return result.set(-2, -1, -1);\n            }\n            var invDenom = 1 / denom;\n            var u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n            var v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n            // barycentric coordinates must always sum to 1\n            return result.set(1 - u - v, v, u);\n        };\n    }(),\n    containsPoint: function () {\n        var v1 = new Vector3();\n        return function containsPoint(point, a, b, c) {\n            var result = Triangle.barycoordFromPoint(point, a, b, c, v1);\n            return (result.x >= 0) && (result.y >= 0) && ((result.x + result.y) <= 1);\n        };\n    }()\n});\nObject.assign(Triangle.prototype, {\n    set: function (a, b, c) {\n        this.a.copy(a);\n        this.b.copy(b);\n        this.c.copy(c);\n        return this;\n    },\n    setFromPointsAndIndices: function (points, i0, i1, i2) {\n        this.a.copy(points[i0]);\n        this.b.copy(points[i1]);\n        this.c.copy(points[i2]);\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (triangle) {\n        this.a.copy(triangle.a);\n        this.b.copy(triangle.b);\n        this.c.copy(triangle.c);\n        return this;\n    },\n    area: function () {\n        var v0 = new Vector3();\n        var v1 = new Vector3();\n        return function area() {\n            v0.subVectors(this.c, this.b);\n            v1.subVectors(this.a, this.b);\n            return v0.cross(v1).length() * 0.5;\n        };\n    }(),\n    midpoint: function (optionalTarget) {\n        var result = optionalTarget || new Vector3();\n        return result.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n    },\n    normal: function (optionalTarget) {\n        return Triangle.normal(this.a, this.b, this.c, optionalTarget);\n    },\n    plane: function (optionalTarget) {\n        var result = optionalTarget || new Plane();\n        return result.setFromCoplanarPoints(this.a, this.b, this.c);\n    },\n    barycoordFromPoint: function (point, optionalTarget) {\n        return Triangle.barycoordFromPoint(point, this.a, this.b, this.c, optionalTarget);\n    },\n    containsPoint: function (point) {\n        return Triangle.containsPoint(point, this.a, this.b, this.c);\n    },\n    intersectsBox: function (box) {\n        return box.intersectsTriangle(this);\n    },\n    closestPointToPoint: function () {\n        var plane = new Plane();\n        var edgeList = [new Line3(), new Line3(), new Line3()];\n        var projectedPoint = new Vector3();\n        var closestPoint = new Vector3();\n        return function closestPointToPoint(point, optionalTarget) {\n            var result = optionalTarget || new Vector3();\n            var minDistance = Infinity;\n            // project the point onto the plane of the triangle\n            plane.setFromCoplanarPoints(this.a, this.b, this.c);\n            plane.projectPoint(point, projectedPoint);\n            // check if the projection lies within the triangle\n            if (this.containsPoint(projectedPoint) === true) {\n                // if so, this is the closest point\n                result.copy(projectedPoint);\n            }\n            else {\n                // if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n                edgeList[0].set(this.a, this.b);\n                edgeList[1].set(this.b, this.c);\n                edgeList[2].set(this.c, this.a);\n                for (var i = 0; i < edgeList.length; i++) {\n                    edgeList[i].closestPointToPoint(projectedPoint, true, closestPoint);\n                    var distance = projectedPoint.distanceToSquared(closestPoint);\n                    if (distance < minDistance) {\n                        minDistance = distance;\n                        result.copy(closestPoint);\n                    }\n                }\n            }\n            return result;\n        };\n    }(),\n    equals: function (triangle) {\n        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author jonobr1 / http://jonobr1.com/\n */\nfunction Mesh(geometry, material) {\n    Object3D.call(this);\n    this.type = 'Mesh';\n    this.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    this.material = material !== undefined ? material : new MeshBasicMaterial({ color: Math.random() * 0xffffff });\n    this.drawMode = TrianglesDrawMode;\n    this.updateMorphTargets();\n}\nMesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Mesh,\n    isMesh: true,\n    setDrawMode: function (value) {\n        this.drawMode = value;\n    },\n    copy: function (source) {\n        Object3D.prototype.copy.call(this, source);\n        this.drawMode = source.drawMode;\n        if (source.morphTargetInfluences !== undefined) {\n            this.morphTargetInfluences = source.morphTargetInfluences.slice();\n        }\n        if (source.morphTargetDictionary !== undefined) {\n            this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n        }\n        return this;\n    },\n    updateMorphTargets: function () {\n        var geometry = this.geometry;\n        var m, ml, name;\n        if (geometry.isBufferGeometry) {\n            var morphAttributes = geometry.morphAttributes;\n            var keys = Object.keys(morphAttributes);\n            if (keys.length > 0) {\n                var morphAttribute = morphAttributes[keys[0]];\n                if (morphAttribute !== undefined) {\n                    this.morphTargetInfluences = [];\n                    this.morphTargetDictionary = {};\n                    for (m = 0, ml = morphAttribute.length; m < ml; m++) {\n                        name = morphAttribute[m].name || String(m);\n                        this.morphTargetInfluences.push(0);\n                        this.morphTargetDictionary[name] = m;\n                    }\n                }\n            }\n        }\n        else {\n            var morphTargets = geometry.morphTargets;\n            if (morphTargets !== undefined && morphTargets.length > 0) {\n                this.morphTargetInfluences = [];\n                this.morphTargetDictionary = {};\n                for (m = 0, ml = morphTargets.length; m < ml; m++) {\n                    name = morphTargets[m].name || String(m);\n                    this.morphTargetInfluences.push(0);\n                    this.morphTargetDictionary[name] = m;\n                }\n            }\n        }\n    },\n    raycast: (function () {\n        var inverseMatrix = new Matrix4();\n        var ray = new Ray();\n        var sphere = new Sphere();\n        var vA = new Vector3();\n        var vB = new Vector3();\n        var vC = new Vector3();\n        var tempA = new Vector3();\n        var tempB = new Vector3();\n        var tempC = new Vector3();\n        var uvA = new Vector2();\n        var uvB = new Vector2();\n        var uvC = new Vector2();\n        var barycoord = new Vector3();\n        var intersectionPoint = new Vector3();\n        var intersectionPointWorld = new Vector3();\n        function uvIntersection(point, p1, p2, p3, uv1, uv2, uv3) {\n            Triangle.barycoordFromPoint(point, p1, p2, p3, barycoord);\n            uv1.multiplyScalar(barycoord.x);\n            uv2.multiplyScalar(barycoord.y);\n            uv3.multiplyScalar(barycoord.z);\n            uv1.add(uv2).add(uv3);\n            return uv1.clone();\n        }\n        function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n            var intersect;\n            if (material.side === BackSide) {\n                intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n            }\n            else {\n                intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n            }\n            if (intersect === null)\n                return null;\n            intersectionPointWorld.copy(point);\n            intersectionPointWorld.applyMatrix4(object.matrixWorld);\n            var distance = raycaster.ray.origin.distanceTo(intersectionPointWorld);\n            if (distance < raycaster.near || distance > raycaster.far)\n                return null;\n            return {\n                distance: distance,\n                point: intersectionPointWorld.clone(),\n                object: object\n            };\n        }\n        function checkBufferGeometryIntersection(object, raycaster, ray, position, uv, a, b, c) {\n            vA.fromBufferAttribute(position, a);\n            vB.fromBufferAttribute(position, b);\n            vC.fromBufferAttribute(position, c);\n            var intersection = checkIntersection(object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint);\n            if (intersection) {\n                if (uv) {\n                    uvA.fromBufferAttribute(uv, a);\n                    uvB.fromBufferAttribute(uv, b);\n                    uvC.fromBufferAttribute(uv, c);\n                    intersection.uv = uvIntersection(intersectionPoint, vA, vB, vC, uvA, uvB, uvC);\n                }\n                intersection.face = new Face3(a, b, c, Triangle.normal(vA, vB, vC));\n                intersection.faceIndex = a;\n            }\n            return intersection;\n        }\n        return function raycast(raycaster, intersects) {\n            var geometry = this.geometry;\n            var material = this.material;\n            var matrixWorld = this.matrixWorld;\n            if (material === undefined)\n                return;\n            // Checking boundingSphere distance to ray\n            if (geometry.boundingSphere === null)\n                geometry.computeBoundingSphere();\n            sphere.copy(geometry.boundingSphere);\n            sphere.applyMatrix4(matrixWorld);\n            if (raycaster.ray.intersectsSphere(sphere) === false)\n                return;\n            //\n            inverseMatrix.getInverse(matrixWorld);\n            ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n            // Check boundingBox before continuing\n            if (geometry.boundingBox !== null) {\n                if (ray.intersectsBox(geometry.boundingBox) === false)\n                    return;\n            }\n            var intersection;\n            if (geometry.isBufferGeometry) {\n                var a, b, c;\n                var index = geometry.index;\n                var position = geometry.attributes.position;\n                var uv = geometry.attributes.uv;\n                var i, l;\n                if (index !== null) {\n                    // indexed buffer geometry\n                    for (i = 0, l = index.count; i < l; i += 3) {\n                        a = index.getX(i);\n                        b = index.getX(i + 1);\n                        c = index.getX(i + 2);\n                        intersection = checkBufferGeometryIntersection(this, raycaster, ray, position, uv, a, b, c);\n                        if (intersection) {\n                            intersection.faceIndex = Math.floor(i / 3); // triangle number in indices buffer semantics\n                            intersects.push(intersection);\n                        }\n                    }\n                }\n                else if (position !== undefined) {\n                    // non-indexed buffer geometry\n                    for (i = 0, l = position.count; i < l; i += 3) {\n                        a = i;\n                        b = i + 1;\n                        c = i + 2;\n                        intersection = checkBufferGeometryIntersection(this, raycaster, ray, position, uv, a, b, c);\n                        if (intersection) {\n                            intersection.index = a; // triangle number in positions buffer semantics\n                            intersects.push(intersection);\n                        }\n                    }\n                }\n            }\n            else if (geometry.isGeometry) {\n                var fvA, fvB, fvC;\n                var isMultiMaterial = Array.isArray(material);\n                var vertices = geometry.vertices;\n                var faces = geometry.faces;\n                var uvs;\n                var faceVertexUvs = geometry.faceVertexUvs[0];\n                if (faceVertexUvs.length > 0)\n                    uvs = faceVertexUvs;\n                for (var f = 0, fl = faces.length; f < fl; f++) {\n                    var face = faces[f];\n                    var faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;\n                    if (faceMaterial === undefined)\n                        continue;\n                    fvA = vertices[face.a];\n                    fvB = vertices[face.b];\n                    fvC = vertices[face.c];\n                    if (faceMaterial.morphTargets === true) {\n                        var morphTargets = geometry.morphTargets;\n                        var morphInfluences = this.morphTargetInfluences;\n                        vA.set(0, 0, 0);\n                        vB.set(0, 0, 0);\n                        vC.set(0, 0, 0);\n                        for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                            var influence = morphInfluences[t];\n                            if (influence === 0)\n                                continue;\n                            var targets = morphTargets[t].vertices;\n                            vA.addScaledVector(tempA.subVectors(targets[face.a], fvA), influence);\n                            vB.addScaledVector(tempB.subVectors(targets[face.b], fvB), influence);\n                            vC.addScaledVector(tempC.subVectors(targets[face.c], fvC), influence);\n                        }\n                        vA.add(fvA);\n                        vB.add(fvB);\n                        vC.add(fvC);\n                        fvA = vA;\n                        fvB = vB;\n                        fvC = vC;\n                    }\n                    intersection = checkIntersection(this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint);\n                    if (intersection) {\n                        if (uvs && uvs[f]) {\n                            var uvs_f = uvs[f];\n                            uvA.copy(uvs_f[0]);\n                            uvB.copy(uvs_f[1]);\n                            uvC.copy(uvs_f[2]);\n                            intersection.uv = uvIntersection(intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC);\n                        }\n                        intersection.face = face;\n                        intersection.faceIndex = f;\n                        intersects.push(intersection);\n                    }\n                }\n            }\n        };\n    }()),\n    clone: function () {\n        return new this.constructor(this.geometry, this.material).copy(this);\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLBackground(renderer, state, geometries, premultipliedAlpha) {\n    var clearColor = new Color(0x000000);\n    var clearAlpha = 0;\n    var planeCamera, planeMesh;\n    var boxMesh;\n    function render(renderList, scene, camera, forceClear) {\n        var background = scene.background;\n        if (background === null) {\n            setClear(clearColor, clearAlpha);\n        }\n        else if (background && background.isColor) {\n            setClear(background, 1);\n            forceClear = true;\n        }\n        if (renderer.autoClear || forceClear) {\n            renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n        }\n        if (background && background.isCubeTexture) {\n            if (boxMesh === undefined) {\n                boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({\n                    uniforms: ShaderLib.cube.uniforms,\n                    vertexShader: ShaderLib.cube.vertexShader,\n                    fragmentShader: ShaderLib.cube.fragmentShader,\n                    side: BackSide,\n                    depthTest: true,\n                    depthWrite: false,\n                    fog: false\n                }));\n                boxMesh.geometry.removeAttribute('normal');\n                boxMesh.geometry.removeAttribute('uv');\n                boxMesh.onBeforeRender = function (renderer, scene, camera) {\n                    this.matrixWorld.copyPosition(camera.matrixWorld);\n                };\n                geometries.update(boxMesh.geometry);\n            }\n            boxMesh.material.uniforms.tCube.value = background;\n            renderList.push(boxMesh, boxMesh.geometry, boxMesh.material, 0, null);\n        }\n        else if (background && background.isTexture) {\n            if (planeCamera === undefined) {\n                planeCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n                planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new MeshBasicMaterial({ depthTest: false, depthWrite: false, fog: false }));\n                geometries.update(planeMesh.geometry);\n            }\n            planeMesh.material.map = background;\n            // TODO Push this to renderList\n            renderer.renderBufferDirect(planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null);\n        }\n    }\n    function setClear(color, alpha) {\n        state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n    }\n    return {\n        getClearColor: function () {\n            return clearColor;\n        },\n        setClearColor: function (color, alpha) {\n            clearColor.set(color);\n            clearAlpha = alpha !== undefined ? alpha : 1;\n            setClear(clearColor, clearAlpha);\n        },\n        getClearAlpha: function () {\n            return clearAlpha;\n        },\n        setClearAlpha: function (alpha) {\n            clearAlpha = alpha;\n            setClear(clearColor, clearAlpha);\n        },\n        render: render\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction painterSortStable(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n    }\n    else if (a.program && b.program && a.program !== b.program) {\n        return a.program.id - b.program.id;\n    }\n    else if (a.material.id !== b.material.id) {\n        return a.material.id - b.material.id;\n    }\n    else if (a.z !== b.z) {\n        return a.z - b.z;\n    }\n    else {\n        return a.id - b.id;\n    }\n}\nfunction reversePainterSortStable(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n    }\n    if (a.z !== b.z) {\n        return b.z - a.z;\n    }\n    else {\n        return a.id - b.id;\n    }\n}\nfunction WebGLRenderList() {\n    var renderItems = [];\n    var renderItemsIndex = 0;\n    var opaque = [];\n    var transparent = [];\n    function init() {\n        renderItemsIndex = 0;\n        opaque.length = 0;\n        transparent.length = 0;\n    }\n    function push(object, geometry, material, z, group) {\n        var renderItem = renderItems[renderItemsIndex];\n        if (renderItem === undefined) {\n            renderItem = {\n                id: object.id,\n                object: object,\n                geometry: geometry,\n                material: material,\n                program: material.program,\n                renderOrder: object.renderOrder,\n                z: z,\n                group: group\n            };\n            renderItems[renderItemsIndex] = renderItem;\n        }\n        else {\n            renderItem.id = object.id;\n            renderItem.object = object;\n            renderItem.geometry = geometry;\n            renderItem.material = material;\n            renderItem.program = material.program;\n            renderItem.renderOrder = object.renderOrder;\n            renderItem.z = z;\n            renderItem.group = group;\n        }\n        (material.transparent === true ? transparent : opaque).push(renderItem);\n        renderItemsIndex++;\n    }\n    function sort() {\n        if (opaque.length > 1)\n            opaque.sort(painterSortStable);\n        if (transparent.length > 1)\n            transparent.sort(reversePainterSortStable);\n    }\n    return {\n        opaque: opaque,\n        transparent: transparent,\n        init: init,\n        push: push,\n        sort: sort\n    };\n}\nfunction WebGLRenderLists() {\n    var lists = {};\n    function get(scene, camera) {\n        var hash = scene.id + ',' + camera.id;\n        var list = lists[hash];\n        if (list === undefined) {\n            // console.log( 'THREE.WebGLRenderLists:', hash );\n            list = new WebGLRenderList();\n            lists[hash] = list;\n        }\n        return list;\n    }\n    function dispose() {\n        lists = {};\n    }\n    return {\n        get: get,\n        dispose: dispose\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction absNumericalSort(a, b) {\n    return Math.abs(b[1]) - Math.abs(a[1]);\n}\nfunction WebGLMorphtargets(gl) {\n    var influencesList = {};\n    var morphInfluences = new Float32Array(8);\n    function update(object, geometry, material, program) {\n        var objectInfluences = object.morphTargetInfluences;\n        var length = objectInfluences.length;\n        var influences = influencesList[geometry.id];\n        if (influences === undefined) {\n            // initialise list\n            influences = [];\n            for (var i = 0; i < length; i++) {\n                influences[i] = [i, 0];\n            }\n            influencesList[geometry.id] = influences;\n        }\n        var morphTargets = material.morphTargets && geometry.morphAttributes.position;\n        var morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n        // Remove current morphAttributes\n        for (var i = 0; i < length; i++) {\n            var influence = influences[i];\n            if (influence[1] !== 0) {\n                if (morphTargets)\n                    geometry.removeAttribute('morphTarget' + i);\n                if (morphNormals)\n                    geometry.removeAttribute('morphNormal' + i);\n            }\n        }\n        // Collect influences\n        for (var i = 0; i < length; i++) {\n            var influence = influences[i];\n            influence[0] = i;\n            influence[1] = objectInfluences[i];\n        }\n        influences.sort(absNumericalSort);\n        // Add morphAttributes\n        for (var i = 0; i < 8; i++) {\n            var influence = influences[i];\n            if (influence) {\n                var index = influence[0];\n                var value = influence[1];\n                if (value) {\n                    if (morphTargets)\n                        geometry.addAttribute('morphTarget' + i, morphTargets[index]);\n                    if (morphNormals)\n                        geometry.addAttribute('morphNormal' + i, morphNormals[index]);\n                    morphInfluences[i] = value;\n                    continue;\n                }\n            }\n            morphInfluences[i] = 0;\n        }\n        program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n    }\n    return {\n        update: update\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLIndexedBufferRenderer(gl, extensions, infoRender) {\n    var mode;\n    function setMode(value) {\n        mode = value;\n    }\n    var type, bytesPerElement;\n    function setIndex(value) {\n        type = value.type;\n        bytesPerElement = value.bytesPerElement;\n    }\n    function render(start, count) {\n        gl.drawElements(mode, count, type, start * bytesPerElement);\n        infoRender.calls++;\n        infoRender.vertices += count;\n        if (mode === gl.TRIANGLES)\n            infoRender.faces += count / 3;\n        else if (mode === gl.POINTS)\n            infoRender.points += count;\n    }\n    function renderInstances(geometry, start, count) {\n        var extension = extensions.get('ANGLE_instanced_arrays');\n        if (extension === null) {\n            console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n            return;\n        }\n        extension.drawElementsInstancedANGLE(mode, count, type, start * bytesPerElement, geometry.maxInstancedCount);\n        infoRender.calls++;\n        infoRender.vertices += count * geometry.maxInstancedCount;\n        if (mode === gl.TRIANGLES)\n            infoRender.faces += geometry.maxInstancedCount * count / 3;\n        else if (mode === gl.POINTS)\n            infoRender.points += geometry.maxInstancedCount * count;\n    }\n    //\n    this.setMode = setMode;\n    this.setIndex = setIndex;\n    this.render = render;\n    this.renderInstances = renderInstances;\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLBufferRenderer(gl, extensions, infoRender) {\n    var mode;\n    function setMode(value) {\n        mode = value;\n    }\n    function render(start, count) {\n        gl.drawArrays(mode, start, count);\n        infoRender.calls++;\n        infoRender.vertices += count;\n        if (mode === gl.TRIANGLES)\n            infoRender.faces += count / 3;\n        else if (mode === gl.POINTS)\n            infoRender.points += count;\n    }\n    function renderInstances(geometry, start, count) {\n        var extension = extensions.get('ANGLE_instanced_arrays');\n        if (extension === null) {\n            console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n            return;\n        }\n        var position = geometry.attributes.position;\n        if (position.isInterleavedBufferAttribute) {\n            count = position.data.count;\n            extension.drawArraysInstancedANGLE(mode, 0, count, geometry.maxInstancedCount);\n        }\n        else {\n            extension.drawArraysInstancedANGLE(mode, start, count, geometry.maxInstancedCount);\n        }\n        infoRender.calls++;\n        infoRender.vertices += count * geometry.maxInstancedCount;\n        if (mode === gl.TRIANGLES)\n            infoRender.faces += geometry.maxInstancedCount * count / 3;\n        else if (mode === gl.POINTS)\n            infoRender.points += geometry.maxInstancedCount * count;\n    }\n    //\n    this.setMode = setMode;\n    this.render = render;\n    this.renderInstances = renderInstances;\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLGeometries(gl, attributes, infoMemory) {\n    var geometries = {};\n    var wireframeAttributes = {};\n    function onGeometryDispose(event) {\n        var geometry = event.target;\n        var buffergeometry = geometries[geometry.id];\n        if (buffergeometry.index !== null) {\n            attributes.remove(buffergeometry.index);\n        }\n        for (var name in buffergeometry.attributes) {\n            attributes.remove(buffergeometry.attributes[name]);\n        }\n        geometry.removeEventListener('dispose', onGeometryDispose);\n        delete geometries[geometry.id];\n        // TODO Remove duplicate code\n        var attribute = wireframeAttributes[geometry.id];\n        if (attribute) {\n            attributes.remove(attribute);\n            delete wireframeAttributes[geometry.id];\n        }\n        attribute = wireframeAttributes[buffergeometry.id];\n        if (attribute) {\n            attributes.remove(attribute);\n            delete wireframeAttributes[buffergeometry.id];\n        }\n        //\n        infoMemory.geometries--;\n    }\n    function get(object, geometry) {\n        var buffergeometry = geometries[geometry.id];\n        if (buffergeometry)\n            return buffergeometry;\n        geometry.addEventListener('dispose', onGeometryDispose);\n        if (geometry.isBufferGeometry) {\n            buffergeometry = geometry;\n        }\n        else if (geometry.isGeometry) {\n            if (geometry._bufferGeometry === undefined) {\n                geometry._bufferGeometry = new BufferGeometry().setFromObject(object);\n            }\n            buffergeometry = geometry._bufferGeometry;\n        }\n        geometries[geometry.id] = buffergeometry;\n        infoMemory.geometries++;\n        return buffergeometry;\n    }\n    function update(geometry) {\n        var index = geometry.index;\n        var geometryAttributes = geometry.attributes;\n        if (index !== null) {\n            attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n        }\n        for (var name in geometryAttributes) {\n            attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n        }\n        // morph targets\n        var morphAttributes = geometry.morphAttributes;\n        for (var name in morphAttributes) {\n            var array = morphAttributes[name];\n            for (var i = 0, l = array.length; i < l; i++) {\n                attributes.update(array[i], gl.ARRAY_BUFFER);\n            }\n        }\n    }\n    function getWireframeAttribute(geometry) {\n        var attribute = wireframeAttributes[geometry.id];\n        if (attribute)\n            return attribute;\n        var indices = [];\n        var geometryIndex = geometry.index;\n        var geometryAttributes = geometry.attributes;\n        // console.time( 'wireframe' );\n        if (geometryIndex !== null) {\n            var array = geometryIndex.array;\n            for (var i = 0, l = array.length; i < l; i += 3) {\n                var a = array[i + 0];\n                var b = array[i + 1];\n                var c = array[i + 2];\n                indices.push(a, b, b, c, c, a);\n            }\n        }\n        else {\n            var array = geometryAttributes.position.array;\n            for (var i = 0, l = (array.length / 3) - 1; i < l; i += 3) {\n                var a = i + 0;\n                var b = i + 1;\n                var c = i + 2;\n                indices.push(a, b, b, c, c, a);\n            }\n        }\n        // console.timeEnd( 'wireframe' );\n        attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n        attributes.update(attribute, gl.ELEMENT_ARRAY_BUFFER);\n        wireframeAttributes[geometry.id] = attribute;\n        return attribute;\n    }\n    return {\n        get: get,\n        update: update,\n        getWireframeAttribute: getWireframeAttribute\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLObjects(geometries, infoRender) {\n    var updateList = {};\n    function update(object) {\n        var frame = infoRender.frame;\n        var geometry = object.geometry;\n        var buffergeometry = geometries.get(object, geometry);\n        // Update once per frame\n        if (updateList[buffergeometry.id] !== frame) {\n            if (geometry.isGeometry) {\n                buffergeometry.updateFromObject(object);\n            }\n            geometries.update(buffergeometry);\n            updateList[buffergeometry.id] = frame;\n        }\n        return buffergeometry;\n    }\n    function dispose() {\n        updateList = {};\n    }\n    return {\n        update: update,\n        dispose: dispose\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction addLineNumbers(string) {\n    var lines = string.split('\\n');\n    for (var i = 0; i < lines.length; i++) {\n        lines[i] = (i + 1) + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\nfunction WebGLShader(gl, type, string) {\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, string);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n        console.error('THREE.WebGLShader: Shader couldn\\'t compile.');\n    }\n    if (gl.getShaderInfoLog(shader) !== '') {\n        console.warn('THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog(shader), addLineNumbers(string));\n    }\n    // --enable-privileged-webgl-extension\n    // console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n    return shader;\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nvar programIdCount = 0;\nfunction getEncodingComponents(encoding) {\n    switch (encoding) {\n        case LinearEncoding:\n            return ['Linear', '( value )'];\n        case sRGBEncoding:\n            return ['sRGB', '( value )'];\n        case RGBEEncoding:\n            return ['RGBE', '( value )'];\n        case RGBM7Encoding:\n            return ['RGBM', '( value, 7.0 )'];\n        case RGBM16Encoding:\n            return ['RGBM', '( value, 16.0 )'];\n        case RGBDEncoding:\n            return ['RGBD', '( value, 256.0 )'];\n        case GammaEncoding:\n            return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n        default:\n            throw new Error('unsupported encoding: ' + encoding);\n    }\n}\nfunction getTexelDecodingFunction(functionName, encoding) {\n    var components = getEncodingComponents(encoding);\n    return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n}\nfunction getTexelEncodingFunction(functionName, encoding) {\n    var components = getEncodingComponents(encoding);\n    return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n}\nfunction getToneMappingFunction(functionName, toneMapping) {\n    var toneMappingName;\n    switch (toneMapping) {\n        case LinearToneMapping:\n            toneMappingName = 'Linear';\n            break;\n        case ReinhardToneMapping:\n            toneMappingName = 'Reinhard';\n            break;\n        case Uncharted2ToneMapping:\n            toneMappingName = 'Uncharted2';\n            break;\n        case CineonToneMapping:\n            toneMappingName = 'OptimizedCineon';\n            break;\n        default:\n            throw new Error('unsupported toneMapping: ' + toneMapping);\n    }\n    return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n}\nfunction generateExtensions(extensions, parameters, rendererExtensions) {\n    extensions = extensions || {};\n    var chunks = [\n        (extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading) ? '#extension GL_OES_standard_derivatives : enable' : '',\n        (extensions.fragDepth || parameters.logarithmicDepthBuffer) && rendererExtensions.get('EXT_frag_depth') ? '#extension GL_EXT_frag_depth : enable' : '',\n        (extensions.drawBuffers) && rendererExtensions.get('WEBGL_draw_buffers') ? '#extension GL_EXT_draw_buffers : require' : '',\n        (extensions.shaderTextureLOD || parameters.envMap) && rendererExtensions.get('EXT_shader_texture_lod') ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n    ];\n    return chunks.filter(filterEmptyLine).join('\\n');\n}\nfunction generateDefines(defines) {\n    var chunks = [];\n    for (var name in defines) {\n        var value = defines[name];\n        if (value === false)\n            continue;\n        chunks.push('#define ' + name + ' ' + value);\n    }\n    return chunks.join('\\n');\n}\nfunction fetchAttributeLocations(gl, program) {\n    var attributes = {};\n    var n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (var i = 0; i < n; i++) {\n        var info = gl.getActiveAttrib(program, i);\n        var name = info.name;\n        // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n        attributes[name] = gl.getAttribLocation(program, name);\n    }\n    return attributes;\n}\nfunction filterEmptyLine(string) {\n    return string !== '';\n}\nfunction replaceLightNums(string, parameters) {\n    return string\n        .replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights)\n        .replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights)\n        .replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights)\n        .replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights)\n        .replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights);\n}\nfunction replaceClippingPlaneNums(string, parameters) {\n    return string\n        .replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes)\n        .replace(/UNION_CLIPPING_PLANES/g, (parameters.numClippingPlanes - parameters.numClipIntersection));\n}\nfunction parseIncludes(string) {\n    var pattern = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n    function replace(match, include) {\n        var replace = ShaderChunk[include];\n        if (replace === undefined) {\n            throw new Error('Can not resolve #include <' + include + '>');\n        }\n        return parseIncludes(replace);\n    }\n    return string.replace(pattern, replace);\n}\nfunction unrollLoops(string) {\n    var pattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n    function replace(match, start, end, snippet) {\n        var unroll = '';\n        for (var i = parseInt(start); i < parseInt(end); i++) {\n            unroll += snippet.replace(/\\[ i \\]/g, '[ ' + i + ' ]');\n        }\n        return unroll;\n    }\n    return string.replace(pattern, replace);\n}\nfunction WebGLProgram(renderer, extensions, code, material, shader, parameters) {\n    var gl = renderer.context;\n    var defines = material.defines;\n    var vertexShader = shader.vertexShader;\n    var fragmentShader = shader.fragmentShader;\n    var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n    if (parameters.shadowMapType === PCFShadowMap) {\n        shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n    }\n    else if (parameters.shadowMapType === PCFSoftShadowMap) {\n        shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n    }\n    var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n    var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n    var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n    if (parameters.envMap) {\n        switch (material.envMap.mapping) {\n            case CubeReflectionMapping:\n            case CubeRefractionMapping:\n                envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n                break;\n            case CubeUVReflectionMapping:\n            case CubeUVRefractionMapping:\n                envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n                break;\n            case EquirectangularReflectionMapping:\n            case EquirectangularRefractionMapping:\n                envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n                break;\n            case SphericalReflectionMapping:\n                envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n                break;\n        }\n        switch (material.envMap.mapping) {\n            case CubeRefractionMapping:\n            case EquirectangularRefractionMapping:\n                envMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n                break;\n        }\n        switch (material.combine) {\n            case MultiplyOperation:\n                envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n                break;\n            case MixOperation:\n                envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n                break;\n            case AddOperation:\n                envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n                break;\n        }\n    }\n    var gammaFactorDefine = (renderer.gammaFactor > 0) ? renderer.gammaFactor : 1.0;\n    // console.log( 'building new program ' );\n    //\n    var customExtensions = generateExtensions(material.extensions, parameters, extensions);\n    var customDefines = generateDefines(defines);\n    //\n    var program = gl.createProgram();\n    var prefixVertex, prefixFragment;\n    if (material.isRawShaderMaterial) {\n        prefixVertex = [\n            customDefines\n        ].filter(filterEmptyLine).join('\\n');\n        if (prefixVertex.length > 0) {\n            prefixVertex += '\\n';\n        }\n        prefixFragment = [\n            customExtensions,\n            customDefines\n        ].filter(filterEmptyLine).join('\\n');\n        if (prefixFragment.length > 0) {\n            prefixFragment += '\\n';\n        }\n    }\n    else {\n        prefixVertex = [\n            'precision ' + parameters.precision + ' float;',\n            'precision ' + parameters.precision + ' int;',\n            '#define SHADER_NAME ' + shader.name,\n            customDefines,\n            parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n            '#define GAMMA_FACTOR ' + gammaFactorDefine,\n            '#define MAX_BONES ' + parameters.maxBones,\n            (parameters.useFog && parameters.fog) ? '#define USE_FOG' : '',\n            (parameters.useFog && parameters.fogExp) ? '#define FOG_EXP2' : '',\n            parameters.map ? '#define USE_MAP' : '',\n            parameters.envMap ? '#define USE_ENVMAP' : '',\n            parameters.envMap ? '#define ' + envMapModeDefine : '',\n            parameters.lightMap ? '#define USE_LIGHTMAP' : '',\n            parameters.aoMap ? '#define USE_AOMAP' : '',\n            parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n            parameters.bumpMap ? '#define USE_BUMPMAP' : '',\n            parameters.normalMap ? '#define USE_NORMALMAP' : '',\n            parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n            parameters.specularMap ? '#define USE_SPECULARMAP' : '',\n            parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n            parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n            parameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n            parameters.vertexColors ? '#define USE_COLOR' : '',\n            parameters.flatShading ? '#define FLAT_SHADED' : '',\n            parameters.skinning ? '#define USE_SKINNING' : '',\n            parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n            parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n            parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n            parameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n            parameters.flipSided ? '#define FLIP_SIDED' : '',\n            parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n            parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n            parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n            parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n            parameters.logarithmicDepthBuffer && extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '',\n            'uniform mat4 modelMatrix;',\n            'uniform mat4 modelViewMatrix;',\n            'uniform mat4 projectionMatrix;',\n            'uniform mat4 viewMatrix;',\n            'uniform mat3 normalMatrix;',\n            'uniform vec3 cameraPosition;',\n            'attribute vec3 position;',\n            'attribute vec3 normal;',\n            'attribute vec2 uv;',\n            '#ifdef USE_COLOR',\n            '\tattribute vec3 color;',\n            '#endif',\n            '#ifdef USE_MORPHTARGETS',\n            '\tattribute vec3 morphTarget0;',\n            '\tattribute vec3 morphTarget1;',\n            '\tattribute vec3 morphTarget2;',\n            '\tattribute vec3 morphTarget3;',\n            '\t#ifdef USE_MORPHNORMALS',\n            '\t\tattribute vec3 morphNormal0;',\n            '\t\tattribute vec3 morphNormal1;',\n            '\t\tattribute vec3 morphNormal2;',\n            '\t\tattribute vec3 morphNormal3;',\n            '\t#else',\n            '\t\tattribute vec3 morphTarget4;',\n            '\t\tattribute vec3 morphTarget5;',\n            '\t\tattribute vec3 morphTarget6;',\n            '\t\tattribute vec3 morphTarget7;',\n            '\t#endif',\n            '#endif',\n            '#ifdef USE_SKINNING',\n            '\tattribute vec4 skinIndex;',\n            '\tattribute vec4 skinWeight;',\n            '#endif',\n            '\\n'\n        ].filter(filterEmptyLine).join('\\n');\n        prefixFragment = [\n            customExtensions,\n            'precision ' + parameters.precision + ' float;',\n            'precision ' + parameters.precision + ' int;',\n            '#define SHADER_NAME ' + shader.name,\n            customDefines,\n            parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\n            '#define GAMMA_FACTOR ' + gammaFactorDefine,\n            (parameters.useFog && parameters.fog) ? '#define USE_FOG' : '',\n            (parameters.useFog && parameters.fogExp) ? '#define FOG_EXP2' : '',\n            parameters.map ? '#define USE_MAP' : '',\n            parameters.envMap ? '#define USE_ENVMAP' : '',\n            parameters.envMap ? '#define ' + envMapTypeDefine : '',\n            parameters.envMap ? '#define ' + envMapModeDefine : '',\n            parameters.envMap ? '#define ' + envMapBlendingDefine : '',\n            parameters.lightMap ? '#define USE_LIGHTMAP' : '',\n            parameters.aoMap ? '#define USE_AOMAP' : '',\n            parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n            parameters.bumpMap ? '#define USE_BUMPMAP' : '',\n            parameters.normalMap ? '#define USE_NORMALMAP' : '',\n            parameters.specularMap ? '#define USE_SPECULARMAP' : '',\n            parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n            parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n            parameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n            parameters.vertexColors ? '#define USE_COLOR' : '',\n            parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n            parameters.flatShading ? '#define FLAT_SHADED' : '',\n            parameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n            parameters.flipSided ? '#define FLIP_SIDED' : '',\n            parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n            parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n            parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n            parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n            parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n            parameters.logarithmicDepthBuffer && extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '',\n            parameters.envMap && extensions.get('EXT_shader_texture_lod') ? '#define TEXTURE_LOD_EXT' : '',\n            'uniform mat4 viewMatrix;',\n            'uniform vec3 cameraPosition;',\n            (parameters.toneMapping !== NoToneMapping) ? '#define TONE_MAPPING' : '',\n            (parameters.toneMapping !== NoToneMapping) ? ShaderChunk['tonemapping_pars_fragment'] : '',\n            (parameters.toneMapping !== NoToneMapping) ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '',\n            parameters.dithering ? '#define DITHERING' : '',\n            (parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding) ? ShaderChunk['encodings_pars_fragment'] : '',\n            parameters.mapEncoding ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '',\n            parameters.envMapEncoding ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '',\n            parameters.emissiveMapEncoding ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '',\n            parameters.outputEncoding ? getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding) : '',\n            parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\n            '\\n'\n        ].filter(filterEmptyLine).join('\\n');\n    }\n    vertexShader = parseIncludes(vertexShader);\n    vertexShader = replaceLightNums(vertexShader, parameters);\n    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n    fragmentShader = parseIncludes(fragmentShader);\n    fragmentShader = replaceLightNums(fragmentShader, parameters);\n    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n    vertexShader = unrollLoops(vertexShader);\n    fragmentShader = unrollLoops(fragmentShader);\n    var vertexGlsl = prefixVertex + vertexShader;\n    var fragmentGlsl = prefixFragment + fragmentShader;\n    // console.log( '*VERTEX*', vertexGlsl );\n    // console.log( '*FRAGMENT*', fragmentGlsl );\n    var glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n    var glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n    gl.attachShader(program, glVertexShader);\n    gl.attachShader(program, glFragmentShader);\n    // Force a particular attribute to index 0.\n    if (material.index0AttributeName !== undefined) {\n        gl.bindAttribLocation(program, 0, material.index0AttributeName);\n    }\n    else if (parameters.morphTargets === true) {\n        // programs with morphTargets displace position out of attribute 0\n        gl.bindAttribLocation(program, 0, 'position');\n    }\n    gl.linkProgram(program);\n    var programLog = gl.getProgramInfoLog(program).trim();\n    var vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n    var fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n    var runnable = true;\n    var haveDiagnostics = true;\n    // console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n    // console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n    if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        runnable = false;\n        console.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog);\n    }\n    else if (programLog !== '') {\n        console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n    }\n    else if (vertexLog === '' || fragmentLog === '') {\n        haveDiagnostics = false;\n    }\n    if (haveDiagnostics) {\n        this.diagnostics = {\n            runnable: runnable,\n            material: material,\n            programLog: programLog,\n            vertexShader: {\n                log: vertexLog,\n                prefix: prefixVertex\n            },\n            fragmentShader: {\n                log: fragmentLog,\n                prefix: prefixFragment\n            }\n        };\n    }\n    // clean up\n    gl.deleteShader(glVertexShader);\n    gl.deleteShader(glFragmentShader);\n    // set up caching for uniform locations\n    var cachedUniforms;\n    this.getUniforms = function () {\n        if (cachedUniforms === undefined) {\n            cachedUniforms = new WebGLUniforms(gl, program, renderer);\n        }\n        return cachedUniforms;\n    };\n    // set up caching for attribute locations\n    var cachedAttributes;\n    this.getAttributes = function () {\n        if (cachedAttributes === undefined) {\n            cachedAttributes = fetchAttributeLocations(gl, program);\n        }\n        return cachedAttributes;\n    };\n    // free resource\n    this.destroy = function () {\n        gl.deleteProgram(program);\n        this.program = undefined;\n    };\n    // DEPRECATED\n    Object.defineProperties(this, {\n        uniforms: {\n            get: function () {\n                console.warn('THREE.WebGLProgram: .uniforms is now .getUniforms().');\n                return this.getUniforms();\n            }\n        },\n        attributes: {\n            get: function () {\n                console.warn('THREE.WebGLProgram: .attributes is now .getAttributes().');\n                return this.getAttributes();\n            }\n        }\n    });\n    //\n    this.id = programIdCount++;\n    this.code = code;\n    this.usedTimes = 1;\n    this.program = program;\n    this.vertexShader = glVertexShader;\n    this.fragmentShader = glFragmentShader;\n    return this;\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLPrograms(renderer, extensions, capabilities) {\n    var programs = [];\n    var shaderIDs = {\n        MeshDepthMaterial: 'depth',\n        MeshDistanceMaterial: 'distanceRGBA',\n        MeshNormalMaterial: 'normal',\n        MeshBasicMaterial: 'basic',\n        MeshLambertMaterial: 'lambert',\n        MeshPhongMaterial: 'phong',\n        MeshToonMaterial: 'phong',\n        MeshStandardMaterial: 'physical',\n        MeshPhysicalMaterial: 'physical',\n        LineBasicMaterial: 'basic',\n        LineDashedMaterial: 'dashed',\n        PointsMaterial: 'points',\n        ShadowMaterial: 'shadow'\n    };\n    var parameterNames = [\n        \"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\n        \"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\n        \"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n        \"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\n        \"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n        \"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n        \"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n        \"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n        \"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n        \"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\"\n    ];\n    function allocateBones(object) {\n        var skeleton = object.skeleton;\n        var bones = skeleton.bones;\n        if (capabilities.floatVertexTextures) {\n            return 1024;\n        }\n        else {\n            // default for when object is not specified\n            // ( for example when prebuilding shader to be used with multiple objects )\n            //\n            //  - leave some extra space for other uniforms\n            //  - limit here is ANGLE's 254 max uniform vectors\n            //    (up to 54 should be safe)\n            var nVertexUniforms = capabilities.maxVertexUniforms;\n            var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n            var maxBones = Math.min(nVertexMatrices, bones.length);\n            if (maxBones < bones.length) {\n                console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n                return 0;\n            }\n            return maxBones;\n        }\n    }\n    function getTextureEncodingFromMap(map, gammaOverrideLinear) {\n        var encoding;\n        if (!map) {\n            encoding = LinearEncoding;\n        }\n        else if (map.isTexture) {\n            encoding = map.encoding;\n        }\n        else if (map.isWebGLRenderTarget) {\n            console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n            encoding = map.texture.encoding;\n        }\n        // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n        if (encoding === LinearEncoding && gammaOverrideLinear) {\n            encoding = GammaEncoding;\n        }\n        return encoding;\n    }\n    this.getParameters = function (material, lights, shadows, fog, nClipPlanes, nClipIntersection, object) {\n        var shaderID = shaderIDs[material.type];\n        // heuristics to create shader parameters according to lights in the scene\n        // (not to blow over maxLights budget)\n        var maxBones = object.isSkinnedMesh ? allocateBones(object) : 0;\n        var precision = capabilities.precision;\n        if (material.precision !== null) {\n            precision = capabilities.getMaxPrecision(material.precision);\n            if (precision !== material.precision) {\n                console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n            }\n        }\n        var currentRenderTarget = renderer.getRenderTarget();\n        var parameters = {\n            shaderID: shaderID,\n            precision: precision,\n            supportsVertexTextures: capabilities.vertexTextures,\n            outputEncoding: getTextureEncodingFromMap((!currentRenderTarget) ? null : currentRenderTarget.texture, renderer.gammaOutput),\n            map: !!material.map,\n            mapEncoding: getTextureEncodingFromMap(material.map, renderer.gammaInput),\n            envMap: !!material.envMap,\n            envMapMode: material.envMap && material.envMap.mapping,\n            envMapEncoding: getTextureEncodingFromMap(material.envMap, renderer.gammaInput),\n            envMapCubeUV: (!!material.envMap) && ((material.envMap.mapping === CubeUVReflectionMapping) || (material.envMap.mapping === CubeUVRefractionMapping)),\n            lightMap: !!material.lightMap,\n            aoMap: !!material.aoMap,\n            emissiveMap: !!material.emissiveMap,\n            emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap, renderer.gammaInput),\n            bumpMap: !!material.bumpMap,\n            normalMap: !!material.normalMap,\n            displacementMap: !!material.displacementMap,\n            roughnessMap: !!material.roughnessMap,\n            metalnessMap: !!material.metalnessMap,\n            specularMap: !!material.specularMap,\n            alphaMap: !!material.alphaMap,\n            gradientMap: !!material.gradientMap,\n            combine: material.combine,\n            vertexColors: material.vertexColors,\n            fog: !!fog,\n            useFog: material.fog,\n            fogExp: (fog && fog.isFogExp2),\n            flatShading: material.flatShading,\n            sizeAttenuation: material.sizeAttenuation,\n            logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n            skinning: material.skinning && maxBones > 0,\n            maxBones: maxBones,\n            useVertexTexture: capabilities.floatVertexTextures,\n            morphTargets: material.morphTargets,\n            morphNormals: material.morphNormals,\n            maxMorphTargets: renderer.maxMorphTargets,\n            maxMorphNormals: renderer.maxMorphNormals,\n            numDirLights: lights.directional.length,\n            numPointLights: lights.point.length,\n            numSpotLights: lights.spot.length,\n            numRectAreaLights: lights.rectArea.length,\n            numHemiLights: lights.hemi.length,\n            numClippingPlanes: nClipPlanes,\n            numClipIntersection: nClipIntersection,\n            dithering: material.dithering,\n            shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,\n            shadowMapType: renderer.shadowMap.type,\n            toneMapping: renderer.toneMapping,\n            physicallyCorrectLights: renderer.physicallyCorrectLights,\n            premultipliedAlpha: material.premultipliedAlpha,\n            alphaTest: material.alphaTest,\n            doubleSided: material.side === DoubleSide,\n            flipSided: material.side === BackSide,\n            depthPacking: (material.depthPacking !== undefined) ? material.depthPacking : false\n        };\n        return parameters;\n    };\n    this.getProgramCode = function (material, parameters) {\n        var array = [];\n        if (parameters.shaderID) {\n            array.push(parameters.shaderID);\n        }\n        else {\n            array.push(material.fragmentShader);\n            array.push(material.vertexShader);\n        }\n        if (material.defines !== undefined) {\n            for (var name in material.defines) {\n                array.push(name);\n                array.push(material.defines[name]);\n            }\n        }\n        for (var i = 0; i < parameterNames.length; i++) {\n            array.push(parameters[parameterNames[i]]);\n        }\n        array.push(material.onBeforeCompile.toString());\n        array.push(renderer.gammaOutput);\n        return array.join();\n    };\n    this.acquireProgram = function (material, shader, parameters, code) {\n        var program;\n        // Check if code has been already compiled\n        for (var p = 0, pl = programs.length; p < pl; p++) {\n            var programInfo = programs[p];\n            if (programInfo.code === code) {\n                program = programInfo;\n                ++program.usedTimes;\n                break;\n            }\n        }\n        if (program === undefined) {\n            program = new WebGLProgram(renderer, extensions, code, material, shader, parameters);\n            programs.push(program);\n        }\n        return program;\n    };\n    this.releaseProgram = function (program) {\n        if (--program.usedTimes === 0) {\n            // Remove from unordered set\n            var i = programs.indexOf(program);\n            programs[i] = programs[programs.length - 1];\n            programs.pop();\n            // Free WebGL resources\n            program.destroy();\n        }\n    };\n    // Exposed for resource monitoring & error feedback via renderer.info:\n    this.programs = programs;\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, infoMemory, infoRender) {\n    var _isWebGL2 = (typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext);\n    var _videoTextures = {};\n    var _canvas;\n    //\n    function clampToMaxSize(image, maxSize) {\n        if (image.width > maxSize || image.height > maxSize) {\n            // Warning: Scaling through the canvas will only work with images that use\n            // premultiplied alpha.\n            var scale = maxSize / Math.max(image.width, image.height);\n            var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n            canvas.width = Math.floor(image.width * scale);\n            canvas.height = Math.floor(image.height * scale);\n            var context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n            console.warn('THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image);\n            return canvas;\n        }\n        return image;\n    }\n    function isPowerOfTwo(image) {\n        return _Math.isPowerOfTwo(image.width) && _Math.isPowerOfTwo(image.height);\n    }\n    function makePowerOfTwo(image) {\n        if (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap) {\n            if (_canvas === undefined)\n                _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n            _canvas.width = _Math.floorPowerOfTwo(image.width);\n            _canvas.height = _Math.floorPowerOfTwo(image.height);\n            var context = _canvas.getContext('2d');\n            context.drawImage(image, 0, 0, _canvas.width, _canvas.height);\n            console.warn('THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + _canvas.width + 'x' + _canvas.height, image);\n            return _canvas;\n        }\n        return image;\n    }\n    function textureNeedsPowerOfTwo(texture) {\n        return (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) ||\n            (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter);\n    }\n    function textureNeedsGenerateMipmaps(texture, isPowerOfTwo) {\n        return texture.generateMipmaps && isPowerOfTwo &&\n            texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n    }\n    // Fallback filters for non-power-of-2 textures\n    function filterFallback(f) {\n        if (f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter) {\n            return _gl.NEAREST;\n        }\n        return _gl.LINEAR;\n    }\n    //\n    function onTextureDispose(event) {\n        var texture = event.target;\n        texture.removeEventListener('dispose', onTextureDispose);\n        deallocateTexture(texture);\n        if (texture.isVideoTexture) {\n            delete _videoTextures[texture.id];\n        }\n        infoMemory.textures--;\n    }\n    function onRenderTargetDispose(event) {\n        var renderTarget = event.target;\n        renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n        deallocateRenderTarget(renderTarget);\n        infoMemory.textures--;\n    }\n    //\n    function deallocateTexture(texture) {\n        var textureProperties = properties.get(texture);\n        if (texture.image && textureProperties.__image__webglTextureCube) {\n            // cube texture\n            _gl.deleteTexture(textureProperties.__image__webglTextureCube);\n        }\n        else {\n            // 2D texture\n            if (textureProperties.__webglInit === undefined)\n                return;\n            _gl.deleteTexture(textureProperties.__webglTexture);\n        }\n        // remove all webgl properties\n        properties.remove(texture);\n    }\n    function deallocateRenderTarget(renderTarget) {\n        var renderTargetProperties = properties.get(renderTarget);\n        var textureProperties = properties.get(renderTarget.texture);\n        if (!renderTarget)\n            return;\n        if (textureProperties.__webglTexture !== undefined) {\n            _gl.deleteTexture(textureProperties.__webglTexture);\n        }\n        if (renderTarget.depthTexture) {\n            renderTarget.depthTexture.dispose();\n        }\n        if (renderTarget.isWebGLRenderTargetCube) {\n            for (var i = 0; i < 6; i++) {\n                _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n                if (renderTargetProperties.__webglDepthbuffer)\n                    _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n            }\n        }\n        else {\n            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n            if (renderTargetProperties.__webglDepthbuffer)\n                _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n        }\n        properties.remove(renderTarget.texture);\n        properties.remove(renderTarget);\n    }\n    //\n    function setTexture2D(texture, slot) {\n        var textureProperties = properties.get(texture);\n        if (texture.isVideoTexture)\n            updateVideoTexture(texture);\n        if (texture.version > 0 && textureProperties.__version !== texture.version) {\n            var image = texture.image;\n            if (image === undefined) {\n                console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined', texture);\n            }\n            else if (image.complete === false) {\n                console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture);\n            }\n            else {\n                uploadTexture(textureProperties, texture, slot);\n                return;\n            }\n        }\n        state.activeTexture(_gl.TEXTURE0 + slot);\n        state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n    }\n    function setTextureCube(texture, slot) {\n        var textureProperties = properties.get(texture);\n        if (texture.image.length === 6) {\n            if (texture.version > 0 && textureProperties.__version !== texture.version) {\n                if (!textureProperties.__image__webglTextureCube) {\n                    texture.addEventListener('dispose', onTextureDispose);\n                    textureProperties.__image__webglTextureCube = _gl.createTexture();\n                    infoMemory.textures++;\n                }\n                state.activeTexture(_gl.TEXTURE0 + slot);\n                state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n                _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n                var isCompressed = (texture && texture.isCompressedTexture);\n                var isDataTexture = (texture.image[0] && texture.image[0].isDataTexture);\n                var cubeImage = [];\n                for (var i = 0; i < 6; i++) {\n                    if (!isCompressed && !isDataTexture) {\n                        cubeImage[i] = clampToMaxSize(texture.image[i], capabilities.maxCubemapSize);\n                    }\n                    else {\n                        cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n                    }\n                }\n                var image = cubeImage[0], isPowerOfTwoImage = isPowerOfTwo(image), glFormat = utils.convert(texture.format), glType = utils.convert(texture.type);\n                setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage);\n                for (var i = 0; i < 6; i++) {\n                    if (!isCompressed) {\n                        if (isDataTexture) {\n                            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n                        }\n                        else {\n                            state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[i]);\n                        }\n                    }\n                    else {\n                        var mipmap, mipmaps = cubeImage[i].mipmaps;\n                        for (var j = 0, jl = mipmaps.length; j < jl; j++) {\n                            mipmap = mipmaps[j];\n                            if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n                                if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n                                    state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                                }\n                                else {\n                                    console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n                                }\n                            }\n                            else {\n                                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n                            }\n                        }\n                    }\n                }\n                if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage)) {\n                    _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n                }\n                textureProperties.__version = texture.version;\n                if (texture.onUpdate)\n                    texture.onUpdate(texture);\n            }\n            else {\n                state.activeTexture(_gl.TEXTURE0 + slot);\n                state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n            }\n        }\n    }\n    function setTextureCubeDynamic(texture, slot) {\n        state.activeTexture(_gl.TEXTURE0 + slot);\n        state.bindTexture(_gl.TEXTURE_CUBE_MAP, properties.get(texture).__webglTexture);\n    }\n    function setTextureParameters(textureType, texture, isPowerOfTwoImage) {\n        var extension;\n        if (isPowerOfTwoImage) {\n            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, utils.convert(texture.wrapS));\n            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, utils.convert(texture.wrapT));\n            _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, utils.convert(texture.magFilter));\n            _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, utils.convert(texture.minFilter));\n        }\n        else {\n            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n            _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n            if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n                console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture);\n            }\n            _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n            _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n            if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n                console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture);\n            }\n        }\n        extension = extensions.get('EXT_texture_filter_anisotropic');\n        if (extension) {\n            if (texture.type === FloatType && extensions.get('OES_texture_float_linear') === null)\n                return;\n            if (texture.type === HalfFloatType && extensions.get('OES_texture_half_float_linear') === null)\n                return;\n            if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n                _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n                properties.get(texture).__currentAnisotropy = texture.anisotropy;\n            }\n        }\n    }\n    function uploadTexture(textureProperties, texture, slot) {\n        if (textureProperties.__webglInit === undefined) {\n            textureProperties.__webglInit = true;\n            texture.addEventListener('dispose', onTextureDispose);\n            textureProperties.__webglTexture = _gl.createTexture();\n            infoMemory.textures++;\n        }\n        state.activeTexture(_gl.TEXTURE0 + slot);\n        state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n        _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n        _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n        _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n        var image = clampToMaxSize(texture.image, capabilities.maxTextureSize);\n        if (textureNeedsPowerOfTwo(texture) && isPowerOfTwo(image) === false) {\n            image = makePowerOfTwo(image);\n        }\n        var isPowerOfTwoImage = isPowerOfTwo(image), glFormat = utils.convert(texture.format), glType = utils.convert(texture.type);\n        setTextureParameters(_gl.TEXTURE_2D, texture, isPowerOfTwoImage);\n        var mipmap, mipmaps = texture.mipmaps;\n        if (texture.isDepthTexture) {\n            // populate depth texture with dummy data\n            var internalFormat = _gl.DEPTH_COMPONENT;\n            if (texture.type === FloatType) {\n                if (!_isWebGL2)\n                    throw new Error('Float Depth Texture only supported in WebGL2.0');\n                internalFormat = _gl.DEPTH_COMPONENT32F;\n            }\n            else if (_isWebGL2) {\n                // WebGL 2.0 requires signed internalformat for glTexImage2D\n                internalFormat = _gl.DEPTH_COMPONENT16;\n            }\n            if (texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT) {\n                // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n                // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n                if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n                    console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n                    texture.type = UnsignedShortType;\n                    glType = utils.convert(texture.type);\n                }\n            }\n            // Depth stencil textures need the DEPTH_STENCIL internal format\n            // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n            if (texture.format === DepthStencilFormat) {\n                internalFormat = _gl.DEPTH_STENCIL;\n                // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n                // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n                if (texture.type !== UnsignedInt248Type) {\n                    console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n                    texture.type = UnsignedInt248Type;\n                    glType = utils.convert(texture.type);\n                }\n            }\n            state.texImage2D(_gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null);\n        }\n        else if (texture.isDataTexture) {\n            // use manually created mipmaps if available\n            // if there are no manual mipmaps\n            // set 0 level mipmap and then use GL to generate other mipmap levels\n            if (mipmaps.length > 0 && isPowerOfTwoImage) {\n                for (var i = 0, il = mipmaps.length; i < il; i++) {\n                    mipmap = mipmaps[i];\n                    state.texImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n                }\n                texture.generateMipmaps = false;\n            }\n            else {\n                state.texImage2D(_gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data);\n            }\n        }\n        else if (texture.isCompressedTexture) {\n            for (var i = 0, il = mipmaps.length; i < il; i++) {\n                mipmap = mipmaps[i];\n                if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n                    if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n                        state.compressedTexImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                    }\n                    else {\n                        console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n                    }\n                }\n                else {\n                    state.texImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n                }\n            }\n        }\n        else {\n            // regular Texture (image, video, canvas)\n            // use manually created mipmaps if available\n            // if there are no manual mipmaps\n            // set 0 level mipmap and then use GL to generate other mipmap levels\n            if (mipmaps.length > 0 && isPowerOfTwoImage) {\n                for (var i = 0, il = mipmaps.length; i < il; i++) {\n                    mipmap = mipmaps[i];\n                    state.texImage2D(_gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap);\n                }\n                texture.generateMipmaps = false;\n            }\n            else {\n                state.texImage2D(_gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image);\n            }\n        }\n        if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage))\n            _gl.generateMipmap(_gl.TEXTURE_2D);\n        textureProperties.__version = texture.version;\n        if (texture.onUpdate)\n            texture.onUpdate(texture);\n    }\n    // Render targets\n    // Setup storage for target texture and bind it to correct framebuffer\n    function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n        var glFormat = utils.convert(renderTarget.texture.format);\n        var glType = utils.convert(renderTarget.texture.type);\n        state.texImage2D(textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n    }\n    // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    function setupRenderBufferStorage(renderbuffer, renderTarget) {\n        _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n            _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);\n            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n        }\n        else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n            _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n        }\n        else {\n            // FIXME: We don't support !depth !stencil\n            _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height);\n        }\n        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n    }\n    // Setup resources for a Depth Texture for a FBO (needs an extension)\n    function setupDepthTexture(framebuffer, renderTarget) {\n        var isCube = (renderTarget && renderTarget.isWebGLRenderTargetCube);\n        if (isCube)\n            throw new Error('Depth Texture with cube render targets is not supported');\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n        if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n            throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n        }\n        // upload an empty depth texture with framebuffer size\n        if (!properties.get(renderTarget.depthTexture).__webglTexture ||\n            renderTarget.depthTexture.image.width !== renderTarget.width ||\n            renderTarget.depthTexture.image.height !== renderTarget.height) {\n            renderTarget.depthTexture.image.width = renderTarget.width;\n            renderTarget.depthTexture.image.height = renderTarget.height;\n            renderTarget.depthTexture.needsUpdate = true;\n        }\n        setTexture2D(renderTarget.depthTexture, 0);\n        var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n        if (renderTarget.depthTexture.format === DepthFormat) {\n            _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n        }\n        else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n            _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n        }\n        else {\n            throw new Error('Unknown depthTexture format');\n        }\n    }\n    // Setup GL resources for a non-texture depth buffer\n    function setupDepthRenderbuffer(renderTarget) {\n        var renderTargetProperties = properties.get(renderTarget);\n        var isCube = (renderTarget.isWebGLRenderTargetCube === true);\n        if (renderTarget.depthTexture) {\n            if (isCube)\n                throw new Error('target.depthTexture not supported in Cube render targets');\n            setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n        }\n        else {\n            if (isCube) {\n                renderTargetProperties.__webglDepthbuffer = [];\n                for (var i = 0; i < 6; i++) {\n                    _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n                    renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n                    setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget);\n                }\n            }\n            else {\n                _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n                renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n                setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget);\n            }\n        }\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n    }\n    // Set up GL resources for the render target\n    function setupRenderTarget(renderTarget) {\n        var renderTargetProperties = properties.get(renderTarget);\n        var textureProperties = properties.get(renderTarget.texture);\n        renderTarget.addEventListener('dispose', onRenderTargetDispose);\n        textureProperties.__webglTexture = _gl.createTexture();\n        infoMemory.textures++;\n        var isCube = (renderTarget.isWebGLRenderTargetCube === true);\n        var isTargetPowerOfTwo = isPowerOfTwo(renderTarget);\n        // Setup framebuffer\n        if (isCube) {\n            renderTargetProperties.__webglFramebuffer = [];\n            for (var i = 0; i < 6; i++) {\n                renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n            }\n        }\n        else {\n            renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n        }\n        // Setup color buffer\n        if (isCube) {\n            state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n            setTextureParameters(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo);\n            for (var i = 0; i < 6; i++) {\n                setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n            }\n            if (textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo))\n                _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n            state.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n        }\n        else {\n            state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n            setTextureParameters(_gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo);\n            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);\n            if (textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo))\n                _gl.generateMipmap(_gl.TEXTURE_2D);\n            state.bindTexture(_gl.TEXTURE_2D, null);\n        }\n        // Setup depth and stencil buffers\n        if (renderTarget.depthBuffer) {\n            setupDepthRenderbuffer(renderTarget);\n        }\n    }\n    function updateRenderTargetMipmap(renderTarget) {\n        var texture = renderTarget.texture;\n        var isTargetPowerOfTwo = isPowerOfTwo(renderTarget);\n        if (textureNeedsGenerateMipmaps(texture, isTargetPowerOfTwo)) {\n            var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n            var webglTexture = properties.get(texture).__webglTexture;\n            state.bindTexture(target, webglTexture);\n            _gl.generateMipmap(target);\n            state.bindTexture(target, null);\n        }\n    }\n    function updateVideoTexture(texture) {\n        var id = texture.id;\n        var frame = infoRender.frame;\n        // Check the last frame we updated the VideoTexture\n        if (_videoTextures[id] !== frame) {\n            _videoTextures[id] = frame;\n            texture.update();\n        }\n    }\n    this.setTexture2D = setTexture2D;\n    this.setTextureCube = setTextureCube;\n    this.setTextureCubeDynamic = setTextureCubeDynamic;\n    this.setupRenderTarget = setupRenderTarget;\n    this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n}\n/**\n * @author fordacious / fordacious.github.io\n */\nfunction WebGLProperties() {\n    var properties = {};\n    function get(object) {\n        var uuid = object.uuid;\n        var map = properties[uuid];\n        if (map === undefined) {\n            map = {};\n            properties[uuid] = map;\n        }\n        return map;\n    }\n    function remove(object) {\n        delete properties[object.uuid];\n    }\n    function update(object, key, value) {\n        var uuid = object.uuid;\n        var map = properties[uuid];\n        map[key] = value;\n    }\n    function dispose() {\n        properties = {};\n    }\n    return {\n        get: get,\n        remove: remove,\n        update: update,\n        dispose: dispose\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLState(gl, extensions, utils) {\n    function ColorBuffer() {\n        var locked = false;\n        var color = new Vector4();\n        var currentColorMask = null;\n        var currentColorClear = new Vector4(0, 0, 0, 0);\n        return {\n            setMask: function (colorMask) {\n                if (currentColorMask !== colorMask && !locked) {\n                    gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n                    currentColorMask = colorMask;\n                }\n            },\n            setLocked: function (lock) {\n                locked = lock;\n            },\n            setClear: function (r, g, b, a, premultipliedAlpha) {\n                if (premultipliedAlpha === true) {\n                    r *= a;\n                    g *= a;\n                    b *= a;\n                }\n                color.set(r, g, b, a);\n                if (currentColorClear.equals(color) === false) {\n                    gl.clearColor(r, g, b, a);\n                    currentColorClear.copy(color);\n                }\n            },\n            reset: function () {\n                locked = false;\n                currentColorMask = null;\n                currentColorClear.set(-1, 0, 0, 0); // set to invalid state\n            }\n        };\n    }\n    function DepthBuffer() {\n        var locked = false;\n        var currentDepthMask = null;\n        var currentDepthFunc = null;\n        var currentDepthClear = null;\n        return {\n            setTest: function (depthTest) {\n                if (depthTest) {\n                    enable(gl.DEPTH_TEST);\n                }\n                else {\n                    disable(gl.DEPTH_TEST);\n                }\n            },\n            setMask: function (depthMask) {\n                if (currentDepthMask !== depthMask && !locked) {\n                    gl.depthMask(depthMask);\n                    currentDepthMask = depthMask;\n                }\n            },\n            setFunc: function (depthFunc) {\n                if (currentDepthFunc !== depthFunc) {\n                    if (depthFunc) {\n                        switch (depthFunc) {\n                            case NeverDepth:\n                                gl.depthFunc(gl.NEVER);\n                                break;\n                            case AlwaysDepth:\n                                gl.depthFunc(gl.ALWAYS);\n                                break;\n                            case LessDepth:\n                                gl.depthFunc(gl.LESS);\n                                break;\n                            case LessEqualDepth:\n                                gl.depthFunc(gl.LEQUAL);\n                                break;\n                            case EqualDepth:\n                                gl.depthFunc(gl.EQUAL);\n                                break;\n                            case GreaterEqualDepth:\n                                gl.depthFunc(gl.GEQUAL);\n                                break;\n                            case GreaterDepth:\n                                gl.depthFunc(gl.GREATER);\n                                break;\n                            case NotEqualDepth:\n                                gl.depthFunc(gl.NOTEQUAL);\n                                break;\n                            default:\n                                gl.depthFunc(gl.LEQUAL);\n                        }\n                    }\n                    else {\n                        gl.depthFunc(gl.LEQUAL);\n                    }\n                    currentDepthFunc = depthFunc;\n                }\n            },\n            setLocked: function (lock) {\n                locked = lock;\n            },\n            setClear: function (depth) {\n                if (currentDepthClear !== depth) {\n                    gl.clearDepth(depth);\n                    currentDepthClear = depth;\n                }\n            },\n            reset: function () {\n                locked = false;\n                currentDepthMask = null;\n                currentDepthFunc = null;\n                currentDepthClear = null;\n            }\n        };\n    }\n    function StencilBuffer() {\n        var locked = false;\n        var currentStencilMask = null;\n        var currentStencilFunc = null;\n        var currentStencilRef = null;\n        var currentStencilFuncMask = null;\n        var currentStencilFail = null;\n        var currentStencilZFail = null;\n        var currentStencilZPass = null;\n        var currentStencilClear = null;\n        return {\n            setTest: function (stencilTest) {\n                if (stencilTest) {\n                    enable(gl.STENCIL_TEST);\n                }\n                else {\n                    disable(gl.STENCIL_TEST);\n                }\n            },\n            setMask: function (stencilMask) {\n                if (currentStencilMask !== stencilMask && !locked) {\n                    gl.stencilMask(stencilMask);\n                    currentStencilMask = stencilMask;\n                }\n            },\n            setFunc: function (stencilFunc, stencilRef, stencilMask) {\n                if (currentStencilFunc !== stencilFunc ||\n                    currentStencilRef !== stencilRef ||\n                    currentStencilFuncMask !== stencilMask) {\n                    gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n                    currentStencilFunc = stencilFunc;\n                    currentStencilRef = stencilRef;\n                    currentStencilFuncMask = stencilMask;\n                }\n            },\n            setOp: function (stencilFail, stencilZFail, stencilZPass) {\n                if (currentStencilFail !== stencilFail ||\n                    currentStencilZFail !== stencilZFail ||\n                    currentStencilZPass !== stencilZPass) {\n                    gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n                    currentStencilFail = stencilFail;\n                    currentStencilZFail = stencilZFail;\n                    currentStencilZPass = stencilZPass;\n                }\n            },\n            setLocked: function (lock) {\n                locked = lock;\n            },\n            setClear: function (stencil) {\n                if (currentStencilClear !== stencil) {\n                    gl.clearStencil(stencil);\n                    currentStencilClear = stencil;\n                }\n            },\n            reset: function () {\n                locked = false;\n                currentStencilMask = null;\n                currentStencilFunc = null;\n                currentStencilRef = null;\n                currentStencilFuncMask = null;\n                currentStencilFail = null;\n                currentStencilZFail = null;\n                currentStencilZPass = null;\n                currentStencilClear = null;\n            }\n        };\n    }\n    //\n    var colorBuffer = new ColorBuffer();\n    var depthBuffer = new DepthBuffer();\n    var stencilBuffer = new StencilBuffer();\n    var maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    var newAttributes = new Uint8Array(maxVertexAttributes);\n    var enabledAttributes = new Uint8Array(maxVertexAttributes);\n    var attributeDivisors = new Uint8Array(maxVertexAttributes);\n    var capabilities = {};\n    var compressedTextureFormats = null;\n    var currentProgram = null;\n    var currentBlending = null;\n    var currentBlendEquation = null;\n    var currentBlendSrc = null;\n    var currentBlendDst = null;\n    var currentBlendEquationAlpha = null;\n    var currentBlendSrcAlpha = null;\n    var currentBlendDstAlpha = null;\n    var currentPremultipledAlpha = false;\n    var currentFlipSided = null;\n    var currentCullFace = null;\n    var currentLineWidth = null;\n    var currentPolygonOffsetFactor = null;\n    var currentPolygonOffsetUnits = null;\n    var maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    var lineWidthAvailable = false;\n    var version = 0;\n    var glVersion = gl.getParameter(gl.VERSION);\n    if (glVersion.indexOf('WebGL') !== -1) {\n        version = parseFloat(/^WebGL\\ ([0-9])/.exec(glVersion)[1]);\n        lineWidthAvailable = (version >= 1.0);\n    }\n    else if (glVersion.indexOf('OpenGL ES') !== -1) {\n        version = parseFloat(/^OpenGL\\ ES\\ ([0-9])/.exec(glVersion)[1]);\n        lineWidthAvailable = (version >= 2.0);\n    }\n    var currentTextureSlot = null;\n    var currentBoundTextures = {};\n    var currentScissor = new Vector4();\n    var currentViewport = new Vector4();\n    function createTexture(type, target, count) {\n        var data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n        var texture = gl.createTexture();\n        gl.bindTexture(type, texture);\n        gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        for (var i = 0; i < count; i++) {\n            gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n        }\n        return texture;\n    }\n    var emptyTextures = {};\n    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);\n    // init\n    colorBuffer.setClear(0, 0, 0, 1);\n    depthBuffer.setClear(1);\n    stencilBuffer.setClear(0);\n    enable(gl.DEPTH_TEST);\n    depthBuffer.setFunc(LessEqualDepth);\n    setFlipSided(false);\n    setCullFace(CullFaceBack);\n    enable(gl.CULL_FACE);\n    enable(gl.BLEND);\n    setBlending(NormalBlending);\n    //\n    function initAttributes() {\n        for (var i = 0, l = newAttributes.length; i < l; i++) {\n            newAttributes[i] = 0;\n        }\n    }\n    function enableAttribute(attribute) {\n        newAttributes[attribute] = 1;\n        if (enabledAttributes[attribute] === 0) {\n            gl.enableVertexAttribArray(attribute);\n            enabledAttributes[attribute] = 1;\n        }\n        if (attributeDivisors[attribute] !== 0) {\n            var extension = extensions.get('ANGLE_instanced_arrays');\n            extension.vertexAttribDivisorANGLE(attribute, 0);\n            attributeDivisors[attribute] = 0;\n        }\n    }\n    function enableAttributeAndDivisor(attribute, meshPerAttribute) {\n        newAttributes[attribute] = 1;\n        if (enabledAttributes[attribute] === 0) {\n            gl.enableVertexAttribArray(attribute);\n            enabledAttributes[attribute] = 1;\n        }\n        if (attributeDivisors[attribute] !== meshPerAttribute) {\n            var extension = extensions.get('ANGLE_instanced_arrays');\n            extension.vertexAttribDivisorANGLE(attribute, meshPerAttribute);\n            attributeDivisors[attribute] = meshPerAttribute;\n        }\n    }\n    function disableUnusedAttributes() {\n        for (var i = 0, l = enabledAttributes.length; i !== l; ++i) {\n            if (enabledAttributes[i] !== newAttributes[i]) {\n                gl.disableVertexAttribArray(i);\n                enabledAttributes[i] = 0;\n            }\n        }\n    }\n    function enable(id) {\n        if (capabilities[id] !== true) {\n            gl.enable(id);\n            capabilities[id] = true;\n        }\n    }\n    function disable(id) {\n        if (capabilities[id] !== false) {\n            gl.disable(id);\n            capabilities[id] = false;\n        }\n    }\n    function getCompressedTextureFormats() {\n        if (compressedTextureFormats === null) {\n            compressedTextureFormats = [];\n            if (extensions.get('WEBGL_compressed_texture_pvrtc') ||\n                extensions.get('WEBGL_compressed_texture_s3tc') ||\n                extensions.get('WEBGL_compressed_texture_etc1') ||\n                extensions.get('WEBGL_compressed_texture_astc')) {\n                var formats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);\n                for (var i = 0; i < formats.length; i++) {\n                    compressedTextureFormats.push(formats[i]);\n                }\n            }\n        }\n        return compressedTextureFormats;\n    }\n    function useProgram(program) {\n        if (currentProgram !== program) {\n            gl.useProgram(program);\n            currentProgram = program;\n            return true;\n        }\n        return false;\n    }\n    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n        if (blending !== NoBlending) {\n            enable(gl.BLEND);\n        }\n        else {\n            disable(gl.BLEND);\n        }\n        if (blending !== CustomBlending) {\n            if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n                switch (blending) {\n                    case AdditiveBlending:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n                        }\n                        else {\n                            gl.blendEquation(gl.FUNC_ADD);\n                            gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n                        }\n                        break;\n                    case SubtractiveBlending:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n                        }\n                        else {\n                            gl.blendEquation(gl.FUNC_ADD);\n                            gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n                        }\n                        break;\n                    case MultiplyBlending:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n                        }\n                        else {\n                            gl.blendEquation(gl.FUNC_ADD);\n                            gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n                        }\n                        break;\n                    default:\n                        if (premultipliedAlpha) {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                        }\n                        else {\n                            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                            gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                        }\n                }\n            }\n            currentBlendEquation = null;\n            currentBlendSrc = null;\n            currentBlendDst = null;\n            currentBlendEquationAlpha = null;\n            currentBlendSrcAlpha = null;\n            currentBlendDstAlpha = null;\n        }\n        else {\n            blendEquationAlpha = blendEquationAlpha || blendEquation;\n            blendSrcAlpha = blendSrcAlpha || blendSrc;\n            blendDstAlpha = blendDstAlpha || blendDst;\n            if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n                gl.blendEquationSeparate(utils.convert(blendEquation), utils.convert(blendEquationAlpha));\n                currentBlendEquation = blendEquation;\n                currentBlendEquationAlpha = blendEquationAlpha;\n            }\n            if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n                gl.blendFuncSeparate(utils.convert(blendSrc), utils.convert(blendDst), utils.convert(blendSrcAlpha), utils.convert(blendDstAlpha));\n                currentBlendSrc = blendSrc;\n                currentBlendDst = blendDst;\n                currentBlendSrcAlpha = blendSrcAlpha;\n                currentBlendDstAlpha = blendDstAlpha;\n            }\n        }\n        currentBlending = blending;\n        currentPremultipledAlpha = premultipliedAlpha;\n    }\n    function setMaterial(material, frontFaceCW) {\n        material.side === DoubleSide\n            ? disable(gl.CULL_FACE)\n            : enable(gl.CULL_FACE);\n        var flipSided = (material.side === BackSide);\n        if (frontFaceCW)\n            flipSided = !flipSided;\n        setFlipSided(flipSided);\n        material.transparent === true\n            ? setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha)\n            : setBlending(NoBlending);\n        depthBuffer.setFunc(material.depthFunc);\n        depthBuffer.setTest(material.depthTest);\n        depthBuffer.setMask(material.depthWrite);\n        colorBuffer.setMask(material.colorWrite);\n        setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n    }\n    //\n    function setFlipSided(flipSided) {\n        if (currentFlipSided !== flipSided) {\n            if (flipSided) {\n                gl.frontFace(gl.CW);\n            }\n            else {\n                gl.frontFace(gl.CCW);\n            }\n            currentFlipSided = flipSided;\n        }\n    }\n    function setCullFace(cullFace) {\n        if (cullFace !== CullFaceNone) {\n            enable(gl.CULL_FACE);\n            if (cullFace !== currentCullFace) {\n                if (cullFace === CullFaceBack) {\n                    gl.cullFace(gl.BACK);\n                }\n                else if (cullFace === CullFaceFront) {\n                    gl.cullFace(gl.FRONT);\n                }\n                else {\n                    gl.cullFace(gl.FRONT_AND_BACK);\n                }\n            }\n        }\n        else {\n            disable(gl.CULL_FACE);\n        }\n        currentCullFace = cullFace;\n    }\n    function setLineWidth(width) {\n        if (width !== currentLineWidth) {\n            if (lineWidthAvailable)\n                gl.lineWidth(width);\n            currentLineWidth = width;\n        }\n    }\n    function setPolygonOffset(polygonOffset, factor, units) {\n        if (polygonOffset) {\n            enable(gl.POLYGON_OFFSET_FILL);\n            if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n                gl.polygonOffset(factor, units);\n                currentPolygonOffsetFactor = factor;\n                currentPolygonOffsetUnits = units;\n            }\n        }\n        else {\n            disable(gl.POLYGON_OFFSET_FILL);\n        }\n    }\n    function setScissorTest(scissorTest) {\n        if (scissorTest) {\n            enable(gl.SCISSOR_TEST);\n        }\n        else {\n            disable(gl.SCISSOR_TEST);\n        }\n    }\n    // texture\n    function activeTexture(webglSlot) {\n        if (webglSlot === undefined)\n            webglSlot = gl.TEXTURE0 + maxTextures - 1;\n        if (currentTextureSlot !== webglSlot) {\n            gl.activeTexture(webglSlot);\n            currentTextureSlot = webglSlot;\n        }\n    }\n    function bindTexture(webglType, webglTexture) {\n        if (currentTextureSlot === null) {\n            activeTexture();\n        }\n        var boundTexture = currentBoundTextures[currentTextureSlot];\n        if (boundTexture === undefined) {\n            boundTexture = { type: undefined, texture: undefined };\n            currentBoundTextures[currentTextureSlot] = boundTexture;\n        }\n        if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n            gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n            boundTexture.type = webglType;\n            boundTexture.texture = webglTexture;\n        }\n    }\n    function compressedTexImage2D() {\n        try {\n            gl.compressedTexImage2D.apply(gl, arguments);\n        }\n        catch (error) {\n            console.error('THREE.WebGLState:', error);\n        }\n    }\n    function texImage2D() {\n        try {\n            gl.texImage2D.apply(gl, arguments);\n        }\n        catch (error) {\n            console.error('THREE.WebGLState:', error);\n        }\n    }\n    //\n    function scissor(scissor) {\n        if (currentScissor.equals(scissor) === false) {\n            gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n            currentScissor.copy(scissor);\n        }\n    }\n    function viewport(viewport) {\n        if (currentViewport.equals(viewport) === false) {\n            gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n            currentViewport.copy(viewport);\n        }\n    }\n    //\n    function reset() {\n        for (var i = 0; i < enabledAttributes.length; i++) {\n            if (enabledAttributes[i] === 1) {\n                gl.disableVertexAttribArray(i);\n                enabledAttributes[i] = 0;\n            }\n        }\n        capabilities = {};\n        compressedTextureFormats = null;\n        currentTextureSlot = null;\n        currentBoundTextures = {};\n        currentProgram = null;\n        currentBlending = null;\n        currentFlipSided = null;\n        currentCullFace = null;\n        colorBuffer.reset();\n        depthBuffer.reset();\n        stencilBuffer.reset();\n    }\n    return {\n        buffers: {\n            color: colorBuffer,\n            depth: depthBuffer,\n            stencil: stencilBuffer\n        },\n        initAttributes: initAttributes,\n        enableAttribute: enableAttribute,\n        enableAttributeAndDivisor: enableAttributeAndDivisor,\n        disableUnusedAttributes: disableUnusedAttributes,\n        enable: enable,\n        disable: disable,\n        getCompressedTextureFormats: getCompressedTextureFormats,\n        useProgram: useProgram,\n        setBlending: setBlending,\n        setMaterial: setMaterial,\n        setFlipSided: setFlipSided,\n        setCullFace: setCullFace,\n        setLineWidth: setLineWidth,\n        setPolygonOffset: setPolygonOffset,\n        setScissorTest: setScissorTest,\n        activeTexture: activeTexture,\n        bindTexture: bindTexture,\n        compressedTexImage2D: compressedTexImage2D,\n        texImage2D: texImage2D,\n        scissor: scissor,\n        viewport: viewport,\n        reset: reset\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLCapabilities(gl, extensions, parameters) {\n    var maxAnisotropy;\n    function getMaxAnisotropy() {\n        if (maxAnisotropy !== undefined)\n            return maxAnisotropy;\n        var extension = extensions.get('EXT_texture_filter_anisotropic');\n        if (extension !== null) {\n            maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n        }\n        else {\n            maxAnisotropy = 0;\n        }\n        return maxAnisotropy;\n    }\n    function getMaxPrecision(precision) {\n        if (precision === 'highp') {\n            if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 &&\n                gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n                return 'highp';\n            }\n            precision = 'mediump';\n        }\n        if (precision === 'mediump') {\n            if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 &&\n                gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n                return 'mediump';\n            }\n        }\n        return 'lowp';\n    }\n    var precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    var maxPrecision = getMaxPrecision(precision);\n    if (maxPrecision !== precision) {\n        console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n        precision = maxPrecision;\n    }\n    var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n    var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    var maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n    var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    var maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    var maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    var maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    var maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n    var maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n    var vertexTextures = maxVertexTextures > 0;\n    var floatFragmentTextures = !!extensions.get('OES_texture_float');\n    var floatVertexTextures = vertexTextures && floatFragmentTextures;\n    return {\n        getMaxAnisotropy: getMaxAnisotropy,\n        getMaxPrecision: getMaxPrecision,\n        precision: precision,\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\n        maxTextures: maxTextures,\n        maxVertexTextures: maxVertexTextures,\n        maxTextureSize: maxTextureSize,\n        maxCubemapSize: maxCubemapSize,\n        maxAttributes: maxAttributes,\n        maxVertexUniforms: maxVertexUniforms,\n        maxVaryings: maxVaryings,\n        maxFragmentUniforms: maxFragmentUniforms,\n        vertexTextures: vertexTextures,\n        floatFragmentTextures: floatFragmentTextures,\n        floatVertexTextures: floatVertexTextures\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author greggman / http://games.greggman.com/\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author tschw\n */\nfunction PerspectiveCamera(fov, aspect, near, far) {\n    Camera.call(this);\n    this.type = 'PerspectiveCamera';\n    this.fov = fov !== undefined ? fov : 50;\n    this.zoom = 1;\n    this.near = near !== undefined ? near : 0.1;\n    this.far = far !== undefined ? far : 2000;\n    this.focus = 10;\n    this.aspect = aspect !== undefined ? aspect : 1;\n    this.view = null;\n    this.filmGauge = 35; // width of the film (default in millimeters)\n    this.filmOffset = 0; // horizontal film offset (same unit as gauge)\n    this.updateProjectionMatrix();\n}\nPerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n    constructor: PerspectiveCamera,\n    isPerspectiveCamera: true,\n    copy: function (source, recursive) {\n        Camera.prototype.copy.call(this, source, recursive);\n        this.fov = source.fov;\n        this.zoom = source.zoom;\n        this.near = source.near;\n        this.far = source.far;\n        this.focus = source.focus;\n        this.aspect = source.aspect;\n        this.view = source.view === null ? null : Object.assign({}, source.view);\n        this.filmGauge = source.filmGauge;\n        this.filmOffset = source.filmOffset;\n        return this;\n    },\n    /**\n     * Sets the FOV by focal length in respect to the current .filmGauge.\n     *\n     * The default film gauge is 35, so that the focal length can be specified for\n     * a 35mm (full frame) camera.\n     *\n     * Values for focal length and film gauge must have the same unit.\n     */\n    setFocalLength: function (focalLength) {\n        // see http://www.bobatkins.com/photography/technical/field_of_view.html\n        var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n        this.fov = _Math.RAD2DEG * 2 * Math.atan(vExtentSlope);\n        this.updateProjectionMatrix();\n    },\n    /**\n     * Calculates the focal length from the current .fov and .filmGauge.\n     */\n    getFocalLength: function () {\n        var vExtentSlope = Math.tan(_Math.DEG2RAD * 0.5 * this.fov);\n        return 0.5 * this.getFilmHeight() / vExtentSlope;\n    },\n    getEffectiveFOV: function () {\n        return _Math.RAD2DEG * 2 * Math.atan(Math.tan(_Math.DEG2RAD * 0.5 * this.fov) / this.zoom);\n    },\n    getFilmWidth: function () {\n        // film not completely covered in portrait format (aspect < 1)\n        return this.filmGauge * Math.min(this.aspect, 1);\n    },\n    getFilmHeight: function () {\n        // film not completely covered in landscape format (aspect > 1)\n        return this.filmGauge / Math.max(this.aspect, 1);\n    },\n    /**\n     * Sets an offset in a larger frustum. This is useful for multi-window or\n     * multi-monitor/multi-machine setups.\n     *\n     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n     * the monitors are in grid like this\n     *\n     *   +---+---+---+\n     *   | A | B | C |\n     *   +---+---+---+\n     *   | D | E | F |\n     *   +---+---+---+\n     *\n     * then for each monitor you would call it like this\n     *\n     *   var w = 1920;\n     *   var h = 1080;\n     *   var fullWidth = w * 3;\n     *   var fullHeight = h * 2;\n     *\n     *   --A--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n     *   --B--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n     *   --C--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n     *   --D--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n     *   --E--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n     *   --F--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n     *\n     *   Note there is no reason monitors have to be the same size or in a grid.\n     */\n    setViewOffset: function (fullWidth, fullHeight, x, y, width, height) {\n        this.aspect = fullWidth / fullHeight;\n        if (this.view === null) {\n            this.view = {\n                enabled: true,\n                fullWidth: 1,\n                fullHeight: 1,\n                offsetX: 0,\n                offsetY: 0,\n                width: 1,\n                height: 1\n            };\n        }\n        this.view.enabled = true;\n        this.view.fullWidth = fullWidth;\n        this.view.fullHeight = fullHeight;\n        this.view.offsetX = x;\n        this.view.offsetY = y;\n        this.view.width = width;\n        this.view.height = height;\n        this.updateProjectionMatrix();\n    },\n    clearViewOffset: function () {\n        if (this.view !== null) {\n            this.view.enabled = false;\n        }\n        this.updateProjectionMatrix();\n    },\n    updateProjectionMatrix: function () {\n        var near = this.near, top = near * Math.tan(_Math.DEG2RAD * 0.5 * this.fov) / this.zoom, height = 2 * top, width = this.aspect * height, left = -0.5 * width, view = this.view;\n        if (this.view !== null && this.view.enabled) {\n            var fullWidth = view.fullWidth, fullHeight = view.fullHeight;\n            left += view.offsetX * width / fullWidth;\n            top -= view.offsetY * height / fullHeight;\n            width *= view.width / fullWidth;\n            height *= view.height / fullHeight;\n        }\n        var skew = this.filmOffset;\n        if (skew !== 0)\n            left += near * skew / this.getFilmWidth();\n        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n    },\n    toJSON: function (meta) {\n        var data = Object3D.prototype.toJSON.call(this, meta);\n        data.object.fov = this.fov;\n        data.object.zoom = this.zoom;\n        data.object.near = this.near;\n        data.object.far = this.far;\n        data.object.focus = this.focus;\n        data.object.aspect = this.aspect;\n        if (this.view !== null)\n            data.object.view = Object.assign({}, this.view);\n        data.object.filmGauge = this.filmGauge;\n        data.object.filmOffset = this.filmOffset;\n        return data;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction ArrayCamera(array) {\n    PerspectiveCamera.call(this);\n    this.cameras = array || [];\n}\nArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {\n    constructor: ArrayCamera,\n    isArrayCamera: true\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebVRManager(renderer) {\n    var scope = this;\n    var device = null;\n    var frameData = null;\n    var poseTarget = null;\n    var standingMatrix = new Matrix4();\n    var standingMatrixInverse = new Matrix4();\n    if (typeof window !== 'undefined' && 'VRFrameData' in window) {\n        frameData = new window.VRFrameData();\n    }\n    var matrixWorldInverse = new Matrix4();\n    var cameraL = new PerspectiveCamera();\n    cameraL.bounds = new Vector4(0.0, 0.0, 0.5, 1.0);\n    cameraL.layers.enable(1);\n    var cameraR = new PerspectiveCamera();\n    cameraR.bounds = new Vector4(0.5, 0.0, 0.5, 1.0);\n    cameraR.layers.enable(2);\n    var cameraVR = new ArrayCamera([cameraL, cameraR]);\n    cameraVR.layers.enable(1);\n    cameraVR.layers.enable(2);\n    //\n    var currentSize, currentPixelRatio;\n    function onVRDisplayPresentChange() {\n        if (device !== null && device.isPresenting) {\n            var eyeParameters = device.getEyeParameters('left');\n            var renderWidth = eyeParameters.renderWidth;\n            var renderHeight = eyeParameters.renderHeight;\n            currentPixelRatio = renderer.getPixelRatio();\n            currentSize = renderer.getSize();\n            renderer.setDrawingBufferSize(renderWidth * 2, renderHeight, 1);\n        }\n        else if (scope.enabled) {\n            renderer.setDrawingBufferSize(currentSize.width, currentSize.height, currentPixelRatio);\n        }\n    }\n    if (typeof window !== 'undefined') {\n        window.addEventListener('vrdisplaypresentchange', onVRDisplayPresentChange, false);\n    }\n    //\n    this.enabled = false;\n    this.userHeight = 1.6;\n    this.getDevice = function () {\n        return device;\n    };\n    this.setDevice = function (value) {\n        if (value !== undefined)\n            device = value;\n    };\n    this.setPoseTarget = function (object) {\n        if (object !== undefined)\n            poseTarget = object;\n    };\n    this.getCamera = function (camera) {\n        if (device === null)\n            return camera;\n        device.depthNear = camera.near;\n        device.depthFar = camera.far;\n        device.getFrameData(frameData);\n        //\n        var pose = frameData.pose;\n        var poseObject = poseTarget !== null ? poseTarget : camera;\n        if (pose.position !== null) {\n            poseObject.position.fromArray(pose.position);\n        }\n        else {\n            poseObject.position.set(0, 0, 0);\n        }\n        if (pose.orientation !== null) {\n            poseObject.quaternion.fromArray(pose.orientation);\n        }\n        var stageParameters = device.stageParameters;\n        if (stageParameters) {\n            standingMatrix.fromArray(stageParameters.sittingToStandingTransform);\n        }\n        else {\n            standingMatrix.makeTranslation(0, scope.userHeight, 0);\n        }\n        poseObject.position.applyMatrix4(standingMatrix);\n        poseObject.updateMatrixWorld();\n        if (device.isPresenting === false)\n            return camera;\n        //\n        cameraL.near = camera.near;\n        cameraR.near = camera.near;\n        cameraL.far = camera.far;\n        cameraR.far = camera.far;\n        cameraVR.matrixWorld.copy(camera.matrixWorld);\n        cameraVR.matrixWorldInverse.copy(camera.matrixWorldInverse);\n        cameraL.matrixWorldInverse.fromArray(frameData.leftViewMatrix);\n        cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix);\n        // TODO (mrdoob) Double check this code\n        standingMatrixInverse.getInverse(standingMatrix);\n        cameraL.matrixWorldInverse.multiply(standingMatrixInverse);\n        cameraR.matrixWorldInverse.multiply(standingMatrixInverse);\n        var parent = poseObject.parent;\n        if (parent !== null) {\n            matrixWorldInverse.getInverse(parent.matrixWorld);\n            cameraL.matrixWorldInverse.multiply(matrixWorldInverse);\n            cameraR.matrixWorldInverse.multiply(matrixWorldInverse);\n        }\n        // envMap and Mirror needs camera.matrixWorld\n        cameraL.matrixWorld.getInverse(cameraL.matrixWorldInverse);\n        cameraR.matrixWorld.getInverse(cameraR.matrixWorldInverse);\n        cameraL.projectionMatrix.fromArray(frameData.leftProjectionMatrix);\n        cameraR.projectionMatrix.fromArray(frameData.rightProjectionMatrix);\n        // HACK (mrdoob)\n        // https://github.com/w3c/webvr/issues/203\n        cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n        //\n        var layers = device.getLayers();\n        if (layers.length) {\n            var layer = layers[0];\n            if (layer.leftBounds !== null && layer.leftBounds.length === 4) {\n                cameraL.bounds.fromArray(layer.leftBounds);\n            }\n            if (layer.rightBounds !== null && layer.rightBounds.length === 4) {\n                cameraR.bounds.fromArray(layer.rightBounds);\n            }\n        }\n        return cameraVR;\n    };\n    this.getStandingMatrix = function () {\n        return standingMatrix;\n    };\n    this.submitFrame = function () {\n        if (device && device.isPresenting)\n            device.submitFrame();\n    };\n    this.dispose = function () {\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('vrdisplaypresentchange', onVRDisplayPresentChange);\n        }\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction WebGLExtensions(gl) {\n    var extensions = {};\n    return {\n        get: function (name) {\n            if (extensions[name] !== undefined) {\n                return extensions[name];\n            }\n            var extension;\n            switch (name) {\n                case 'WEBGL_depth_texture':\n                    extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n                    break;\n                case 'EXT_texture_filter_anisotropic':\n                    extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n                    break;\n                case 'WEBGL_compressed_texture_s3tc':\n                    extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n                    break;\n                case 'WEBGL_compressed_texture_pvrtc':\n                    extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n                    break;\n                case 'WEBGL_compressed_texture_etc1':\n                    extension = gl.getExtension('WEBGL_compressed_texture_etc1');\n                    break;\n                default:\n                    extension = gl.getExtension(name);\n            }\n            if (extension === null) {\n                console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n            }\n            extensions[name] = extension;\n            return extension;\n        }\n    };\n}\n/**\n * @author tschw\n */\nfunction WebGLClipping() {\n    var scope = this, globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false, plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };\n    this.uniform = uniform;\n    this.numPlanes = 0;\n    this.numIntersection = 0;\n    this.init = function (planes, enableLocalClipping, camera) {\n        var enabled = planes.length !== 0 ||\n            enableLocalClipping ||\n            // enable state of previous frame - the clipping code has to\n            // run another frame in order to reset the state:\n            numGlobalPlanes !== 0 ||\n            localClippingEnabled;\n        localClippingEnabled = enableLocalClipping;\n        globalState = projectPlanes(planes, camera, 0);\n        numGlobalPlanes = planes.length;\n        return enabled;\n    };\n    this.beginShadows = function () {\n        renderingShadows = true;\n        projectPlanes(null);\n    };\n    this.endShadows = function () {\n        renderingShadows = false;\n        resetGlobalState();\n    };\n    this.setState = function (planes, clipIntersection, clipShadows, camera, cache, fromCache) {\n        if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n            // there's no local clipping\n            if (renderingShadows) {\n                // there's no global clipping\n                projectPlanes(null);\n            }\n            else {\n                resetGlobalState();\n            }\n        }\n        else {\n            var nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4, dstArray = cache.clippingState || null;\n            uniform.value = dstArray; // ensure unique state\n            dstArray = projectPlanes(planes, camera, lGlobal, fromCache);\n            for (var i = 0; i !== lGlobal; ++i) {\n                dstArray[i] = globalState[i];\n            }\n            cache.clippingState = dstArray;\n            this.numIntersection = clipIntersection ? this.numPlanes : 0;\n            this.numPlanes += nGlobal;\n        }\n    };\n    function resetGlobalState() {\n        if (uniform.value !== globalState) {\n            uniform.value = globalState;\n            uniform.needsUpdate = numGlobalPlanes > 0;\n        }\n        scope.numPlanes = numGlobalPlanes;\n        scope.numIntersection = 0;\n    }\n    function projectPlanes(planes, camera, dstOffset, skipTransform) {\n        var nPlanes = planes !== null ? planes.length : 0, dstArray = null;\n        if (nPlanes !== 0) {\n            dstArray = uniform.value;\n            if (skipTransform !== true || dstArray === null) {\n                var flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;\n                viewNormalMatrix.getNormalMatrix(viewMatrix);\n                if (dstArray === null || dstArray.length < flatSize) {\n                    dstArray = new Float32Array(flatSize);\n                }\n                for (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n                    plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n                    plane.normal.toArray(dstArray, i4);\n                    dstArray[i4 + 3] = plane.constant;\n                }\n            }\n            uniform.value = dstArray;\n            uniform.needsUpdate = true;\n        }\n        scope.numPlanes = nPlanes;\n        return dstArray;\n    }\n}\n/**\n * @author thespite / http://www.twitter.com/thespite\n */\nfunction WebGLUtils(gl, extensions) {\n    function convert(p) {\n        var extension;\n        if (p === RepeatWrapping)\n            return gl.REPEAT;\n        if (p === ClampToEdgeWrapping)\n            return gl.CLAMP_TO_EDGE;\n        if (p === MirroredRepeatWrapping)\n            return gl.MIRRORED_REPEAT;\n        if (p === NearestFilter)\n            return gl.NEAREST;\n        if (p === NearestMipMapNearestFilter)\n            return gl.NEAREST_MIPMAP_NEAREST;\n        if (p === NearestMipMapLinearFilter)\n            return gl.NEAREST_MIPMAP_LINEAR;\n        if (p === LinearFilter)\n            return gl.LINEAR;\n        if (p === LinearMipMapNearestFilter)\n            return gl.LINEAR_MIPMAP_NEAREST;\n        if (p === LinearMipMapLinearFilter)\n            return gl.LINEAR_MIPMAP_LINEAR;\n        if (p === UnsignedByteType)\n            return gl.UNSIGNED_BYTE;\n        if (p === UnsignedShort4444Type)\n            return gl.UNSIGNED_SHORT_4_4_4_4;\n        if (p === UnsignedShort5551Type)\n            return gl.UNSIGNED_SHORT_5_5_5_1;\n        if (p === UnsignedShort565Type)\n            return gl.UNSIGNED_SHORT_5_6_5;\n        if (p === ByteType)\n            return gl.BYTE;\n        if (p === ShortType)\n            return gl.SHORT;\n        if (p === UnsignedShortType)\n            return gl.UNSIGNED_SHORT;\n        if (p === IntType)\n            return gl.INT;\n        if (p === UnsignedIntType)\n            return gl.UNSIGNED_INT;\n        if (p === FloatType)\n            return gl.FLOAT;\n        if (p === HalfFloatType) {\n            extension = extensions.get('OES_texture_half_float');\n            if (extension !== null)\n                return extension.HALF_FLOAT_OES;\n        }\n        if (p === AlphaFormat)\n            return gl.ALPHA;\n        if (p === RGBFormat)\n            return gl.RGB;\n        if (p === RGBAFormat)\n            return gl.RGBA;\n        if (p === LuminanceFormat)\n            return gl.LUMINANCE;\n        if (p === LuminanceAlphaFormat)\n            return gl.LUMINANCE_ALPHA;\n        if (p === DepthFormat)\n            return gl.DEPTH_COMPONENT;\n        if (p === DepthStencilFormat)\n            return gl.DEPTH_STENCIL;\n        if (p === AddEquation)\n            return gl.FUNC_ADD;\n        if (p === SubtractEquation)\n            return gl.FUNC_SUBTRACT;\n        if (p === ReverseSubtractEquation)\n            return gl.FUNC_REVERSE_SUBTRACT;\n        if (p === ZeroFactor)\n            return gl.ZERO;\n        if (p === OneFactor)\n            return gl.ONE;\n        if (p === SrcColorFactor)\n            return gl.SRC_COLOR;\n        if (p === OneMinusSrcColorFactor)\n            return gl.ONE_MINUS_SRC_COLOR;\n        if (p === SrcAlphaFactor)\n            return gl.SRC_ALPHA;\n        if (p === OneMinusSrcAlphaFactor)\n            return gl.ONE_MINUS_SRC_ALPHA;\n        if (p === DstAlphaFactor)\n            return gl.DST_ALPHA;\n        if (p === OneMinusDstAlphaFactor)\n            return gl.ONE_MINUS_DST_ALPHA;\n        if (p === DstColorFactor)\n            return gl.DST_COLOR;\n        if (p === OneMinusDstColorFactor)\n            return gl.ONE_MINUS_DST_COLOR;\n        if (p === SrcAlphaSaturateFactor)\n            return gl.SRC_ALPHA_SATURATE;\n        if (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n            p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n            extension = extensions.get('WEBGL_compressed_texture_s3tc');\n            if (extension !== null) {\n                if (p === RGB_S3TC_DXT1_Format)\n                    return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT1_Format)\n                    return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n                if (p === RGBA_S3TC_DXT3_Format)\n                    return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                if (p === RGBA_S3TC_DXT5_Format)\n                    return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n            }\n        }\n        if (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n            p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n            extension = extensions.get('WEBGL_compressed_texture_pvrtc');\n            if (extension !== null) {\n                if (p === RGB_PVRTC_4BPPV1_Format)\n                    return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n                if (p === RGB_PVRTC_2BPPV1_Format)\n                    return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n                if (p === RGBA_PVRTC_4BPPV1_Format)\n                    return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n                if (p === RGBA_PVRTC_2BPPV1_Format)\n                    return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n            }\n        }\n        if (p === RGB_ETC1_Format) {\n            extension = extensions.get('WEBGL_compressed_texture_etc1');\n            if (extension !== null)\n                return extension.COMPRESSED_RGB_ETC1_WEBGL;\n        }\n        if (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n            p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n            p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n            p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n            p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format) {\n            extension = extensions.get('WEBGL_compressed_texture_astc');\n            if (extension !== null) {\n                return p;\n            }\n        }\n        if (p === MinEquation || p === MaxEquation) {\n            extension = extensions.get('EXT_blend_minmax');\n            if (extension !== null) {\n                if (p === MinEquation)\n                    return extension.MIN_EXT;\n                if (p === MaxEquation)\n                    return extension.MAX_EXT;\n            }\n        }\n        if (p === UnsignedInt248Type) {\n            extension = extensions.get('WEBGL_depth_texture');\n            if (extension !== null)\n                return extension.UNSIGNED_INT_24_8_WEBGL;\n        }\n        return 0;\n    }\n    return { convert: convert };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction UniformsCache() {\n    var lights = {};\n    return {\n        get: function (light) {\n            if (lights[light.id] !== undefined) {\n                return lights[light.id];\n            }\n            var uniforms;\n            switch (light.type) {\n                case 'DirectionalLight':\n                    uniforms = {\n                        direction: new Vector3(),\n                        color: new Color(),\n                        shadow: false,\n                        shadowBias: 0,\n                        shadowRadius: 1,\n                        shadowMapSize: new Vector2()\n                    };\n                    break;\n                case 'SpotLight':\n                    uniforms = {\n                        position: new Vector3(),\n                        direction: new Vector3(),\n                        color: new Color(),\n                        distance: 0,\n                        coneCos: 0,\n                        penumbraCos: 0,\n                        decay: 0,\n                        shadow: false,\n                        shadowBias: 0,\n                        shadowRadius: 1,\n                        shadowMapSize: new Vector2()\n                    };\n                    break;\n                case 'PointLight':\n                    uniforms = {\n                        position: new Vector3(),\n                        color: new Color(),\n                        distance: 0,\n                        decay: 0,\n                        shadow: false,\n                        shadowBias: 0,\n                        shadowRadius: 1,\n                        shadowMapSize: new Vector2(),\n                        shadowCameraNear: 1,\n                        shadowCameraFar: 1000\n                    };\n                    break;\n                case 'HemisphereLight':\n                    uniforms = {\n                        direction: new Vector3(),\n                        skyColor: new Color(),\n                        groundColor: new Color()\n                    };\n                    break;\n                case 'RectAreaLight':\n                    uniforms = {\n                        color: new Color(),\n                        position: new Vector3(),\n                        halfWidth: new Vector3(),\n                        halfHeight: new Vector3()\n                        // TODO (abelnation): set RectAreaLight shadow uniforms\n                    };\n                    break;\n            }\n            lights[light.id] = uniforms;\n            return uniforms;\n        }\n    };\n}\nvar count = 0;\nfunction WebGLLights() {\n    var cache = new UniformsCache();\n    var state = {\n        id: count++,\n        hash: '',\n        ambient: [0, 0, 0],\n        directional: [],\n        directionalShadowMap: [],\n        directionalShadowMatrix: [],\n        spot: [],\n        spotShadowMap: [],\n        spotShadowMatrix: [],\n        rectArea: [],\n        point: [],\n        pointShadowMap: [],\n        pointShadowMatrix: [],\n        hemi: []\n    };\n    var vector3 = new Vector3();\n    var matrix4 = new Matrix4();\n    var matrix42 = new Matrix4();\n    function setup(lights, shadows, camera) {\n        var r = 0, g = 0, b = 0;\n        var directionalLength = 0;\n        var pointLength = 0;\n        var spotLength = 0;\n        var rectAreaLength = 0;\n        var hemiLength = 0;\n        var viewMatrix = camera.matrixWorldInverse;\n        for (var i = 0, l = lights.length; i < l; i++) {\n            var light = lights[i];\n            var color = light.color;\n            var intensity = light.intensity;\n            var distance = light.distance;\n            var shadowMap = (light.shadow && light.shadow.map) ? light.shadow.map.texture : null;\n            if (light.isAmbientLight) {\n                r += color.r * intensity;\n                g += color.g * intensity;\n                b += color.b * intensity;\n            }\n            else if (light.isDirectionalLight) {\n                var uniforms = cache.get(light);\n                uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n                uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n                vector3.setFromMatrixPosition(light.target.matrixWorld);\n                uniforms.direction.sub(vector3);\n                uniforms.direction.transformDirection(viewMatrix);\n                uniforms.shadow = light.castShadow;\n                if (light.castShadow) {\n                    var shadow = light.shadow;\n                    uniforms.shadowBias = shadow.bias;\n                    uniforms.shadowRadius = shadow.radius;\n                    uniforms.shadowMapSize = shadow.mapSize;\n                }\n                state.directionalShadowMap[directionalLength] = shadowMap;\n                state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n                state.directional[directionalLength] = uniforms;\n                directionalLength++;\n            }\n            else if (light.isSpotLight) {\n                var uniforms = cache.get(light);\n                uniforms.position.setFromMatrixPosition(light.matrixWorld);\n                uniforms.position.applyMatrix4(viewMatrix);\n                uniforms.color.copy(color).multiplyScalar(intensity);\n                uniforms.distance = distance;\n                uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n                vector3.setFromMatrixPosition(light.target.matrixWorld);\n                uniforms.direction.sub(vector3);\n                uniforms.direction.transformDirection(viewMatrix);\n                uniforms.coneCos = Math.cos(light.angle);\n                uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n                uniforms.decay = (light.distance === 0) ? 0.0 : light.decay;\n                uniforms.shadow = light.castShadow;\n                if (light.castShadow) {\n                    var shadow = light.shadow;\n                    uniforms.shadowBias = shadow.bias;\n                    uniforms.shadowRadius = shadow.radius;\n                    uniforms.shadowMapSize = shadow.mapSize;\n                }\n                state.spotShadowMap[spotLength] = shadowMap;\n                state.spotShadowMatrix[spotLength] = light.shadow.matrix;\n                state.spot[spotLength] = uniforms;\n                spotLength++;\n            }\n            else if (light.isRectAreaLight) {\n                var uniforms = cache.get(light);\n                // (a) intensity is the total visible light emitted\n                //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n                // (b) intensity is the brightness of the light\n                uniforms.color.copy(color).multiplyScalar(intensity);\n                uniforms.position.setFromMatrixPosition(light.matrixWorld);\n                uniforms.position.applyMatrix4(viewMatrix);\n                // extract local rotation of light to derive width/height half vectors\n                matrix42.identity();\n                matrix4.copy(light.matrixWorld);\n                matrix4.premultiply(viewMatrix);\n                matrix42.extractRotation(matrix4);\n                uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n                uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n                uniforms.halfWidth.applyMatrix4(matrix42);\n                uniforms.halfHeight.applyMatrix4(matrix42);\n                // TODO (abelnation): RectAreaLight distance?\n                // uniforms.distance = distance;\n                state.rectArea[rectAreaLength] = uniforms;\n                rectAreaLength++;\n            }\n            else if (light.isPointLight) {\n                var uniforms = cache.get(light);\n                uniforms.position.setFromMatrixPosition(light.matrixWorld);\n                uniforms.position.applyMatrix4(viewMatrix);\n                uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n                uniforms.distance = light.distance;\n                uniforms.decay = (light.distance === 0) ? 0.0 : light.decay;\n                uniforms.shadow = light.castShadow;\n                if (light.castShadow) {\n                    var shadow = light.shadow;\n                    uniforms.shadowBias = shadow.bias;\n                    uniforms.shadowRadius = shadow.radius;\n                    uniforms.shadowMapSize = shadow.mapSize;\n                    uniforms.shadowCameraNear = shadow.camera.near;\n                    uniforms.shadowCameraFar = shadow.camera.far;\n                }\n                state.pointShadowMap[pointLength] = shadowMap;\n                state.pointShadowMatrix[pointLength] = light.shadow.matrix;\n                state.point[pointLength] = uniforms;\n                pointLength++;\n            }\n            else if (light.isHemisphereLight) {\n                var uniforms = cache.get(light);\n                uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n                uniforms.direction.transformDirection(viewMatrix);\n                uniforms.direction.normalize();\n                uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n                uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n                state.hemi[hemiLength] = uniforms;\n                hemiLength++;\n            }\n        }\n        state.ambient[0] = r;\n        state.ambient[1] = g;\n        state.ambient[2] = b;\n        state.directional.length = directionalLength;\n        state.spot.length = spotLength;\n        state.rectArea.length = rectAreaLength;\n        state.point.length = pointLength;\n        state.hemi.length = hemiLength;\n        state.hash = state.id + ',' + directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;\n    }\n    return {\n        setup: setup,\n        state: state\n    };\n}\n/**\n * @author Mugen87 / https://github.com/Mugen87\n */\nfunction WebGLRenderState() {\n    var lights = new WebGLLights();\n    var lightsArray = [];\n    var shadowsArray = [];\n    var spritesArray = [];\n    function init() {\n        lightsArray.length = 0;\n        shadowsArray.length = 0;\n        spritesArray.length = 0;\n    }\n    function pushLight(light) {\n        lightsArray.push(light);\n    }\n    function pushShadow(shadowLight) {\n        shadowsArray.push(shadowLight);\n    }\n    function pushSprite(shadowLight) {\n        spritesArray.push(shadowLight);\n    }\n    function setupLights(camera) {\n        lights.setup(lightsArray, shadowsArray, camera);\n    }\n    var state = {\n        lightsArray: lightsArray,\n        shadowsArray: shadowsArray,\n        spritesArray: spritesArray,\n        lights: lights\n    };\n    return {\n        init: init,\n        state: state,\n        setupLights: setupLights,\n        pushLight: pushLight,\n        pushShadow: pushShadow,\n        pushSprite: pushSprite\n    };\n}\nfunction WebGLRenderStates() {\n    var renderStates = {};\n    function get(scene, camera) {\n        var hash = scene.id + ',' + camera.id;\n        var renderState = renderStates[hash];\n        if (renderState === undefined) {\n            renderState = new WebGLRenderState();\n            renderStates[hash] = renderState;\n        }\n        return renderState;\n    }\n    function dispose() {\n        renderStates = {};\n    }\n    return {\n        get: get,\n        dispose: dispose\n    };\n}\n/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\nfunction WebGLRenderer(parameters) {\n    console.log('THREE.WebGLRenderer', REVISION);\n    parameters = parameters || {};\n    var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas'), _context = parameters.context !== undefined ? parameters.context : null, _alpha = parameters.alpha !== undefined ? parameters.alpha : false, _depth = parameters.depth !== undefined ? parameters.depth : true, _stencil = parameters.stencil !== undefined ? parameters.stencil : true, _antialias = parameters.antialias !== undefined ? parameters.antialias : false, _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true, _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false, _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default';\n    var currentRenderList = null;\n    var currentRenderState = null;\n    // public properties\n    this.domElement = _canvas;\n    this.context = null;\n    // clearing\n    this.autoClear = true;\n    this.autoClearColor = true;\n    this.autoClearDepth = true;\n    this.autoClearStencil = true;\n    // scene graph\n    this.sortObjects = true;\n    // user-defined clipping\n    this.clippingPlanes = [];\n    this.localClippingEnabled = false;\n    // physically based shading\n    this.gammaFactor = 2.0; // for backwards compatibility\n    this.gammaInput = false;\n    this.gammaOutput = false;\n    // physical lights\n    this.physicallyCorrectLights = false;\n    // tone mapping\n    this.toneMapping = LinearToneMapping;\n    this.toneMappingExposure = 1.0;\n    this.toneMappingWhitePoint = 1.0;\n    // morphs\n    this.maxMorphTargets = 8;\n    this.maxMorphNormals = 4;\n    // internal properties\n    var _this = this, _isContextLost = false, \n    // internal state cache\n    _currentRenderTarget = null, _currentFramebuffer = null, _currentMaterialId = -1, _currentGeometryProgram = '', _currentCamera = null, _currentArrayCamera = null, _currentViewport = new Vector4(), _currentScissor = new Vector4(), _currentScissorTest = null, \n    //\n    _usedTextureUnits = 0, \n    //\n    _width = _canvas.width, _height = _canvas.height, _pixelRatio = 1, _viewport = new Vector4(0, 0, _width, _height), _scissor = new Vector4(0, 0, _width, _height), _scissorTest = false, \n    // frustum\n    _frustum = new Frustum(), \n    // clipping\n    _clipping = new WebGLClipping(), _clippingEnabled = false, _localClippingEnabled = false, \n    // camera matrices cache\n    _projScreenMatrix = new Matrix4(), _vector3 = new Vector3(), \n    // info\n    _infoMemory = {\n        geometries: 0,\n        textures: 0\n    }, _infoRender = {\n        frame: 0,\n        calls: 0,\n        vertices: 0,\n        faces: 0,\n        points: 0\n    };\n    this.info = {\n        render: _infoRender,\n        memory: _infoMemory,\n        programs: null,\n        autoReset: true,\n        reset: resetInfo\n    };\n    function resetInfo() {\n        _infoRender.frame++;\n        _infoRender.calls = 0;\n        _infoRender.vertices = 0;\n        _infoRender.faces = 0;\n        _infoRender.points = 0;\n    }\n    function getTargetPixelRatio() {\n        return _currentRenderTarget === null ? _pixelRatio : 1;\n    }\n    // initialize\n    var _gl;\n    try {\n        var contextAttributes = {\n            alpha: _alpha,\n            depth: _depth,\n            stencil: _stencil,\n            antialias: _antialias,\n            premultipliedAlpha: _premultipliedAlpha,\n            preserveDrawingBuffer: _preserveDrawingBuffer,\n            powerPreference: _powerPreference\n        };\n        // event listeners must be registered before WebGL context is created, see #12753\n        _canvas.addEventListener('webglcontextlost', onContextLost, false);\n        _canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n        _gl = _context || _canvas.getContext('webgl', contextAttributes) || _canvas.getContext('experimental-webgl', contextAttributes);\n        if (_gl === null) {\n            if (_canvas.getContext('webgl') !== null) {\n                throw new Error('Error creating WebGL context with your selected attributes.');\n            }\n            else {\n                throw new Error('Error creating WebGL context.');\n            }\n        }\n        // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n        if (_gl.getShaderPrecisionFormat === undefined) {\n            _gl.getShaderPrecisionFormat = function () {\n                return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n            };\n        }\n    }\n    catch (error) {\n        console.error('THREE.WebGLRenderer: ' + error.message);\n    }\n    var extensions, capabilities, state;\n    var properties, textures, attributes, geometries, objects;\n    var programCache, renderLists, renderStates;\n    var background, morphtargets, bufferRenderer, indexedBufferRenderer;\n    var spriteRenderer;\n    var utils;\n    function initGLContext() {\n        extensions = new WebGLExtensions(_gl);\n        extensions.get('WEBGL_depth_texture');\n        extensions.get('OES_texture_float');\n        extensions.get('OES_texture_float_linear');\n        extensions.get('OES_texture_half_float');\n        extensions.get('OES_texture_half_float_linear');\n        extensions.get('OES_standard_derivatives');\n        extensions.get('OES_element_index_uint');\n        extensions.get('ANGLE_instanced_arrays');\n        utils = new WebGLUtils(_gl, extensions);\n        capabilities = new WebGLCapabilities(_gl, extensions, parameters);\n        state = new WebGLState(_gl, extensions, utils);\n        state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));\n        state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));\n        properties = new WebGLProperties();\n        textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, _infoMemory, _infoRender);\n        attributes = new WebGLAttributes(_gl);\n        geometries = new WebGLGeometries(_gl, attributes, _infoMemory);\n        objects = new WebGLObjects(geometries, _infoRender);\n        morphtargets = new WebGLMorphtargets(_gl);\n        programCache = new WebGLPrograms(_this, extensions, capabilities);\n        renderLists = new WebGLRenderLists();\n        renderStates = new WebGLRenderStates();\n        background = new WebGLBackground(_this, state, geometries, _premultipliedAlpha);\n        bufferRenderer = new WebGLBufferRenderer(_gl, extensions, _infoRender);\n        indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, _infoRender);\n        spriteRenderer = new WebGLSpriteRenderer(_this, _gl, state, textures, capabilities);\n        _this.info.programs = programCache.programs;\n        _this.context = _gl;\n        _this.capabilities = capabilities;\n        _this.extensions = extensions;\n        _this.properties = properties;\n        _this.renderLists = renderLists;\n        _this.state = state;\n    }\n    initGLContext();\n    // vr\n    var vr = new WebVRManager(_this);\n    this.vr = vr;\n    // shadow map\n    var shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);\n    this.shadowMap = shadowMap;\n    // API\n    this.getContext = function () {\n        return _gl;\n    };\n    this.getContextAttributes = function () {\n        return _gl.getContextAttributes();\n    };\n    this.forceContextLoss = function () {\n        var extension = extensions.get('WEBGL_lose_context');\n        if (extension)\n            extension.loseContext();\n    };\n    this.forceContextRestore = function () {\n        var extension = extensions.get('WEBGL_lose_context');\n        if (extension)\n            extension.restoreContext();\n    };\n    this.getPixelRatio = function () {\n        return _pixelRatio;\n    };\n    this.setPixelRatio = function (value) {\n        if (value === undefined)\n            return;\n        _pixelRatio = value;\n        this.setSize(_width, _height, false);\n    };\n    this.getSize = function () {\n        return {\n            width: _width,\n            height: _height\n        };\n    };\n    this.setSize = function (width, height, updateStyle) {\n        var device = vr.getDevice();\n        if (device && device.isPresenting) {\n            console.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n            return;\n        }\n        _width = width;\n        _height = height;\n        _canvas.width = width * _pixelRatio;\n        _canvas.height = height * _pixelRatio;\n        if (updateStyle !== false) {\n            _canvas.style.width = width + 'px';\n            _canvas.style.height = height + 'px';\n        }\n        this.setViewport(0, 0, width, height);\n    };\n    this.getDrawingBufferSize = function () {\n        return {\n            width: _width * _pixelRatio,\n            height: _height * _pixelRatio\n        };\n    };\n    this.setDrawingBufferSize = function (width, height, pixelRatio) {\n        _width = width;\n        _height = height;\n        _pixelRatio = pixelRatio;\n        _canvas.width = width * pixelRatio;\n        _canvas.height = height * pixelRatio;\n        this.setViewport(0, 0, width, height);\n    };\n    this.getCurrentViewport = function () {\n        return _currentViewport;\n    };\n    this.setViewport = function (x, y, width, height) {\n        _viewport.set(x, _height - y - height, width, height);\n        state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));\n    };\n    this.setScissor = function (x, y, width, height) {\n        _scissor.set(x, _height - y - height, width, height);\n        state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));\n    };\n    this.setScissorTest = function (boolean) {\n        state.setScissorTest(_scissorTest = boolean);\n    };\n    // Clearing\n    this.getClearColor = function () {\n        return background.getClearColor();\n    };\n    this.setClearColor = function () {\n        background.setClearColor.apply(background, arguments);\n    };\n    this.getClearAlpha = function () {\n        return background.getClearAlpha();\n    };\n    this.setClearAlpha = function () {\n        background.setClearAlpha.apply(background, arguments);\n    };\n    this.clear = function (color, depth, stencil) {\n        var bits = 0;\n        if (color === undefined || color)\n            bits |= _gl.COLOR_BUFFER_BIT;\n        if (depth === undefined || depth)\n            bits |= _gl.DEPTH_BUFFER_BIT;\n        if (stencil === undefined || stencil)\n            bits |= _gl.STENCIL_BUFFER_BIT;\n        _gl.clear(bits);\n    };\n    this.clearColor = function () {\n        this.clear(true, false, false);\n    };\n    this.clearDepth = function () {\n        this.clear(false, true, false);\n    };\n    this.clearStencil = function () {\n        this.clear(false, false, true);\n    };\n    this.clearTarget = function (renderTarget, color, depth, stencil) {\n        this.setRenderTarget(renderTarget);\n        this.clear(color, depth, stencil);\n    };\n    //\n    this.dispose = function () {\n        _canvas.removeEventListener('webglcontextlost', onContextLost, false);\n        _canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n        renderLists.dispose();\n        renderStates.dispose();\n        properties.dispose();\n        objects.dispose();\n        vr.dispose();\n        stopAnimation();\n    };\n    // Events\n    function onContextLost(event) {\n        event.preventDefault();\n        console.log('THREE.WebGLRenderer: Context Lost.');\n        _isContextLost = true;\n    }\n    function onContextRestore( /* event */) {\n        console.log('THREE.WebGLRenderer: Context Restored.');\n        _isContextLost = false;\n        initGLContext();\n    }\n    function onMaterialDispose(event) {\n        var material = event.target;\n        material.removeEventListener('dispose', onMaterialDispose);\n        deallocateMaterial(material);\n    }\n    // Buffer deallocation\n    function deallocateMaterial(material) {\n        releaseMaterialProgramReference(material);\n        properties.remove(material);\n    }\n    function releaseMaterialProgramReference(material) {\n        var programInfo = properties.get(material).program;\n        material.program = undefined;\n        if (programInfo !== undefined) {\n            programCache.releaseProgram(programInfo);\n        }\n    }\n    // Buffer rendering\n    function renderObjectImmediate(object, program, material) {\n        object.render(function (object) {\n            _this.renderBufferImmediate(object, program, material);\n        });\n    }\n    this.renderBufferImmediate = function (object, program, material) {\n        state.initAttributes();\n        var buffers = properties.get(object);\n        if (object.hasPositions && !buffers.position)\n            buffers.position = _gl.createBuffer();\n        if (object.hasNormals && !buffers.normal)\n            buffers.normal = _gl.createBuffer();\n        if (object.hasUvs && !buffers.uv)\n            buffers.uv = _gl.createBuffer();\n        if (object.hasColors && !buffers.color)\n            buffers.color = _gl.createBuffer();\n        var programAttributes = program.getAttributes();\n        if (object.hasPositions) {\n            _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n            _gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.position);\n            _gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);\n        }\n        if (object.hasNormals) {\n            _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n            if (!material.isMeshPhongMaterial &&\n                !material.isMeshStandardMaterial &&\n                !material.isMeshNormalMaterial &&\n                material.flatShading === true) {\n                for (var i = 0, l = object.count * 3; i < l; i += 9) {\n                    var array = object.normalArray;\n                    var nx = (array[i + 0] + array[i + 3] + array[i + 6]) / 3;\n                    var ny = (array[i + 1] + array[i + 4] + array[i + 7]) / 3;\n                    var nz = (array[i + 2] + array[i + 5] + array[i + 8]) / 3;\n                    array[i + 0] = nx;\n                    array[i + 1] = ny;\n                    array[i + 2] = nz;\n                    array[i + 3] = nx;\n                    array[i + 4] = ny;\n                    array[i + 5] = nz;\n                    array[i + 6] = nx;\n                    array[i + 7] = ny;\n                    array[i + 8] = nz;\n                }\n            }\n            _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.normal);\n            _gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);\n        }\n        if (object.hasUvs && material.map) {\n            _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n            _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.uv);\n            _gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);\n        }\n        if (object.hasColors && material.vertexColors !== NoColors) {\n            _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n            _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n            state.enableAttribute(programAttributes.color);\n            _gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);\n        }\n        state.disableUnusedAttributes();\n        _gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n        object.count = 0;\n    };\n    this.renderBufferDirect = function (camera, fog, geometry, material, object, group) {\n        var frontFaceCW = (object.isMesh && object.matrixWorld.determinant() < 0);\n        state.setMaterial(material, frontFaceCW);\n        var program = setProgram(camera, fog, material, object);\n        var geometryProgram = geometry.id + '_' + program.id + '_' + (material.wireframe === true);\n        var updateBuffers = false;\n        if (geometryProgram !== _currentGeometryProgram) {\n            _currentGeometryProgram = geometryProgram;\n            updateBuffers = true;\n        }\n        if (object.morphTargetInfluences) {\n            morphtargets.update(object, geometry, material, program);\n            updateBuffers = true;\n        }\n        //\n        var index = geometry.index;\n        var position = geometry.attributes.position;\n        var rangeFactor = 1;\n        if (material.wireframe === true) {\n            index = geometries.getWireframeAttribute(geometry);\n            rangeFactor = 2;\n        }\n        var attribute;\n        var renderer = bufferRenderer;\n        if (index !== null) {\n            attribute = attributes.get(index);\n            renderer = indexedBufferRenderer;\n            renderer.setIndex(attribute);\n        }\n        if (updateBuffers) {\n            setupVertexAttributes(material, program, geometry);\n            if (index !== null) {\n                _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, attribute.buffer);\n            }\n        }\n        //\n        var dataCount = Infinity;\n        if (index !== null) {\n            dataCount = index.count;\n        }\n        else if (position !== undefined) {\n            dataCount = position.count;\n        }\n        var rangeStart = geometry.drawRange.start * rangeFactor;\n        var rangeCount = geometry.drawRange.count * rangeFactor;\n        var groupStart = group !== null ? group.start * rangeFactor : 0;\n        var groupCount = group !== null ? group.count * rangeFactor : Infinity;\n        var drawStart = Math.max(rangeStart, groupStart);\n        var drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n        var drawCount = Math.max(0, drawEnd - drawStart + 1);\n        if (drawCount === 0)\n            return;\n        //\n        if (object.isMesh) {\n            if (material.wireframe === true) {\n                state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n                renderer.setMode(_gl.LINES);\n            }\n            else {\n                switch (object.drawMode) {\n                    case TrianglesDrawMode:\n                        renderer.setMode(_gl.TRIANGLES);\n                        break;\n                    case TriangleStripDrawMode:\n                        renderer.setMode(_gl.TRIANGLE_STRIP);\n                        break;\n                    case TriangleFanDrawMode:\n                        renderer.setMode(_gl.TRIANGLE_FAN);\n                        break;\n                }\n            }\n        }\n        else if (object.isLine) {\n            var lineWidth = material.linewidth;\n            if (lineWidth === undefined)\n                lineWidth = 1; // Not using Line*Material\n            state.setLineWidth(lineWidth * getTargetPixelRatio());\n            if (object.isLineSegments) {\n                renderer.setMode(_gl.LINES);\n            }\n            else if (object.isLineLoop) {\n                renderer.setMode(_gl.LINE_LOOP);\n            }\n            else {\n                renderer.setMode(_gl.LINE_STRIP);\n            }\n        }\n        else if (object.isPoints) {\n            renderer.setMode(_gl.POINTS);\n        }\n        if (geometry && geometry.isInstancedBufferGeometry) {\n            if (geometry.maxInstancedCount > 0) {\n                renderer.renderInstances(geometry, drawStart, drawCount);\n            }\n        }\n        else {\n            renderer.render(drawStart, drawCount);\n        }\n    };\n    function setupVertexAttributes(material, program, geometry, startIndex) {\n        if (geometry && geometry.isInstancedBufferGeometry) {\n            if (extensions.get('ANGLE_instanced_arrays') === null) {\n                console.error('THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n                return;\n            }\n        }\n        if (startIndex === undefined)\n            startIndex = 0;\n        state.initAttributes();\n        var geometryAttributes = geometry.attributes;\n        var programAttributes = program.getAttributes();\n        var materialDefaultAttributeValues = material.defaultAttributeValues;\n        for (var name in programAttributes) {\n            var programAttribute = programAttributes[name];\n            if (programAttribute >= 0) {\n                var geometryAttribute = geometryAttributes[name];\n                if (geometryAttribute !== undefined) {\n                    var normalized = geometryAttribute.normalized;\n                    var size = geometryAttribute.itemSize;\n                    var attribute = attributes.get(geometryAttribute);\n                    // TODO Attribute may not be available on context restore\n                    if (attribute === undefined)\n                        continue;\n                    var buffer = attribute.buffer;\n                    var type = attribute.type;\n                    var bytesPerElement = attribute.bytesPerElement;\n                    if (geometryAttribute.isInterleavedBufferAttribute) {\n                        var data = geometryAttribute.data;\n                        var stride = data.stride;\n                        var offset = geometryAttribute.offset;\n                        if (data && data.isInstancedInterleavedBuffer) {\n                            state.enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n                            if (geometry.maxInstancedCount === undefined) {\n                                geometry.maxInstancedCount = data.meshPerAttribute * data.count;\n                            }\n                        }\n                        else {\n                            state.enableAttribute(programAttribute);\n                        }\n                        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n                        _gl.vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, (startIndex * stride + offset) * bytesPerElement);\n                    }\n                    else {\n                        if (geometryAttribute.isInstancedBufferAttribute) {\n                            state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n                            if (geometry.maxInstancedCount === undefined) {\n                                geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n                            }\n                        }\n                        else {\n                            state.enableAttribute(programAttribute);\n                        }\n                        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n                        _gl.vertexAttribPointer(programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement);\n                    }\n                }\n                else if (materialDefaultAttributeValues !== undefined) {\n                    var value = materialDefaultAttributeValues[name];\n                    if (value !== undefined) {\n                        switch (value.length) {\n                            case 2:\n                                _gl.vertexAttrib2fv(programAttribute, value);\n                                break;\n                            case 3:\n                                _gl.vertexAttrib3fv(programAttribute, value);\n                                break;\n                            case 4:\n                                _gl.vertexAttrib4fv(programAttribute, value);\n                                break;\n                            default:\n                                _gl.vertexAttrib1fv(programAttribute, value);\n                        }\n                    }\n                }\n            }\n        }\n        state.disableUnusedAttributes();\n    }\n    // Compile\n    this.compile = function (scene, camera) {\n        currentRenderState = renderStates.get(scene, camera);\n        currentRenderState.init();\n        scene.traverse(function (object) {\n            if (object.isLight) {\n                currentRenderState.pushLight(object);\n                if (object.castShadow) {\n                    currentRenderState.pushShadow(object);\n                }\n            }\n        });\n        currentRenderState.setupLights(camera);\n        scene.traverse(function (object) {\n            if (object.material) {\n                if (Array.isArray(object.material)) {\n                    for (var i = 0; i < object.material.length; i++) {\n                        initMaterial(object.material[i], scene.fog, object);\n                    }\n                }\n                else {\n                    initMaterial(object.material, scene.fog, object);\n                }\n            }\n        });\n    };\n    // Animation Loop\n    var isAnimating = false;\n    var onAnimationFrame = null;\n    function startAnimation() {\n        if (isAnimating)\n            return;\n        requestAnimationLoopFrame();\n        isAnimating = true;\n    }\n    function stopAnimation() {\n        isAnimating = false;\n    }\n    function requestAnimationLoopFrame() {\n        var device = vr.getDevice();\n        if (device && device.isPresenting) {\n            device.requestAnimationFrame(animationLoop);\n        }\n        else {\n            window.requestAnimationFrame(animationLoop);\n        }\n    }\n    function animationLoop(time) {\n        if (isAnimating === false)\n            return;\n        onAnimationFrame(time);\n        requestAnimationLoopFrame();\n    }\n    this.animate = function (callback) {\n        onAnimationFrame = callback;\n        onAnimationFrame !== null ? startAnimation() : stopAnimation();\n    };\n    // Rendering\n    this.render = function (scene, camera, renderTarget, forceClear) {\n        if (!(camera && camera.isCamera)) {\n            console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n            return;\n        }\n        if (_isContextLost)\n            return;\n        // reset caching for this frame\n        _currentGeometryProgram = '';\n        _currentMaterialId = -1;\n        _currentCamera = null;\n        // update scene graph\n        if (scene.autoUpdate === true)\n            scene.updateMatrixWorld();\n        // update camera matrices and frustum\n        if (camera.parent === null)\n            camera.updateMatrixWorld();\n        if (vr.enabled) {\n            camera = vr.getCamera(camera);\n        }\n        //\n        currentRenderState = renderStates.get(scene, camera);\n        currentRenderState.init();\n        scene.onBeforeRender(_this, scene, camera, renderTarget);\n        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n        _frustum.setFromMatrix(_projScreenMatrix);\n        _localClippingEnabled = this.localClippingEnabled;\n        _clippingEnabled = _clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n        currentRenderList = renderLists.get(scene, camera);\n        currentRenderList.init();\n        projectObject(scene, camera, _this.sortObjects);\n        if (_this.sortObjects === true) {\n            currentRenderList.sort();\n        }\n        //\n        if (_clippingEnabled)\n            _clipping.beginShadows();\n        var shadowsArray = currentRenderState.state.shadowsArray;\n        shadowMap.render(shadowsArray, scene, camera);\n        currentRenderState.setupLights(camera);\n        if (_clippingEnabled)\n            _clipping.endShadows();\n        //\n        if (this.info.autoReset)\n            this.info.reset();\n        if (renderTarget === undefined) {\n            renderTarget = null;\n        }\n        this.setRenderTarget(renderTarget);\n        //\n        background.render(currentRenderList, scene, camera, forceClear);\n        // render scene\n        var opaqueObjects = currentRenderList.opaque;\n        var transparentObjects = currentRenderList.transparent;\n        if (scene.overrideMaterial) {\n            var overrideMaterial = scene.overrideMaterial;\n            if (opaqueObjects.length)\n                renderObjects(opaqueObjects, scene, camera, overrideMaterial);\n            if (transparentObjects.length)\n                renderObjects(transparentObjects, scene, camera, overrideMaterial);\n        }\n        else {\n            // opaque pass (front-to-back order)\n            if (opaqueObjects.length)\n                renderObjects(opaqueObjects, scene, camera);\n            // transparent pass (back-to-front order)\n            if (transparentObjects.length)\n                renderObjects(transparentObjects, scene, camera);\n        }\n        // custom renderers\n        var spritesArray = currentRenderState.state.spritesArray;\n        spriteRenderer.render(spritesArray, scene, camera);\n        // Generate mipmap if we're using any kind of mipmap filtering\n        if (renderTarget) {\n            textures.updateRenderTargetMipmap(renderTarget);\n        }\n        // Ensure depth buffer writing is enabled so it can be cleared on next render\n        state.buffers.depth.setTest(true);\n        state.buffers.depth.setMask(true);\n        state.buffers.color.setMask(true);\n        state.setPolygonOffset(false);\n        scene.onAfterRender(_this, scene, camera);\n        if (vr.enabled) {\n            vr.submitFrame();\n        }\n        // _gl.finish();\n        currentRenderList = null;\n        currentRenderState = null;\n    };\n    /*\n    // TODO Duplicated code (Frustum)\n\n    var _sphere = new Sphere();\n\n    function isObjectViewable( object ) {\n\n        var geometry = object.geometry;\n\n        if ( geometry.boundingSphere === null )\n            geometry.computeBoundingSphere();\n\n        _sphere.copy( geometry.boundingSphere ).\n        applyMatrix4( object.matrixWorld );\n\n        return isSphereViewable( _sphere );\n\n    }\n\n    function isSpriteViewable( sprite ) {\n\n        _sphere.center.set( 0, 0, 0 );\n        _sphere.radius = 0.7071067811865476;\n        _sphere.applyMatrix4( sprite.matrixWorld );\n\n        return isSphereViewable( _sphere );\n\n    }\n\n    function isSphereViewable( sphere ) {\n\n        if ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n        var numPlanes = _clipping.numPlanes;\n\n        if ( numPlanes === 0 ) return true;\n\n        var planes = _this.clippingPlanes,\n\n            center = sphere.center,\n            negRad = - sphere.radius,\n            i = 0;\n\n        do {\n\n            // out when deeper than radius in the negative halfspace\n            if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n        } while ( ++ i !== numPlanes );\n\n        return true;\n\n    }\n    */\n    function projectObject(object, camera, sortObjects) {\n        if (object.visible === false)\n            return;\n        var visible = object.layers.test(camera.layers);\n        if (visible) {\n            if (object.isLight) {\n                currentRenderState.pushLight(object);\n                if (object.castShadow) {\n                    currentRenderState.pushShadow(object);\n                }\n            }\n            else if (object.isSprite) {\n                if (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n                    currentRenderState.pushSprite(object);\n                }\n            }\n            else if (object.isImmediateRenderObject) {\n                if (sortObjects) {\n                    _vector3.setFromMatrixPosition(object.matrixWorld)\n                        .applyMatrix4(_projScreenMatrix);\n                }\n                currentRenderList.push(object, null, object.material, _vector3.z, null);\n            }\n            else if (object.isMesh || object.isLine || object.isPoints) {\n                if (object.isSkinnedMesh) {\n                    object.skeleton.update();\n                }\n                if (!object.frustumCulled || _frustum.intersectsObject(object)) {\n                    if (sortObjects) {\n                        _vector3.setFromMatrixPosition(object.matrixWorld)\n                            .applyMatrix4(_projScreenMatrix);\n                    }\n                    var geometry = objects.update(object);\n                    var material = object.material;\n                    if (Array.isArray(material)) {\n                        var groups = geometry.groups;\n                        for (var i = 0, l = groups.length; i < l; i++) {\n                            var group = groups[i];\n                            var groupMaterial = material[group.materialIndex];\n                            if (groupMaterial && groupMaterial.visible) {\n                                currentRenderList.push(object, geometry, groupMaterial, _vector3.z, group);\n                            }\n                        }\n                    }\n                    else if (material.visible) {\n                        currentRenderList.push(object, geometry, material, _vector3.z, null);\n                    }\n                }\n            }\n        }\n        var children = object.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n            projectObject(children[i], camera, sortObjects);\n        }\n    }\n    function renderObjects(renderList, scene, camera, overrideMaterial) {\n        for (var i = 0, l = renderList.length; i < l; i++) {\n            var renderItem = renderList[i];\n            var object = renderItem.object;\n            var geometry = renderItem.geometry;\n            var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n            var group = renderItem.group;\n            if (camera.isArrayCamera) {\n                _currentArrayCamera = camera;\n                var cameras = camera.cameras;\n                for (var j = 0, jl = cameras.length; j < jl; j++) {\n                    var camera2 = cameras[j];\n                    if (object.layers.test(camera2.layers)) {\n                        var bounds = camera2.bounds;\n                        var x = bounds.x * _width;\n                        var y = bounds.y * _height;\n                        var width = bounds.z * _width;\n                        var height = bounds.w * _height;\n                        state.viewport(_currentViewport.set(x, y, width, height).multiplyScalar(_pixelRatio));\n                        renderObject(object, scene, camera2, geometry, material, group);\n                    }\n                }\n            }\n            else {\n                _currentArrayCamera = null;\n                renderObject(object, scene, camera, geometry, material, group);\n            }\n        }\n    }\n    function renderObject(object, scene, camera, geometry, material, group) {\n        object.onBeforeRender(_this, scene, camera, geometry, material, group);\n        currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n        if (object.isImmediateRenderObject) {\n            var frontFaceCW = (object.isMesh && object.matrixWorld.determinant() < 0);\n            state.setMaterial(material, frontFaceCW);\n            var program = setProgram(camera, scene.fog, material, object);\n            _currentGeometryProgram = '';\n            renderObjectImmediate(object, program, material);\n        }\n        else {\n            _this.renderBufferDirect(camera, scene.fog, geometry, material, object, group);\n        }\n        object.onAfterRender(_this, scene, camera, geometry, material, group);\n        currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);\n    }\n    function initMaterial(material, fog, object) {\n        var materialProperties = properties.get(material);\n        var lights = currentRenderState.state.lights;\n        var shadowsArray = currentRenderState.state.shadowsArray;\n        var parameters = programCache.getParameters(material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object);\n        var code = programCache.getProgramCode(material, parameters);\n        var program = materialProperties.program;\n        var programChange = true;\n        if (program === undefined) {\n            // new material\n            material.addEventListener('dispose', onMaterialDispose);\n        }\n        else if (program.code !== code) {\n            // changed glsl or parameters\n            releaseMaterialProgramReference(material);\n        }\n        else if (materialProperties.lightsHash !== lights.state.hash) {\n            properties.update(material, 'lightsHash', lights.state.hash);\n            programChange = false;\n        }\n        else if (parameters.shaderID !== undefined) {\n            // same glsl and uniform list\n            return;\n        }\n        else {\n            // only rebuild uniform list\n            programChange = false;\n        }\n        if (programChange) {\n            if (parameters.shaderID) {\n                var shader = ShaderLib[parameters.shaderID];\n                materialProperties.shader = {\n                    name: material.type,\n                    uniforms: UniformsUtils.clone(shader.uniforms),\n                    vertexShader: shader.vertexShader,\n                    fragmentShader: shader.fragmentShader\n                };\n            }\n            else {\n                materialProperties.shader = {\n                    name: material.type,\n                    uniforms: material.uniforms,\n                    vertexShader: material.vertexShader,\n                    fragmentShader: material.fragmentShader\n                };\n            }\n            material.onBeforeCompile(materialProperties.shader);\n            program = programCache.acquireProgram(material, materialProperties.shader, parameters, code);\n            materialProperties.program = program;\n            material.program = program;\n        }\n        var programAttributes = program.getAttributes();\n        if (material.morphTargets) {\n            material.numSupportedMorphTargets = 0;\n            for (var i = 0; i < _this.maxMorphTargets; i++) {\n                if (programAttributes['morphTarget' + i] >= 0) {\n                    material.numSupportedMorphTargets++;\n                }\n            }\n        }\n        if (material.morphNormals) {\n            material.numSupportedMorphNormals = 0;\n            for (var i = 0; i < _this.maxMorphNormals; i++) {\n                if (programAttributes['morphNormal' + i] >= 0) {\n                    material.numSupportedMorphNormals++;\n                }\n            }\n        }\n        var uniforms = materialProperties.shader.uniforms;\n        if (!material.isShaderMaterial &&\n            !material.isRawShaderMaterial ||\n            material.clipping === true) {\n            materialProperties.numClippingPlanes = _clipping.numPlanes;\n            materialProperties.numIntersection = _clipping.numIntersection;\n            uniforms.clippingPlanes = _clipping.uniform;\n        }\n        materialProperties.fog = fog;\n        // store the light setup it was created for\n        materialProperties.lightsHash = lights.state.hash;\n        if (material.lights) {\n            // wire up the material to this renderer's lighting state\n            uniforms.ambientLightColor.value = lights.state.ambient;\n            uniforms.directionalLights.value = lights.state.directional;\n            uniforms.spotLights.value = lights.state.spot;\n            uniforms.rectAreaLights.value = lights.state.rectArea;\n            uniforms.pointLights.value = lights.state.point;\n            uniforms.hemisphereLights.value = lights.state.hemi;\n            uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n            uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n            uniforms.spotShadowMap.value = lights.state.spotShadowMap;\n            uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n            uniforms.pointShadowMap.value = lights.state.pointShadowMap;\n            uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n            // TODO (abelnation): add area lights shadow info to uniforms\n        }\n        var progUniforms = materialProperties.program.getUniforms(), uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n        materialProperties.uniformsList = uniformsList;\n    }\n    function setProgram(camera, fog, material, object) {\n        _usedTextureUnits = 0;\n        var materialProperties = properties.get(material);\n        var lights = currentRenderState.state.lights;\n        if (_clippingEnabled) {\n            if (_localClippingEnabled || camera !== _currentCamera) {\n                var useCache = camera === _currentCamera &&\n                    material.id === _currentMaterialId;\n                // we might want to call this function with some ClippingGroup\n                // object instead of the material, once it becomes feasible\n                // (#8465, #8379)\n                _clipping.setState(material.clippingPlanes, material.clipIntersection, material.clipShadows, camera, materialProperties, useCache);\n            }\n        }\n        if (material.needsUpdate === false) {\n            if (materialProperties.program === undefined) {\n                material.needsUpdate = true;\n            }\n            else if (material.fog && materialProperties.fog !== fog) {\n                material.needsUpdate = true;\n            }\n            else if (material.lights && materialProperties.lightsHash !== lights.state.hash) {\n                material.needsUpdate = true;\n            }\n            else if (materialProperties.numClippingPlanes !== undefined &&\n                (materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n                    materialProperties.numIntersection !== _clipping.numIntersection)) {\n                material.needsUpdate = true;\n            }\n        }\n        if (material.needsUpdate) {\n            initMaterial(material, fog, object);\n            material.needsUpdate = false;\n        }\n        var refreshProgram = false;\n        var refreshMaterial = false;\n        var refreshLights = false;\n        var program = materialProperties.program, p_uniforms = program.getUniforms(), m_uniforms = materialProperties.shader.uniforms;\n        if (state.useProgram(program.program)) {\n            refreshProgram = true;\n            refreshMaterial = true;\n            refreshLights = true;\n        }\n        if (material.id !== _currentMaterialId) {\n            _currentMaterialId = material.id;\n            refreshMaterial = true;\n        }\n        if (refreshProgram || camera !== _currentCamera) {\n            p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n            if (capabilities.logarithmicDepthBuffer) {\n                p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n            }\n            // Avoid unneeded uniform updates per ArrayCamera's sub-camera\n            if (_currentCamera !== (_currentArrayCamera || camera)) {\n                _currentCamera = (_currentArrayCamera || camera);\n                // lighting uniforms depend on the camera so enforce an update\n                // now, in case this material supports lights - or later, when\n                // the next material that does gets activated:\n                refreshMaterial = true; // set to true on material change\n                refreshLights = true; // remains set until update done\n            }\n            // load material specific uniforms\n            // (shader material also gets them for the sake of genericity)\n            if (material.isShaderMaterial ||\n                material.isMeshPhongMaterial ||\n                material.isMeshStandardMaterial ||\n                material.envMap) {\n                var uCamPos = p_uniforms.map.cameraPosition;\n                if (uCamPos !== undefined) {\n                    uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n                }\n            }\n            if (material.isMeshPhongMaterial ||\n                material.isMeshLambertMaterial ||\n                material.isMeshBasicMaterial ||\n                material.isMeshStandardMaterial ||\n                material.isShaderMaterial ||\n                material.skinning) {\n                p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n            }\n        }\n        // skinning uniforms must be set even if material didn't change\n        // auto-setting of texture unit for bone texture must go before other textures\n        // not sure why, but otherwise weird things happen\n        if (material.skinning) {\n            p_uniforms.setOptional(_gl, object, 'bindMatrix');\n            p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n            var skeleton = object.skeleton;\n            if (skeleton) {\n                var bones = skeleton.bones;\n                if (capabilities.floatVertexTextures) {\n                    if (skeleton.boneTexture === undefined) {\n                        // layout (1 matrix = 4 pixels)\n                        //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n                        //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n                        //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n                        //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n                        //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n                        var size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n                        size = _Math.ceilPowerOfTwo(size);\n                        size = Math.max(size, 4);\n                        var boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n                        boneMatrices.set(skeleton.boneMatrices); // copy current values\n                        var boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n                        boneTexture.needsUpdate = true;\n                        skeleton.boneMatrices = boneMatrices;\n                        skeleton.boneTexture = boneTexture;\n                        skeleton.boneTextureSize = size;\n                    }\n                    p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture);\n                    p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n                }\n                else {\n                    p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n                }\n            }\n        }\n        if (refreshMaterial) {\n            p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n            p_uniforms.setValue(_gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint);\n            if (material.lights) {\n                // the current material requires lighting info\n                // note: all lighting uniforms are always set correctly\n                // they simply reference the renderer's state for their\n                // values\n                //\n                // use the current material's .needsUpdate flags to set\n                // the GL state when required\n                markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n            }\n            // refresh uniforms common to several materials\n            if (fog && material.fog) {\n                refreshUniformsFog(m_uniforms, fog);\n            }\n            if (material.isMeshBasicMaterial) {\n                refreshUniformsCommon(m_uniforms, material);\n            }\n            else if (material.isMeshLambertMaterial) {\n                refreshUniformsCommon(m_uniforms, material);\n                refreshUniformsLambert(m_uniforms, material);\n            }\n            else if (material.isMeshPhongMaterial) {\n                refreshUniformsCommon(m_uniforms, material);\n                if (material.isMeshToonMaterial) {\n                    refreshUniformsToon(m_uniforms, material);\n                }\n                else {\n                    refreshUniformsPhong(m_uniforms, material);\n                }\n            }\n            else if (material.isMeshStandardMaterial) {\n                refreshUniformsCommon(m_uniforms, material);\n                if (material.isMeshPhysicalMaterial) {\n                    refreshUniformsPhysical(m_uniforms, material);\n                }\n                else {\n                    refreshUniformsStandard(m_uniforms, material);\n                }\n            }\n            else if (material.isMeshDepthMaterial) {\n                refreshUniformsCommon(m_uniforms, material);\n                refreshUniformsDepth(m_uniforms, material);\n            }\n            else if (material.isMeshDistanceMaterial) {\n                refreshUniformsCommon(m_uniforms, material);\n                refreshUniformsDistance(m_uniforms, material);\n            }\n            else if (material.isMeshNormalMaterial) {\n                refreshUniformsCommon(m_uniforms, material);\n                refreshUniformsNormal(m_uniforms, material);\n            }\n            else if (material.isLineBasicMaterial) {\n                refreshUniformsLine(m_uniforms, material);\n                if (material.isLineDashedMaterial) {\n                    refreshUniformsDash(m_uniforms, material);\n                }\n            }\n            else if (material.isPointsMaterial) {\n                refreshUniformsPoints(m_uniforms, material);\n            }\n            else if (material.isShadowMaterial) {\n                m_uniforms.color.value = material.color;\n                m_uniforms.opacity.value = material.opacity;\n            }\n            // RectAreaLight Texture\n            // TODO (mrdoob): Find a nicer implementation\n            if (m_uniforms.ltc_1 !== undefined)\n                m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n            if (m_uniforms.ltc_2 !== undefined)\n                m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n            WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, _this);\n        }\n        if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n            WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, _this);\n            material.uniformsNeedUpdate = false;\n        }\n        // common matrices\n        p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n        p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n        p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n        return program;\n    }\n    // Uniforms (refresh uniforms objects)\n    function refreshUniformsCommon(uniforms, material) {\n        uniforms.opacity.value = material.opacity;\n        if (material.color) {\n            uniforms.diffuse.value = material.color;\n        }\n        if (material.emissive) {\n            uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n        }\n        if (material.map) {\n            uniforms.map.value = material.map;\n        }\n        if (material.alphaMap) {\n            uniforms.alphaMap.value = material.alphaMap;\n        }\n        if (material.specularMap) {\n            uniforms.specularMap.value = material.specularMap;\n        }\n        if (material.envMap) {\n            uniforms.envMap.value = material.envMap;\n            // don't flip CubeTexture envMaps, flip everything else:\n            //  WebGLRenderTargetCube will be flipped for backwards compatibility\n            //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n            // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n            uniforms.flipEnvMap.value = (!(material.envMap && material.envMap.isCubeTexture)) ? 1 : -1;\n            uniforms.reflectivity.value = material.reflectivity;\n            uniforms.refractionRatio.value = material.refractionRatio;\n        }\n        if (material.lightMap) {\n            uniforms.lightMap.value = material.lightMap;\n            uniforms.lightMapIntensity.value = material.lightMapIntensity;\n        }\n        if (material.aoMap) {\n            uniforms.aoMap.value = material.aoMap;\n            uniforms.aoMapIntensity.value = material.aoMapIntensity;\n        }\n        // uv repeat and offset setting priorities\n        // 1. color map\n        // 2. specular map\n        // 3. normal map\n        // 4. bump map\n        // 5. alpha map\n        // 6. emissive map\n        var uvScaleMap;\n        if (material.map) {\n            uvScaleMap = material.map;\n        }\n        else if (material.specularMap) {\n            uvScaleMap = material.specularMap;\n        }\n        else if (material.displacementMap) {\n            uvScaleMap = material.displacementMap;\n        }\n        else if (material.normalMap) {\n            uvScaleMap = material.normalMap;\n        }\n        else if (material.bumpMap) {\n            uvScaleMap = material.bumpMap;\n        }\n        else if (material.roughnessMap) {\n            uvScaleMap = material.roughnessMap;\n        }\n        else if (material.metalnessMap) {\n            uvScaleMap = material.metalnessMap;\n        }\n        else if (material.alphaMap) {\n            uvScaleMap = material.alphaMap;\n        }\n        else if (material.emissiveMap) {\n            uvScaleMap = material.emissiveMap;\n        }\n        if (uvScaleMap !== undefined) {\n            // backwards compatibility\n            if (uvScaleMap.isWebGLRenderTarget) {\n                uvScaleMap = uvScaleMap.texture;\n            }\n            if (uvScaleMap.matrixAutoUpdate === true) {\n                var offset = uvScaleMap.offset;\n                var repeat = uvScaleMap.repeat;\n                var rotation = uvScaleMap.rotation;\n                var center = uvScaleMap.center;\n                uvScaleMap.matrix.setUvTransform(offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y);\n            }\n            uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n        }\n    }\n    function refreshUniformsLine(uniforms, material) {\n        uniforms.diffuse.value = material.color;\n        uniforms.opacity.value = material.opacity;\n    }\n    function refreshUniformsDash(uniforms, material) {\n        uniforms.dashSize.value = material.dashSize;\n        uniforms.totalSize.value = material.dashSize + material.gapSize;\n        uniforms.scale.value = material.scale;\n    }\n    function refreshUniformsPoints(uniforms, material) {\n        uniforms.diffuse.value = material.color;\n        uniforms.opacity.value = material.opacity;\n        uniforms.size.value = material.size * _pixelRatio;\n        uniforms.scale.value = _height * 0.5;\n        uniforms.map.value = material.map;\n        if (material.map !== null) {\n            if (material.map.matrixAutoUpdate === true) {\n                var offset = material.map.offset;\n                var repeat = material.map.repeat;\n                var rotation = material.map.rotation;\n                var center = material.map.center;\n                material.map.matrix.setUvTransform(offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y);\n            }\n            uniforms.uvTransform.value.copy(material.map.matrix);\n        }\n    }\n    function refreshUniformsFog(uniforms, fog) {\n        uniforms.fogColor.value = fog.color;\n        if (fog.isFog) {\n            uniforms.fogNear.value = fog.near;\n            uniforms.fogFar.value = fog.far;\n        }\n        else if (fog.isFogExp2) {\n            uniforms.fogDensity.value = fog.density;\n        }\n    }\n    function refreshUniformsLambert(uniforms, material) {\n        if (material.emissiveMap) {\n            uniforms.emissiveMap.value = material.emissiveMap;\n        }\n    }\n    function refreshUniformsPhong(uniforms, material) {\n        uniforms.specular.value = material.specular;\n        uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n        if (material.emissiveMap) {\n            uniforms.emissiveMap.value = material.emissiveMap;\n        }\n        if (material.bumpMap) {\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n        }\n        if (material.normalMap) {\n            uniforms.normalMap.value = material.normalMap;\n            uniforms.normalScale.value.copy(material.normalScale);\n        }\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n    }\n    function refreshUniformsToon(uniforms, material) {\n        refreshUniformsPhong(uniforms, material);\n        if (material.gradientMap) {\n            uniforms.gradientMap.value = material.gradientMap;\n        }\n    }\n    function refreshUniformsStandard(uniforms, material) {\n        uniforms.roughness.value = material.roughness;\n        uniforms.metalness.value = material.metalness;\n        if (material.roughnessMap) {\n            uniforms.roughnessMap.value = material.roughnessMap;\n        }\n        if (material.metalnessMap) {\n            uniforms.metalnessMap.value = material.metalnessMap;\n        }\n        if (material.emissiveMap) {\n            uniforms.emissiveMap.value = material.emissiveMap;\n        }\n        if (material.bumpMap) {\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n        }\n        if (material.normalMap) {\n            uniforms.normalMap.value = material.normalMap;\n            uniforms.normalScale.value.copy(material.normalScale);\n        }\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n        if (material.envMap) {\n            //uniforms.envMap.value = material.envMap; // part of uniforms common\n            uniforms.envMapIntensity.value = material.envMapIntensity;\n        }\n    }\n    function refreshUniformsPhysical(uniforms, material) {\n        uniforms.clearCoat.value = material.clearCoat;\n        uniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n        refreshUniformsStandard(uniforms, material);\n    }\n    function refreshUniformsDepth(uniforms, material) {\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n    }\n    function refreshUniformsDistance(uniforms, material) {\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n        uniforms.referencePosition.value.copy(material.referencePosition);\n        uniforms.nearDistance.value = material.nearDistance;\n        uniforms.farDistance.value = material.farDistance;\n    }\n    function refreshUniformsNormal(uniforms, material) {\n        if (material.bumpMap) {\n            uniforms.bumpMap.value = material.bumpMap;\n            uniforms.bumpScale.value = material.bumpScale;\n        }\n        if (material.normalMap) {\n            uniforms.normalMap.value = material.normalMap;\n            uniforms.normalScale.value.copy(material.normalScale);\n        }\n        if (material.displacementMap) {\n            uniforms.displacementMap.value = material.displacementMap;\n            uniforms.displacementScale.value = material.displacementScale;\n            uniforms.displacementBias.value = material.displacementBias;\n        }\n    }\n    // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n    function markUniformsLightsNeedsUpdate(uniforms, value) {\n        uniforms.ambientLightColor.needsUpdate = value;\n        uniforms.directionalLights.needsUpdate = value;\n        uniforms.pointLights.needsUpdate = value;\n        uniforms.spotLights.needsUpdate = value;\n        uniforms.rectAreaLights.needsUpdate = value;\n        uniforms.hemisphereLights.needsUpdate = value;\n    }\n    // Textures\n    function allocTextureUnit() {\n        var textureUnit = _usedTextureUnits;\n        if (textureUnit >= capabilities.maxTextures) {\n            console.warn('THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures);\n        }\n        _usedTextureUnits += 1;\n        return textureUnit;\n    }\n    this.allocTextureUnit = allocTextureUnit;\n    // this.setTexture2D = setTexture2D;\n    this.setTexture2D = (function () {\n        var warned = false;\n        // backwards compatibility: peel texture.texture\n        return function setTexture2D(texture, slot) {\n            if (texture && texture.isWebGLRenderTarget) {\n                if (!warned) {\n                    console.warn(\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\");\n                    warned = true;\n                }\n                texture = texture.texture;\n            }\n            textures.setTexture2D(texture, slot);\n        };\n    }());\n    this.setTexture = (function () {\n        var warned = false;\n        return function setTexture(texture, slot) {\n            if (!warned) {\n                console.warn(\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\");\n                warned = true;\n            }\n            textures.setTexture2D(texture, slot);\n        };\n    }());\n    this.setTextureCube = (function () {\n        var warned = false;\n        return function setTextureCube(texture, slot) {\n            // backwards compatibility: peel texture.texture\n            if (texture && texture.isWebGLRenderTargetCube) {\n                if (!warned) {\n                    console.warn(\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\");\n                    warned = true;\n                }\n                texture = texture.texture;\n            }\n            // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n            // TODO: unify these code paths\n            if ((texture && texture.isCubeTexture) ||\n                (Array.isArray(texture.image) && texture.image.length === 6)) {\n                // CompressedTexture can have Array in image :/\n                // this function alone should take care of cube textures\n                textures.setTextureCube(texture, slot);\n            }\n            else {\n                // assumed: texture property of THREE.WebGLRenderTargetCube\n                textures.setTextureCubeDynamic(texture, slot);\n            }\n        };\n    }());\n    this.getRenderTarget = function () {\n        return _currentRenderTarget;\n    };\n    this.setRenderTarget = function (renderTarget) {\n        _currentRenderTarget = renderTarget;\n        if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n            textures.setupRenderTarget(renderTarget);\n        }\n        var framebuffer = null;\n        var isCube = false;\n        if (renderTarget) {\n            var __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n            if (renderTarget.isWebGLRenderTargetCube) {\n                framebuffer = __webglFramebuffer[renderTarget.activeCubeFace];\n                isCube = true;\n            }\n            else {\n                framebuffer = __webglFramebuffer;\n            }\n            _currentViewport.copy(renderTarget.viewport);\n            _currentScissor.copy(renderTarget.scissor);\n            _currentScissorTest = renderTarget.scissorTest;\n        }\n        else {\n            _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio);\n            _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio);\n            _currentScissorTest = _scissorTest;\n        }\n        if (_currentFramebuffer !== framebuffer) {\n            _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n            _currentFramebuffer = framebuffer;\n        }\n        state.viewport(_currentViewport);\n        state.scissor(_currentScissor);\n        state.setScissorTest(_currentScissorTest);\n        if (isCube) {\n            var textureProperties = properties.get(renderTarget.texture);\n            _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel);\n        }\n    };\n    this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer) {\n        if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n            return;\n        }\n        var framebuffer = properties.get(renderTarget).__webglFramebuffer;\n        if (framebuffer) {\n            var restore = false;\n            if (framebuffer !== _currentFramebuffer) {\n                _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n                restore = true;\n            }\n            try {\n                var texture = renderTarget.texture;\n                var textureFormat = texture.format;\n                var textureType = texture.type;\n                if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n                    console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n                    return;\n                }\n                if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // IE11, Edge and Chrome Mac < 52 (#9513)\n                    !(textureType === FloatType && (extensions.get('OES_texture_float') || extensions.get('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n                    !(textureType === HalfFloatType && extensions.get('EXT_color_buffer_half_float'))) {\n                    console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n                    return;\n                }\n                if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n                    // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n                    if ((x >= 0 && x <= (renderTarget.width - width)) && (y >= 0 && y <= (renderTarget.height - height))) {\n                        _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n                    }\n                }\n                else {\n                    console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n                }\n            }\n            finally {\n                if (restore) {\n                    _gl.bindFramebuffer(_gl.FRAMEBUFFER, _currentFramebuffer);\n                }\n            }\n        }\n    };\n    this.copyFramebufferToTexture = function (position, texture, level) {\n        var width = texture.image.width;\n        var height = texture.image.height;\n        var internalFormat = utils.convert(texture.format);\n        this.setTexture2D(texture, 0);\n        _gl.copyTexImage2D(_gl.TEXTURE_2D, level || 0, internalFormat, position.x, position.y, width, height, 0);\n    };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\nfunction FogExp2(color, density) {\n    this.name = '';\n    this.color = new Color(color);\n    this.density = (density !== undefined) ? density : 0.00025;\n}\nFogExp2.prototype.isFogExp2 = true;\nFogExp2.prototype.clone = function () {\n    return new FogExp2(this.color.getHex(), this.density);\n};\nFogExp2.prototype.toJSON = function ( /* meta */) {\n    return {\n        type: 'FogExp2',\n        color: this.color.getHex(),\n        density: this.density\n    };\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\nfunction Fog(color, near, far) {\n    this.name = '';\n    this.color = new Color(color);\n    this.near = (near !== undefined) ? near : 1;\n    this.far = (far !== undefined) ? far : 1000;\n}\nFog.prototype.isFog = true;\nFog.prototype.clone = function () {\n    return new Fog(this.color.getHex(), this.near, this.far);\n};\nFog.prototype.toJSON = function ( /* meta */) {\n    return {\n        type: 'Fog',\n        color: this.color.getHex(),\n        near: this.near,\n        far: this.far\n    };\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Scene() {\n    Object3D.call(this);\n    this.type = 'Scene';\n    this.background = null;\n    this.fog = null;\n    this.overrideMaterial = null;\n    this.autoUpdate = true; // checked by the renderer\n}\nScene.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Scene,\n    copy: function (source, recursive) {\n        Object3D.prototype.copy.call(this, source, recursive);\n        if (source.background !== null)\n            this.background = source.background.clone();\n        if (source.fog !== null)\n            this.fog = source.fog.clone();\n        if (source.overrideMaterial !== null)\n            this.overrideMaterial = source.overrideMaterial.clone();\n        this.autoUpdate = source.autoUpdate;\n        this.matrixAutoUpdate = source.matrixAutoUpdate;\n        return this;\n    },\n    toJSON: function (meta) {\n        var data = Object3D.prototype.toJSON.call(this, meta);\n        if (this.background !== null)\n            data.object.background = this.background.toJSON(meta);\n        if (this.fog !== null)\n            data.object.fog = this.fog.toJSON();\n        return data;\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *\tuvOffset: new THREE.Vector2(),\n *\tuvScale: new THREE.Vector2()\n * }\n */\nfunction SpriteMaterial(parameters) {\n    Material.call(this);\n    this.type = 'SpriteMaterial';\n    this.color = new Color(0xffffff);\n    this.map = null;\n    this.rotation = 0;\n    this.fog = false;\n    this.lights = false;\n    this.setValues(parameters);\n}\nSpriteMaterial.prototype = Object.create(Material.prototype);\nSpriteMaterial.prototype.constructor = SpriteMaterial;\nSpriteMaterial.prototype.isSpriteMaterial = true;\nSpriteMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.rotation = source.rotation;\n    return this;\n};\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n */\nfunction Sprite(material) {\n    Object3D.call(this);\n    this.type = 'Sprite';\n    this.material = (material !== undefined) ? material : new SpriteMaterial();\n    this.center = new Vector2(0.5, 0.5);\n}\nSprite.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Sprite,\n    isSprite: true,\n    raycast: (function () {\n        var intersectPoint = new Vector3();\n        var worldPosition = new Vector3();\n        var worldScale = new Vector3();\n        return function raycast(raycaster, intersects) {\n            worldPosition.setFromMatrixPosition(this.matrixWorld);\n            raycaster.ray.closestPointToPoint(worldPosition, intersectPoint);\n            worldScale.setFromMatrixScale(this.matrixWorld);\n            var guessSizeSq = worldScale.x * worldScale.y / 4;\n            if (worldPosition.distanceToSquared(intersectPoint) > guessSizeSq)\n                return;\n            var distance = raycaster.ray.origin.distanceTo(intersectPoint);\n            if (distance < raycaster.near || distance > raycaster.far)\n                return;\n            intersects.push({\n                distance: distance,\n                point: intersectPoint.clone(),\n                face: null,\n                object: this\n            });\n        };\n    }()),\n    clone: function () {\n        return new this.constructor(this.material).copy(this);\n    },\n    copy: function (source) {\n        Object3D.prototype.copy.call(this, source);\n        if (source.center !== undefined)\n            this.center.copy(source.center);\n        return this;\n    }\n});\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\nfunction LOD() {\n    Object3D.call(this);\n    this.type = 'LOD';\n    Object.defineProperties(this, {\n        levels: {\n            enumerable: true,\n            value: []\n        }\n    });\n}\nLOD.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: LOD,\n    copy: function (source) {\n        Object3D.prototype.copy.call(this, source, false);\n        var levels = source.levels;\n        for (var i = 0, l = levels.length; i < l; i++) {\n            var level = levels[i];\n            this.addLevel(level.object.clone(), level.distance);\n        }\n        return this;\n    },\n    addLevel: function (object, distance) {\n        if (distance === undefined)\n            distance = 0;\n        distance = Math.abs(distance);\n        var levels = this.levels;\n        for (var l = 0; l < levels.length; l++) {\n            if (distance < levels[l].distance) {\n                break;\n            }\n        }\n        levels.splice(l, 0, { distance: distance, object: object });\n        this.add(object);\n    },\n    getObjectForDistance: function (distance) {\n        var levels = this.levels;\n        for (var i = 1, l = levels.length; i < l; i++) {\n            if (distance < levels[i].distance) {\n                break;\n            }\n        }\n        return levels[i - 1].object;\n    },\n    raycast: (function () {\n        var matrixPosition = new Vector3();\n        return function raycast(raycaster, intersects) {\n            matrixPosition.setFromMatrixPosition(this.matrixWorld);\n            var distance = raycaster.ray.origin.distanceTo(matrixPosition);\n            this.getObjectForDistance(distance).raycast(raycaster, intersects);\n        };\n    }()),\n    update: function () {\n        var v1 = new Vector3();\n        var v2 = new Vector3();\n        return function update(camera) {\n            var levels = this.levels;\n            if (levels.length > 1) {\n                v1.setFromMatrixPosition(camera.matrixWorld);\n                v2.setFromMatrixPosition(this.matrixWorld);\n                var distance = v1.distanceTo(v2);\n                levels[0].object.visible = true;\n                for (var i = 1, l = levels.length; i < l; i++) {\n                    if (distance >= levels[i].distance) {\n                        levels[i - 1].object.visible = false;\n                        levels[i].object.visible = true;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                for (; i < l; i++) {\n                    levels[i].object.visible = false;\n                }\n            }\n        };\n    }(),\n    toJSON: function (meta) {\n        var data = Object3D.prototype.toJSON.call(this, meta);\n        data.object.levels = [];\n        var levels = this.levels;\n        for (var i = 0, l = levels.length; i < l; i++) {\n            var level = levels[i];\n            data.object.levels.push({\n                object: level.object.uuid,\n                distance: level.distance\n            });\n        }\n        return data;\n    }\n});\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author michael guerrero / http://realitymeltdown.com\n * @author ikerr / http://verold.com\n */\nfunction Skeleton(bones, boneInverses) {\n    // copy the bone array\n    bones = bones || [];\n    this.bones = bones.slice(0);\n    this.boneMatrices = new Float32Array(this.bones.length * 16);\n    // use the supplied bone inverses or calculate the inverses\n    if (boneInverses === undefined) {\n        this.calculateInverses();\n    }\n    else {\n        if (this.bones.length === boneInverses.length) {\n            this.boneInverses = boneInverses.slice(0);\n        }\n        else {\n            console.warn('THREE.Skeleton boneInverses is the wrong length.');\n            this.boneInverses = [];\n            for (var i = 0, il = this.bones.length; i < il; i++) {\n                this.boneInverses.push(new Matrix4());\n            }\n        }\n    }\n}\nObject.assign(Skeleton.prototype, {\n    calculateInverses: function () {\n        this.boneInverses = [];\n        for (var i = 0, il = this.bones.length; i < il; i++) {\n            var inverse = new Matrix4();\n            if (this.bones[i]) {\n                inverse.getInverse(this.bones[i].matrixWorld);\n            }\n            this.boneInverses.push(inverse);\n        }\n    },\n    pose: function () {\n        var bone, i, il;\n        // recover the bind-time world matrices\n        for (i = 0, il = this.bones.length; i < il; i++) {\n            bone = this.bones[i];\n            if (bone) {\n                bone.matrixWorld.getInverse(this.boneInverses[i]);\n            }\n        }\n        // compute the local matrices, positions, rotations and scales\n        for (i = 0, il = this.bones.length; i < il; i++) {\n            bone = this.bones[i];\n            if (bone) {\n                if (bone.parent && bone.parent.isBone) {\n                    bone.matrix.getInverse(bone.parent.matrixWorld);\n                    bone.matrix.multiply(bone.matrixWorld);\n                }\n                else {\n                    bone.matrix.copy(bone.matrixWorld);\n                }\n                bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n            }\n        }\n    },\n    update: (function () {\n        var offsetMatrix = new Matrix4();\n        var identityMatrix = new Matrix4();\n        return function update() {\n            var bones = this.bones;\n            var boneInverses = this.boneInverses;\n            var boneMatrices = this.boneMatrices;\n            var boneTexture = this.boneTexture;\n            // flatten bone matrices to array\n            for (var i = 0, il = bones.length; i < il; i++) {\n                // compute the offset between the current and the original transform\n                var matrix = bones[i] ? bones[i].matrixWorld : identityMatrix;\n                offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n                offsetMatrix.toArray(boneMatrices, i * 16);\n            }\n            if (boneTexture !== undefined) {\n                boneTexture.needsUpdate = true;\n            }\n        };\n    })(),\n    clone: function () {\n        return new Skeleton(this.bones, this.boneInverses);\n    },\n    getBoneByName: function (name) {\n        for (var i = 0, il = this.bones.length; i < il; i++) {\n            var bone = this.bones[i];\n            if (bone.name === name) {\n                return bone;\n            }\n        }\n        return undefined;\n    }\n});\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\nfunction Bone() {\n    Object3D.call(this);\n    this.type = 'Bone';\n}\nBone.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Bone,\n    isBone: true\n});\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author ikerr / http://verold.com\n */\nfunction SkinnedMesh(geometry, material) {\n    Mesh.call(this, geometry, material);\n    this.type = 'SkinnedMesh';\n    this.bindMode = 'attached';\n    this.bindMatrix = new Matrix4();\n    this.bindMatrixInverse = new Matrix4();\n    var bones = this.initBones();\n    var skeleton = new Skeleton(bones);\n    this.bind(skeleton, this.matrixWorld);\n    this.normalizeSkinWeights();\n}\nSkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n    constructor: SkinnedMesh,\n    isSkinnedMesh: true,\n    initBones: function () {\n        var bones = [], bone, gbone;\n        var i, il;\n        if (this.geometry && this.geometry.bones !== undefined) {\n            // first, create array of 'Bone' objects from geometry data\n            for (i = 0, il = this.geometry.bones.length; i < il; i++) {\n                gbone = this.geometry.bones[i];\n                // create new 'Bone' object\n                bone = new Bone();\n                bones.push(bone);\n                // apply values\n                bone.name = gbone.name;\n                bone.position.fromArray(gbone.pos);\n                bone.quaternion.fromArray(gbone.rotq);\n                if (gbone.scl !== undefined)\n                    bone.scale.fromArray(gbone.scl);\n            }\n            // second, create bone hierarchy\n            for (i = 0, il = this.geometry.bones.length; i < il; i++) {\n                gbone = this.geometry.bones[i];\n                if ((gbone.parent !== -1) && (gbone.parent !== null) && (bones[gbone.parent] !== undefined)) {\n                    // subsequent bones in the hierarchy\n                    bones[gbone.parent].add(bones[i]);\n                }\n                else {\n                    // topmost bone, immediate child of the skinned mesh\n                    this.add(bones[i]);\n                }\n            }\n        }\n        // now the bones are part of the scene graph and children of the skinned mesh.\n        // let's update the corresponding matrices\n        this.updateMatrixWorld(true);\n        return bones;\n    },\n    bind: function (skeleton, bindMatrix) {\n        this.skeleton = skeleton;\n        if (bindMatrix === undefined) {\n            this.updateMatrixWorld(true);\n            this.skeleton.calculateInverses();\n            bindMatrix = this.matrixWorld;\n        }\n        this.bindMatrix.copy(bindMatrix);\n        this.bindMatrixInverse.getInverse(bindMatrix);\n    },\n    pose: function () {\n        this.skeleton.pose();\n    },\n    normalizeSkinWeights: function () {\n        var scale, i;\n        if (this.geometry && this.geometry.isGeometry) {\n            for (i = 0; i < this.geometry.skinWeights.length; i++) {\n                var sw = this.geometry.skinWeights[i];\n                scale = 1.0 / sw.manhattanLength();\n                if (scale !== Infinity) {\n                    sw.multiplyScalar(scale);\n                }\n                else {\n                    sw.set(1, 0, 0, 0); // do something reasonable\n                }\n            }\n        }\n        else if (this.geometry && this.geometry.isBufferGeometry) {\n            var vec = new Vector4();\n            var skinWeight = this.geometry.attributes.skinWeight;\n            for (i = 0; i < skinWeight.count; i++) {\n                vec.x = skinWeight.getX(i);\n                vec.y = skinWeight.getY(i);\n                vec.z = skinWeight.getZ(i);\n                vec.w = skinWeight.getW(i);\n                scale = 1.0 / vec.manhattanLength();\n                if (scale !== Infinity) {\n                    vec.multiplyScalar(scale);\n                }\n                else {\n                    vec.set(1, 0, 0, 0); // do something reasonable\n                }\n                skinWeight.setXYZW(i, vec.x, vec.y, vec.z, vec.w);\n            }\n        }\n    },\n    updateMatrixWorld: function (force) {\n        Mesh.prototype.updateMatrixWorld.call(this, force);\n        if (this.bindMode === 'attached') {\n            this.bindMatrixInverse.getInverse(this.matrixWorld);\n        }\n        else if (this.bindMode === 'detached') {\n            this.bindMatrixInverse.getInverse(this.bindMatrix);\n        }\n        else {\n            console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n        }\n    },\n    clone: function () {\n        return new this.constructor(this.geometry, this.material).copy(this);\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\nfunction LineBasicMaterial(parameters) {\n    Material.call(this);\n    this.type = 'LineBasicMaterial';\n    this.color = new Color(0xffffff);\n    this.linewidth = 1;\n    this.linecap = 'round';\n    this.linejoin = 'round';\n    this.lights = false;\n    this.setValues(parameters);\n}\nLineBasicMaterial.prototype = Object.create(Material.prototype);\nLineBasicMaterial.prototype.constructor = LineBasicMaterial;\nLineBasicMaterial.prototype.isLineBasicMaterial = true;\nLineBasicMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.linewidth = source.linewidth;\n    this.linecap = source.linecap;\n    this.linejoin = source.linejoin;\n    return this;\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Line(geometry, material, mode) {\n    if (mode === 1) {\n        console.warn('THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.');\n        return new LineSegments(geometry, material);\n    }\n    Object3D.call(this);\n    this.type = 'Line';\n    this.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    this.material = material !== undefined ? material : new LineBasicMaterial({ color: Math.random() * 0xffffff });\n}\nLine.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Line,\n    isLine: true,\n    computeLineDistances: (function () {\n        var start = new Vector3();\n        var end = new Vector3();\n        return function computeLineDistances() {\n            var geometry = this.geometry;\n            if (geometry.isBufferGeometry) {\n                // we assume non-indexed geometry\n                if (geometry.index === null) {\n                    var positionAttribute = geometry.attributes.position;\n                    var lineDistances = [0];\n                    for (var i = 1, l = positionAttribute.count; i < l; i++) {\n                        start.fromBufferAttribute(positionAttribute, i - 1);\n                        end.fromBufferAttribute(positionAttribute, i);\n                        lineDistances[i] = lineDistances[i - 1];\n                        lineDistances[i] += start.distanceTo(end);\n                    }\n                    geometry.addAttribute('lineDistance', new THREE.Float32BufferAttribute(lineDistances, 1));\n                }\n                else {\n                    console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n                }\n            }\n            else if (geometry.isGeometry) {\n                var vertices = geometry.vertices;\n                var lineDistances = geometry.lineDistances;\n                lineDistances[0] = 0;\n                for (var i = 1, l = vertices.length; i < l; i++) {\n                    lineDistances[i] = lineDistances[i - 1];\n                    lineDistances[i] += vertices[i - 1].distanceTo(vertices[i]);\n                }\n            }\n            return this;\n        };\n    }()),\n    raycast: (function () {\n        var inverseMatrix = new Matrix4();\n        var ray = new Ray();\n        var sphere = new Sphere();\n        return function raycast(raycaster, intersects) {\n            var precision = raycaster.linePrecision;\n            var precisionSq = precision * precision;\n            var geometry = this.geometry;\n            var matrixWorld = this.matrixWorld;\n            // Checking boundingSphere distance to ray\n            if (geometry.boundingSphere === null)\n                geometry.computeBoundingSphere();\n            sphere.copy(geometry.boundingSphere);\n            sphere.applyMatrix4(matrixWorld);\n            if (raycaster.ray.intersectsSphere(sphere) === false)\n                return;\n            //\n            inverseMatrix.getInverse(matrixWorld);\n            ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n            var vStart = new Vector3();\n            var vEnd = new Vector3();\n            var interSegment = new Vector3();\n            var interRay = new Vector3();\n            var step = (this && this.isLineSegments) ? 2 : 1;\n            if (geometry.isBufferGeometry) {\n                var index = geometry.index;\n                var attributes = geometry.attributes;\n                var positions = attributes.position.array;\n                if (index !== null) {\n                    var indices = index.array;\n                    for (var i = 0, l = indices.length - 1; i < l; i += step) {\n                        var a = indices[i];\n                        var b = indices[i + 1];\n                        vStart.fromArray(positions, a * 3);\n                        vEnd.fromArray(positions, b * 3);\n                        var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n                        if (distSq > precisionSq)\n                            continue;\n                        interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n                        var distance = raycaster.ray.origin.distanceTo(interRay);\n                        if (distance < raycaster.near || distance > raycaster.far)\n                            continue;\n                        intersects.push({\n                            distance: distance,\n                            // What do we want? intersection point on the ray or on the segment??\n                            // point: raycaster.ray.at( distance ),\n                            point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                            index: i,\n                            face: null,\n                            faceIndex: null,\n                            object: this\n                        });\n                    }\n                }\n                else {\n                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                        vStart.fromArray(positions, 3 * i);\n                        vEnd.fromArray(positions, 3 * i + 3);\n                        var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n                        if (distSq > precisionSq)\n                            continue;\n                        interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n                        var distance = raycaster.ray.origin.distanceTo(interRay);\n                        if (distance < raycaster.near || distance > raycaster.far)\n                            continue;\n                        intersects.push({\n                            distance: distance,\n                            // What do we want? intersection point on the ray or on the segment??\n                            // point: raycaster.ray.at( distance ),\n                            point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                            index: i,\n                            face: null,\n                            faceIndex: null,\n                            object: this\n                        });\n                    }\n                }\n            }\n            else if (geometry.isGeometry) {\n                var vertices = geometry.vertices;\n                var nbVertices = vertices.length;\n                for (var i = 0; i < nbVertices - 1; i += step) {\n                    var distSq = ray.distanceSqToSegment(vertices[i], vertices[i + 1], interRay, interSegment);\n                    if (distSq > precisionSq)\n                        continue;\n                    interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n                    var distance = raycaster.ray.origin.distanceTo(interRay);\n                    if (distance < raycaster.near || distance > raycaster.far)\n                        continue;\n                    intersects.push({\n                        distance: distance,\n                        // What do we want? intersection point on the ray or on the segment??\n                        // point: raycaster.ray.at( distance ),\n                        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                        index: i,\n                        face: null,\n                        faceIndex: null,\n                        object: this\n                    });\n                }\n            }\n        };\n    }()),\n    clone: function () {\n        return new this.constructor(this.geometry, this.material).copy(this);\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction LineSegments(geometry, material) {\n    Line.call(this, geometry, material);\n    this.type = 'LineSegments';\n}\nLineSegments.prototype = Object.assign(Object.create(Line.prototype), {\n    constructor: LineSegments,\n    isLineSegments: true,\n    computeLineDistances: (function () {\n        var start = new Vector3();\n        var end = new Vector3();\n        return function computeLineDistances() {\n            var geometry = this.geometry;\n            if (geometry.isBufferGeometry) {\n                // we assume non-indexed geometry\n                if (geometry.index === null) {\n                    var positionAttribute = geometry.attributes.position;\n                    var lineDistances = [];\n                    for (var i = 0, l = positionAttribute.count; i < l; i += 2) {\n                        start.fromBufferAttribute(positionAttribute, i);\n                        end.fromBufferAttribute(positionAttribute, i + 1);\n                        lineDistances[i] = (i === 0) ? 0 : lineDistances[i - 1];\n                        lineDistances[i + 1] = lineDistances[i] + start.distanceTo(end);\n                    }\n                    geometry.addAttribute('lineDistance', new THREE.Float32BufferAttribute(lineDistances, 1));\n                }\n                else {\n                    console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n                }\n            }\n            else if (geometry.isGeometry) {\n                var vertices = geometry.vertices;\n                var lineDistances = geometry.lineDistances;\n                for (var i = 0, l = vertices.length; i < l; i += 2) {\n                    start.copy(vertices[i]);\n                    end.copy(vertices[i + 1]);\n                    lineDistances[i] = (i === 0) ? 0 : lineDistances[i - 1];\n                    lineDistances[i + 1] = lineDistances[i] + start.distanceTo(end);\n                }\n            }\n            return this;\n        };\n    }())\n});\n/**\n * @author mgreter / http://github.com/mgreter\n */\nfunction LineLoop(geometry, material) {\n    Line.call(this, geometry, material);\n    this.type = 'LineLoop';\n}\nLineLoop.prototype = Object.assign(Object.create(Line.prototype), {\n    constructor: LineLoop,\n    isLineLoop: true,\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\nfunction PointsMaterial(parameters) {\n    Material.call(this);\n    this.type = 'PointsMaterial';\n    this.color = new Color(0xffffff);\n    this.map = null;\n    this.size = 1;\n    this.sizeAttenuation = true;\n    this.lights = false;\n    this.setValues(parameters);\n}\nPointsMaterial.prototype = Object.create(Material.prototype);\nPointsMaterial.prototype.constructor = PointsMaterial;\nPointsMaterial.prototype.isPointsMaterial = true;\nPointsMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.size = source.size;\n    this.sizeAttenuation = source.sizeAttenuation;\n    return this;\n};\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nfunction Points(geometry, material) {\n    Object3D.call(this);\n    this.type = 'Points';\n    this.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    this.material = material !== undefined ? material : new PointsMaterial({ color: Math.random() * 0xffffff });\n}\nPoints.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Points,\n    isPoints: true,\n    raycast: (function () {\n        var inverseMatrix = new Matrix4();\n        var ray = new Ray();\n        var sphere = new Sphere();\n        return function raycast(raycaster, intersects) {\n            var object = this;\n            var geometry = this.geometry;\n            var matrixWorld = this.matrixWorld;\n            var threshold = raycaster.params.Points.threshold;\n            // Checking boundingSphere distance to ray\n            if (geometry.boundingSphere === null)\n                geometry.computeBoundingSphere();\n            sphere.copy(geometry.boundingSphere);\n            sphere.applyMatrix4(matrixWorld);\n            sphere.radius += threshold;\n            if (raycaster.ray.intersectsSphere(sphere) === false)\n                return;\n            //\n            inverseMatrix.getInverse(matrixWorld);\n            ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n            var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n            var localThresholdSq = localThreshold * localThreshold;\n            var position = new Vector3();\n            function testPoint(point, index) {\n                var rayPointDistanceSq = ray.distanceSqToPoint(point);\n                if (rayPointDistanceSq < localThresholdSq) {\n                    var intersectPoint = ray.closestPointToPoint(point);\n                    intersectPoint.applyMatrix4(matrixWorld);\n                    var distance = raycaster.ray.origin.distanceTo(intersectPoint);\n                    if (distance < raycaster.near || distance > raycaster.far)\n                        return;\n                    intersects.push({\n                        distance: distance,\n                        distanceToRay: Math.sqrt(rayPointDistanceSq),\n                        point: intersectPoint.clone(),\n                        index: index,\n                        face: null,\n                        object: object\n                    });\n                }\n            }\n            if (geometry.isBufferGeometry) {\n                var index = geometry.index;\n                var attributes = geometry.attributes;\n                var positions = attributes.position.array;\n                if (index !== null) {\n                    var indices = index.array;\n                    for (var i = 0, il = indices.length; i < il; i++) {\n                        var a = indices[i];\n                        position.fromArray(positions, a * 3);\n                        testPoint(position, a);\n                    }\n                }\n                else {\n                    for (var i = 0, l = positions.length / 3; i < l; i++) {\n                        position.fromArray(positions, i * 3);\n                        testPoint(position, i);\n                    }\n                }\n            }\n            else {\n                var vertices = geometry.vertices;\n                for (var i = 0, l = vertices.length; i < l; i++) {\n                    testPoint(vertices[i], i);\n                }\n            }\n        };\n    }()),\n    clone: function () {\n        return new this.constructor(this.geometry, this.material).copy(this);\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Group() {\n    Object3D.call(this);\n    this.type = 'Group';\n}\nGroup.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Group,\n    isGroup: true\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n    Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n    this.generateMipmaps = false;\n}\nVideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {\n    constructor: VideoTexture,\n    isVideoTexture: true,\n    update: function () {\n        var video = this.image;\n        if (video.readyState >= video.HAVE_CURRENT_DATA) {\n            this.needsUpdate = true;\n        }\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nfunction CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n    Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n    this.image = { width: width, height: height };\n    this.mipmaps = mipmaps;\n    // no flipping for cube textures\n    // (also flipping doesn't work for compressed textures )\n    this.flipY = false;\n    // can't generate mipmaps for compressed textures\n    // mips must be embedded in DDS files\n    this.generateMipmaps = false;\n}\nCompressedTexture.prototype = Object.create(Texture.prototype);\nCompressedTexture.prototype.constructor = CompressedTexture;\nCompressedTexture.prototype.isCompressedTexture = true;\n/**\n * @author Matt DesLauriers / @mattdesl\n * @author atix / arthursilber.de\n */\nfunction DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n    format = format !== undefined ? format : DepthFormat;\n    if (format !== DepthFormat && format !== DepthStencilFormat) {\n        throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n    }\n    if (type === undefined && format === DepthFormat)\n        type = UnsignedShortType;\n    if (type === undefined && format === DepthStencilFormat)\n        type = UnsignedInt248Type;\n    Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n    this.image = { width: width, height: height };\n    this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n    this.flipY = false;\n    this.generateMipmaps = false;\n}\nDepthTexture.prototype = Object.create(Texture.prototype);\nDepthTexture.prototype.constructor = DepthTexture;\nDepthTexture.prototype.isDepthTexture = true;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\nfunction WireframeGeometry(geometry) {\n    BufferGeometry.call(this);\n    this.type = 'WireframeGeometry';\n    // buffer\n    var vertices = [];\n    // helper variables\n    var i, j, l, o, ol;\n    var edge = [0, 0], edges = {}, e, edge1, edge2;\n    var key, keys = ['a', 'b', 'c'];\n    var vertex;\n    // different logic for Geometry and BufferGeometry\n    if (geometry && geometry.isGeometry) {\n        // create a data structure that contains all edges without duplicates\n        var faces = geometry.faces;\n        for (i = 0, l = faces.length; i < l; i++) {\n            var face = faces[i];\n            for (j = 0; j < 3; j++) {\n                edge1 = face[keys[j]];\n                edge2 = face[keys[(j + 1) % 3]];\n                edge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n                edge[1] = Math.max(edge1, edge2);\n                key = edge[0] + ',' + edge[1];\n                if (edges[key] === undefined) {\n                    edges[key] = { index1: edge[0], index2: edge[1] };\n                }\n            }\n        }\n        // generate vertices\n        for (key in edges) {\n            e = edges[key];\n            vertex = geometry.vertices[e.index1];\n            vertices.push(vertex.x, vertex.y, vertex.z);\n            vertex = geometry.vertices[e.index2];\n            vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n    }\n    else if (geometry && geometry.isBufferGeometry) {\n        var position, indices, groups;\n        var group, start, count;\n        var index1, index2;\n        vertex = new Vector3();\n        if (geometry.index !== null) {\n            // indexed BufferGeometry\n            position = geometry.attributes.position;\n            indices = geometry.index;\n            groups = geometry.groups;\n            if (groups.length === 0) {\n                groups = [{ start: 0, count: indices.count, materialIndex: 0 }];\n            }\n            // create a data structure that contains all eges without duplicates\n            for (o = 0, ol = groups.length; o < ol; ++o) {\n                group = groups[o];\n                start = group.start;\n                count = group.count;\n                for (i = start, l = (start + count); i < l; i += 3) {\n                    for (j = 0; j < 3; j++) {\n                        edge1 = indices.getX(i + j);\n                        edge2 = indices.getX(i + (j + 1) % 3);\n                        edge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n                        edge[1] = Math.max(edge1, edge2);\n                        key = edge[0] + ',' + edge[1];\n                        if (edges[key] === undefined) {\n                            edges[key] = { index1: edge[0], index2: edge[1] };\n                        }\n                    }\n                }\n            }\n            // generate vertices\n            for (key in edges) {\n                e = edges[key];\n                vertex.fromBufferAttribute(position, e.index1);\n                vertices.push(vertex.x, vertex.y, vertex.z);\n                vertex.fromBufferAttribute(position, e.index2);\n                vertices.push(vertex.x, vertex.y, vertex.z);\n            }\n        }\n        else {\n            // non-indexed BufferGeometry\n            position = geometry.attributes.position;\n            for (i = 0, l = (position.count / 3); i < l; i++) {\n                for (j = 0; j < 3; j++) {\n                    // three edges per triangle, an edge is represented as (index1, index2)\n                    // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n                    index1 = 3 * i + j;\n                    vertex.fromBufferAttribute(position, index1);\n                    vertices.push(vertex.x, vertex.y, vertex.z);\n                    index2 = 3 * i + ((j + 1) % 3);\n                    vertex.fromBufferAttribute(position, index2);\n                    vertices.push(vertex.x, vertex.y, vertex.z);\n                }\n            }\n        }\n    }\n    // build geometry\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n}\nWireframeGeometry.prototype = Object.create(BufferGeometry.prototype);\nWireframeGeometry.prototype.constructor = WireframeGeometry;\n/**\n * @author zz85 / https://github.com/zz85\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n */\n// ParametricGeometry\nfunction ParametricGeometry(func, slices, stacks) {\n    Geometry.call(this);\n    this.type = 'ParametricGeometry';\n    this.parameters = {\n        func: func,\n        slices: slices,\n        stacks: stacks\n    };\n    this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));\n    this.mergeVertices();\n}\nParametricGeometry.prototype = Object.create(Geometry.prototype);\nParametricGeometry.prototype.constructor = ParametricGeometry;\n// ParametricBufferGeometry\nfunction ParametricBufferGeometry(func, slices, stacks) {\n    BufferGeometry.call(this);\n    this.type = 'ParametricBufferGeometry';\n    this.parameters = {\n        func: func,\n        slices: slices,\n        stacks: stacks\n    };\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    var EPS = 0.00001;\n    var normal = new Vector3();\n    var p0 = new Vector3(), p1 = new Vector3();\n    var pu = new Vector3(), pv = new Vector3();\n    var i, j;\n    // generate vertices, normals and uvs\n    var sliceCount = slices + 1;\n    for (i = 0; i <= stacks; i++) {\n        var v = i / stacks;\n        for (j = 0; j <= slices; j++) {\n            var u = j / slices;\n            // vertex\n            p0 = func(u, v, p0);\n            vertices.push(p0.x, p0.y, p0.z);\n            // normal\n            // approximate tangent vectors via finite differences\n            if (u - EPS >= 0) {\n                p1 = func(u - EPS, v, p1);\n                pu.subVectors(p0, p1);\n            }\n            else {\n                p1 = func(u + EPS, v, p1);\n                pu.subVectors(p1, p0);\n            }\n            if (v - EPS >= 0) {\n                p1 = func(u, v - EPS, p1);\n                pv.subVectors(p0, p1);\n            }\n            else {\n                p1 = func(u, v + EPS, p1);\n                pv.subVectors(p1, p0);\n            }\n            // cross product of tangent vectors returns surface normal\n            normal.crossVectors(pu, pv).normalize();\n            normals.push(normal.x, normal.y, normal.z);\n            // uv\n            uvs.push(u, v);\n        }\n    }\n    // generate indices\n    for (i = 0; i < stacks; i++) {\n        for (j = 0; j < slices; j++) {\n            var a = i * sliceCount + j;\n            var b = i * sliceCount + j + 1;\n            var c = (i + 1) * sliceCount + j + 1;\n            var d = (i + 1) * sliceCount + j;\n            // faces one and two\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\nParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n/**\n * @author clockworkgeek / https://github.com/clockworkgeek\n * @author timothypratley / https://github.com/timothypratley\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\n// PolyhedronGeometry\nfunction PolyhedronGeometry(vertices, indices, radius, detail) {\n    Geometry.call(this);\n    this.type = 'PolyhedronGeometry';\n    this.parameters = {\n        vertices: vertices,\n        indices: indices,\n        radius: radius,\n        detail: detail\n    };\n    this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices, indices, radius, detail));\n    this.mergeVertices();\n}\nPolyhedronGeometry.prototype = Object.create(Geometry.prototype);\nPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n// PolyhedronBufferGeometry\nfunction PolyhedronBufferGeometry(vertices, indices, radius, detail) {\n    BufferGeometry.call(this);\n    this.type = 'PolyhedronBufferGeometry';\n    this.parameters = {\n        vertices: vertices,\n        indices: indices,\n        radius: radius,\n        detail: detail\n    };\n    radius = radius || 1;\n    detail = detail || 0;\n    // default buffer data\n    var vertexBuffer = [];\n    var uvBuffer = [];\n    // the subdivision creates the vertex buffer data\n    subdivide(detail);\n    // all vertices should lie on a conceptual sphere with a given radius\n    appplyRadius(radius);\n    // finally, create the uv data\n    generateUVs();\n    // build non-indexed geometry\n    this.addAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n    if (detail === 0) {\n        this.computeVertexNormals(); // flat normals\n    }\n    else {\n        this.normalizeNormals(); // smooth normals\n    }\n    // helper functions\n    function subdivide(detail) {\n        var a = new Vector3();\n        var b = new Vector3();\n        var c = new Vector3();\n        // iterate over all faces and apply a subdivison with the given detail value\n        for (var i = 0; i < indices.length; i += 3) {\n            // get the vertices of the face\n            getVertexByIndex(indices[i + 0], a);\n            getVertexByIndex(indices[i + 1], b);\n            getVertexByIndex(indices[i + 2], c);\n            // perform subdivision\n            subdivideFace(a, b, c, detail);\n        }\n    }\n    function subdivideFace(a, b, c, detail) {\n        var cols = Math.pow(2, detail);\n        // we use this multidimensional array as a data structure for creating the subdivision\n        var v = [];\n        var i, j;\n        // construct all of the vertices for this subdivision\n        for (i = 0; i <= cols; i++) {\n            v[i] = [];\n            var aj = a.clone().lerp(c, i / cols);\n            var bj = b.clone().lerp(c, i / cols);\n            var rows = cols - i;\n            for (j = 0; j <= rows; j++) {\n                if (j === 0 && i === cols) {\n                    v[i][j] = aj;\n                }\n                else {\n                    v[i][j] = aj.clone().lerp(bj, j / rows);\n                }\n            }\n        }\n        // construct all of the faces\n        for (i = 0; i < cols; i++) {\n            for (j = 0; j < 2 * (cols - i) - 1; j++) {\n                var k = Math.floor(j / 2);\n                if (j % 2 === 0) {\n                    pushVertex(v[i][k + 1]);\n                    pushVertex(v[i + 1][k]);\n                    pushVertex(v[i][k]);\n                }\n                else {\n                    pushVertex(v[i][k + 1]);\n                    pushVertex(v[i + 1][k + 1]);\n                    pushVertex(v[i + 1][k]);\n                }\n            }\n        }\n    }\n    function appplyRadius(radius) {\n        var vertex = new Vector3();\n        // iterate over the entire buffer and apply the radius to each vertex\n        for (var i = 0; i < vertexBuffer.length; i += 3) {\n            vertex.x = vertexBuffer[i + 0];\n            vertex.y = vertexBuffer[i + 1];\n            vertex.z = vertexBuffer[i + 2];\n            vertex.normalize().multiplyScalar(radius);\n            vertexBuffer[i + 0] = vertex.x;\n            vertexBuffer[i + 1] = vertex.y;\n            vertexBuffer[i + 2] = vertex.z;\n        }\n    }\n    function generateUVs() {\n        var vertex = new Vector3();\n        for (var i = 0; i < vertexBuffer.length; i += 3) {\n            vertex.x = vertexBuffer[i + 0];\n            vertex.y = vertexBuffer[i + 1];\n            vertex.z = vertexBuffer[i + 2];\n            var u = azimuth(vertex) / 2 / Math.PI + 0.5;\n            var v = inclination(vertex) / Math.PI + 0.5;\n            uvBuffer.push(u, 1 - v);\n        }\n        correctUVs();\n        correctSeam();\n    }\n    function correctSeam() {\n        // handle case when face straddles the seam, see #3269\n        for (var i = 0; i < uvBuffer.length; i += 6) {\n            // uv data of a single face\n            var x0 = uvBuffer[i + 0];\n            var x1 = uvBuffer[i + 2];\n            var x2 = uvBuffer[i + 4];\n            var max = Math.max(x0, x1, x2);\n            var min = Math.min(x0, x1, x2);\n            // 0.9 is somewhat arbitrary\n            if (max > 0.9 && min < 0.1) {\n                if (x0 < 0.2)\n                    uvBuffer[i + 0] += 1;\n                if (x1 < 0.2)\n                    uvBuffer[i + 2] += 1;\n                if (x2 < 0.2)\n                    uvBuffer[i + 4] += 1;\n            }\n        }\n    }\n    function pushVertex(vertex) {\n        vertexBuffer.push(vertex.x, vertex.y, vertex.z);\n    }\n    function getVertexByIndex(index, vertex) {\n        var stride = index * 3;\n        vertex.x = vertices[stride + 0];\n        vertex.y = vertices[stride + 1];\n        vertex.z = vertices[stride + 2];\n    }\n    function correctUVs() {\n        var a = new Vector3();\n        var b = new Vector3();\n        var c = new Vector3();\n        var centroid = new Vector3();\n        var uvA = new Vector2();\n        var uvB = new Vector2();\n        var uvC = new Vector2();\n        for (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n            a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n            b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n            c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n            uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n            uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n            uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n            centroid.copy(a).add(b).add(c).divideScalar(3);\n            var azi = azimuth(centroid);\n            correctUV(uvA, j + 0, a, azi);\n            correctUV(uvB, j + 2, b, azi);\n            correctUV(uvC, j + 4, c, azi);\n        }\n    }\n    function correctUV(uv, stride, vector, azimuth) {\n        if ((azimuth < 0) && (uv.x === 1)) {\n            uvBuffer[stride] = uv.x - 1;\n        }\n        if ((vector.x === 0) && (vector.z === 0)) {\n            uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n        }\n    }\n    // Angle around the Y axis, counter-clockwise when looking from above.\n    function azimuth(vector) {\n        return Math.atan2(vector.z, -vector.x);\n    }\n    // Angle above the XZ plane.\n    function inclination(vector) {\n        return Math.atan2(-vector.y, Math.sqrt((vector.x * vector.x) + (vector.z * vector.z)));\n    }\n}\nPolyhedronBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n// TetrahedronGeometry\nfunction TetrahedronGeometry(radius, detail) {\n    Geometry.call(this);\n    this.type = 'TetrahedronGeometry';\n    this.parameters = {\n        radius: radius,\n        detail: detail\n    };\n    this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail));\n    this.mergeVertices();\n}\nTetrahedronGeometry.prototype = Object.create(Geometry.prototype);\nTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n// TetrahedronBufferGeometry\nfunction TetrahedronBufferGeometry(radius, detail) {\n    var vertices = [\n        1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1\n    ];\n    var indices = [\n        2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1\n    ];\n    PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);\n    this.type = 'TetrahedronBufferGeometry';\n    this.parameters = {\n        radius: radius,\n        detail: detail\n    };\n}\nTetrahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);\nTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n// OctahedronGeometry\nfunction OctahedronGeometry(radius, detail) {\n    Geometry.call(this);\n    this.type = 'OctahedronGeometry';\n    this.parameters = {\n        radius: radius,\n        detail: detail\n    };\n    this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail));\n    this.mergeVertices();\n}\nOctahedronGeometry.prototype = Object.create(Geometry.prototype);\nOctahedronGeometry.prototype.constructor = OctahedronGeometry;\n// OctahedronBufferGeometry\nfunction OctahedronBufferGeometry(radius, detail) {\n    var vertices = [\n        1, 0, 0, -1, 0, 0, 0, 1, 0,\n        0, -1, 0, 0, 0, 1, 0, 0, -1\n    ];\n    var indices = [\n        0, 2, 4, 0, 4, 3, 0, 3, 5,\n        0, 5, 2, 1, 2, 5, 1, 5, 3,\n        1, 3, 4, 1, 4, 2\n    ];\n    PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);\n    this.type = 'OctahedronBufferGeometry';\n    this.parameters = {\n        radius: radius,\n        detail: detail\n    };\n}\nOctahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);\nOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n/**\n * @author timothypratley / https://github.com/timothypratley\n * @author Mugen87 / https://github.com/Mugen87\n */\n// IcosahedronGeometry\nfunction IcosahedronGeometry(radius, detail) {\n    Geometry.call(this);\n    this.type = 'IcosahedronGeometry';\n    this.parameters = {\n        radius: radius,\n        detail: detail\n    };\n    this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail));\n    this.mergeVertices();\n}\nIcosahedronGeometry.prototype = Object.create(Geometry.prototype);\nIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n// IcosahedronBufferGeometry\nfunction IcosahedronBufferGeometry(radius, detail) {\n    var t = (1 + Math.sqrt(5)) / 2;\n    var vertices = [\n        -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0,\n        0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t,\n        t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1\n    ];\n    var indices = [\n        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11,\n        1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8,\n        3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9,\n        4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1\n    ];\n    PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);\n    this.type = 'IcosahedronBufferGeometry';\n    this.parameters = {\n        radius: radius,\n        detail: detail\n    };\n}\nIcosahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);\nIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n/**\n * @author Abe Pazos / https://hamoid.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n// DodecahedronGeometry\nfunction DodecahedronGeometry(radius, detail) {\n    Geometry.call(this);\n    this.type = 'DodecahedronGeometry';\n    this.parameters = {\n        radius: radius,\n        detail: detail\n    };\n    this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail));\n    this.mergeVertices();\n}\nDodecahedronGeometry.prototype = Object.create(Geometry.prototype);\nDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n// DodecahedronBufferGeometry\nfunction DodecahedronBufferGeometry(radius, detail) {\n    var t = (1 + Math.sqrt(5)) / 2;\n    var r = 1 / t;\n    var vertices = [\n        // (±1, ±1, ±1)\n        -1, -1, -1, -1, -1, 1,\n        -1, 1, -1, -1, 1, 1,\n        1, -1, -1, 1, -1, 1,\n        1, 1, -1, 1, 1, 1,\n        // (0, ±1/φ, ±φ)\n        0, -r, -t, 0, -r, t,\n        0, r, -t, 0, r, t,\n        // (±1/φ, ±φ, 0)\n        -r, -t, 0, -r, t, 0,\n        r, -t, 0, r, t, 0,\n        // (±φ, 0, ±1/φ)\n        -t, 0, -r, t, 0, -r,\n        -t, 0, r, t, 0, r\n    ];\n    var indices = [\n        3, 11, 7, 3, 7, 15, 3, 15, 13,\n        7, 19, 17, 7, 17, 6, 7, 6, 15,\n        17, 4, 8, 17, 8, 10, 17, 10, 6,\n        8, 0, 16, 8, 16, 2, 8, 2, 10,\n        0, 12, 1, 0, 1, 18, 0, 18, 16,\n        6, 10, 2, 6, 2, 13, 6, 13, 15,\n        2, 16, 18, 2, 18, 3, 2, 3, 13,\n        18, 1, 9, 18, 9, 11, 18, 11, 3,\n        4, 14, 12, 4, 12, 0, 4, 0, 8,\n        11, 9, 5, 11, 5, 19, 11, 19, 7,\n        19, 5, 14, 19, 14, 4, 19, 4, 17,\n        1, 12, 14, 1, 14, 5, 1, 5, 9\n    ];\n    PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);\n    this.type = 'DodecahedronBufferGeometry';\n    this.parameters = {\n        radius: radius,\n        detail: detail\n    };\n}\nDodecahedronBufferGeometry.prototype = Object.create(PolyhedronBufferGeometry.prototype);\nDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n/**\n * @author oosmoxiecode / https://github.com/oosmoxiecode\n * @author WestLangley / https://github.com/WestLangley\n * @author zz85 / https://github.com/zz85\n * @author miningold / https://github.com/miningold\n * @author jonobr1 / https://github.com/jonobr1\n * @author Mugen87 / https://github.com/Mugen87\n *\n */\n// TubeGeometry\nfunction TubeGeometry(path, tubularSegments, radius, radialSegments, closed, taper) {\n    Geometry.call(this);\n    this.type = 'TubeGeometry';\n    this.parameters = {\n        path: path,\n        tubularSegments: tubularSegments,\n        radius: radius,\n        radialSegments: radialSegments,\n        closed: closed\n    };\n    if (taper !== undefined)\n        console.warn('THREE.TubeGeometry: taper has been removed.');\n    var bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed);\n    // expose internals\n    this.tangents = bufferGeometry.tangents;\n    this.normals = bufferGeometry.normals;\n    this.binormals = bufferGeometry.binormals;\n    // create geometry\n    this.fromBufferGeometry(bufferGeometry);\n    this.mergeVertices();\n}\nTubeGeometry.prototype = Object.create(Geometry.prototype);\nTubeGeometry.prototype.constructor = TubeGeometry;\n// TubeBufferGeometry\nfunction TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed) {\n    BufferGeometry.call(this);\n    this.type = 'TubeBufferGeometry';\n    this.parameters = {\n        path: path,\n        tubularSegments: tubularSegments,\n        radius: radius,\n        radialSegments: radialSegments,\n        closed: closed\n    };\n    tubularSegments = tubularSegments || 64;\n    radius = radius || 1;\n    radialSegments = radialSegments || 8;\n    closed = closed || false;\n    var frames = path.computeFrenetFrames(tubularSegments, closed);\n    // expose internals\n    this.tangents = frames.tangents;\n    this.normals = frames.normals;\n    this.binormals = frames.binormals;\n    // helper variables\n    var vertex = new Vector3();\n    var normal = new Vector3();\n    var uv = new Vector2();\n    var P = new Vector3();\n    var i, j;\n    // buffer\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    var indices = [];\n    // create buffer data\n    generateBufferData();\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    // functions\n    function generateBufferData() {\n        for (i = 0; i < tubularSegments; i++) {\n            generateSegment(i);\n        }\n        // if the geometry is not closed, generate the last row of vertices and normals\n        // at the regular position on the given path\n        //\n        // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n        generateSegment((closed === false) ? tubularSegments : 0);\n        // uvs are generated in a separate function.\n        // this makes it easy compute correct values for closed geometries\n        generateUVs();\n        // finally create faces\n        generateIndices();\n    }\n    function generateSegment(i) {\n        // we use getPointAt to sample evenly distributed points from the given path\n        P = path.getPointAt(i / tubularSegments, P);\n        // retrieve corresponding normal and binormal\n        var N = frames.normals[i];\n        var B = frames.binormals[i];\n        // generate normals and vertices for the current segment\n        for (j = 0; j <= radialSegments; j++) {\n            var v = j / radialSegments * Math.PI * 2;\n            var sin = Math.sin(v);\n            var cos = -Math.cos(v);\n            // normal\n            normal.x = (cos * N.x + sin * B.x);\n            normal.y = (cos * N.y + sin * B.y);\n            normal.z = (cos * N.z + sin * B.z);\n            normal.normalize();\n            normals.push(normal.x, normal.y, normal.z);\n            // vertex\n            vertex.x = P.x + radius * normal.x;\n            vertex.y = P.y + radius * normal.y;\n            vertex.z = P.z + radius * normal.z;\n            vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n    }\n    function generateIndices() {\n        for (j = 1; j <= tubularSegments; j++) {\n            for (i = 1; i <= radialSegments; i++) {\n                var a = (radialSegments + 1) * (j - 1) + (i - 1);\n                var b = (radialSegments + 1) * j + (i - 1);\n                var c = (radialSegments + 1) * j + i;\n                var d = (radialSegments + 1) * (j - 1) + i;\n                // faces\n                indices.push(a, b, d);\n                indices.push(b, c, d);\n            }\n        }\n    }\n    function generateUVs() {\n        for (i = 0; i <= tubularSegments; i++) {\n            for (j = 0; j <= radialSegments; j++) {\n                uv.x = i / tubularSegments;\n                uv.y = j / radialSegments;\n                uvs.push(uv.x, uv.y);\n            }\n        }\n    }\n}\nTubeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n/**\n * @author oosmoxiecode\n * @author Mugen87 / https://github.com/Mugen87\n *\n * based on http://www.blackpawn.com/texts/pqtorus/\n */\n// TorusKnotGeometry\nfunction TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q, heightScale) {\n    Geometry.call(this);\n    this.type = 'TorusKnotGeometry';\n    this.parameters = {\n        radius: radius,\n        tube: tube,\n        tubularSegments: tubularSegments,\n        radialSegments: radialSegments,\n        p: p,\n        q: q\n    };\n    if (heightScale !== undefined)\n        console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.');\n    this.fromBufferGeometry(new TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q));\n    this.mergeVertices();\n}\nTorusKnotGeometry.prototype = Object.create(Geometry.prototype);\nTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n// TorusKnotBufferGeometry\nfunction TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q) {\n    BufferGeometry.call(this);\n    this.type = 'TorusKnotBufferGeometry';\n    this.parameters = {\n        radius: radius,\n        tube: tube,\n        tubularSegments: tubularSegments,\n        radialSegments: radialSegments,\n        p: p,\n        q: q\n    };\n    radius = radius || 1;\n    tube = tube || 0.4;\n    tubularSegments = Math.floor(tubularSegments) || 64;\n    radialSegments = Math.floor(radialSegments) || 8;\n    p = p || 2;\n    q = q || 3;\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    // helper variables\n    var i, j;\n    var vertex = new Vector3();\n    var normal = new Vector3();\n    var P1 = new Vector3();\n    var P2 = new Vector3();\n    var B = new Vector3();\n    var T = new Vector3();\n    var N = new Vector3();\n    // generate vertices, normals and uvs\n    for (i = 0; i <= tubularSegments; ++i) {\n        // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n        var u = i / tubularSegments * p * Math.PI * 2;\n        // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n        // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n        calculatePositionOnCurve(u, p, q, radius, P1);\n        calculatePositionOnCurve(u + 0.01, p, q, radius, P2);\n        // calculate orthonormal basis\n        T.subVectors(P2, P1);\n        N.addVectors(P2, P1);\n        B.crossVectors(T, N);\n        N.crossVectors(B, T);\n        // normalize B, N. T can be ignored, we don't use it\n        B.normalize();\n        N.normalize();\n        for (j = 0; j <= radialSegments; ++j) {\n            // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n            // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n            var v = j / radialSegments * Math.PI * 2;\n            var cx = -tube * Math.cos(v);\n            var cy = tube * Math.sin(v);\n            // now calculate the final vertex position.\n            // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n            vertex.x = P1.x + (cx * N.x + cy * B.x);\n            vertex.y = P1.y + (cx * N.y + cy * B.y);\n            vertex.z = P1.z + (cx * N.z + cy * B.z);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n            // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n            normal.subVectors(vertex, P1).normalize();\n            normals.push(normal.x, normal.y, normal.z);\n            // uv\n            uvs.push(i / tubularSegments);\n            uvs.push(j / radialSegments);\n        }\n    }\n    // generate indices\n    for (j = 1; j <= tubularSegments; j++) {\n        for (i = 1; i <= radialSegments; i++) {\n            // indices\n            var a = (radialSegments + 1) * (j - 1) + (i - 1);\n            var b = (radialSegments + 1) * j + (i - 1);\n            var c = (radialSegments + 1) * j + i;\n            var d = (radialSegments + 1) * (j - 1) + i;\n            // faces\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    // this function calculates the current position on the torus curve\n    function calculatePositionOnCurve(u, p, q, radius, position) {\n        var cu = Math.cos(u);\n        var su = Math.sin(u);\n        var quOverP = q / p * u;\n        var cs = Math.cos(quOverP);\n        position.x = radius * (2 + cs) * 0.5 * cu;\n        position.y = radius * (2 + cs) * su * 0.5;\n        position.z = radius * Math.sin(quOverP) * 0.5;\n    }\n}\nTorusKnotBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n/**\n * @author oosmoxiecode\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n// TorusGeometry\nfunction TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n    Geometry.call(this);\n    this.type = 'TorusGeometry';\n    this.parameters = {\n        radius: radius,\n        tube: tube,\n        radialSegments: radialSegments,\n        tubularSegments: tubularSegments,\n        arc: arc\n    };\n    this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));\n    this.mergeVertices();\n}\nTorusGeometry.prototype = Object.create(Geometry.prototype);\nTorusGeometry.prototype.constructor = TorusGeometry;\n// TorusBufferGeometry\nfunction TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n    BufferGeometry.call(this);\n    this.type = 'TorusBufferGeometry';\n    this.parameters = {\n        radius: radius,\n        tube: tube,\n        radialSegments: radialSegments,\n        tubularSegments: tubularSegments,\n        arc: arc\n    };\n    radius = radius || 1;\n    tube = tube || 0.4;\n    radialSegments = Math.floor(radialSegments) || 8;\n    tubularSegments = Math.floor(tubularSegments) || 6;\n    arc = arc || Math.PI * 2;\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    // helper variables\n    var center = new Vector3();\n    var vertex = new Vector3();\n    var normal = new Vector3();\n    var j, i;\n    // generate vertices, normals and uvs\n    for (j = 0; j <= radialSegments; j++) {\n        for (i = 0; i <= tubularSegments; i++) {\n            var u = i / tubularSegments * arc;\n            var v = j / radialSegments * Math.PI * 2;\n            // vertex\n            vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n            vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n            vertex.z = tube * Math.sin(v);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n            // normal\n            center.x = radius * Math.cos(u);\n            center.y = radius * Math.sin(u);\n            normal.subVectors(vertex, center).normalize();\n            normals.push(normal.x, normal.y, normal.z);\n            // uv\n            uvs.push(i / tubularSegments);\n            uvs.push(j / radialSegments);\n        }\n    }\n    // generate indices\n    for (j = 1; j <= radialSegments; j++) {\n        for (i = 1; i <= tubularSegments; i++) {\n            // indices\n            var a = (tubularSegments + 1) * j + i - 1;\n            var b = (tubularSegments + 1) * (j - 1) + i - 1;\n            var c = (tubularSegments + 1) * (j - 1) + i;\n            var d = (tubularSegments + 1) * j + i;\n            // faces\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\nTorusBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n/**\n * @author Mugen87 / https://github.com/Mugen87\n * Port from https://github.com/mapbox/earcut (v2.1.2)\n */\nvar Earcut = {\n    triangulate: function (data, holeIndices, dim) {\n        dim = dim || 2;\n        var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList(data, 0, outerLen, dim, true), triangles = [];\n        if (!outerNode)\n            return triangles;\n        var minX, minY, maxX, maxY, x, y, invSize;\n        if (hasHoles)\n            outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n        if (data.length > 80 * dim) {\n            minX = maxX = data[0];\n            minY = maxY = data[1];\n            for (var i = dim; i < outerLen; i += dim) {\n                x = data[i];\n                y = data[i + 1];\n                if (x < minX)\n                    minX = x;\n                if (y < minY)\n                    minY = y;\n                if (x > maxX)\n                    maxX = x;\n                if (y > maxY)\n                    maxY = y;\n            }\n            // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n            invSize = Math.max(maxX - minX, maxY - minY);\n            invSize = invSize !== 0 ? 1 / invSize : 0;\n        }\n        earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n        return triangles;\n    }\n};\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim)\n            last = insertNode(i, data[i], data[i + 1], last);\n    }\n    else {\n        for (i = end - dim; i >= start; i -= dim)\n            last = insertNode(i, data[i], data[i + 1], last);\n    }\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n    return last;\n}\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start)\n        return start;\n    if (!end)\n        end = start;\n    var p = start, again;\n    do {\n        again = false;\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next)\n                break;\n            again = true;\n        }\n        else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n    return end;\n}\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear)\n        return;\n    // interlink polygon nodes in z-order\n    if (!pass && invSize)\n        indexCurve(ear, minX, minY, invSize);\n    var stop = ear, prev, next;\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n            removeNode(ear);\n            // skipping the next vertice leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n            continue;\n        }\n        ear = next;\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n                // if this didn't work, try curing all small self-intersections locally\n            }\n            else if (pass === 1) {\n                ear = cureLocalIntersections(ear, triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n                // as a last resort, try splitting the remaining polygon into two\n            }\n            else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n            break;\n        }\n    }\n}\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev, b = ear, c = ear.next;\n    if (area(a, b, c) >= 0)\n        return false; // reflex, can't be an ear\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {\n            return false;\n        }\n        p = p.next;\n    }\n    return true;\n}\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev, b = ear, c = ear.next;\n    if (area(a, b, c) >= 0)\n        return false; // reflex, can't be an ear\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x), minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y), maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x), maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n    // first look for points inside the triangle in increasing z-order\n    var p = ear.nextZ;\n    while (p && p.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0)\n            return false;\n        p = p.nextZ;\n    }\n    // then look for points in decreasing z-order\n    p = ear.prevZ;\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0)\n            return false;\n        p = p.prevZ;\n    }\n    return true;\n}\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev, b = p.next.next;\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n    return p;\n}\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [], i, len, start, end, list;\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next)\n            list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n    queue.sort(compareX);\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n    return outerNode;\n}\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n        filterPoints(b, b.next);\n    }\n}\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m;\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y)\n                        return p;\n                    if (hy === p.next.y)\n                        return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n    if (!m)\n        return null;\n    if (hx === qx)\n        return m.prev; // hole touches outer segment; pick lower endpoint\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n    var stop = m, mx = m.x, my = m.y, tanMin = Infinity, tan;\n    p = m.next;\n    while (p !== stop) {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n            pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n        p = p.next;\n    }\n    return m;\n}\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null)\n            p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n    sortLinked(p);\n}\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q)\n                    break;\n            }\n            qSize = inSize;\n            while (pSize > 0 || (qSize > 0 && q)) {\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                }\n                else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n                if (tail)\n                    tail.nextZ = e;\n                else\n                    list = e;\n                e.prevZ = tail;\n                tail = e;\n            }\n            p = q;\n        }\n        tail.nextZ = null;\n        inSize *= 2;\n    } while (numMerges > 1);\n    return list;\n}\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n    return x | (y << 1);\n}\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start, leftmost = start;\n    do {\n        if (p.x < leftmost.x)\n            leftmost = p;\n        p = p.next;\n    } while (p !== start);\n    return leftmost;\n}\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n        (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n        (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&\n        locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\n}\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    if ((equals(p1, q1) && equals(p2, q2)) ||\n        (equals(p1, q2) && equals(p2, q1)))\n        return true;\n    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&\n        area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\n}\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n            intersects(p, p.next, a, b)) {\n            return true;\n        }\n        p = p.next;\n    } while (p !== a);\n    return false;\n}\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a, inside = false, px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n            (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)) {\n            inside = !inside;\n        }\n        p = p.next;\n    } while (p !== a);\n    return inside;\n}\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;\n    a.next = b;\n    b.prev = a;\n    a2.next = an;\n    an.prev = a2;\n    b2.next = a2;\n    a2.prev = b2;\n    bp.next = b2;\n    b2.prev = bp;\n    return b2;\n}\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n    }\n    else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n    if (p.prevZ)\n        p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ)\n        p.nextZ.prevZ = p.prevZ;\n}\nfunction Node(i, x, y) {\n    // vertice index in coordinates array\n    this.i = i;\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n    // previous and next vertice nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n    // z-order curve value\n    this.z = null;\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n */\nvar ShapeUtils = {\n    // calculate area of the contour polygon\n    area: function (contour) {\n        var n = contour.length;\n        var a = 0.0;\n        for (var p = n - 1, q = 0; q < n; p = q++) {\n            a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n        }\n        return a * 0.5;\n    },\n    isClockWise: function (pts) {\n        return ShapeUtils.area(pts) < 0;\n    },\n    triangulateShape: function (contour, holes) {\n        var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n        var holeIndices = []; // array of hole indices\n        var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n        removeDupEndPts(contour);\n        addContour(vertices, contour);\n        //\n        var holeIndex = contour.length;\n        holes.forEach(removeDupEndPts);\n        for (var i = 0; i < holes.length; i++) {\n            holeIndices.push(holeIndex);\n            holeIndex += holes[i].length;\n            addContour(vertices, holes[i]);\n        }\n        //\n        var triangles = Earcut.triangulate(vertices, holeIndices);\n        //\n        for (var i = 0; i < triangles.length; i += 3) {\n            faces.push(triangles.slice(i, i + 3));\n        }\n        return faces;\n    }\n};\nfunction removeDupEndPts(points) {\n    var l = points.length;\n    if (l > 2 && points[l - 1].equals(points[0])) {\n        points.pop();\n    }\n}\nfunction addContour(vertices, contour) {\n    for (var i = 0; i < contour.length; i++) {\n        vertices.push(contour[i].x);\n        vertices.push(contour[i].y);\n    }\n}\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  amount: <int>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline is bevel\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *  frames: <Object> // containing arrays of tangents, normals, binormals\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n// ExtrudeGeometry\nfunction ExtrudeGeometry(shapes, options) {\n    Geometry.call(this);\n    this.type = 'ExtrudeGeometry';\n    this.parameters = {\n        shapes: shapes,\n        options: options\n    };\n    this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));\n    this.mergeVertices();\n}\nExtrudeGeometry.prototype = Object.create(Geometry.prototype);\nExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n// ExtrudeBufferGeometry\nfunction ExtrudeBufferGeometry(shapes, options) {\n    if (typeof (shapes) === \"undefined\") {\n        return;\n    }\n    BufferGeometry.call(this);\n    this.type = 'ExtrudeBufferGeometry';\n    shapes = Array.isArray(shapes) ? shapes : [shapes];\n    this.addShapeList(shapes, options);\n    this.computeVertexNormals();\n    // can't really use automatic vertex normals\n    // as then front and back sides get smoothed too\n    // should do separate smoothing just for sides\n    //this.computeVertexNormals();\n    //console.log( \"took\", ( Date.now() - startTime ) );\n}\nExtrudeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\nExtrudeBufferGeometry.prototype.getArrays = function () {\n    var positionAttribute = this.getAttribute(\"position\");\n    var verticesArray = positionAttribute ? Array.prototype.slice.call(positionAttribute.array) : [];\n    var uvAttribute = this.getAttribute(\"uv\");\n    var uvArray = uvAttribute ? Array.prototype.slice.call(uvAttribute.array) : [];\n    var IndexAttribute = this.index;\n    var indicesArray = IndexAttribute ? Array.prototype.slice.call(IndexAttribute.array) : [];\n    return {\n        position: verticesArray,\n        uv: uvArray,\n        index: indicesArray\n    };\n};\nExtrudeBufferGeometry.prototype.addShapeList = function (shapes, options) {\n    var sl = shapes.length;\n    options.arrays = this.getArrays();\n    for (var s = 0; s < sl; s++) {\n        var shape = shapes[s];\n        this.addShape(shape, options);\n    }\n    this.setIndex(options.arrays.index);\n    this.addAttribute('position', new Float32BufferAttribute(options.arrays.position, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(options.arrays.uv, 2));\n};\nExtrudeBufferGeometry.prototype.addShape = function (shape, options) {\n    var arrays = options.arrays ? options.arrays : this.getArrays();\n    var verticesArray = arrays.position;\n    var indicesArray = arrays.index;\n    var uvArray = arrays.uv;\n    var placeholder = [];\n    var amount = options.amount !== undefined ? options.amount : 100;\n    var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n    var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n    var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n    var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n    var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n    var steps = options.steps !== undefined ? options.steps : 1;\n    var extrudePath = options.extrudePath;\n    var extrudePts, extrudeByPath = false;\n    // Use default WorldUVGenerator if no UV generators are specified.\n    var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;\n    var splineTube, binormal, normal, position2;\n    if (extrudePath) {\n        extrudePts = extrudePath.getSpacedPoints(steps);\n        extrudeByPath = true;\n        bevelEnabled = false; // bevels not supported for path extrusion\n        // SETUP TNB variables\n        // TODO1 - have a .isClosed in spline?\n        splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames(steps, false);\n        // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n        binormal = new Vector3();\n        normal = new Vector3();\n        position2 = new Vector3();\n    }\n    // Safeguards if bevels are not enabled\n    if (!bevelEnabled) {\n        bevelSegments = 0;\n        bevelThickness = 0;\n        bevelSize = 0;\n    }\n    // Variables initialization\n    var ahole, h, hl; // looping of holes\n    var scope = this;\n    var shapePoints = shape.extractPoints(curveSegments);\n    var vertices = shapePoints.shape;\n    var holes = shapePoints.holes;\n    var reverse = !ShapeUtils.isClockWise(vertices);\n    if (reverse) {\n        vertices = vertices.reverse();\n        // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n        for (h = 0, hl = holes.length; h < hl; h++) {\n            ahole = holes[h];\n            if (ShapeUtils.isClockWise(ahole)) {\n                holes[h] = ahole.reverse();\n            }\n        }\n    }\n    var faces = ShapeUtils.triangulateShape(vertices, holes);\n    /* Vertices */\n    var contour = vertices; // vertices has all points but contour has only points of circumference\n    for (h = 0, hl = holes.length; h < hl; h++) {\n        ahole = holes[h];\n        vertices = vertices.concat(ahole);\n    }\n    function scalePt2(pt, vec, size) {\n        if (!vec)\n            console.error(\"THREE.ExtrudeGeometry: vec does not exist\");\n        return vec.clone().multiplyScalar(size).add(pt);\n    }\n    var b, bs, t, z, vert, vlen = vertices.length, face, flen = faces.length;\n    // Find directions for point movement\n    function getBevelVec(inPt, inPrev, inNext) {\n        // computes for inPt the corresponding point inPt' on a new contour\n        //   shifted by 1 unit (length of normalized vector) to the left\n        // if we walk along contour clockwise, this new contour is outside the old one\n        //\n        // inPt' is the intersection of the two lines parallel to the two\n        //  adjacent edges of inPt at a distance of 1 unit on the left side.\n        var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n        // good reading for geometry algorithms (here: line-line intersection)\n        // http://geomalgorithms.com/a05-_intersect-1.html\n        var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\n        var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\n        var v_prev_lensq = (v_prev_x * v_prev_x + v_prev_y * v_prev_y);\n        // check for collinear edges\n        var collinear0 = (v_prev_x * v_next_y - v_prev_y * v_next_x);\n        if (Math.abs(collinear0) > Number.EPSILON) {\n            // not collinear\n            // length of vectors for normalizing\n            var v_prev_len = Math.sqrt(v_prev_lensq);\n            var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);\n            // shift adjacent points by unit vectors to the left\n            var ptPrevShift_x = (inPrev.x - v_prev_y / v_prev_len);\n            var ptPrevShift_y = (inPrev.y + v_prev_x / v_prev_len);\n            var ptNextShift_x = (inNext.x - v_next_y / v_next_len);\n            var ptNextShift_y = (inNext.y + v_next_x / v_next_len);\n            // scaling factor for v_prev to intersection point\n            var sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y -\n                (ptNextShift_y - ptPrevShift_y) * v_next_x) /\n                (v_prev_x * v_next_y - v_prev_y * v_next_x);\n            // vector from inPt to intersection point\n            v_trans_x = (ptPrevShift_x + v_prev_x * sf - inPt.x);\n            v_trans_y = (ptPrevShift_y + v_prev_y * sf - inPt.y);\n            // Don't normalize!, otherwise sharp corners become ugly\n            //  but prevent crazy spikes\n            var v_trans_lensq = (v_trans_x * v_trans_x + v_trans_y * v_trans_y);\n            if (v_trans_lensq <= 2) {\n                return new Vector2(v_trans_x, v_trans_y);\n            }\n            else {\n                shrink_by = Math.sqrt(v_trans_lensq / 2);\n            }\n        }\n        else {\n            // handle special case of collinear edges\n            var direction_eq = false; // assumes: opposite\n            if (v_prev_x > Number.EPSILON) {\n                if (v_next_x > Number.EPSILON) {\n                    direction_eq = true;\n                }\n            }\n            else {\n                if (v_prev_x < -Number.EPSILON) {\n                    if (v_next_x < -Number.EPSILON) {\n                        direction_eq = true;\n                    }\n                }\n                else {\n                    if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n                        direction_eq = true;\n                    }\n                }\n            }\n            if (direction_eq) {\n                // console.log(\"Warning: lines are a straight sequence\");\n                v_trans_x = -v_prev_y;\n                v_trans_y = v_prev_x;\n                shrink_by = Math.sqrt(v_prev_lensq);\n            }\n            else {\n                // console.log(\"Warning: lines are a straight spike\");\n                v_trans_x = v_prev_x;\n                v_trans_y = v_prev_y;\n                shrink_by = Math.sqrt(v_prev_lensq / 2);\n            }\n        }\n        return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n    }\n    var contourMovements = [];\n    for (var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n        if (j === il)\n            j = 0;\n        if (k === il)\n            k = 0;\n        //  (j)---(i)---(k)\n        // console.log('i,j,k', i, j , k)\n        contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n    }\n    var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\n    for (h = 0, hl = holes.length; h < hl; h++) {\n        ahole = holes[h];\n        oneHoleMovements = [];\n        for (i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n            if (j === il)\n                j = 0;\n            if (k === il)\n                k = 0;\n            //  (j)---(i)---(k)\n            oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n        }\n        holesMovements.push(oneHoleMovements);\n        verticesMovements = verticesMovements.concat(oneHoleMovements);\n    }\n    // Loop bevelSegments, 1 for the front, 1 for the back\n    for (b = 0; b < bevelSegments; b++) {\n        //for ( b = bevelSegments; b > 0; b -- ) {\n        t = b / bevelSegments;\n        z = bevelThickness * Math.cos(t * Math.PI / 2);\n        bs = bevelSize * Math.sin(t * Math.PI / 2);\n        // contract shape\n        for (i = 0, il = contour.length; i < il; i++) {\n            vert = scalePt2(contour[i], contourMovements[i], bs);\n            v(vert.x, vert.y, -z);\n        }\n        // expand holes\n        for (h = 0, hl = holes.length; h < hl; h++) {\n            ahole = holes[h];\n            oneHoleMovements = holesMovements[h];\n            for (i = 0, il = ahole.length; i < il; i++) {\n                vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n                v(vert.x, vert.y, -z);\n            }\n        }\n    }\n    bs = bevelSize;\n    // Back facing vertices\n    for (i = 0; i < vlen; i++) {\n        vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n        if (!extrudeByPath) {\n            v(vert.x, vert.y, 0);\n        }\n        else {\n            // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n            normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n            binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n            position2.copy(extrudePts[0]).add(normal).add(binormal);\n            v(position2.x, position2.y, position2.z);\n        }\n    }\n    // Add stepped vertices...\n    // Including front facing vertices\n    var s;\n    for (s = 1; s <= steps; s++) {\n        for (i = 0; i < vlen; i++) {\n            vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n            if (!extrudeByPath) {\n                v(vert.x, vert.y, amount / steps * s);\n            }\n            else {\n                // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n                normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n                binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n                position2.copy(extrudePts[s]).add(normal).add(binormal);\n                v(position2.x, position2.y, position2.z);\n            }\n        }\n    }\n    // Add bevel segments planes\n    //for ( b = 1; b <= bevelSegments; b ++ ) {\n    for (b = bevelSegments - 1; b >= 0; b--) {\n        t = b / bevelSegments;\n        z = bevelThickness * Math.cos(t * Math.PI / 2);\n        bs = bevelSize * Math.sin(t * Math.PI / 2);\n        // contract shape\n        for (i = 0, il = contour.length; i < il; i++) {\n            vert = scalePt2(contour[i], contourMovements[i], bs);\n            v(vert.x, vert.y, amount + z);\n        }\n        // expand holes\n        for (h = 0, hl = holes.length; h < hl; h++) {\n            ahole = holes[h];\n            oneHoleMovements = holesMovements[h];\n            for (i = 0, il = ahole.length; i < il; i++) {\n                vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n                if (!extrudeByPath) {\n                    v(vert.x, vert.y, amount + z);\n                }\n                else {\n                    v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n                }\n            }\n        }\n    }\n    /* Faces */\n    // Top and bottom faces\n    buildLidFaces();\n    // Sides faces\n    buildSideFaces();\n    /////  Internal functions\n    function buildLidFaces() {\n        var start = verticesArray.length / 3;\n        if (bevelEnabled) {\n            var layer = 0; // steps + 1\n            var offset = vlen * layer;\n            // Bottom faces\n            for (i = 0; i < flen; i++) {\n                face = faces[i];\n                f3(face[2] + offset, face[1] + offset, face[0] + offset);\n            }\n            layer = steps + bevelSegments * 2;\n            offset = vlen * layer;\n            // Top faces\n            for (i = 0; i < flen; i++) {\n                face = faces[i];\n                f3(face[0] + offset, face[1] + offset, face[2] + offset);\n            }\n        }\n        else {\n            // Bottom faces\n            for (i = 0; i < flen; i++) {\n                face = faces[i];\n                f3(face[2], face[1], face[0]);\n            }\n            // Top faces\n            for (i = 0; i < flen; i++) {\n                face = faces[i];\n                f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n            }\n        }\n        scope.addGroup(start, verticesArray.length / 3 - start, options.material !== undefined ? options.material : 0);\n    }\n    // Create faces for the z-sides of the shape\n    function buildSideFaces() {\n        var start = verticesArray.length / 3;\n        var layeroffset = 0;\n        sidewalls(contour, layeroffset);\n        layeroffset += contour.length;\n        for (h = 0, hl = holes.length; h < hl; h++) {\n            ahole = holes[h];\n            sidewalls(ahole, layeroffset);\n            //, true\n            layeroffset += ahole.length;\n        }\n        scope.addGroup(start, verticesArray.length / 3 - start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1);\n    }\n    function sidewalls(contour, layeroffset) {\n        var j, k;\n        i = contour.length;\n        while (--i >= 0) {\n            j = i;\n            k = i - 1;\n            if (k < 0)\n                k = contour.length - 1;\n            //console.log('b', i,j, i-1, k,vertices.length);\n            var s = 0, sl = steps + bevelSegments * 2;\n            for (s = 0; s < sl; s++) {\n                var slen1 = vlen * s;\n                var slen2 = vlen * (s + 1);\n                var a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;\n                f4(a, b, c, d);\n            }\n        }\n    }\n    function v(x, y, z) {\n        placeholder.push(x);\n        placeholder.push(y);\n        placeholder.push(z);\n    }\n    function f3(a, b, c) {\n        addVertex(a);\n        addVertex(b);\n        addVertex(c);\n        var nextIndex = verticesArray.length / 3;\n        var uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n        addUV(uvs[0]);\n        addUV(uvs[1]);\n        addUV(uvs[2]);\n    }\n    function f4(a, b, c, d) {\n        addVertex(a);\n        addVertex(b);\n        addVertex(d);\n        addVertex(b);\n        addVertex(c);\n        addVertex(d);\n        var nextIndex = verticesArray.length / 3;\n        var uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n        addUV(uvs[0]);\n        addUV(uvs[1]);\n        addUV(uvs[3]);\n        addUV(uvs[1]);\n        addUV(uvs[2]);\n        addUV(uvs[3]);\n    }\n    function addVertex(index) {\n        indicesArray.push(verticesArray.length / 3);\n        verticesArray.push(placeholder[index * 3 + 0]);\n        verticesArray.push(placeholder[index * 3 + 1]);\n        verticesArray.push(placeholder[index * 3 + 2]);\n    }\n    function addUV(vector2) {\n        uvArray.push(vector2.x);\n        uvArray.push(vector2.y);\n    }\n    if (!options.arrays) {\n        this.setIndex(indicesArray);\n        this.addAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n        this.addAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n    }\n};\nExtrudeGeometry.WorldUVGenerator = {\n    generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n        var a_x = vertices[indexA * 3];\n        var a_y = vertices[indexA * 3 + 1];\n        var b_x = vertices[indexB * 3];\n        var b_y = vertices[indexB * 3 + 1];\n        var c_x = vertices[indexC * 3];\n        var c_y = vertices[indexC * 3 + 1];\n        return [\n            new Vector2(a_x, a_y),\n            new Vector2(b_x, b_y),\n            new Vector2(c_x, c_y)\n        ];\n    },\n    generateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\n        var a_x = vertices[indexA * 3];\n        var a_y = vertices[indexA * 3 + 1];\n        var a_z = vertices[indexA * 3 + 2];\n        var b_x = vertices[indexB * 3];\n        var b_y = vertices[indexB * 3 + 1];\n        var b_z = vertices[indexB * 3 + 2];\n        var c_x = vertices[indexC * 3];\n        var c_y = vertices[indexC * 3 + 1];\n        var c_z = vertices[indexC * 3 + 2];\n        var d_x = vertices[indexD * 3];\n        var d_y = vertices[indexD * 3 + 1];\n        var d_z = vertices[indexD * 3 + 2];\n        if (Math.abs(a_y - b_y) < 0.01) {\n            return [\n                new Vector2(a_x, 1 - a_z),\n                new Vector2(b_x, 1 - b_z),\n                new Vector2(c_x, 1 - c_z),\n                new Vector2(d_x, 1 - d_z)\n            ];\n        }\n        else {\n            return [\n                new Vector2(a_y, 1 - a_z),\n                new Vector2(b_y, 1 - b_z),\n                new Vector2(c_y, 1 - c_z),\n                new Vector2(d_y, 1 - d_z)\n            ];\n        }\n    }\n};\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author alteredq / http://alteredqualia.com/\n *\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  height: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float> // how far from text outline is bevel\n * }\n */\n// TextGeometry\nfunction TextGeometry(text, parameters) {\n    Geometry.call(this);\n    this.type = 'TextGeometry';\n    this.parameters = {\n        text: text,\n        parameters: parameters\n    };\n    this.fromBufferGeometry(new TextBufferGeometry(text, parameters));\n    this.mergeVertices();\n}\nTextGeometry.prototype = Object.create(Geometry.prototype);\nTextGeometry.prototype.constructor = TextGeometry;\n// TextBufferGeometry\nfunction TextBufferGeometry(text, parameters) {\n    parameters = parameters || {};\n    var font = parameters.font;\n    if (!(font && font.isFont)) {\n        console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n        return new Geometry();\n    }\n    var shapes = font.generateShapes(text, parameters.size, parameters.curveSegments);\n    // translate parameters to ExtrudeGeometry API\n    parameters.amount = parameters.height !== undefined ? parameters.height : 50;\n    // defaults\n    if (parameters.bevelThickness === undefined)\n        parameters.bevelThickness = 10;\n    if (parameters.bevelSize === undefined)\n        parameters.bevelSize = 8;\n    if (parameters.bevelEnabled === undefined)\n        parameters.bevelEnabled = false;\n    ExtrudeBufferGeometry.call(this, shapes, parameters);\n    this.type = 'TextBufferGeometry';\n}\nTextBufferGeometry.prototype = Object.create(ExtrudeBufferGeometry.prototype);\nTextBufferGeometry.prototype.constructor = TextBufferGeometry;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n */\n// SphereGeometry\nfunction SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n    Geometry.call(this);\n    this.type = 'SphereGeometry';\n    this.parameters = {\n        radius: radius,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments,\n        phiStart: phiStart,\n        phiLength: phiLength,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n    this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));\n    this.mergeVertices();\n}\nSphereGeometry.prototype = Object.create(Geometry.prototype);\nSphereGeometry.prototype.constructor = SphereGeometry;\n// SphereBufferGeometry\nfunction SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n    BufferGeometry.call(this);\n    this.type = 'SphereBufferGeometry';\n    this.parameters = {\n        radius: radius,\n        widthSegments: widthSegments,\n        heightSegments: heightSegments,\n        phiStart: phiStart,\n        phiLength: phiLength,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n    radius = radius || 1;\n    widthSegments = Math.max(3, Math.floor(widthSegments) || 8);\n    heightSegments = Math.max(2, Math.floor(heightSegments) || 6);\n    phiStart = phiStart !== undefined ? phiStart : 0;\n    phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n    var thetaEnd = thetaStart + thetaLength;\n    var ix, iy;\n    var index = 0;\n    var grid = [];\n    var vertex = new Vector3();\n    var normal = new Vector3();\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    // generate vertices, normals and uvs\n    for (iy = 0; iy <= heightSegments; iy++) {\n        var verticesRow = [];\n        var v = iy / heightSegments;\n        for (ix = 0; ix <= widthSegments; ix++) {\n            var u = ix / widthSegments;\n            // vertex\n            vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n            vertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n            vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n            // normal\n            normal.set(vertex.x, vertex.y, vertex.z).normalize();\n            normals.push(normal.x, normal.y, normal.z);\n            // uv\n            uvs.push(u, 1 - v);\n            verticesRow.push(index++);\n        }\n        grid.push(verticesRow);\n    }\n    // indices\n    for (iy = 0; iy < heightSegments; iy++) {\n        for (ix = 0; ix < widthSegments; ix++) {\n            var a = grid[iy][ix + 1];\n            var b = grid[iy][ix];\n            var c = grid[iy + 1][ix];\n            var d = grid[iy + 1][ix + 1];\n            if (iy !== 0 || thetaStart > 0)\n                indices.push(a, b, d);\n            if (iy !== heightSegments - 1 || thetaEnd < Math.PI)\n                indices.push(b, c, d);\n        }\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\nSphereBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n/**\n * @author Kaleb Murphy\n * @author Mugen87 / https://github.com/Mugen87\n */\n// RingGeometry\nfunction RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n    Geometry.call(this);\n    this.type = 'RingGeometry';\n    this.parameters = {\n        innerRadius: innerRadius,\n        outerRadius: outerRadius,\n        thetaSegments: thetaSegments,\n        phiSegments: phiSegments,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n    this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));\n    this.mergeVertices();\n}\nRingGeometry.prototype = Object.create(Geometry.prototype);\nRingGeometry.prototype.constructor = RingGeometry;\n// RingBufferGeometry\nfunction RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n    BufferGeometry.call(this);\n    this.type = 'RingBufferGeometry';\n    this.parameters = {\n        innerRadius: innerRadius,\n        outerRadius: outerRadius,\n        thetaSegments: thetaSegments,\n        phiSegments: phiSegments,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n    innerRadius = innerRadius || 0.5;\n    outerRadius = outerRadius || 1;\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n    thetaSegments = thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;\n    phiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 1;\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    // some helper variables\n    var segment;\n    var radius = innerRadius;\n    var radiusStep = ((outerRadius - innerRadius) / phiSegments);\n    var vertex = new Vector3();\n    var uv = new Vector2();\n    var j, i;\n    // generate vertices, normals and uvs\n    for (j = 0; j <= phiSegments; j++) {\n        for (i = 0; i <= thetaSegments; i++) {\n            // values are generate from the inside of the ring to the outside\n            segment = thetaStart + i / thetaSegments * thetaLength;\n            // vertex\n            vertex.x = radius * Math.cos(segment);\n            vertex.y = radius * Math.sin(segment);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n            // normal\n            normals.push(0, 0, 1);\n            // uv\n            uv.x = (vertex.x / outerRadius + 1) / 2;\n            uv.y = (vertex.y / outerRadius + 1) / 2;\n            uvs.push(uv.x, uv.y);\n        }\n        // increase the radius for next row of vertices\n        radius += radiusStep;\n    }\n    // indices\n    for (j = 0; j < phiSegments; j++) {\n        var thetaSegmentLevel = j * (thetaSegments + 1);\n        for (i = 0; i < thetaSegments; i++) {\n            segment = i + thetaSegmentLevel;\n            var a = segment;\n            var b = segment + thetaSegments + 1;\n            var c = segment + thetaSegments + 2;\n            var d = segment + 1;\n            // faces\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\nRingBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nRingBufferGeometry.prototype.constructor = RingBufferGeometry;\n/**\n * @author astrodud / http://astrodud.isgreat.org/\n * @author zz85 / https://github.com/zz85\n * @author bhouston / http://clara.io\n * @author Mugen87 / https://github.com/Mugen87\n */\n// LatheGeometry\nfunction LatheGeometry(points, segments, phiStart, phiLength) {\n    Geometry.call(this);\n    this.type = 'LatheGeometry';\n    this.parameters = {\n        points: points,\n        segments: segments,\n        phiStart: phiStart,\n        phiLength: phiLength\n    };\n    this.fromBufferGeometry(new LatheBufferGeometry(points, segments, phiStart, phiLength));\n    this.mergeVertices();\n}\nLatheGeometry.prototype = Object.create(Geometry.prototype);\nLatheGeometry.prototype.constructor = LatheGeometry;\n// LatheBufferGeometry\nfunction LatheBufferGeometry(points, segments, phiStart, phiLength) {\n    BufferGeometry.call(this);\n    this.type = 'LatheBufferGeometry';\n    this.parameters = {\n        points: points,\n        segments: segments,\n        phiStart: phiStart,\n        phiLength: phiLength\n    };\n    segments = Math.floor(segments) || 12;\n    phiStart = phiStart || 0;\n    phiLength = phiLength || Math.PI * 2;\n    // clamp phiLength so it's in range of [ 0, 2PI ]\n    phiLength = _Math.clamp(phiLength, 0, Math.PI * 2);\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var uvs = [];\n    // helper variables\n    var base;\n    var inverseSegments = 1.0 / segments;\n    var vertex = new Vector3();\n    var uv = new Vector2();\n    var i, j;\n    // generate vertices and uvs\n    for (i = 0; i <= segments; i++) {\n        var phi = phiStart + i * inverseSegments * phiLength;\n        var sin = Math.sin(phi);\n        var cos = Math.cos(phi);\n        for (j = 0; j <= (points.length - 1); j++) {\n            // vertex\n            vertex.x = points[j].x * sin;\n            vertex.y = points[j].y;\n            vertex.z = points[j].x * cos;\n            vertices.push(vertex.x, vertex.y, vertex.z);\n            // uv\n            uv.x = i / segments;\n            uv.y = j / (points.length - 1);\n            uvs.push(uv.x, uv.y);\n        }\n    }\n    // indices\n    for (i = 0; i < segments; i++) {\n        for (j = 0; j < (points.length - 1); j++) {\n            base = j + i * points.length;\n            var a = base;\n            var b = base + points.length;\n            var c = base + points.length + 1;\n            var d = base + 1;\n            // faces\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    // generate normals\n    this.computeVertexNormals();\n    // if the geometry is closed, we need to average the normals along the seam.\n    // because the corresponding vertices are identical (but still have different UVs).\n    if (phiLength === Math.PI * 2) {\n        var normals = this.attributes.normal.array;\n        var n1 = new Vector3();\n        var n2 = new Vector3();\n        var n = new Vector3();\n        // this is the buffer offset for the last line of vertices\n        base = segments * points.length * 3;\n        for (i = 0, j = 0; i < points.length; i++, j += 3) {\n            // select the normal of the vertex in the first line\n            n1.x = normals[j + 0];\n            n1.y = normals[j + 1];\n            n1.z = normals[j + 2];\n            // select the normal of the vertex in the last line\n            n2.x = normals[base + j + 0];\n            n2.y = normals[base + j + 1];\n            n2.z = normals[base + j + 2];\n            // average normals\n            n.addVectors(n1, n2).normalize();\n            // assign the new values to both normals\n            normals[j + 0] = normals[base + j + 0] = n.x;\n            normals[j + 1] = normals[base + j + 1] = n.y;\n            normals[j + 2] = normals[base + j + 2] = n.z;\n        }\n    }\n}\nLatheBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n/**\n * @author jonobr1 / http://jonobr1.com\n * @author Mugen87 / https://github.com/Mugen87\n */\n// ShapeGeometry\nfunction ShapeGeometry(shapes, curveSegments) {\n    Geometry.call(this);\n    this.type = 'ShapeGeometry';\n    if (typeof curveSegments === 'object') {\n        console.warn('THREE.ShapeGeometry: Options parameter has been removed.');\n        curveSegments = curveSegments.curveSegments;\n    }\n    this.parameters = {\n        shapes: shapes,\n        curveSegments: curveSegments\n    };\n    this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));\n    this.mergeVertices();\n}\nShapeGeometry.prototype = Object.create(Geometry.prototype);\nShapeGeometry.prototype.constructor = ShapeGeometry;\nShapeGeometry.prototype.toJSON = function () {\n    var data = Geometry.prototype.toJSON.call(this);\n    var shapes = this.parameters.shapes;\n    return toJSON(shapes, data);\n};\n// ShapeBufferGeometry\nfunction ShapeBufferGeometry(shapes, curveSegments) {\n    BufferGeometry.call(this);\n    this.type = 'ShapeBufferGeometry';\n    this.parameters = {\n        shapes: shapes,\n        curveSegments: curveSegments\n    };\n    curveSegments = curveSegments || 12;\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    // helper variables\n    var groupStart = 0;\n    var groupCount = 0;\n    // allow single and array values for \"shapes\" parameter\n    if (Array.isArray(shapes) === false) {\n        addShape(shapes);\n    }\n    else {\n        for (var i = 0; i < shapes.length; i++) {\n            addShape(shapes[i]);\n            this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n            groupStart += groupCount;\n            groupCount = 0;\n        }\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    // helper functions\n    function addShape(shape) {\n        var i, l, shapeHole;\n        var indexOffset = vertices.length / 3;\n        var points = shape.extractPoints(curveSegments);\n        var shapeVertices = points.shape;\n        var shapeHoles = points.holes;\n        // check direction of vertices\n        if (ShapeUtils.isClockWise(shapeVertices) === false) {\n            shapeVertices = shapeVertices.reverse();\n            // also check if holes are in the opposite direction\n            for (i = 0, l = shapeHoles.length; i < l; i++) {\n                shapeHole = shapeHoles[i];\n                if (ShapeUtils.isClockWise(shapeHole) === true) {\n                    shapeHoles[i] = shapeHole.reverse();\n                }\n            }\n        }\n        var faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);\n        // join vertices of inner and outer paths to a single array\n        for (i = 0, l = shapeHoles.length; i < l; i++) {\n            shapeHole = shapeHoles[i];\n            shapeVertices = shapeVertices.concat(shapeHole);\n        }\n        // vertices, normals, uvs\n        for (i = 0, l = shapeVertices.length; i < l; i++) {\n            var vertex = shapeVertices[i];\n            vertices.push(vertex.x, vertex.y, 0);\n            normals.push(0, 0, 1);\n            uvs.push(vertex.x, vertex.y); // world uvs\n        }\n        // incides\n        for (i = 0, l = faces.length; i < l; i++) {\n            var face = faces[i];\n            var a = face[0] + indexOffset;\n            var b = face[1] + indexOffset;\n            var c = face[2] + indexOffset;\n            indices.push(a, b, c);\n            groupCount += 3;\n        }\n    }\n}\nShapeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\nShapeBufferGeometry.prototype.toJSON = function () {\n    var data = BufferGeometry.prototype.toJSON.call(this);\n    var shapes = this.parameters.shapes;\n    return toJSON(shapes, data);\n};\n//\nfunction toJSON(shapes, data) {\n    data.shapes = [];\n    if (Array.isArray(shapes)) {\n        for (var i = 0, l = shapes.length; i < l; i++) {\n            var shape = shapes[i];\n            data.shapes.push(shape.uuid);\n        }\n    }\n    else {\n        data.shapes.push(shapes.uuid);\n    }\n    return data;\n}\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author Mugen87 / https://github.com/Mugen87\n */\nfunction EdgesGeometry(geometry, thresholdAngle) {\n    BufferGeometry.call(this);\n    this.type = 'EdgesGeometry';\n    this.parameters = {\n        thresholdAngle: thresholdAngle\n    };\n    thresholdAngle = (thresholdAngle !== undefined) ? thresholdAngle : 1;\n    // buffer\n    var vertices = [];\n    // helper variables\n    var thresholdDot = Math.cos(_Math.DEG2RAD * thresholdAngle);\n    var edge = [0, 0], edges = {}, edge1, edge2;\n    var key, keys = ['a', 'b', 'c'];\n    // prepare source geometry\n    var geometry2;\n    if (geometry.isBufferGeometry) {\n        geometry2 = new Geometry();\n        geometry2.fromBufferGeometry(geometry);\n    }\n    else {\n        geometry2 = geometry.clone();\n    }\n    geometry2.mergeVertices();\n    geometry2.computeFaceNormals();\n    var sourceVertices = geometry2.vertices;\n    var faces = geometry2.faces;\n    // now create a data structure where each entry represents an edge with its adjoining faces\n    for (var i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i];\n        for (var j = 0; j < 3; j++) {\n            edge1 = face[keys[j]];\n            edge2 = face[keys[(j + 1) % 3]];\n            edge[0] = Math.min(edge1, edge2);\n            edge[1] = Math.max(edge1, edge2);\n            key = edge[0] + ',' + edge[1];\n            if (edges[key] === undefined) {\n                edges[key] = { index1: edge[0], index2: edge[1], face1: i, face2: undefined };\n            }\n            else {\n                edges[key].face2 = i;\n            }\n        }\n    }\n    // generate vertices\n    for (key in edges) {\n        var e = edges[key];\n        // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n        if (e.face2 === undefined || faces[e.face1].normal.dot(faces[e.face2].normal) <= thresholdDot) {\n            var vertex = sourceVertices[e.index1];\n            vertices.push(vertex.x, vertex.y, vertex.z);\n            vertex = sourceVertices[e.index2];\n            vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n    }\n    // build geometry\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n}\nEdgesGeometry.prototype = Object.create(BufferGeometry.prototype);\nEdgesGeometry.prototype.constructor = EdgesGeometry;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n// CylinderGeometry\nfunction CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n    Geometry.call(this);\n    this.type = 'CylinderGeometry';\n    this.parameters = {\n        radiusTop: radiusTop,\n        radiusBottom: radiusBottom,\n        height: height,\n        radialSegments: radialSegments,\n        heightSegments: heightSegments,\n        openEnded: openEnded,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n    this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));\n    this.mergeVertices();\n}\nCylinderGeometry.prototype = Object.create(Geometry.prototype);\nCylinderGeometry.prototype.constructor = CylinderGeometry;\n// CylinderBufferGeometry\nfunction CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n    BufferGeometry.call(this);\n    this.type = 'CylinderBufferGeometry';\n    this.parameters = {\n        radiusTop: radiusTop,\n        radiusBottom: radiusBottom,\n        height: height,\n        radialSegments: radialSegments,\n        heightSegments: heightSegments,\n        openEnded: openEnded,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n    var scope = this;\n    radiusTop = radiusTop !== undefined ? radiusTop : 1;\n    radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n    height = height || 1;\n    radialSegments = Math.floor(radialSegments) || 8;\n    heightSegments = Math.floor(heightSegments) || 1;\n    openEnded = openEnded !== undefined ? openEnded : false;\n    thetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    // helper variables\n    var index = 0;\n    var indexArray = [];\n    var halfHeight = height / 2;\n    var groupStart = 0;\n    // generate geometry\n    generateTorso();\n    if (openEnded === false) {\n        if (radiusTop > 0)\n            generateCap(true);\n        if (radiusBottom > 0)\n            generateCap(false);\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    function generateTorso() {\n        var x, y;\n        var normal = new Vector3();\n        var vertex = new Vector3();\n        var groupCount = 0;\n        // this will be used to calculate the normal\n        var slope = (radiusBottom - radiusTop) / height;\n        // generate vertices, normals and uvs\n        for (y = 0; y <= heightSegments; y++) {\n            var indexRow = [];\n            var v = y / heightSegments;\n            // calculate the radius of the current row\n            var radius = v * (radiusBottom - radiusTop) + radiusTop;\n            for (x = 0; x <= radialSegments; x++) {\n                var u = x / radialSegments;\n                var theta = u * thetaLength + thetaStart;\n                var sinTheta = Math.sin(theta);\n                var cosTheta = Math.cos(theta);\n                // vertex\n                vertex.x = radius * sinTheta;\n                vertex.y = -v * height + halfHeight;\n                vertex.z = radius * cosTheta;\n                vertices.push(vertex.x, vertex.y, vertex.z);\n                // normal\n                normal.set(sinTheta, slope, cosTheta).normalize();\n                normals.push(normal.x, normal.y, normal.z);\n                // uv\n                uvs.push(u, 1 - v);\n                // save index of vertex in respective row\n                indexRow.push(index++);\n            }\n            // now save vertices of the row in our index array\n            indexArray.push(indexRow);\n        }\n        // generate indices\n        for (x = 0; x < radialSegments; x++) {\n            for (y = 0; y < heightSegments; y++) {\n                // we use the index array to access the correct indices\n                var a = indexArray[y][x];\n                var b = indexArray[y + 1][x];\n                var c = indexArray[y + 1][x + 1];\n                var d = indexArray[y][x + 1];\n                // faces\n                indices.push(a, b, d);\n                indices.push(b, c, d);\n                // update group counter\n                groupCount += 6;\n            }\n        }\n        // add a group to the geometry. this will ensure multi material support\n        scope.addGroup(groupStart, groupCount, 0);\n        // calculate new start value for groups\n        groupStart += groupCount;\n    }\n    function generateCap(top) {\n        var x, centerIndexStart, centerIndexEnd;\n        var uv = new Vector2();\n        var vertex = new Vector3();\n        var groupCount = 0;\n        var radius = (top === true) ? radiusTop : radiusBottom;\n        var sign = (top === true) ? 1 : -1;\n        // save the index of the first center vertex\n        centerIndexStart = index;\n        // first we generate the center vertex data of the cap.\n        // because the geometry needs one set of uvs per face,\n        // we must generate a center vertex per face/segment\n        for (x = 1; x <= radialSegments; x++) {\n            // vertex\n            vertices.push(0, halfHeight * sign, 0);\n            // normal\n            normals.push(0, sign, 0);\n            // uv\n            uvs.push(0.5, 0.5);\n            // increase index\n            index++;\n        }\n        // save the index of the last center vertex\n        centerIndexEnd = index;\n        // now we generate the surrounding vertices, normals and uvs\n        for (x = 0; x <= radialSegments; x++) {\n            var u = x / radialSegments;\n            var theta = u * thetaLength + thetaStart;\n            var cosTheta = Math.cos(theta);\n            var sinTheta = Math.sin(theta);\n            // vertex\n            vertex.x = radius * sinTheta;\n            vertex.y = halfHeight * sign;\n            vertex.z = radius * cosTheta;\n            vertices.push(vertex.x, vertex.y, vertex.z);\n            // normal\n            normals.push(0, sign, 0);\n            // uv\n            uv.x = (cosTheta * 0.5) + 0.5;\n            uv.y = (sinTheta * 0.5 * sign) + 0.5;\n            uvs.push(uv.x, uv.y);\n            // increase index\n            index++;\n        }\n        // generate indices\n        for (x = 0; x < radialSegments; x++) {\n            var c = centerIndexStart + x;\n            var i = centerIndexEnd + x;\n            if (top === true) {\n                // face top\n                indices.push(i, i + 1, c);\n            }\n            else {\n                // face bottom\n                indices.push(i + 1, i, c);\n            }\n            groupCount += 3;\n        }\n        // add a group to the geometry. this will ensure multi material support\n        scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);\n        // calculate new start value for groups\n        groupStart += groupCount;\n    }\n}\nCylinderBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n/**\n * @author abelnation / http://github.com/abelnation\n */\n// ConeGeometry\nfunction ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n    CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n    this.type = 'ConeGeometry';\n    this.parameters = {\n        radius: radius,\n        height: height,\n        radialSegments: radialSegments,\n        heightSegments: heightSegments,\n        openEnded: openEnded,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n}\nConeGeometry.prototype = Object.create(CylinderGeometry.prototype);\nConeGeometry.prototype.constructor = ConeGeometry;\n// ConeBufferGeometry\nfunction ConeBufferGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n    CylinderBufferGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n    this.type = 'ConeBufferGeometry';\n    this.parameters = {\n        radius: radius,\n        height: height,\n        radialSegments: radialSegments,\n        heightSegments: heightSegments,\n        openEnded: openEnded,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n}\nConeBufferGeometry.prototype = Object.create(CylinderBufferGeometry.prototype);\nConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n * @author Mugen87 / https://github.com/Mugen87\n * @author hughes\n */\n// CircleGeometry\nfunction CircleGeometry(radius, segments, thetaStart, thetaLength) {\n    Geometry.call(this);\n    this.type = 'CircleGeometry';\n    this.parameters = {\n        radius: radius,\n        segments: segments,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n    this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));\n    this.mergeVertices();\n}\nCircleGeometry.prototype = Object.create(Geometry.prototype);\nCircleGeometry.prototype.constructor = CircleGeometry;\n// CircleBufferGeometry\nfunction CircleBufferGeometry(radius, segments, thetaStart, thetaLength) {\n    BufferGeometry.call(this);\n    this.type = 'CircleBufferGeometry';\n    this.parameters = {\n        radius: radius,\n        segments: segments,\n        thetaStart: thetaStart,\n        thetaLength: thetaLength\n    };\n    radius = radius || 1;\n    segments = segments !== undefined ? Math.max(3, segments) : 8;\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n    // buffers\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    // helper variables\n    var i, s;\n    var vertex = new Vector3();\n    var uv = new Vector2();\n    // center point\n    vertices.push(0, 0, 0);\n    normals.push(0, 0, 1);\n    uvs.push(0.5, 0.5);\n    for (s = 0, i = 3; s <= segments; s++, i += 3) {\n        var segment = thetaStart + s / segments * thetaLength;\n        // vertex\n        vertex.x = radius * Math.cos(segment);\n        vertex.y = radius * Math.sin(segment);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n        // normal\n        normals.push(0, 0, 1);\n        // uvs\n        uv.x = (vertices[i] / radius + 1) / 2;\n        uv.y = (vertices[i + 1] / radius + 1) / 2;\n        uvs.push(uv.x, uv.y);\n    }\n    // indices\n    for (i = 1; i <= segments; i++) {\n        indices.push(i, i + 1, 0);\n    }\n    // build geometry\n    this.setIndex(indices);\n    this.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.addAttribute('uv', new Float32BufferAttribute(uvs, 2));\n}\nCircleBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\nCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\nvar Geometries = Object.freeze({\n    WireframeGeometry: WireframeGeometry,\n    ParametricGeometry: ParametricGeometry,\n    ParametricBufferGeometry: ParametricBufferGeometry,\n    TetrahedronGeometry: TetrahedronGeometry,\n    TetrahedronBufferGeometry: TetrahedronBufferGeometry,\n    OctahedronGeometry: OctahedronGeometry,\n    OctahedronBufferGeometry: OctahedronBufferGeometry,\n    IcosahedronGeometry: IcosahedronGeometry,\n    IcosahedronBufferGeometry: IcosahedronBufferGeometry,\n    DodecahedronGeometry: DodecahedronGeometry,\n    DodecahedronBufferGeometry: DodecahedronBufferGeometry,\n    PolyhedronGeometry: PolyhedronGeometry,\n    PolyhedronBufferGeometry: PolyhedronBufferGeometry,\n    TubeGeometry: TubeGeometry,\n    TubeBufferGeometry: TubeBufferGeometry,\n    TorusKnotGeometry: TorusKnotGeometry,\n    TorusKnotBufferGeometry: TorusKnotBufferGeometry,\n    TorusGeometry: TorusGeometry,\n    TorusBufferGeometry: TorusBufferGeometry,\n    TextGeometry: TextGeometry,\n    TextBufferGeometry: TextBufferGeometry,\n    SphereGeometry: SphereGeometry,\n    SphereBufferGeometry: SphereBufferGeometry,\n    RingGeometry: RingGeometry,\n    RingBufferGeometry: RingBufferGeometry,\n    PlaneGeometry: PlaneGeometry,\n    PlaneBufferGeometry: PlaneBufferGeometry,\n    LatheGeometry: LatheGeometry,\n    LatheBufferGeometry: LatheBufferGeometry,\n    ShapeGeometry: ShapeGeometry,\n    ShapeBufferGeometry: ShapeBufferGeometry,\n    ExtrudeGeometry: ExtrudeGeometry,\n    ExtrudeBufferGeometry: ExtrudeBufferGeometry,\n    EdgesGeometry: EdgesGeometry,\n    ConeGeometry: ConeGeometry,\n    ConeBufferGeometry: ConeBufferGeometry,\n    CylinderGeometry: CylinderGeometry,\n    CylinderBufferGeometry: CylinderBufferGeometry,\n    CircleGeometry: CircleGeometry,\n    CircleBufferGeometry: CircleBufferGeometry,\n    BoxGeometry: BoxGeometry,\n    BoxBufferGeometry: BoxBufferGeometry\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * parameters = {\n *  color: <THREE.Color>,\n *  opacity: <float>\n * }\n */\nfunction ShadowMaterial(parameters) {\n    Material.call(this);\n    this.type = 'ShadowMaterial';\n    this.color = new Color(0x000000);\n    this.opacity = 1.0;\n    this.lights = true;\n    this.transparent = true;\n    this.setValues(parameters);\n}\nShadowMaterial.prototype = Object.create(Material.prototype);\nShadowMaterial.prototype.constructor = ShadowMaterial;\nShadowMaterial.prototype.isShadowMaterial = true;\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction RawShaderMaterial(parameters) {\n    ShaderMaterial.call(this, parameters);\n    this.type = 'RawShaderMaterial';\n}\nRawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);\nRawShaderMaterial.prototype.constructor = RawShaderMaterial;\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\nfunction MeshStandardMaterial(parameters) {\n    Material.call(this);\n    this.defines = { 'STANDARD': '' };\n    this.type = 'MeshStandardMaterial';\n    this.color = new Color(0xffffff); // diffuse\n    this.roughness = 0.5;\n    this.metalness = 0.5;\n    this.map = null;\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n    this.emissive = new Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n    this.bumpMap = null;\n    this.bumpScale = 1;\n    this.normalMap = null;\n    this.normalScale = new Vector2(1, 1);\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n    this.roughnessMap = null;\n    this.metalnessMap = null;\n    this.alphaMap = null;\n    this.envMap = null;\n    this.envMapIntensity = 1.0;\n    this.refractionRatio = 0.98;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n    this.setValues(parameters);\n}\nMeshStandardMaterial.prototype = Object.create(Material.prototype);\nMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\nMeshStandardMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.defines = { 'STANDARD': '' };\n    this.color.copy(source.color);\n    this.roughness = source.roughness;\n    this.metalness = source.metalness;\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.roughnessMap = source.roughnessMap;\n    this.metalnessMap = source.metalnessMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapIntensity = source.envMapIntensity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n    return this;\n};\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  reflectivity: <float>\n * }\n */\nfunction MeshPhysicalMaterial(parameters) {\n    MeshStandardMaterial.call(this);\n    this.defines = { 'PHYSICAL': '' };\n    this.type = 'MeshPhysicalMaterial';\n    this.reflectivity = 0.5; // maps to F0 = 0.04\n    this.clearCoat = 0.0;\n    this.clearCoatRoughness = 0.0;\n    this.setValues(parameters);\n}\nMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\nMeshPhysicalMaterial.prototype.copy = function (source) {\n    MeshStandardMaterial.prototype.copy.call(this, source);\n    this.defines = { 'PHYSICAL': '' };\n    this.reflectivity = source.reflectivity;\n    this.clearCoat = source.clearCoat;\n    this.clearCoatRoughness = source.clearCoatRoughness;\n    return this;\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\nfunction MeshPhongMaterial(parameters) {\n    Material.call(this);\n    this.type = 'MeshPhongMaterial';\n    this.color = new Color(0xffffff); // diffuse\n    this.specular = new Color(0x111111);\n    this.shininess = 30;\n    this.map = null;\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n    this.emissive = new Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n    this.bumpMap = null;\n    this.bumpScale = 1;\n    this.normalMap = null;\n    this.normalScale = new Vector2(1, 1);\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n    this.specularMap = null;\n    this.alphaMap = null;\n    this.envMap = null;\n    this.combine = MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n    this.setValues(parameters);\n}\nMeshPhongMaterial.prototype = Object.create(Material.prototype);\nMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\nMeshPhongMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.specular.copy(source.specular);\n    this.shininess = source.shininess;\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n    return this;\n};\n/**\n * @author takahirox / http://github.com/takahirox\n *\n * parameters = {\n *  gradientMap: new THREE.Texture( <Image> )\n * }\n */\nfunction MeshToonMaterial(parameters) {\n    MeshPhongMaterial.call(this);\n    this.defines = { 'TOON': '' };\n    this.type = 'MeshToonMaterial';\n    this.gradientMap = null;\n    this.setValues(parameters);\n}\nMeshToonMaterial.prototype = Object.create(MeshPhongMaterial.prototype);\nMeshToonMaterial.prototype.constructor = MeshToonMaterial;\nMeshToonMaterial.prototype.isMeshToonMaterial = true;\nMeshToonMaterial.prototype.copy = function (source) {\n    MeshPhongMaterial.prototype.copy.call(this, source);\n    this.gradientMap = source.gradientMap;\n    return this;\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  opacity: <float>,\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\nfunction MeshNormalMaterial(parameters) {\n    Material.call(this);\n    this.type = 'MeshNormalMaterial';\n    this.bumpMap = null;\n    this.bumpScale = 1;\n    this.normalMap = null;\n    this.normalScale = new Vector2(1, 1);\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.fog = false;\n    this.lights = false;\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n    this.setValues(parameters);\n}\nMeshNormalMaterial.prototype = Object.create(Material.prototype);\nMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\nMeshNormalMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n    return this;\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  skinning: <bool>,\n *  morphTargets: <bool>,\n *  morphNormals: <bool>\n * }\n */\nfunction MeshLambertMaterial(parameters) {\n    Material.call(this);\n    this.type = 'MeshLambertMaterial';\n    this.color = new Color(0xffffff); // diffuse\n    this.map = null;\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n    this.emissive = new Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n    this.specularMap = null;\n    this.alphaMap = null;\n    this.envMap = null;\n    this.combine = MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n    this.setValues(parameters);\n}\nMeshLambertMaterial.prototype = Object.create(Material.prototype);\nMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\nMeshLambertMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n    return this;\n};\n/**\n * @author alteredq / http://alteredqualia.com/\n *\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\nfunction LineDashedMaterial(parameters) {\n    LineBasicMaterial.call(this);\n    this.type = 'LineDashedMaterial';\n    this.scale = 1;\n    this.dashSize = 3;\n    this.gapSize = 1;\n    this.setValues(parameters);\n}\nLineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);\nLineDashedMaterial.prototype.constructor = LineDashedMaterial;\nLineDashedMaterial.prototype.isLineDashedMaterial = true;\nLineDashedMaterial.prototype.copy = function (source) {\n    LineBasicMaterial.prototype.copy.call(this, source);\n    this.scale = source.scale;\n    this.dashSize = source.dashSize;\n    this.gapSize = source.gapSize;\n    return this;\n};\nvar Materials = Object.freeze({\n    ShadowMaterial: ShadowMaterial,\n    SpriteMaterial: SpriteMaterial,\n    RawShaderMaterial: RawShaderMaterial,\n    ShaderMaterial: ShaderMaterial,\n    PointsMaterial: PointsMaterial,\n    MeshPhysicalMaterial: MeshPhysicalMaterial,\n    MeshStandardMaterial: MeshStandardMaterial,\n    MeshPhongMaterial: MeshPhongMaterial,\n    MeshToonMaterial: MeshToonMaterial,\n    MeshNormalMaterial: MeshNormalMaterial,\n    MeshLambertMaterial: MeshLambertMaterial,\n    MeshDepthMaterial: MeshDepthMaterial,\n    MeshDistanceMaterial: MeshDistanceMaterial,\n    MeshBasicMaterial: MeshBasicMaterial,\n    LineDashedMaterial: LineDashedMaterial,\n    LineBasicMaterial: LineBasicMaterial,\n    Material: Material\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nvar Cache = {\n    enabled: false,\n    files: {},\n    add: function (key, file) {\n        if (this.enabled === false)\n            return;\n        // console.log( 'THREE.Cache', 'Adding key:', key );\n        this.files[key] = file;\n    },\n    get: function (key) {\n        if (this.enabled === false)\n            return;\n        // console.log( 'THREE.Cache', 'Checking key:', key );\n        return this.files[key];\n    },\n    remove: function (key) {\n        delete this.files[key];\n    },\n    clear: function () {\n        this.files = {};\n    }\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction LoadingManager(onLoad, onProgress, onError) {\n    var scope = this;\n    var isLoading = false;\n    var itemsLoaded = 0;\n    var itemsTotal = 0;\n    var urlModifier = undefined;\n    this.onStart = undefined;\n    this.onLoad = onLoad;\n    this.onProgress = onProgress;\n    this.onError = onError;\n    this.itemStart = function (url) {\n        itemsTotal++;\n        if (isLoading === false) {\n            if (scope.onStart !== undefined) {\n                scope.onStart(url, itemsLoaded, itemsTotal);\n            }\n        }\n        isLoading = true;\n    };\n    this.itemEnd = function (url) {\n        itemsLoaded++;\n        if (scope.onProgress !== undefined) {\n            scope.onProgress(url, itemsLoaded, itemsTotal);\n        }\n        if (itemsLoaded === itemsTotal) {\n            isLoading = false;\n            if (scope.onLoad !== undefined) {\n                scope.onLoad();\n            }\n        }\n    };\n    this.itemError = function (url) {\n        if (scope.onError !== undefined) {\n            scope.onError(url);\n        }\n    };\n    this.resolveURL = function (url) {\n        if (urlModifier) {\n            return urlModifier(url);\n        }\n        return url;\n    };\n    this.setURLModifier = function (transform) {\n        urlModifier = transform;\n        return this;\n    };\n}\nvar DefaultLoadingManager = new LoadingManager();\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nvar loading = {};\nfunction FileLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n}\nObject.assign(FileLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n        if (url === undefined)\n            url = '';\n        if (this.path !== undefined)\n            url = this.path + url;\n        url = this.manager.resolveURL(url);\n        var scope = this;\n        var cached = Cache.get(url);\n        if (cached !== undefined) {\n            scope.manager.itemStart(url);\n            setTimeout(function () {\n                if (onLoad)\n                    onLoad(cached);\n                scope.manager.itemEnd(url);\n            }, 0);\n            return cached;\n        }\n        // Check if request is duplicate\n        if (loading[url] !== undefined) {\n            loading[url].push({\n                onLoad: onLoad,\n                onProgress: onProgress,\n                onError: onError\n            });\n            return;\n        }\n        // Check for data: URI\n        var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n        var dataUriRegexResult = url.match(dataUriRegex);\n        // Safari can not handle Data URIs through XMLHttpRequest so process manually\n        if (dataUriRegexResult) {\n            var mimeType = dataUriRegexResult[1];\n            var isBase64 = !!dataUriRegexResult[2];\n            var data = dataUriRegexResult[3];\n            data = window.decodeURIComponent(data);\n            if (isBase64)\n                data = window.atob(data);\n            try {\n                var response;\n                var responseType = (this.responseType || '').toLowerCase();\n                switch (responseType) {\n                    case 'arraybuffer':\n                    case 'blob':\n                        var view = new Uint8Array(data.length);\n                        for (var i = 0; i < data.length; i++) {\n                            view[i] = data.charCodeAt(i);\n                        }\n                        if (responseType === 'blob') {\n                            response = new Blob([view.buffer], { type: mimeType });\n                        }\n                        else {\n                            response = view.buffer;\n                        }\n                        break;\n                    case 'document':\n                        var parser = new DOMParser();\n                        response = parser.parseFromString(data, mimeType);\n                        break;\n                    case 'json':\n                        response = JSON.parse(data);\n                        break;\n                    default: // 'text' or other\n                        response = data;\n                        break;\n                }\n                // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n                window.setTimeout(function () {\n                    if (onLoad)\n                        onLoad(response);\n                    scope.manager.itemEnd(url);\n                }, 0);\n            }\n            catch (error) {\n                // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n                window.setTimeout(function () {\n                    if (onError)\n                        onError(error);\n                    scope.manager.itemEnd(url);\n                    scope.manager.itemError(url);\n                }, 0);\n            }\n        }\n        else {\n            // Initialise array for duplicate requests\n            loading[url] = [];\n            loading[url].push({\n                onLoad: onLoad,\n                onProgress: onProgress,\n                onError: onError\n            });\n            var request = new XMLHttpRequest();\n            request.open('GET', url, true);\n            request.addEventListener('load', function (event) {\n                var response = this.response;\n                Cache.add(url, response);\n                var callbacks = loading[url];\n                delete loading[url];\n                if (this.status === 200) {\n                    for (var i = 0, il = callbacks.length; i < il; i++) {\n                        var callback = callbacks[i];\n                        if (callback.onLoad)\n                            callback.onLoad(response);\n                    }\n                    scope.manager.itemEnd(url);\n                }\n                else if (this.status === 0) {\n                    // Some browsers return HTTP Status 0 when using non-http protocol\n                    // e.g. 'file://' or 'data://'. Handle as success.\n                    console.warn('THREE.FileLoader: HTTP Status 0 received.');\n                    for (var i = 0, il = callbacks.length; i < il; i++) {\n                        var callback = callbacks[i];\n                        if (callback.onLoad)\n                            callback.onLoad(response);\n                    }\n                    scope.manager.itemEnd(url);\n                }\n                else {\n                    for (var i = 0, il = callbacks.length; i < il; i++) {\n                        var callback = callbacks[i];\n                        if (callback.onError)\n                            callback.onError(event);\n                    }\n                    scope.manager.itemEnd(url);\n                    scope.manager.itemError(url);\n                }\n            }, false);\n            request.addEventListener('progress', function (event) {\n                var callbacks = loading[url];\n                for (var i = 0, il = callbacks.length; i < il; i++) {\n                    var callback = callbacks[i];\n                    if (callback.onProgress)\n                        callback.onProgress(event);\n                }\n            }, false);\n            request.addEventListener('error', function (event) {\n                var callbacks = loading[url];\n                delete loading[url];\n                for (var i = 0, il = callbacks.length; i < il; i++) {\n                    var callback = callbacks[i];\n                    if (callback.onError)\n                        callback.onError(event);\n                }\n                scope.manager.itemEnd(url);\n                scope.manager.itemError(url);\n            }, false);\n            if (this.responseType !== undefined)\n                request.responseType = this.responseType;\n            if (this.withCredentials !== undefined)\n                request.withCredentials = this.withCredentials;\n            if (request.overrideMimeType)\n                request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n            for (var header in this.requestHeader) {\n                request.setRequestHeader(header, this.requestHeader[header]);\n            }\n            request.send(null);\n        }\n        scope.manager.itemStart(url);\n        return request;\n    },\n    setPath: function (value) {\n        this.path = value;\n        return this;\n    },\n    setResponseType: function (value) {\n        this.responseType = value;\n        return this;\n    },\n    setWithCredentials: function (value) {\n        this.withCredentials = value;\n        return this;\n    },\n    setMimeType: function (value) {\n        this.mimeType = value;\n        return this;\n    },\n    setRequestHeader: function (value) {\n        this.requestHeader = value;\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n *\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n */\nfunction CompressedTextureLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n    // override in sub classes\n    this._parser = null;\n}\nObject.assign(CompressedTextureLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n        var scope = this;\n        var images = [];\n        var texture = new CompressedTexture();\n        texture.image = images;\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType('arraybuffer');\n        function loadTexture(i) {\n            loader.load(url[i], function (buffer) {\n                var texDatas = scope._parser(buffer, true);\n                images[i] = {\n                    width: texDatas.width,\n                    height: texDatas.height,\n                    format: texDatas.format,\n                    mipmaps: texDatas.mipmaps\n                };\n                loaded += 1;\n                if (loaded === 6) {\n                    if (texDatas.mipmapCount === 1)\n                        texture.minFilter = LinearFilter;\n                    texture.format = texDatas.format;\n                    texture.needsUpdate = true;\n                    if (onLoad)\n                        onLoad(texture);\n                }\n            }, onProgress, onError);\n        }\n        if (Array.isArray(url)) {\n            var loaded = 0;\n            for (var i = 0, il = url.length; i < il; ++i) {\n                loadTexture(i);\n            }\n        }\n        else {\n            // compressed cubemap texture stored in a single DDS file\n            loader.load(url, function (buffer) {\n                var texDatas = scope._parser(buffer, true);\n                if (texDatas.isCubemap) {\n                    var faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n                    for (var f = 0; f < faces; f++) {\n                        images[f] = { mipmaps: [] };\n                        for (var i = 0; i < texDatas.mipmapCount; i++) {\n                            images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n                            images[f].format = texDatas.format;\n                            images[f].width = texDatas.width;\n                            images[f].height = texDatas.height;\n                        }\n                    }\n                }\n                else {\n                    texture.image.width = texDatas.width;\n                    texture.image.height = texDatas.height;\n                    texture.mipmaps = texDatas.mipmaps;\n                }\n                if (texDatas.mipmapCount === 1) {\n                    texture.minFilter = LinearFilter;\n                }\n                texture.format = texDatas.format;\n                texture.needsUpdate = true;\n                if (onLoad)\n                    onLoad(texture);\n            }, onProgress, onError);\n        }\n        return texture;\n    },\n    setPath: function (value) {\n        this.path = value;\n        return this;\n    }\n});\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n */\nfunction DataTextureLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n    // override in sub classes\n    this._parser = null;\n}\nObject.assign(DataTextureLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n        var scope = this;\n        var texture = new DataTexture();\n        var loader = new FileLoader(this.manager);\n        loader.setResponseType('arraybuffer');\n        loader.load(url, function (buffer) {\n            var texData = scope._parser(buffer);\n            if (!texData)\n                return;\n            if (undefined !== texData.image) {\n                texture.image = texData.image;\n            }\n            else if (undefined !== texData.data) {\n                texture.image.width = texData.width;\n                texture.image.height = texData.height;\n                texture.image.data = texData.data;\n            }\n            texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n            texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n            texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n            texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;\n            texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n            if (undefined !== texData.format) {\n                texture.format = texData.format;\n            }\n            if (undefined !== texData.type) {\n                texture.type = texData.type;\n            }\n            if (undefined !== texData.mipmaps) {\n                texture.mipmaps = texData.mipmaps;\n            }\n            if (1 === texData.mipmapCount) {\n                texture.minFilter = LinearFilter;\n            }\n            texture.needsUpdate = true;\n            if (onLoad)\n                onLoad(texture, texData);\n        }, onProgress, onError);\n        return texture;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction ImageLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n}\nObject.assign(ImageLoader.prototype, {\n    crossOrigin: 'Anonymous',\n    load: function (url, onLoad, onProgress, onError) {\n        if (url === undefined)\n            url = '';\n        if (this.path !== undefined)\n            url = this.path + url;\n        url = this.manager.resolveURL(url);\n        var scope = this;\n        var cached = Cache.get(url);\n        if (cached !== undefined) {\n            scope.manager.itemStart(url);\n            setTimeout(function () {\n                if (onLoad)\n                    onLoad(cached);\n                scope.manager.itemEnd(url);\n            }, 0);\n            return cached;\n        }\n        var image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n        image.addEventListener('load', function () {\n            Cache.add(url, this);\n            if (onLoad)\n                onLoad(this);\n            scope.manager.itemEnd(url);\n        }, false);\n        /*\n        image.addEventListener( 'progress', function ( event ) {\n\n            if ( onProgress ) onProgress( event );\n\n        }, false );\n        */\n        image.addEventListener('error', function (event) {\n            if (onError)\n                onError(event);\n            scope.manager.itemEnd(url);\n            scope.manager.itemError(url);\n        }, false);\n        if (url.substr(0, 5) !== 'data:') {\n            if (this.crossOrigin !== undefined)\n                image.crossOrigin = this.crossOrigin;\n        }\n        scope.manager.itemStart(url);\n        image.src = url;\n        return image;\n    },\n    setCrossOrigin: function (value) {\n        this.crossOrigin = value;\n        return this;\n    },\n    setPath: function (value) {\n        this.path = value;\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction CubeTextureLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n}\nObject.assign(CubeTextureLoader.prototype, {\n    crossOrigin: 'Anonymous',\n    load: function (urls, onLoad, onProgress, onError) {\n        var texture = new CubeTexture();\n        var loader = new ImageLoader(this.manager);\n        loader.setCrossOrigin(this.crossOrigin);\n        loader.setPath(this.path);\n        var loaded = 0;\n        function loadTexture(i) {\n            loader.load(urls[i], function (image) {\n                texture.images[i] = image;\n                loaded++;\n                if (loaded === 6) {\n                    texture.needsUpdate = true;\n                    if (onLoad)\n                        onLoad(texture);\n                }\n            }, undefined, onError);\n        }\n        for (var i = 0; i < urls.length; ++i) {\n            loadTexture(i);\n        }\n        return texture;\n    },\n    setCrossOrigin: function (value) {\n        this.crossOrigin = value;\n        return this;\n    },\n    setPath: function (value) {\n        this.path = value;\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction TextureLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n}\nObject.assign(TextureLoader.prototype, {\n    crossOrigin: 'Anonymous',\n    load: function (url, onLoad, onProgress, onError) {\n        var texture = new Texture();\n        var loader = new ImageLoader(this.manager);\n        loader.setCrossOrigin(this.crossOrigin);\n        loader.setPath(this.path);\n        loader.load(url, function (image) {\n            texture.image = image;\n            // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n            var isJPEG = url.search(/\\.(jpg|jpeg)$/) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n            texture.format = isJPEG ? RGBFormat : RGBAFormat;\n            texture.needsUpdate = true;\n            if (onLoad !== undefined) {\n                onLoad(texture);\n            }\n        }, onProgress, onError);\n        return texture;\n    },\n    setCrossOrigin: function (value) {\n        this.crossOrigin = value;\n        return this;\n    },\n    setPath: function (value) {\n        this.path = value;\n        return this;\n    }\n});\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Extensible curve object\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n/**************************************************************\n *\tAbstract Curve base class\n **************************************************************/\nfunction Curve() {\n    this.type = 'Curve';\n    this.arcLengthDivisions = 200;\n}\nObject.assign(Curve.prototype, {\n    // Virtual base class method to overwrite and implement in subclasses\n    //\t- t [0 .. 1]\n    getPoint: function ( /* t, optionalTarget */) {\n        console.warn('THREE.Curve: .getPoint() not implemented.');\n        return null;\n    },\n    // Get point at relative position in curve according to arc length\n    // - u [0 .. 1]\n    getPointAt: function (u, optionalTarget) {\n        var t = this.getUtoTmapping(u);\n        return this.getPoint(t, optionalTarget);\n    },\n    // Get sequence of points using getPoint( t )\n    getPoints: function (divisions) {\n        if (divisions === undefined)\n            divisions = 5;\n        var points = [];\n        for (var d = 0; d <= divisions; d++) {\n            points.push(this.getPoint(d / divisions));\n        }\n        return points;\n    },\n    // Get sequence of points using getPointAt( u )\n    getSpacedPoints: function (divisions) {\n        if (divisions === undefined)\n            divisions = 5;\n        var points = [];\n        for (var d = 0; d <= divisions; d++) {\n            points.push(this.getPointAt(d / divisions));\n        }\n        return points;\n    },\n    // Get total curve arc length\n    getLength: function () {\n        var lengths = this.getLengths();\n        return lengths[lengths.length - 1];\n    },\n    // Get list of cumulative segment lengths\n    getLengths: function (divisions) {\n        if (divisions === undefined)\n            divisions = this.arcLengthDivisions;\n        if (this.cacheArcLengths &&\n            (this.cacheArcLengths.length === divisions + 1) &&\n            !this.needsUpdate) {\n            return this.cacheArcLengths;\n        }\n        this.needsUpdate = false;\n        var cache = [];\n        var current, last = this.getPoint(0);\n        var p, sum = 0;\n        cache.push(0);\n        for (p = 1; p <= divisions; p++) {\n            current = this.getPoint(p / divisions);\n            sum += current.distanceTo(last);\n            cache.push(sum);\n            last = current;\n        }\n        this.cacheArcLengths = cache;\n        return cache; // { sums: cache, sum: sum }; Sum is in the last element.\n    },\n    updateArcLengths: function () {\n        this.needsUpdate = true;\n        this.getLengths();\n    },\n    // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n    getUtoTmapping: function (u, distance) {\n        var arcLengths = this.getLengths();\n        var i = 0, il = arcLengths.length;\n        var targetArcLength; // The targeted u distance value to get\n        if (distance) {\n            targetArcLength = distance;\n        }\n        else {\n            targetArcLength = u * arcLengths[il - 1];\n        }\n        // binary search for the index with largest value smaller than target u distance\n        var low = 0, high = il - 1, comparison;\n        while (low <= high) {\n            i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n            comparison = arcLengths[i] - targetArcLength;\n            if (comparison < 0) {\n                low = i + 1;\n            }\n            else if (comparison > 0) {\n                high = i - 1;\n            }\n            else {\n                high = i;\n                break;\n                // DONE\n            }\n        }\n        i = high;\n        if (arcLengths[i] === targetArcLength) {\n            return i / (il - 1);\n        }\n        // we could get finer grain at lengths, or use simple interpolation between two points\n        var lengthBefore = arcLengths[i];\n        var lengthAfter = arcLengths[i + 1];\n        var segmentLength = lengthAfter - lengthBefore;\n        // determine where we are between the 'before' and 'after' points\n        var segmentFraction = (targetArcLength - lengthBefore) / segmentLength;\n        // add that fractional amount to t\n        var t = (i + segmentFraction) / (il - 1);\n        return t;\n    },\n    // Returns a unit vector tangent at t\n    // In case any sub curve does not implement its tangent derivation,\n    // 2 points a small delta apart will be used to find its gradient\n    // which seems to give a reasonable approximation\n    getTangent: function (t) {\n        var delta = 0.0001;\n        var t1 = t - delta;\n        var t2 = t + delta;\n        // Capping in case of danger\n        if (t1 < 0)\n            t1 = 0;\n        if (t2 > 1)\n            t2 = 1;\n        var pt1 = this.getPoint(t1);\n        var pt2 = this.getPoint(t2);\n        var vec = pt2.clone().sub(pt1);\n        return vec.normalize();\n    },\n    getTangentAt: function (u) {\n        var t = this.getUtoTmapping(u);\n        return this.getTangent(t);\n    },\n    computeFrenetFrames: function (segments, closed) {\n        // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n        var normal = new Vector3();\n        var tangents = [];\n        var normals = [];\n        var binormals = [];\n        var vec = new Vector3();\n        var mat = new Matrix4();\n        var i, u, theta;\n        // compute the tangent vectors for each segment on the curve\n        for (i = 0; i <= segments; i++) {\n            u = i / segments;\n            tangents[i] = this.getTangentAt(u);\n            tangents[i].normalize();\n        }\n        // select an initial normal vector perpendicular to the first tangent vector,\n        // and in the direction of the minimum tangent xyz component\n        normals[0] = new Vector3();\n        binormals[0] = new Vector3();\n        var min = Number.MAX_VALUE;\n        var tx = Math.abs(tangents[0].x);\n        var ty = Math.abs(tangents[0].y);\n        var tz = Math.abs(tangents[0].z);\n        if (tx <= min) {\n            min = tx;\n            normal.set(1, 0, 0);\n        }\n        if (ty <= min) {\n            min = ty;\n            normal.set(0, 1, 0);\n        }\n        if (tz <= min) {\n            normal.set(0, 0, 1);\n        }\n        vec.crossVectors(tangents[0], normal).normalize();\n        normals[0].crossVectors(tangents[0], vec);\n        binormals[0].crossVectors(tangents[0], normals[0]);\n        // compute the slowly-varying normal and binormal vectors for each segment on the curve\n        for (i = 1; i <= segments; i++) {\n            normals[i] = normals[i - 1].clone();\n            binormals[i] = binormals[i - 1].clone();\n            vec.crossVectors(tangents[i - 1], tangents[i]);\n            if (vec.length() > Number.EPSILON) {\n                vec.normalize();\n                theta = Math.acos(_Math.clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n                normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n            }\n            binormals[i].crossVectors(tangents[i], normals[i]);\n        }\n        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n        if (closed === true) {\n            theta = Math.acos(_Math.clamp(normals[0].dot(normals[segments]), -1, 1));\n            theta /= segments;\n            if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n                theta = -theta;\n            }\n            for (i = 1; i <= segments; i++) {\n                // twist a little...\n                normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n                binormals[i].crossVectors(tangents[i], normals[i]);\n            }\n        }\n        return {\n            tangents: tangents,\n            normals: normals,\n            binormals: binormals\n        };\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (source) {\n        this.arcLengthDivisions = source.arcLengthDivisions;\n        return this;\n    },\n    toJSON: function () {\n        var data = {\n            metadata: {\n                version: 4.5,\n                type: 'Curve',\n                generator: 'Curve.toJSON'\n            }\n        };\n        data.arcLengthDivisions = this.arcLengthDivisions;\n        data.type = this.type;\n        return data;\n    },\n    fromJSON: function (json) {\n        this.arcLengthDivisions = json.arcLengthDivisions;\n        return this;\n    }\n});\nfunction EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    Curve.call(this);\n    this.type = 'EllipseCurve';\n    this.aX = aX || 0;\n    this.aY = aY || 0;\n    this.xRadius = xRadius || 1;\n    this.yRadius = yRadius || 1;\n    this.aStartAngle = aStartAngle || 0;\n    this.aEndAngle = aEndAngle || 2 * Math.PI;\n    this.aClockwise = aClockwise || false;\n    this.aRotation = aRotation || 0;\n}\nEllipseCurve.prototype = Object.create(Curve.prototype);\nEllipseCurve.prototype.constructor = EllipseCurve;\nEllipseCurve.prototype.isEllipseCurve = true;\nEllipseCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n    var twoPi = Math.PI * 2;\n    var deltaAngle = this.aEndAngle - this.aStartAngle;\n    var samePoints = Math.abs(deltaAngle) < Number.EPSILON;\n    // ensures that deltaAngle is 0 .. 2 PI\n    while (deltaAngle < 0)\n        deltaAngle += twoPi;\n    while (deltaAngle > twoPi)\n        deltaAngle -= twoPi;\n    if (deltaAngle < Number.EPSILON) {\n        if (samePoints) {\n            deltaAngle = 0;\n        }\n        else {\n            deltaAngle = twoPi;\n        }\n    }\n    if (this.aClockwise === true && !samePoints) {\n        if (deltaAngle === twoPi) {\n            deltaAngle = -twoPi;\n        }\n        else {\n            deltaAngle = deltaAngle - twoPi;\n        }\n    }\n    var angle = this.aStartAngle + t * deltaAngle;\n    var x = this.aX + this.xRadius * Math.cos(angle);\n    var y = this.aY + this.yRadius * Math.sin(angle);\n    if (this.aRotation !== 0) {\n        var cos = Math.cos(this.aRotation);\n        var sin = Math.sin(this.aRotation);\n        var tx = x - this.aX;\n        var ty = y - this.aY;\n        // Rotate the point about the center of the ellipse.\n        x = tx * cos - ty * sin + this.aX;\n        y = tx * sin + ty * cos + this.aY;\n    }\n    return point.set(x, y);\n};\nEllipseCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n    this.aX = source.aX;\n    this.aY = source.aY;\n    this.xRadius = source.xRadius;\n    this.yRadius = source.yRadius;\n    this.aStartAngle = source.aStartAngle;\n    this.aEndAngle = source.aEndAngle;\n    this.aClockwise = source.aClockwise;\n    this.aRotation = source.aRotation;\n    return this;\n};\nEllipseCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n    data.aX = this.aX;\n    data.aY = this.aY;\n    data.xRadius = this.xRadius;\n    data.yRadius = this.yRadius;\n    data.aStartAngle = this.aStartAngle;\n    data.aEndAngle = this.aEndAngle;\n    data.aClockwise = this.aClockwise;\n    data.aRotation = this.aRotation;\n    return data;\n};\nEllipseCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n    this.aX = json.aX;\n    this.aY = json.aY;\n    this.xRadius = json.xRadius;\n    this.yRadius = json.yRadius;\n    this.aStartAngle = json.aStartAngle;\n    this.aEndAngle = json.aEndAngle;\n    this.aClockwise = json.aClockwise;\n    this.aRotation = json.aRotation;\n    return this;\n};\nfunction ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n    this.type = 'ArcCurve';\n}\nArcCurve.prototype = Object.create(EllipseCurve.prototype);\nArcCurve.prototype.constructor = ArcCurve;\nArcCurve.prototype.isArcCurve = true;\n/**\n * @author zz85 https://github.com/zz85\n *\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\nfunction CubicPoly() {\n    var c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n    /*\n     * Compute coefficients for a cubic polynomial\n     *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n     * such that\n     *   p(0) = x0, p(1) = x1\n     *  and\n     *   p'(0) = t0, p'(1) = t1.\n     */\n    function init(x0, x1, t0, t1) {\n        c0 = x0;\n        c1 = t0;\n        c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n        c3 = 2 * x0 - 2 * x1 + t0 + t1;\n    }\n    return {\n        initCatmullRom: function (x0, x1, x2, x3, tension) {\n            init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n        },\n        initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n            // compute tangents when parameterized in [t1,t2]\n            var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n            var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;\n            // rescale tangents for parametrization in [0,1]\n            t1 *= dt1;\n            t2 *= dt1;\n            init(x1, x2, t1, t2);\n        },\n        calc: function (t) {\n            var t2 = t * t;\n            var t3 = t2 * t;\n            return c0 + c1 * t + c2 * t2 + c3 * t3;\n        }\n    };\n}\n//\nvar tmp = new Vector3();\nvar px = new CubicPoly();\nvar py = new CubicPoly();\nvar pz = new CubicPoly();\nfunction CatmullRomCurve3(points, closed, curveType, tension) {\n    Curve.call(this);\n    this.type = 'CatmullRomCurve3';\n    this.points = points || [];\n    this.closed = closed || false;\n    this.curveType = curveType || 'centripetal';\n    this.tension = tension || 0.5;\n}\nCatmullRomCurve3.prototype = Object.create(Curve.prototype);\nCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\nCatmullRomCurve3.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    var points = this.points;\n    var l = points.length;\n    var p = (l - (this.closed ? 0 : 1)) * t;\n    var intPoint = Math.floor(p);\n    var weight = p - intPoint;\n    if (this.closed) {\n        intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / points.length) + 1) * points.length;\n    }\n    else if (weight === 0 && intPoint === l - 1) {\n        intPoint = l - 2;\n        weight = 1;\n    }\n    var p0, p1, p2, p3; // 4 points\n    if (this.closed || intPoint > 0) {\n        p0 = points[(intPoint - 1) % l];\n    }\n    else {\n        // extrapolate first point\n        tmp.subVectors(points[0], points[1]).add(points[0]);\n        p0 = tmp;\n    }\n    p1 = points[intPoint % l];\n    p2 = points[(intPoint + 1) % l];\n    if (this.closed || intPoint + 2 < l) {\n        p3 = points[(intPoint + 2) % l];\n    }\n    else {\n        // extrapolate last point\n        tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n        p3 = tmp;\n    }\n    if (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n        // init Centripetal / Chordal Catmull-Rom\n        var pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n        var dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n        var dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n        var dt2 = Math.pow(p2.distanceToSquared(p3), pow);\n        // safety check for repeated points\n        if (dt1 < 1e-4)\n            dt1 = 1.0;\n        if (dt0 < 1e-4)\n            dt0 = dt1;\n        if (dt2 < 1e-4)\n            dt2 = dt1;\n        px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n        py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n        pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n    }\n    else if (this.curveType === 'catmullrom') {\n        px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n        py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n        pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n    }\n    point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n    return point;\n};\nCatmullRomCurve3.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n    this.points = [];\n    for (var i = 0, l = source.points.length; i < l; i++) {\n        var point = source.points[i];\n        this.points.push(point.clone());\n    }\n    this.closed = source.closed;\n    this.curveType = source.curveType;\n    this.tension = source.tension;\n    return this;\n};\nCatmullRomCurve3.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n    data.points = [];\n    for (var i = 0, l = this.points.length; i < l; i++) {\n        var point = this.points[i];\n        data.points.push(point.toArray());\n    }\n    data.closed = this.closed;\n    data.curveType = this.curveType;\n    data.tension = this.tension;\n    return data;\n};\nCatmullRomCurve3.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n    this.points = [];\n    for (var i = 0, l = json.points.length; i < l; i++) {\n        var point = json.points[i];\n        this.points.push(new Vector3().fromArray(point));\n    }\n    this.closed = json.closed;\n    this.curveType = json.curveType;\n    this.tension = json.tension;\n    return this;\n};\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n * Bezier Curves formulas obtained from\n * http://en.wikipedia.org/wiki/Bézier_curve\n */\nfunction CatmullRom(t, p0, p1, p2, p3) {\n    var v0 = (p2 - p0) * 0.5;\n    var v1 = (p3 - p1) * 0.5;\n    var t2 = t * t;\n    var t3 = t * t2;\n    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n}\n//\nfunction QuadraticBezierP0(t, p) {\n    var k = 1 - t;\n    return k * k * p;\n}\nfunction QuadraticBezierP1(t, p) {\n    return 2 * (1 - t) * t * p;\n}\nfunction QuadraticBezierP2(t, p) {\n    return t * t * p;\n}\nfunction QuadraticBezier(t, p0, p1, p2) {\n    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) +\n        QuadraticBezierP2(t, p2);\n}\n//\nfunction CubicBezierP0(t, p) {\n    var k = 1 - t;\n    return k * k * k * p;\n}\nfunction CubicBezierP1(t, p) {\n    var k = 1 - t;\n    return 3 * k * k * t * p;\n}\nfunction CubicBezierP2(t, p) {\n    return 3 * (1 - t) * t * t * p;\n}\nfunction CubicBezierP3(t, p) {\n    return t * t * t * p;\n}\nfunction CubicBezier(t, p0, p1, p2, p3) {\n    return CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) +\n        CubicBezierP3(t, p3);\n}\nfunction CubicBezierCurve(v0, v1, v2, v3) {\n    Curve.call(this);\n    this.type = 'CubicBezierCurve';\n    this.v0 = v0 || new Vector2();\n    this.v1 = v1 || new Vector2();\n    this.v2 = v2 || new Vector2();\n    this.v3 = v3 || new Vector2();\n}\nCubicBezierCurve.prototype = Object.create(Curve.prototype);\nCubicBezierCurve.prototype.constructor = CubicBezierCurve;\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\nCubicBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n    var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n    return point;\n};\nCubicBezierCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    this.v3.copy(source.v3);\n    return this;\n};\nCubicBezierCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    data.v3 = this.v3.toArray();\n    return data;\n};\nCubicBezierCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    this.v3.fromArray(json.v3);\n    return this;\n};\nfunction CubicBezierCurve3(v0, v1, v2, v3) {\n    Curve.call(this);\n    this.type = 'CubicBezierCurve3';\n    this.v0 = v0 || new Vector3();\n    this.v1 = v1 || new Vector3();\n    this.v2 = v2 || new Vector3();\n    this.v3 = v3 || new Vector3();\n}\nCubicBezierCurve3.prototype = Object.create(Curve.prototype);\nCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\nCubicBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n    point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n    return point;\n};\nCubicBezierCurve3.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    this.v3.copy(source.v3);\n    return this;\n};\nCubicBezierCurve3.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    data.v3 = this.v3.toArray();\n    return data;\n};\nCubicBezierCurve3.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    this.v3.fromArray(json.v3);\n    return this;\n};\nfunction LineCurve(v1, v2) {\n    Curve.call(this);\n    this.type = 'LineCurve';\n    this.v1 = v1 || new Vector2();\n    this.v2 = v2 || new Vector2();\n}\nLineCurve.prototype = Object.create(Curve.prototype);\nLineCurve.prototype.constructor = LineCurve;\nLineCurve.prototype.isLineCurve = true;\nLineCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n    if (t === 1) {\n        point.copy(this.v2);\n    }\n    else {\n        point.copy(this.v2).sub(this.v1);\n        point.multiplyScalar(t).add(this.v1);\n    }\n    return point;\n};\n// Line curve is linear, so we can overwrite default getPointAt\nLineCurve.prototype.getPointAt = function (u, optionalTarget) {\n    return this.getPoint(u, optionalTarget);\n};\nLineCurve.prototype.getTangent = function ( /* t */) {\n    var tangent = this.v2.clone().sub(this.v1);\n    return tangent.normalize();\n};\nLineCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n};\nLineCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n};\nLineCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n};\nfunction LineCurve3(v1, v2) {\n    Curve.call(this);\n    this.type = 'LineCurve3';\n    this.v1 = v1 || new Vector3();\n    this.v2 = v2 || new Vector3();\n}\nLineCurve3.prototype = Object.create(Curve.prototype);\nLineCurve3.prototype.constructor = LineCurve3;\nLineCurve3.prototype.isLineCurve3 = true;\nLineCurve3.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    if (t === 1) {\n        point.copy(this.v2);\n    }\n    else {\n        point.copy(this.v2).sub(this.v1);\n        point.multiplyScalar(t).add(this.v1);\n    }\n    return point;\n};\n// Line curve is linear, so we can overwrite default getPointAt\nLineCurve3.prototype.getPointAt = function (u, optionalTarget) {\n    return this.getPoint(u, optionalTarget);\n};\nLineCurve3.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n};\nLineCurve3.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n};\nLineCurve3.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n};\nfunction QuadraticBezierCurve(v0, v1, v2) {\n    Curve.call(this);\n    this.type = 'QuadraticBezierCurve';\n    this.v0 = v0 || new Vector2();\n    this.v1 = v1 || new Vector2();\n    this.v2 = v2 || new Vector2();\n}\nQuadraticBezierCurve.prototype = Object.create(Curve.prototype);\nQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\nQuadraticBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n    var v0 = this.v0, v1 = this.v1, v2 = this.v2;\n    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n    return point;\n};\nQuadraticBezierCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n};\nQuadraticBezierCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n};\nQuadraticBezierCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n};\nfunction QuadraticBezierCurve3(v0, v1, v2) {\n    Curve.call(this);\n    this.type = 'QuadraticBezierCurve3';\n    this.v0 = v0 || new Vector3();\n    this.v1 = v1 || new Vector3();\n    this.v2 = v2 || new Vector3();\n}\nQuadraticBezierCurve3.prototype = Object.create(Curve.prototype);\nQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\nQuadraticBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n    var v0 = this.v0, v1 = this.v1, v2 = this.v2;\n    point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n    return point;\n};\nQuadraticBezierCurve3.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    return this;\n};\nQuadraticBezierCurve3.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    return data;\n};\nQuadraticBezierCurve3.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    return this;\n};\nfunction SplineCurve(points /* array of Vector2 */) {\n    Curve.call(this);\n    this.type = 'SplineCurve';\n    this.points = points || [];\n}\nSplineCurve.prototype = Object.create(Curve.prototype);\nSplineCurve.prototype.constructor = SplineCurve;\nSplineCurve.prototype.isSplineCurve = true;\nSplineCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n    var points = this.points;\n    var p = (points.length - 1) * t;\n    var intPoint = Math.floor(p);\n    var weight = p - intPoint;\n    var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n    var p1 = points[intPoint];\n    var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n    point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n    return point;\n};\nSplineCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n    this.points = [];\n    for (var i = 0, l = source.points.length; i < l; i++) {\n        var point = source.points[i];\n        this.points.push(point.clone());\n    }\n    return this;\n};\nSplineCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n    data.points = [];\n    for (var i = 0, l = this.points.length; i < l; i++) {\n        var point = this.points[i];\n        data.points.push(point.toArray());\n    }\n    return data;\n};\nSplineCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n    this.points = [];\n    for (var i = 0, l = json.points.length; i < l; i++) {\n        var point = json.points[i];\n        this.points.push(new Vector2().fromArray(point));\n    }\n    return this;\n};\nvar Curves = Object.freeze({\n    ArcCurve: ArcCurve,\n    CatmullRomCurve3: CatmullRomCurve3,\n    CubicBezierCurve: CubicBezierCurve,\n    CubicBezierCurve3: CubicBezierCurve3,\n    EllipseCurve: EllipseCurve,\n    LineCurve: LineCurve,\n    LineCurve3: LineCurve3,\n    QuadraticBezierCurve: QuadraticBezierCurve,\n    QuadraticBezierCurve3: QuadraticBezierCurve3,\n    SplineCurve: SplineCurve\n});\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n *\n **/\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\nfunction CurvePath() {\n    Curve.call(this);\n    this.type = 'CurvePath';\n    this.curves = [];\n    this.autoClose = false; // Automatically closes the path\n}\nCurvePath.prototype = Object.assign(Object.create(Curve.prototype), {\n    constructor: CurvePath,\n    add: function (curve) {\n        this.curves.push(curve);\n    },\n    closePath: function () {\n        // Add a line curve if start and end of lines are not connected\n        var startPoint = this.curves[0].getPoint(0);\n        var endPoint = this.curves[this.curves.length - 1].getPoint(1);\n        if (!startPoint.equals(endPoint)) {\n            this.curves.push(new LineCurve(endPoint, startPoint));\n        }\n    },\n    // To get accurate point with reference to\n    // entire path distance at time t,\n    // following has to be done:\n    // 1. Length of each sub path have to be known\n    // 2. Locate and identify type of curve\n    // 3. Get t for the curve\n    // 4. Return curve.getPointAt(t')\n    getPoint: function (t) {\n        var d = t * this.getLength();\n        var curveLengths = this.getCurveLengths();\n        var i = 0;\n        // To think about boundaries points.\n        while (i < curveLengths.length) {\n            if (curveLengths[i] >= d) {\n                var diff = curveLengths[i] - d;\n                var curve = this.curves[i];\n                var segmentLength = curve.getLength();\n                var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n                return curve.getPointAt(u);\n            }\n            i++;\n        }\n        return null;\n        // loop where sum != 0, sum > d , sum+1 <d\n    },\n    // We cannot use the default THREE.Curve getPoint() with getLength() because in\n    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    // getPoint() depends on getLength\n    getLength: function () {\n        var lens = this.getCurveLengths();\n        return lens[lens.length - 1];\n    },\n    // cacheLengths must be recalculated.\n    updateArcLengths: function () {\n        this.needsUpdate = true;\n        this.cacheLengths = null;\n        this.getCurveLengths();\n    },\n    // Compute lengths and cache them\n    // We cannot overwrite getLengths() because UtoT mapping uses it.\n    getCurveLengths: function () {\n        // We use cache values if curves and cache array are same length\n        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n            return this.cacheLengths;\n        }\n        // Get length of sub-curve\n        // Push sums into cached array\n        var lengths = [], sums = 0;\n        for (var i = 0, l = this.curves.length; i < l; i++) {\n            sums += this.curves[i].getLength();\n            lengths.push(sums);\n        }\n        this.cacheLengths = lengths;\n        return lengths;\n    },\n    getSpacedPoints: function (divisions) {\n        if (divisions === undefined)\n            divisions = 40;\n        var points = [];\n        for (var i = 0; i <= divisions; i++) {\n            points.push(this.getPoint(i / divisions));\n        }\n        if (this.autoClose) {\n            points.push(points[0]);\n        }\n        return points;\n    },\n    getPoints: function (divisions) {\n        divisions = divisions || 12;\n        var points = [], last;\n        for (var i = 0, curves = this.curves; i < curves.length; i++) {\n            var curve = curves[i];\n            var resolution = (curve && curve.isEllipseCurve) ? divisions * 2\n                : (curve && curve.isLineCurve) ? 1\n                    : (curve && curve.isSplineCurve) ? divisions * curve.points.length\n                        : divisions;\n            var pts = curve.getPoints(resolution);\n            for (var j = 0; j < pts.length; j++) {\n                var point = pts[j];\n                if (last && last.equals(point))\n                    continue; // ensures no consecutive points are duplicates\n                points.push(point);\n                last = point;\n            }\n        }\n        if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n            points.push(points[0]);\n        }\n        return points;\n    },\n    copy: function (source) {\n        Curve.prototype.copy.call(this, source);\n        this.curves = [];\n        for (var i = 0, l = source.curves.length; i < l; i++) {\n            var curve = source.curves[i];\n            this.curves.push(curve.clone());\n        }\n        this.autoClose = source.autoClose;\n        return this;\n    },\n    toJSON: function () {\n        var data = Curve.prototype.toJSON.call(this);\n        data.autoClose = this.autoClose;\n        data.curves = [];\n        for (var i = 0, l = this.curves.length; i < l; i++) {\n            var curve = this.curves[i];\n            data.curves.push(curve.toJSON());\n        }\n        return data;\n    },\n    fromJSON: function (json) {\n        Curve.prototype.fromJSON.call(this, json);\n        this.autoClose = json.autoClose;\n        this.curves = [];\n        for (var i = 0, l = json.curves.length; i < l; i++) {\n            var curve = json.curves[i];\n            this.curves.push(new Curves[curve.type]().fromJSON(curve));\n        }\n        return this;\n    }\n});\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Creates free form 2d path using series of points, lines or curves.\n **/\nfunction Path(points) {\n    CurvePath.call(this);\n    this.type = 'Path';\n    this.currentPoint = new Vector2();\n    if (points) {\n        this.setFromPoints(points);\n    }\n}\nPath.prototype = Object.assign(Object.create(CurvePath.prototype), {\n    constructor: Path,\n    setFromPoints: function (points) {\n        this.moveTo(points[0].x, points[0].y);\n        for (var i = 1, l = points.length; i < l; i++) {\n            this.lineTo(points[i].x, points[i].y);\n        }\n    },\n    moveTo: function (x, y) {\n        this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n    },\n    lineTo: function (x, y) {\n        var curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n        this.curves.push(curve);\n        this.currentPoint.set(x, y);\n    },\n    quadraticCurveTo: function (aCPx, aCPy, aX, aY) {\n        var curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n        this.curves.push(curve);\n        this.currentPoint.set(aX, aY);\n    },\n    bezierCurveTo: function (aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n        var curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n        this.curves.push(curve);\n        this.currentPoint.set(aX, aY);\n    },\n    splineThru: function (pts /*Array of Vector*/) {\n        var npts = [this.currentPoint.clone()].concat(pts);\n        var curve = new SplineCurve(npts);\n        this.curves.push(curve);\n        this.currentPoint.copy(pts[pts.length - 1]);\n    },\n    arc: function (aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n        var x0 = this.currentPoint.x;\n        var y0 = this.currentPoint.y;\n        this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n    },\n    absarc: function (aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n        this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n    },\n    ellipse: function (aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n        var x0 = this.currentPoint.x;\n        var y0 = this.currentPoint.y;\n        this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    },\n    absellipse: function (aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n        var curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n        if (this.curves.length > 0) {\n            // if a previous curve is present, attempt to join\n            var firstPoint = curve.getPoint(0);\n            if (!firstPoint.equals(this.currentPoint)) {\n                this.lineTo(firstPoint.x, firstPoint.y);\n            }\n        }\n        this.curves.push(curve);\n        var lastPoint = curve.getPoint(1);\n        this.currentPoint.copy(lastPoint);\n    },\n    copy: function (source) {\n        CurvePath.prototype.copy.call(this, source);\n        this.currentPoint.copy(source.currentPoint);\n        return this;\n    },\n    toJSON: function () {\n        var data = CurvePath.prototype.toJSON.call(this);\n        data.currentPoint = this.currentPoint.toArray();\n        return data;\n    },\n    fromJSON: function (json) {\n        CurvePath.prototype.fromJSON.call(this, json);\n        this.currentPoint.fromArray(json.currentPoint);\n        return this;\n    }\n});\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * Defines a 2d shape plane using paths.\n **/\n// STEP 1 Create a path.\n// STEP 2 Turn path into shape.\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\n// STEP 3a - Extract points from each shape, turn to vertices\n// STEP 3b - Triangulate each shape, add faces.\nfunction Shape(points) {\n    Path.call(this, points);\n    this.uuid = _Math.generateUUID();\n    this.type = 'Shape';\n    this.holes = [];\n}\nShape.prototype = Object.assign(Object.create(Path.prototype), {\n    constructor: Shape,\n    getPointsHoles: function (divisions) {\n        var holesPts = [];\n        for (var i = 0, l = this.holes.length; i < l; i++) {\n            holesPts[i] = this.holes[i].getPoints(divisions);\n        }\n        return holesPts;\n    },\n    // get points of shape and holes (keypoints based on segments parameter)\n    extractPoints: function (divisions) {\n        return {\n            shape: this.getPoints(divisions),\n            holes: this.getPointsHoles(divisions)\n        };\n    },\n    copy: function (source) {\n        Path.prototype.copy.call(this, source);\n        this.holes = [];\n        for (var i = 0, l = source.holes.length; i < l; i++) {\n            var hole = source.holes[i];\n            this.holes.push(hole.clone());\n        }\n        return this;\n    },\n    toJSON: function () {\n        var data = Path.prototype.toJSON.call(this);\n        data.uuid = this.uuid;\n        data.holes = [];\n        for (var i = 0, l = this.holes.length; i < l; i++) {\n            var hole = this.holes[i];\n            data.holes.push(hole.toJSON());\n        }\n        return data;\n    },\n    fromJSON: function (json) {\n        Path.prototype.fromJSON.call(this, json);\n        this.uuid = json.uuid;\n        this.holes = [];\n        for (var i = 0, l = json.holes.length; i < l; i++) {\n            var hole = json.holes[i];\n            this.holes.push(new Path().fromJSON(hole));\n        }\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\nfunction Light(color, intensity) {\n    Object3D.call(this);\n    this.type = 'Light';\n    this.color = new Color(color);\n    this.intensity = intensity !== undefined ? intensity : 1;\n    this.receiveShadow = undefined;\n}\nLight.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Light,\n    isLight: true,\n    copy: function (source) {\n        Object3D.prototype.copy.call(this, source);\n        this.color.copy(source.color);\n        this.intensity = source.intensity;\n        return this;\n    },\n    toJSON: function (meta) {\n        var data = Object3D.prototype.toJSON.call(this, meta);\n        data.object.color = this.color.getHex();\n        data.object.intensity = this.intensity;\n        if (this.groundColor !== undefined)\n            data.object.groundColor = this.groundColor.getHex();\n        if (this.distance !== undefined)\n            data.object.distance = this.distance;\n        if (this.angle !== undefined)\n            data.object.angle = this.angle;\n        if (this.decay !== undefined)\n            data.object.decay = this.decay;\n        if (this.penumbra !== undefined)\n            data.object.penumbra = this.penumbra;\n        if (this.shadow !== undefined)\n            data.object.shadow = this.shadow.toJSON();\n        return data;\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nfunction HemisphereLight(skyColor, groundColor, intensity) {\n    Light.call(this, skyColor, intensity);\n    this.type = 'HemisphereLight';\n    this.castShadow = undefined;\n    this.position.copy(Object3D.DefaultUp);\n    this.updateMatrix();\n    this.groundColor = new Color(groundColor);\n}\nHemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: HemisphereLight,\n    isHemisphereLight: true,\n    copy: function (source) {\n        Light.prototype.copy.call(this, source);\n        this.groundColor.copy(source.groundColor);\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction LightShadow(camera) {\n    this.camera = camera;\n    this.bias = 0;\n    this.radius = 1;\n    this.mapSize = new Vector2(512, 512);\n    this.map = null;\n    this.matrix = new Matrix4();\n}\nObject.assign(LightShadow.prototype, {\n    copy: function (source) {\n        this.camera = source.camera.clone();\n        this.bias = source.bias;\n        this.radius = source.radius;\n        this.mapSize.copy(source.mapSize);\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    toJSON: function () {\n        var object = {};\n        if (this.bias !== 0)\n            object.bias = this.bias;\n        if (this.radius !== 1)\n            object.radius = this.radius;\n        if (this.mapSize.x !== 512 || this.mapSize.y !== 512)\n            object.mapSize = this.mapSize.toArray();\n        object.camera = this.camera.toJSON(false).object;\n        delete object.camera.matrix;\n        return object;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction SpotLightShadow() {\n    LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));\n}\nSpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n    constructor: SpotLightShadow,\n    isSpotLightShadow: true,\n    update: function (light) {\n        var camera = this.camera;\n        var fov = _Math.RAD2DEG * 2 * light.angle;\n        var aspect = this.mapSize.width / this.mapSize.height;\n        var far = light.distance || camera.far;\n        if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n            camera.fov = fov;\n            camera.aspect = aspect;\n            camera.far = far;\n            camera.updateProjectionMatrix();\n        }\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nfunction SpotLight(color, intensity, distance, angle, penumbra, decay) {\n    Light.call(this, color, intensity);\n    this.type = 'SpotLight';\n    this.position.copy(Object3D.DefaultUp);\n    this.updateMatrix();\n    this.target = new Object3D();\n    Object.defineProperty(this, 'power', {\n        get: function () {\n            // intensity = power per solid angle.\n            // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n            return this.intensity * Math.PI;\n        },\n        set: function (power) {\n            // intensity = power per solid angle.\n            // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n            this.intensity = power / Math.PI;\n        }\n    });\n    this.distance = (distance !== undefined) ? distance : 0;\n    this.angle = (angle !== undefined) ? angle : Math.PI / 3;\n    this.penumbra = (penumbra !== undefined) ? penumbra : 0;\n    this.decay = (decay !== undefined) ? decay : 1; // for physically correct lights, should be 2.\n    this.shadow = new SpotLightShadow();\n}\nSpotLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: SpotLight,\n    isSpotLight: true,\n    copy: function (source) {\n        Light.prototype.copy.call(this, source);\n        this.distance = source.distance;\n        this.angle = source.angle;\n        this.penumbra = source.penumbra;\n        this.decay = source.decay;\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction PointLight(color, intensity, distance, decay) {\n    Light.call(this, color, intensity);\n    this.type = 'PointLight';\n    Object.defineProperty(this, 'power', {\n        get: function () {\n            // intensity = power per solid angle.\n            // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n            return this.intensity * 4 * Math.PI;\n        },\n        set: function (power) {\n            // intensity = power per solid angle.\n            // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n            this.intensity = power / (4 * Math.PI);\n        }\n    });\n    this.distance = (distance !== undefined) ? distance : 0;\n    this.decay = (decay !== undefined) ? decay : 1; // for physically correct lights, should be 2.\n    this.shadow = new LightShadow(new PerspectiveCamera(90, 1, 0.5, 500));\n}\nPointLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: PointLight,\n    isPointLight: true,\n    copy: function (source) {\n        Light.prototype.copy.call(this, source);\n        this.distance = source.distance;\n        this.decay = source.decay;\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction DirectionalLightShadow() {\n    LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n}\nDirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {\n    constructor: DirectionalLightShadow\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\nfunction DirectionalLight(color, intensity) {\n    Light.call(this, color, intensity);\n    this.type = 'DirectionalLight';\n    this.position.copy(Object3D.DefaultUp);\n    this.updateMatrix();\n    this.target = new Object3D();\n    this.shadow = new DirectionalLightShadow();\n}\nDirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: DirectionalLight,\n    isDirectionalLight: true,\n    copy: function (source) {\n        Light.prototype.copy.call(this, source);\n        this.target = source.target.clone();\n        this.shadow = source.shadow.clone();\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction AmbientLight(color, intensity) {\n    Light.call(this, color, intensity);\n    this.type = 'AmbientLight';\n    this.castShadow = undefined;\n}\nAmbientLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: AmbientLight,\n    isAmbientLight: true\n});\n/**\n * @author abelnation / http://github.com/abelnation\n */\nfunction RectAreaLight(color, intensity, width, height) {\n    Light.call(this, color, intensity);\n    this.type = 'RectAreaLight';\n    this.width = (width !== undefined) ? width : 10;\n    this.height = (height !== undefined) ? height : 10;\n}\nRectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: RectAreaLight,\n    isRectAreaLight: true,\n    copy: function (source) {\n        Light.prototype.copy.call(this, source);\n        this.width = source.width;\n        this.height = source.height;\n        return this;\n    },\n    toJSON: function (meta) {\n        var data = Light.prototype.toJSON.call(this, meta);\n        data.object.width = this.width;\n        data.object.height = this.height;\n        return data;\n    }\n});\n/**\n *\n * A Track that interpolates Strings\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\nfunction StringKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n}\nStringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n    constructor: StringKeyframeTrack,\n    ValueTypeName: 'string',\n    ValueBufferType: Array,\n    DefaultInterpolation: InterpolateDiscrete,\n    InterpolantFactoryMethodLinear: undefined,\n    InterpolantFactoryMethodSmooth: undefined\n});\n/**\n *\n * A Track of Boolean keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\nfunction BooleanKeyframeTrack(name, times, values) {\n    KeyframeTrack.call(this, name, times, values);\n}\nBooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n    constructor: BooleanKeyframeTrack,\n    ValueTypeName: 'bool',\n    ValueBufferType: Array,\n    DefaultInterpolation: InterpolateDiscrete,\n    InterpolantFactoryMethodLinear: undefined,\n    InterpolantFactoryMethodSmooth: undefined\n    // Note: Actually this track could have a optimized / compressed\n    // representation of a single value and a custom interpolant that\n    // computes \"firstValue ^ isOdd( index )\".\n});\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n * @author tschw\n */\nfunction Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    this.parameterPositions = parameterPositions;\n    this._cachedIndex = 0;\n    this.resultBuffer = resultBuffer !== undefined ?\n        resultBuffer : new sampleValues.constructor(sampleSize);\n    this.sampleValues = sampleValues;\n    this.valueSize = sampleSize;\n}\nObject.assign(Interpolant.prototype, {\n    evaluate: function (t) {\n        var pp = this.parameterPositions, i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];\n        validate_interval: {\n            seek: {\n                var right;\n                linear_scan: {\n                    //- See http://jsperf.com/comparison-to-undefined/3\n                    //- slower code:\n                    //-\n                    //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n                    forward_scan: if (!(t < t1)) {\n                        for (var giveUpAt = i1 + 2;;) {\n                            if (t1 === undefined) {\n                                if (t < t0)\n                                    break forward_scan;\n                                // after end\n                                i1 = pp.length;\n                                this._cachedIndex = i1;\n                                return this.afterEnd_(i1 - 1, t, t0);\n                            }\n                            if (i1 === giveUpAt)\n                                break; // this loop\n                            t0 = t1;\n                            t1 = pp[++i1];\n                            if (t < t1) {\n                                // we have arrived at the sought interval\n                                break seek;\n                            }\n                        }\n                        // prepare binary search on the right side of the index\n                        right = pp.length;\n                        break linear_scan;\n                    }\n                    //- slower code:\n                    //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n                    if (!(t >= t0)) {\n                        // looping?\n                        var t1global = pp[1];\n                        if (t < t1global) {\n                            i1 = 2; // + 1, using the scan for the details\n                            t0 = t1global;\n                        }\n                        // linear reverse scan\n                        for (var giveUpAt = i1 - 2;;) {\n                            if (t0 === undefined) {\n                                // before start\n                                this._cachedIndex = 0;\n                                return this.beforeStart_(0, t, t1);\n                            }\n                            if (i1 === giveUpAt)\n                                break; // this loop\n                            t1 = t0;\n                            t0 = pp[--i1 - 1];\n                            if (t >= t0) {\n                                // we have arrived at the sought interval\n                                break seek;\n                            }\n                        }\n                        // prepare binary search on the left side of the index\n                        right = i1;\n                        i1 = 0;\n                        break linear_scan;\n                    }\n                    // the interval is valid\n                    break validate_interval;\n                } // linear scan\n                // binary search\n                while (i1 < right) {\n                    var mid = (i1 + right) >>> 1;\n                    if (t < pp[mid]) {\n                        right = mid;\n                    }\n                    else {\n                        i1 = mid + 1;\n                    }\n                }\n                t1 = pp[i1];\n                t0 = pp[i1 - 1];\n                // check boundary cases, again\n                if (t0 === undefined) {\n                    this._cachedIndex = 0;\n                    return this.beforeStart_(0, t, t1);\n                }\n                if (t1 === undefined) {\n                    i1 = pp.length;\n                    this._cachedIndex = i1;\n                    return this.afterEnd_(i1 - 1, t0, t);\n                }\n            } // seek\n            this._cachedIndex = i1;\n            this.intervalChanged_(i1, t0, t1);\n        } // validate_interval\n        return this.interpolate_(i1, t0, t, t1);\n    },\n    settings: null,\n    // Note: The indirection allows central control of many interpolants.\n    // --- Protected interface\n    DefaultSettings_: {},\n    getSettings_: function () {\n        return this.settings || this.DefaultSettings_;\n    },\n    copySampleValue_: function (index) {\n        // copies a sample value to the result buffer\n        var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;\n        for (var i = 0; i !== stride; ++i) {\n            result[i] = values[offset + i];\n        }\n        return result;\n    },\n    // Template methods for derived classes:\n    interpolate_: function ( /* i1, t0, t, t1 */) {\n        throw new Error('call to abstract method');\n        // implementations shall return this.resultBuffer\n    },\n    intervalChanged_: function ( /* i1, t0, t1 */) {\n        // empty\n    }\n});\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign(Interpolant.prototype, {\n    //( 0, t, t0 ), returns this.resultBuffer\n    beforeStart_: Interpolant.prototype.copySampleValue_,\n    //( N-1, tN-1, t ), returns this.resultBuffer\n    afterEnd_: Interpolant.prototype.copySampleValue_,\n});\n/**\n * Spherical linear unit quaternion interpolant.\n *\n * @author tschw\n */\nfunction QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n}\nQuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n    constructor: QuaternionLinearInterpolant,\n    interpolate_: function (i1, t0, t, t1) {\n        var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = i1 * stride, alpha = (t - t0) / (t1 - t0);\n        for (var end = offset + stride; offset !== end; offset += 4) {\n            Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n        }\n        return result;\n    }\n});\n/**\n *\n * A Track of quaternion keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\nfunction QuaternionKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n}\nQuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n    constructor: QuaternionKeyframeTrack,\n    ValueTypeName: 'quaternion',\n    // ValueBufferType is inherited\n    DefaultInterpolation: InterpolateLinear,\n    InterpolantFactoryMethodLinear: function (result) {\n        return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n    },\n    InterpolantFactoryMethodSmooth: undefined // not yet implemented\n});\n/**\n *\n * A Track of keyframe values that represent color.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\nfunction ColorKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n}\nColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n    constructor: ColorKeyframeTrack,\n    ValueTypeName: 'color'\n    // ValueBufferType is inherited\n    // DefaultInterpolation is inherited\n    // Note: Very basic implementation and nothing special yet.\n    // However, this is the place for color space parameterization.\n});\n/**\n *\n * A Track of numeric keyframe values.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\nfunction NumberKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n}\nNumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n    constructor: NumberKeyframeTrack,\n    ValueTypeName: 'number'\n    // ValueBufferType is inherited\n    // DefaultInterpolation is inherited\n});\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n *\n * @author tschw\n */\nfunction CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n    this._weightPrev = -0;\n    this._offsetPrev = -0;\n    this._weightNext = -0;\n    this._offsetNext = -0;\n}\nCubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n    constructor: CubicInterpolant,\n    DefaultSettings_: {\n        endingStart: ZeroCurvatureEnding,\n        endingEnd: ZeroCurvatureEnding\n    },\n    intervalChanged_: function (i1, t0, t1) {\n        var pp = this.parameterPositions, iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];\n        if (tPrev === undefined) {\n            switch (this.getSettings_().endingStart) {\n                case ZeroSlopeEnding:\n                    // f'(t0) = 0\n                    iPrev = i1;\n                    tPrev = 2 * t0 - t1;\n                    break;\n                case WrapAroundEnding:\n                    // use the other end of the curve\n                    iPrev = pp.length - 2;\n                    tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n                    break;\n                default: // ZeroCurvatureEnding\n                    // f''(t0) = 0 a.k.a. Natural Spline\n                    iPrev = i1;\n                    tPrev = t1;\n            }\n        }\n        if (tNext === undefined) {\n            switch (this.getSettings_().endingEnd) {\n                case ZeroSlopeEnding:\n                    // f'(tN) = 0\n                    iNext = i1;\n                    tNext = 2 * t1 - t0;\n                    break;\n                case WrapAroundEnding:\n                    // use the other end of the curve\n                    iNext = 1;\n                    tNext = t1 + pp[1] - pp[0];\n                    break;\n                default: // ZeroCurvatureEnding\n                    // f''(tN) = 0, a.k.a. Natural Spline\n                    iNext = i1 - 1;\n                    tNext = t0;\n            }\n        }\n        var halfDt = (t1 - t0) * 0.5, stride = this.valueSize;\n        this._weightPrev = halfDt / (t0 - tPrev);\n        this._weightNext = halfDt / (tNext - t1);\n        this._offsetPrev = iPrev * stride;\n        this._offsetNext = iNext * stride;\n    },\n    interpolate_: function (i1, t0, t, t1) {\n        var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;\n        // evaluate polynomials\n        var sP = -wP * ppp + 2 * wP * pp - wP * p;\n        var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n        var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n        var sN = wN * ppp - wN * pp;\n        // combine data linearly\n        for (var i = 0; i !== stride; ++i) {\n            result[i] =\n                sP * values[oP + i] +\n                    s0 * values[o0 + i] +\n                    s1 * values[o1 + i] +\n                    sN * values[oN + i];\n        }\n        return result;\n    }\n});\n/**\n * @author tschw\n */\nfunction LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n}\nLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n    constructor: LinearInterpolant,\n    interpolate_: function (i1, t0, t, t1) {\n        var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;\n        for (var i = 0; i !== stride; ++i) {\n            result[i] =\n                values[offset0 + i] * weight0 +\n                    values[offset1 + i] * weight1;\n        }\n        return result;\n    }\n});\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\nfunction DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n}\nDiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n    constructor: DiscreteInterpolant,\n    interpolate_: function (i1 /*, t0, t, t1 */) {\n        return this.copySampleValue_(i1 - 1);\n    }\n});\n/**\n * @author tschw\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\nvar AnimationUtils = {\n    // same as Array.prototype.slice, but also works on typed arrays\n    arraySlice: function (array, from, to) {\n        if (AnimationUtils.isTypedArray(array)) {\n            // in ios9 array.subarray(from, undefined) will return empty array\n            // but array.subarray(from) or array.subarray(from, len) is correct\n            return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n        }\n        return array.slice(from, to);\n    },\n    // converts an array to a specific type\n    convertArray: function (array, type, forceClone) {\n        if (!array || // let 'undefined' and 'null' pass\n            !forceClone && array.constructor === type)\n            return array;\n        if (typeof type.BYTES_PER_ELEMENT === 'number') {\n            return new type(array); // create typed array\n        }\n        return Array.prototype.slice.call(array); // create Array\n    },\n    isTypedArray: function (object) {\n        return ArrayBuffer.isView(object) &&\n            !(object instanceof DataView);\n    },\n    // returns an array by which times and values can be sorted\n    getKeyframeOrder: function (times) {\n        function compareTime(i, j) {\n            return times[i] - times[j];\n        }\n        var n = times.length;\n        var result = new Array(n);\n        for (var i = 0; i !== n; ++i)\n            result[i] = i;\n        result.sort(compareTime);\n        return result;\n    },\n    // uses the array previously returned by 'getKeyframeOrder' to sort data\n    sortedArray: function (values, stride, order) {\n        var nValues = values.length;\n        var result = new values.constructor(nValues);\n        for (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n            var srcOffset = order[i] * stride;\n            for (var j = 0; j !== stride; ++j) {\n                result[dstOffset++] = values[srcOffset + j];\n            }\n        }\n        return result;\n    },\n    // function for parsing AOS keyframe formats\n    flattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n        var i = 1, key = jsonKeys[0];\n        while (key !== undefined && key[valuePropertyName] === undefined) {\n            key = jsonKeys[i++];\n        }\n        if (key === undefined)\n            return; // no data\n        var value = key[valuePropertyName];\n        if (value === undefined)\n            return; // no data\n        if (Array.isArray(value)) {\n            do {\n                value = key[valuePropertyName];\n                if (value !== undefined) {\n                    times.push(key.time);\n                    values.push.apply(values, value); // push all elements\n                }\n                key = jsonKeys[i++];\n            } while (key !== undefined);\n        }\n        else if (value.toArray !== undefined) {\n            // ...assume THREE.Math-ish\n            do {\n                value = key[valuePropertyName];\n                if (value !== undefined) {\n                    times.push(key.time);\n                    value.toArray(values, values.length);\n                }\n                key = jsonKeys[i++];\n            } while (key !== undefined);\n        }\n        else {\n            // otherwise push as-is\n            do {\n                value = key[valuePropertyName];\n                if (value !== undefined) {\n                    times.push(key.time);\n                    values.push(value);\n                }\n                key = jsonKeys[i++];\n            } while (key !== undefined);\n        }\n    }\n};\n/**\n *\n * A timed sequence of keyframes for a specific property.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\nfunction KeyframeTrack(name, times, values, interpolation) {\n    if (name === undefined)\n        throw new Error('THREE.KeyframeTrack: track name is undefined');\n    if (times === undefined || times.length === 0)\n        throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n    this.name = name;\n    this.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n    this.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n    this.setInterpolation(interpolation || this.DefaultInterpolation);\n    this.validate();\n    this.optimize();\n}\n// Static methods:\nObject.assign(KeyframeTrack, {\n    // Serialization (in static context, because of constructor invocation\n    // and automatic invocation of .toJSON):\n    parse: function (json) {\n        if (json.type === undefined) {\n            throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n        }\n        var trackType = KeyframeTrack._getTrackTypeForValueTypeName(json.type);\n        if (json.times === undefined) {\n            var times = [], values = [];\n            AnimationUtils.flattenJSON(json.keys, times, values, 'value');\n            json.times = times;\n            json.values = values;\n        }\n        // derived classes can define a static parse method\n        if (trackType.parse !== undefined) {\n            return trackType.parse(json);\n        }\n        else {\n            // by default, we assume a constructor compatible with the base\n            return new trackType(json.name, json.times, json.values, json.interpolation);\n        }\n    },\n    toJSON: function (track) {\n        var trackType = track.constructor;\n        var json;\n        // derived classes can define a static toJSON method\n        if (trackType.toJSON !== undefined) {\n            json = trackType.toJSON(track);\n        }\n        else {\n            // by default, we assume the data can be serialized as-is\n            json = {\n                'name': track.name,\n                'times': AnimationUtils.convertArray(track.times, Array),\n                'values': AnimationUtils.convertArray(track.values, Array)\n            };\n            var interpolation = track.getInterpolation();\n            if (interpolation !== track.DefaultInterpolation) {\n                json.interpolation = interpolation;\n            }\n        }\n        json.type = track.ValueTypeName; // mandatory\n        return json;\n    },\n    _getTrackTypeForValueTypeName: function (typeName) {\n        switch (typeName.toLowerCase()) {\n            case 'scalar':\n            case 'double':\n            case 'float':\n            case 'number':\n            case 'integer':\n                return NumberKeyframeTrack;\n            case 'vector':\n            case 'vector2':\n            case 'vector3':\n            case 'vector4':\n                return VectorKeyframeTrack;\n            case 'color':\n                return ColorKeyframeTrack;\n            case 'quaternion':\n                return QuaternionKeyframeTrack;\n            case 'bool':\n            case 'boolean':\n                return BooleanKeyframeTrack;\n            case 'string':\n                return StringKeyframeTrack;\n        }\n        throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n    }\n});\nObject.assign(KeyframeTrack.prototype, {\n    constructor: KeyframeTrack,\n    TimeBufferType: Float32Array,\n    ValueBufferType: Float32Array,\n    DefaultInterpolation: InterpolateLinear,\n    InterpolantFactoryMethodDiscrete: function (result) {\n        return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n    },\n    InterpolantFactoryMethodLinear: function (result) {\n        return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n    },\n    InterpolantFactoryMethodSmooth: function (result) {\n        return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n    },\n    setInterpolation: function (interpolation) {\n        var factoryMethod;\n        switch (interpolation) {\n            case InterpolateDiscrete:\n                factoryMethod = this.InterpolantFactoryMethodDiscrete;\n                break;\n            case InterpolateLinear:\n                factoryMethod = this.InterpolantFactoryMethodLinear;\n                break;\n            case InterpolateSmooth:\n                factoryMethod = this.InterpolantFactoryMethodSmooth;\n                break;\n        }\n        if (factoryMethod === undefined) {\n            var message = \"unsupported interpolation for \" +\n                this.ValueTypeName + \" keyframe track named \" + this.name;\n            if (this.createInterpolant === undefined) {\n                // fall back to default, unless the default itself is messed up\n                if (interpolation !== this.DefaultInterpolation) {\n                    this.setInterpolation(this.DefaultInterpolation);\n                }\n                else {\n                    throw new Error(message); // fatal, in this case\n                }\n            }\n            console.warn('THREE.KeyframeTrack:', message);\n            return;\n        }\n        this.createInterpolant = factoryMethod;\n    },\n    getInterpolation: function () {\n        switch (this.createInterpolant) {\n            case this.InterpolantFactoryMethodDiscrete:\n                return InterpolateDiscrete;\n            case this.InterpolantFactoryMethodLinear:\n                return InterpolateLinear;\n            case this.InterpolantFactoryMethodSmooth:\n                return InterpolateSmooth;\n        }\n    },\n    getValueSize: function () {\n        return this.values.length / this.times.length;\n    },\n    // move all keyframes either forwards or backwards in time\n    shift: function (timeOffset) {\n        if (timeOffset !== 0.0) {\n            var times = this.times;\n            for (var i = 0, n = times.length; i !== n; ++i) {\n                times[i] += timeOffset;\n            }\n        }\n        return this;\n    },\n    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n    scale: function (timeScale) {\n        if (timeScale !== 1.0) {\n            var times = this.times;\n            for (var i = 0, n = times.length; i !== n; ++i) {\n                times[i] *= timeScale;\n            }\n        }\n        return this;\n    },\n    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n    trim: function (startTime, endTime) {\n        var times = this.times, nKeys = times.length, from = 0, to = nKeys - 1;\n        while (from !== nKeys && times[from] < startTime) {\n            ++from;\n        }\n        while (to !== -1 && times[to] > endTime) {\n            --to;\n        }\n        ++to; // inclusive -> exclusive bound\n        if (from !== 0 || to !== nKeys) {\n            // empty tracks are forbidden, so keep at least one keyframe\n            if (from >= to)\n                to = Math.max(to, 1), from = to - 1;\n            var stride = this.getValueSize();\n            this.times = AnimationUtils.arraySlice(times, from, to);\n            this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n        }\n        return this;\n    },\n    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n    validate: function () {\n        var valid = true;\n        var valueSize = this.getValueSize();\n        if (valueSize - Math.floor(valueSize) !== 0) {\n            console.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n            valid = false;\n        }\n        var times = this.times, values = this.values, nKeys = times.length;\n        if (nKeys === 0) {\n            console.error('THREE.KeyframeTrack: Track is empty.', this);\n            valid = false;\n        }\n        var prevTime = null;\n        for (var i = 0; i !== nKeys; i++) {\n            var currTime = times[i];\n            if (typeof currTime === 'number' && isNaN(currTime)) {\n                console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n                valid = false;\n                break;\n            }\n            if (prevTime !== null && prevTime > currTime) {\n                console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n                valid = false;\n                break;\n            }\n            prevTime = currTime;\n        }\n        if (values !== undefined) {\n            if (AnimationUtils.isTypedArray(values)) {\n                for (var i = 0, n = values.length; i !== n; ++i) {\n                    var value = values[i];\n                    if (isNaN(value)) {\n                        console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\n                        valid = false;\n                        break;\n                    }\n                }\n            }\n        }\n        return valid;\n    },\n    // removes equivalent sequential keys as common in morph target sequences\n    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n    optimize: function () {\n        var times = this.times, values = this.values, stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, writeIndex = 1, lastIndex = times.length - 1;\n        for (var i = 1; i < lastIndex; ++i) {\n            var keep = false;\n            var time = times[i];\n            var timeNext = times[i + 1];\n            // remove adjacent keyframes scheduled at the same time\n            if (time !== timeNext && (i !== 1 || time !== time[0])) {\n                if (!smoothInterpolation) {\n                    // remove unnecessary keyframes same as their neighbors\n                    var offset = i * stride, offsetP = offset - stride, offsetN = offset + stride;\n                    for (var j = 0; j !== stride; ++j) {\n                        var value = values[offset + j];\n                        if (value !== values[offsetP + j] ||\n                            value !== values[offsetN + j]) {\n                            keep = true;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    keep = true;\n                }\n            }\n            // in-place compaction\n            if (keep) {\n                if (i !== writeIndex) {\n                    times[writeIndex] = times[i];\n                    var readOffset = i * stride, writeOffset = writeIndex * stride;\n                    for (var j = 0; j !== stride; ++j) {\n                        values[writeOffset + j] = values[readOffset + j];\n                    }\n                }\n                ++writeIndex;\n            }\n        }\n        // flush last keyframe (compaction looks ahead)\n        if (lastIndex > 0) {\n            times[writeIndex] = times[lastIndex];\n            for (var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j) {\n                values[writeOffset + j] = values[readOffset + j];\n            }\n            ++writeIndex;\n        }\n        if (writeIndex !== times.length) {\n            this.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n            this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n        }\n        return this;\n    }\n});\n/**\n *\n * A Track of vectored keyframe values.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\nfunction VectorKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n}\nVectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {\n    constructor: VectorKeyframeTrack,\n    ValueTypeName: 'vector'\n    // ValueBufferType is inherited\n    // DefaultInterpolation is inherited\n});\n/**\n *\n * Reusable set of Tracks that represent an animation.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n */\nfunction AnimationClip(name, duration, tracks) {\n    this.name = name;\n    this.tracks = tracks;\n    this.duration = (duration !== undefined) ? duration : -1;\n    this.uuid = _Math.generateUUID();\n    // this means it should figure out its duration by scanning the tracks\n    if (this.duration < 0) {\n        this.resetDuration();\n    }\n    this.optimize();\n}\nObject.assign(AnimationClip, {\n    parse: function (json) {\n        var tracks = [], jsonTracks = json.tracks, frameTime = 1.0 / (json.fps || 1.0);\n        for (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n            tracks.push(KeyframeTrack.parse(jsonTracks[i]).scale(frameTime));\n        }\n        return new AnimationClip(json.name, json.duration, tracks);\n    },\n    toJSON: function (clip) {\n        var tracks = [], clipTracks = clip.tracks;\n        var json = {\n            'name': clip.name,\n            'duration': clip.duration,\n            'tracks': tracks\n        };\n        for (var i = 0, n = clipTracks.length; i !== n; ++i) {\n            tracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n        }\n        return json;\n    },\n    CreateFromMorphTargetSequence: function (name, morphTargetSequence, fps, noLoop) {\n        var numMorphTargets = morphTargetSequence.length;\n        var tracks = [];\n        for (var i = 0; i < numMorphTargets; i++) {\n            var times = [];\n            var values = [];\n            times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n            values.push(0, 1, 0);\n            var order = AnimationUtils.getKeyframeOrder(times);\n            times = AnimationUtils.sortedArray(times, 1, order);\n            values = AnimationUtils.sortedArray(values, 1, order);\n            // if there is a key at the first frame, duplicate it as the\n            // last frame as well for perfect loop.\n            if (!noLoop && times[0] === 0) {\n                times.push(numMorphTargets);\n                values.push(values[0]);\n            }\n            tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n        }\n        return new AnimationClip(name, -1, tracks);\n    },\n    findByName: function (objectOrClipArray, name) {\n        var clipArray = objectOrClipArray;\n        if (!Array.isArray(objectOrClipArray)) {\n            var o = objectOrClipArray;\n            clipArray = o.geometry && o.geometry.animations || o.animations;\n        }\n        for (var i = 0; i < clipArray.length; i++) {\n            if (clipArray[i].name === name) {\n                return clipArray[i];\n            }\n        }\n        return null;\n    },\n    CreateClipsFromMorphTargetSequences: function (morphTargets, fps, noLoop) {\n        var animationToMorphTargets = {};\n        // tested with https://regex101.com/ on trick sequences\n        // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n        var pattern = /^([\\w-]*?)([\\d]+)$/;\n        // sort morph target names into animation groups based\n        // patterns like Walk_001, Walk_002, Run_001, Run_002\n        for (var i = 0, il = morphTargets.length; i < il; i++) {\n            var morphTarget = morphTargets[i];\n            var parts = morphTarget.name.match(pattern);\n            if (parts && parts.length > 1) {\n                var name = parts[1];\n                var animationMorphTargets = animationToMorphTargets[name];\n                if (!animationMorphTargets) {\n                    animationToMorphTargets[name] = animationMorphTargets = [];\n                }\n                animationMorphTargets.push(morphTarget);\n            }\n        }\n        var clips = [];\n        for (var name in animationToMorphTargets) {\n            clips.push(AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n        }\n        return clips;\n    },\n    // parse the animation.hierarchy format\n    parseAnimation: function (animation, bones) {\n        if (!animation) {\n            console.error('THREE.AnimationClip: No animation in JSONLoader data.');\n            return null;\n        }\n        var addNonemptyTrack = function (trackType, trackName, animationKeys, propertyName, destTracks) {\n            // only return track if there are actually keys.\n            if (animationKeys.length !== 0) {\n                var times = [];\n                var values = [];\n                AnimationUtils.flattenJSON(animationKeys, times, values, propertyName);\n                // empty keys are filtered out, so check again\n                if (times.length !== 0) {\n                    destTracks.push(new trackType(trackName, times, values));\n                }\n            }\n        };\n        var tracks = [];\n        var clipName = animation.name || 'default';\n        // automatic length determination in AnimationClip.\n        var duration = animation.length || -1;\n        var fps = animation.fps || 30;\n        var hierarchyTracks = animation.hierarchy || [];\n        for (var h = 0; h < hierarchyTracks.length; h++) {\n            var animationKeys = hierarchyTracks[h].keys;\n            // skip empty tracks\n            if (!animationKeys || animationKeys.length === 0)\n                continue;\n            // process morph targets\n            if (animationKeys[0].morphTargets) {\n                // figure out all morph targets used in this track\n                var morphTargetNames = {};\n                for (var k = 0; k < animationKeys.length; k++) {\n                    if (animationKeys[k].morphTargets) {\n                        for (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n                            morphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n                        }\n                    }\n                }\n                // create a track for each morph target with all zero\n                // morphTargetInfluences except for the keys in which\n                // the morphTarget is named.\n                for (var morphTargetName in morphTargetNames) {\n                    var times = [];\n                    var values = [];\n                    for (var m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n                        var animationKey = animationKeys[k];\n                        times.push(animationKey.time);\n                        values.push((animationKey.morphTarget === morphTargetName) ? 1 : 0);\n                    }\n                    tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n                }\n                duration = morphTargetNames.length * (fps || 1.0);\n            }\n            else {\n                // ...assume skeletal animation\n                var boneName = '.bones[' + bones[h].name + ']';\n                addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n                addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n                addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n            }\n        }\n        if (tracks.length === 0) {\n            return null;\n        }\n        var clip = new AnimationClip(clipName, duration, tracks);\n        return clip;\n    }\n});\nObject.assign(AnimationClip.prototype, {\n    resetDuration: function () {\n        var tracks = this.tracks, duration = 0;\n        for (var i = 0, n = tracks.length; i !== n; ++i) {\n            var track = this.tracks[i];\n            duration = Math.max(duration, track.times[track.times.length - 1]);\n        }\n        this.duration = duration;\n    },\n    trim: function () {\n        for (var i = 0; i < this.tracks.length; i++) {\n            this.tracks[i].trim(0, this.duration);\n        }\n        return this;\n    },\n    optimize: function () {\n        for (var i = 0; i < this.tracks.length; i++) {\n            this.tracks[i].optimize();\n        }\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction MaterialLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n    this.textures = {};\n}\nObject.assign(MaterialLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n        var scope = this;\n        var loader = new FileLoader(scope.manager);\n        loader.load(url, function (text) {\n            onLoad(scope.parse(JSON.parse(text)));\n        }, onProgress, onError);\n    },\n    setTextures: function (value) {\n        this.textures = value;\n    },\n    parse: function (json) {\n        var textures = this.textures;\n        function getTexture(name) {\n            if (textures[name] === undefined) {\n                console.warn('THREE.MaterialLoader: Undefined texture', name);\n            }\n            return textures[name];\n        }\n        var material = new Materials[json.type]();\n        if (json.uuid !== undefined)\n            material.uuid = json.uuid;\n        if (json.name !== undefined)\n            material.name = json.name;\n        if (json.color !== undefined)\n            material.color.setHex(json.color);\n        if (json.roughness !== undefined)\n            material.roughness = json.roughness;\n        if (json.metalness !== undefined)\n            material.metalness = json.metalness;\n        if (json.emissive !== undefined)\n            material.emissive.setHex(json.emissive);\n        if (json.specular !== undefined)\n            material.specular.setHex(json.specular);\n        if (json.shininess !== undefined)\n            material.shininess = json.shininess;\n        if (json.clearCoat !== undefined)\n            material.clearCoat = json.clearCoat;\n        if (json.clearCoatRoughness !== undefined)\n            material.clearCoatRoughness = json.clearCoatRoughness;\n        if (json.uniforms !== undefined)\n            material.uniforms = json.uniforms;\n        if (json.vertexShader !== undefined)\n            material.vertexShader = json.vertexShader;\n        if (json.fragmentShader !== undefined)\n            material.fragmentShader = json.fragmentShader;\n        if (json.vertexColors !== undefined)\n            material.vertexColors = json.vertexColors;\n        if (json.fog !== undefined)\n            material.fog = json.fog;\n        if (json.flatShading !== undefined)\n            material.flatShading = json.flatShading;\n        if (json.blending !== undefined)\n            material.blending = json.blending;\n        if (json.side !== undefined)\n            material.side = json.side;\n        if (json.opacity !== undefined)\n            material.opacity = json.opacity;\n        if (json.transparent !== undefined)\n            material.transparent = json.transparent;\n        if (json.alphaTest !== undefined)\n            material.alphaTest = json.alphaTest;\n        if (json.depthTest !== undefined)\n            material.depthTest = json.depthTest;\n        if (json.depthWrite !== undefined)\n            material.depthWrite = json.depthWrite;\n        if (json.colorWrite !== undefined)\n            material.colorWrite = json.colorWrite;\n        if (json.wireframe !== undefined)\n            material.wireframe = json.wireframe;\n        if (json.wireframeLinewidth !== undefined)\n            material.wireframeLinewidth = json.wireframeLinewidth;\n        if (json.wireframeLinecap !== undefined)\n            material.wireframeLinecap = json.wireframeLinecap;\n        if (json.wireframeLinejoin !== undefined)\n            material.wireframeLinejoin = json.wireframeLinejoin;\n        if (json.rotation !== undefined)\n            material.rotation = json.rotation;\n        if (json.linewidth !== 1)\n            material.linewidth = json.linewidth;\n        if (json.dashSize !== undefined)\n            material.dashSize = json.dashSize;\n        if (json.gapSize !== undefined)\n            material.gapSize = json.gapSize;\n        if (json.scale !== undefined)\n            material.scale = json.scale;\n        if (json.skinning !== undefined)\n            material.skinning = json.skinning;\n        if (json.morphTargets !== undefined)\n            material.morphTargets = json.morphTargets;\n        if (json.dithering !== undefined)\n            material.dithering = json.dithering;\n        if (json.visible !== undefined)\n            material.visible = json.visible;\n        if (json.userData !== undefined)\n            material.userData = json.userData;\n        // Deprecated\n        if (json.shading !== undefined)\n            material.flatShading = json.shading === 1; // THREE.FlatShading\n        // for PointsMaterial\n        if (json.size !== undefined)\n            material.size = json.size;\n        if (json.sizeAttenuation !== undefined)\n            material.sizeAttenuation = json.sizeAttenuation;\n        // maps\n        if (json.map !== undefined)\n            material.map = getTexture(json.map);\n        if (json.alphaMap !== undefined) {\n            material.alphaMap = getTexture(json.alphaMap);\n            material.transparent = true;\n        }\n        if (json.bumpMap !== undefined)\n            material.bumpMap = getTexture(json.bumpMap);\n        if (json.bumpScale !== undefined)\n            material.bumpScale = json.bumpScale;\n        if (json.normalMap !== undefined)\n            material.normalMap = getTexture(json.normalMap);\n        if (json.normalScale !== undefined) {\n            var normalScale = json.normalScale;\n            if (Array.isArray(normalScale) === false) {\n                // Blender exporter used to export a scalar. See #7459\n                normalScale = [normalScale, normalScale];\n            }\n            material.normalScale = new Vector2().fromArray(normalScale);\n        }\n        if (json.displacementMap !== undefined)\n            material.displacementMap = getTexture(json.displacementMap);\n        if (json.displacementScale !== undefined)\n            material.displacementScale = json.displacementScale;\n        if (json.displacementBias !== undefined)\n            material.displacementBias = json.displacementBias;\n        if (json.roughnessMap !== undefined)\n            material.roughnessMap = getTexture(json.roughnessMap);\n        if (json.metalnessMap !== undefined)\n            material.metalnessMap = getTexture(json.metalnessMap);\n        if (json.emissiveMap !== undefined)\n            material.emissiveMap = getTexture(json.emissiveMap);\n        if (json.emissiveIntensity !== undefined)\n            material.emissiveIntensity = json.emissiveIntensity;\n        if (json.specularMap !== undefined)\n            material.specularMap = getTexture(json.specularMap);\n        if (json.envMap !== undefined)\n            material.envMap = getTexture(json.envMap);\n        if (json.reflectivity !== undefined)\n            material.reflectivity = json.reflectivity;\n        if (json.lightMap !== undefined)\n            material.lightMap = getTexture(json.lightMap);\n        if (json.lightMapIntensity !== undefined)\n            material.lightMapIntensity = json.lightMapIntensity;\n        if (json.aoMap !== undefined)\n            material.aoMap = getTexture(json.aoMap);\n        if (json.aoMapIntensity !== undefined)\n            material.aoMapIntensity = json.aoMapIntensity;\n        if (json.gradientMap !== undefined)\n            material.gradientMap = getTexture(json.gradientMap);\n        return material;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction BufferGeometryLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n}\nObject.assign(BufferGeometryLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n        var scope = this;\n        var loader = new FileLoader(scope.manager);\n        loader.load(url, function (text) {\n            onLoad(scope.parse(JSON.parse(text)));\n        }, onProgress, onError);\n    },\n    parse: function (json) {\n        var geometry = new BufferGeometry();\n        var index = json.data.index;\n        if (index !== undefined) {\n            var typedArray = new TYPED_ARRAYS[index.type](index.array);\n            geometry.setIndex(new BufferAttribute(typedArray, 1));\n        }\n        var attributes = json.data.attributes;\n        for (var key in attributes) {\n            var attribute = attributes[key];\n            var typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);\n            geometry.addAttribute(key, new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized));\n        }\n        var groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n        if (groups !== undefined) {\n            for (var i = 0, n = groups.length; i !== n; ++i) {\n                var group = groups[i];\n                geometry.addGroup(group.start, group.count, group.materialIndex);\n            }\n        }\n        var boundingSphere = json.data.boundingSphere;\n        if (boundingSphere !== undefined) {\n            var center = new Vector3();\n            if (boundingSphere.center !== undefined) {\n                center.fromArray(boundingSphere.center);\n            }\n            geometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n        }\n        return geometry;\n    }\n});\nvar TYPED_ARRAYS = {\n    Int8Array: Int8Array,\n    Uint8Array: Uint8Array,\n    // Workaround for IE11 pre KB2929437. See #11440\n    Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\n    Int16Array: Int16Array,\n    Uint16Array: Uint16Array,\n    Int32Array: Int32Array,\n    Uint32Array: Uint32Array,\n    Float32Array: Float32Array,\n    Float64Array: Float64Array\n};\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nfunction Loader() {\n    this.onLoadStart = function () { };\n    this.onLoadProgress = function () { };\n    this.onLoadComplete = function () { };\n}\nLoader.Handlers = {\n    handlers: [],\n    add: function (regex, loader) {\n        this.handlers.push(regex, loader);\n    },\n    get: function (file) {\n        var handlers = this.handlers;\n        for (var i = 0, l = handlers.length; i < l; i += 2) {\n            var regex = handlers[i];\n            var loader = handlers[i + 1];\n            if (regex.test(file)) {\n                return loader;\n            }\n        }\n        return null;\n    }\n};\nObject.assign(Loader.prototype, {\n    crossOrigin: undefined,\n    initMaterials: function (materials, texturePath, crossOrigin) {\n        var array = [];\n        for (var i = 0; i < materials.length; ++i) {\n            array[i] = this.createMaterial(materials[i], texturePath, crossOrigin);\n        }\n        return array;\n    },\n    createMaterial: (function () {\n        var BlendingMode = {\n            NoBlending: NoBlending,\n            NormalBlending: NormalBlending,\n            AdditiveBlending: AdditiveBlending,\n            SubtractiveBlending: SubtractiveBlending,\n            MultiplyBlending: MultiplyBlending,\n            CustomBlending: CustomBlending\n        };\n        var color = new Color();\n        var textureLoader = new TextureLoader();\n        var materialLoader = new MaterialLoader();\n        return function createMaterial(m, texturePath, crossOrigin) {\n            // convert from old material format\n            var textures = {};\n            function loadTexture(path, repeat, offset, wrap, anisotropy) {\n                var fullPath = texturePath + path;\n                var loader = Loader.Handlers.get(fullPath);\n                var texture;\n                if (loader !== null) {\n                    texture = loader.load(fullPath);\n                }\n                else {\n                    textureLoader.setCrossOrigin(crossOrigin);\n                    texture = textureLoader.load(fullPath);\n                }\n                if (repeat !== undefined) {\n                    texture.repeat.fromArray(repeat);\n                    if (repeat[0] !== 1)\n                        texture.wrapS = RepeatWrapping;\n                    if (repeat[1] !== 1)\n                        texture.wrapT = RepeatWrapping;\n                }\n                if (offset !== undefined) {\n                    texture.offset.fromArray(offset);\n                }\n                if (wrap !== undefined) {\n                    if (wrap[0] === 'repeat')\n                        texture.wrapS = RepeatWrapping;\n                    if (wrap[0] === 'mirror')\n                        texture.wrapS = MirroredRepeatWrapping;\n                    if (wrap[1] === 'repeat')\n                        texture.wrapT = RepeatWrapping;\n                    if (wrap[1] === 'mirror')\n                        texture.wrapT = MirroredRepeatWrapping;\n                }\n                if (anisotropy !== undefined) {\n                    texture.anisotropy = anisotropy;\n                }\n                var uuid = _Math.generateUUID();\n                textures[uuid] = texture;\n                return uuid;\n            }\n            //\n            var json = {\n                uuid: _Math.generateUUID(),\n                type: 'MeshLambertMaterial'\n            };\n            for (var name in m) {\n                var value = m[name];\n                switch (name) {\n                    case 'DbgColor':\n                    case 'DbgIndex':\n                    case 'opticalDensity':\n                    case 'illumination':\n                        break;\n                    case 'DbgName':\n                        json.name = value;\n                        break;\n                    case 'blending':\n                        json.blending = BlendingMode[value];\n                        break;\n                    case 'colorAmbient':\n                    case 'mapAmbient':\n                        console.warn('THREE.Loader.createMaterial:', name, 'is no longer supported.');\n                        break;\n                    case 'colorDiffuse':\n                        json.color = color.fromArray(value).getHex();\n                        break;\n                    case 'colorSpecular':\n                        json.specular = color.fromArray(value).getHex();\n                        break;\n                    case 'colorEmissive':\n                        json.emissive = color.fromArray(value).getHex();\n                        break;\n                    case 'specularCoef':\n                        json.shininess = value;\n                        break;\n                    case 'shading':\n                        if (value.toLowerCase() === 'basic')\n                            json.type = 'MeshBasicMaterial';\n                        if (value.toLowerCase() === 'phong')\n                            json.type = 'MeshPhongMaterial';\n                        if (value.toLowerCase() === 'standard')\n                            json.type = 'MeshStandardMaterial';\n                        break;\n                    case 'mapDiffuse':\n                        json.map = loadTexture(value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy);\n                        break;\n                    case 'mapDiffuseRepeat':\n                    case 'mapDiffuseOffset':\n                    case 'mapDiffuseWrap':\n                    case 'mapDiffuseAnisotropy':\n                        break;\n                    case 'mapEmissive':\n                        json.emissiveMap = loadTexture(value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy);\n                        break;\n                    case 'mapEmissiveRepeat':\n                    case 'mapEmissiveOffset':\n                    case 'mapEmissiveWrap':\n                    case 'mapEmissiveAnisotropy':\n                        break;\n                    case 'mapLight':\n                        json.lightMap = loadTexture(value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy);\n                        break;\n                    case 'mapLightRepeat':\n                    case 'mapLightOffset':\n                    case 'mapLightWrap':\n                    case 'mapLightAnisotropy':\n                        break;\n                    case 'mapAO':\n                        json.aoMap = loadTexture(value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy);\n                        break;\n                    case 'mapAORepeat':\n                    case 'mapAOOffset':\n                    case 'mapAOWrap':\n                    case 'mapAOAnisotropy':\n                        break;\n                    case 'mapBump':\n                        json.bumpMap = loadTexture(value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy);\n                        break;\n                    case 'mapBumpScale':\n                        json.bumpScale = value;\n                        break;\n                    case 'mapBumpRepeat':\n                    case 'mapBumpOffset':\n                    case 'mapBumpWrap':\n                    case 'mapBumpAnisotropy':\n                        break;\n                    case 'mapNormal':\n                        json.normalMap = loadTexture(value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy);\n                        break;\n                    case 'mapNormalFactor':\n                        json.normalScale = [value, value];\n                        break;\n                    case 'mapNormalRepeat':\n                    case 'mapNormalOffset':\n                    case 'mapNormalWrap':\n                    case 'mapNormalAnisotropy':\n                        break;\n                    case 'mapSpecular':\n                        json.specularMap = loadTexture(value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy);\n                        break;\n                    case 'mapSpecularRepeat':\n                    case 'mapSpecularOffset':\n                    case 'mapSpecularWrap':\n                    case 'mapSpecularAnisotropy':\n                        break;\n                    case 'mapMetalness':\n                        json.metalnessMap = loadTexture(value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy);\n                        break;\n                    case 'mapMetalnessRepeat':\n                    case 'mapMetalnessOffset':\n                    case 'mapMetalnessWrap':\n                    case 'mapMetalnessAnisotropy':\n                        break;\n                    case 'mapRoughness':\n                        json.roughnessMap = loadTexture(value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy);\n                        break;\n                    case 'mapRoughnessRepeat':\n                    case 'mapRoughnessOffset':\n                    case 'mapRoughnessWrap':\n                    case 'mapRoughnessAnisotropy':\n                        break;\n                    case 'mapAlpha':\n                        json.alphaMap = loadTexture(value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy);\n                        break;\n                    case 'mapAlphaRepeat':\n                    case 'mapAlphaOffset':\n                    case 'mapAlphaWrap':\n                    case 'mapAlphaAnisotropy':\n                        break;\n                    case 'flipSided':\n                        json.side = BackSide;\n                        break;\n                    case 'doubleSided':\n                        json.side = DoubleSide;\n                        break;\n                    case 'transparency':\n                        console.warn('THREE.Loader.createMaterial: transparency has been renamed to opacity');\n                        json.opacity = value;\n                        break;\n                    case 'depthTest':\n                    case 'depthWrite':\n                    case 'colorWrite':\n                    case 'opacity':\n                    case 'reflectivity':\n                    case 'transparent':\n                    case 'visible':\n                    case 'wireframe':\n                        json[name] = value;\n                        break;\n                    case 'vertexColors':\n                        if (value === true)\n                            json.vertexColors = VertexColors;\n                        if (value === 'face')\n                            json.vertexColors = FaceColors;\n                        break;\n                    default:\n                        console.error('THREE.Loader.createMaterial: Unsupported', name, value);\n                        break;\n                }\n            }\n            if (json.type === 'MeshBasicMaterial')\n                delete json.emissive;\n            if (json.type !== 'MeshPhongMaterial')\n                delete json.specular;\n            if (json.opacity < 1)\n                json.transparent = true;\n            materialLoader.setTextures(textures);\n            return materialLoader.parse(json);\n        };\n    })()\n});\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\nvar LoaderUtils = {\n    decodeText: function (array) {\n        if (typeof TextDecoder !== 'undefined') {\n            return new TextDecoder().decode(array);\n        }\n        // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n        // throws a \"maximum call stack size exceeded\" error for large arrays.\n        var s = '';\n        for (var i = 0, il = array.length; i < il; i++) {\n            // Implicitly assumes little-endian.\n            s += String.fromCharCode(array[i]);\n        }\n        // Merges multi-byte utf-8 characters.\n        return decodeURIComponent(escape(s));\n    },\n    extractUrlBase: function (url) {\n        var parts = url.split('/');\n        if (parts.length === 1)\n            return './';\n        parts.pop();\n        return parts.join('/') + '/';\n    }\n};\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n */\nfunction JSONLoader(manager) {\n    if (typeof manager === 'boolean') {\n        console.warn('THREE.JSONLoader: showStatus parameter has been removed from constructor.');\n        manager = undefined;\n    }\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n    this.withCredentials = false;\n}\nObject.assign(JSONLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n        var scope = this;\n        var texturePath = this.texturePath && (typeof this.texturePath === 'string') ? this.texturePath : LoaderUtils.extractUrlBase(url);\n        var loader = new FileLoader(this.manager);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(url, function (text) {\n            var json = JSON.parse(text);\n            var metadata = json.metadata;\n            if (metadata !== undefined) {\n                var type = metadata.type;\n                if (type !== undefined) {\n                    if (type.toLowerCase() === 'object') {\n                        console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.');\n                        return;\n                    }\n                    if (type.toLowerCase() === 'scene') {\n                        console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.');\n                        return;\n                    }\n                }\n            }\n            var object = scope.parse(json, texturePath);\n            onLoad(object.geometry, object.materials);\n        }, onProgress, onError);\n    },\n    setTexturePath: function (value) {\n        this.texturePath = value;\n    },\n    parse: (function () {\n        function parseModel(json, geometry) {\n            function isBitSet(value, position) {\n                return value & (1 << position);\n            }\n            var i, j, fi, offset, zLength, colorIndex, normalIndex, uvIndex, materialIndex, type, isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor, vertex, face, faceA, faceB, hex, normal, uvLayer, uv, u, v, faces = json.faces, vertices = json.vertices, normals = json.normals, colors = json.colors, scale = json.scale, nUvLayers = 0;\n            if (json.uvs !== undefined) {\n                // disregard empty arrays\n                for (i = 0; i < json.uvs.length; i++) {\n                    if (json.uvs[i].length)\n                        nUvLayers++;\n                }\n                for (i = 0; i < nUvLayers; i++) {\n                    geometry.faceVertexUvs[i] = [];\n                }\n            }\n            offset = 0;\n            zLength = vertices.length;\n            while (offset < zLength) {\n                vertex = new Vector3();\n                vertex.x = vertices[offset++] * scale;\n                vertex.y = vertices[offset++] * scale;\n                vertex.z = vertices[offset++] * scale;\n                geometry.vertices.push(vertex);\n            }\n            offset = 0;\n            zLength = faces.length;\n            while (offset < zLength) {\n                type = faces[offset++];\n                isQuad = isBitSet(type, 0);\n                hasMaterial = isBitSet(type, 1);\n                hasFaceVertexUv = isBitSet(type, 3);\n                hasFaceNormal = isBitSet(type, 4);\n                hasFaceVertexNormal = isBitSet(type, 5);\n                hasFaceColor = isBitSet(type, 6);\n                hasFaceVertexColor = isBitSet(type, 7);\n                // console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n                if (isQuad) {\n                    faceA = new Face3();\n                    faceA.a = faces[offset];\n                    faceA.b = faces[offset + 1];\n                    faceA.c = faces[offset + 3];\n                    faceB = new Face3();\n                    faceB.a = faces[offset + 1];\n                    faceB.b = faces[offset + 2];\n                    faceB.c = faces[offset + 3];\n                    offset += 4;\n                    if (hasMaterial) {\n                        materialIndex = faces[offset++];\n                        faceA.materialIndex = materialIndex;\n                        faceB.materialIndex = materialIndex;\n                    }\n                    // to get face <=> uv index correspondence\n                    fi = geometry.faces.length;\n                    if (hasFaceVertexUv) {\n                        for (i = 0; i < nUvLayers; i++) {\n                            uvLayer = json.uvs[i];\n                            geometry.faceVertexUvs[i][fi] = [];\n                            geometry.faceVertexUvs[i][fi + 1] = [];\n                            for (j = 0; j < 4; j++) {\n                                uvIndex = faces[offset++];\n                                u = uvLayer[uvIndex * 2];\n                                v = uvLayer[uvIndex * 2 + 1];\n                                uv = new Vector2(u, v);\n                                if (j !== 2)\n                                    geometry.faceVertexUvs[i][fi].push(uv);\n                                if (j !== 0)\n                                    geometry.faceVertexUvs[i][fi + 1].push(uv);\n                            }\n                        }\n                    }\n                    if (hasFaceNormal) {\n                        normalIndex = faces[offset++] * 3;\n                        faceA.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n                        faceB.normal.copy(faceA.normal);\n                    }\n                    if (hasFaceVertexNormal) {\n                        for (i = 0; i < 4; i++) {\n                            normalIndex = faces[offset++] * 3;\n                            normal = new Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n                            if (i !== 2)\n                                faceA.vertexNormals.push(normal);\n                            if (i !== 0)\n                                faceB.vertexNormals.push(normal);\n                        }\n                    }\n                    if (hasFaceColor) {\n                        colorIndex = faces[offset++];\n                        hex = colors[colorIndex];\n                        faceA.color.setHex(hex);\n                        faceB.color.setHex(hex);\n                    }\n                    if (hasFaceVertexColor) {\n                        for (i = 0; i < 4; i++) {\n                            colorIndex = faces[offset++];\n                            hex = colors[colorIndex];\n                            if (i !== 2)\n                                faceA.vertexColors.push(new Color(hex));\n                            if (i !== 0)\n                                faceB.vertexColors.push(new Color(hex));\n                        }\n                    }\n                    geometry.faces.push(faceA);\n                    geometry.faces.push(faceB);\n                }\n                else {\n                    face = new Face3();\n                    face.a = faces[offset++];\n                    face.b = faces[offset++];\n                    face.c = faces[offset++];\n                    if (hasMaterial) {\n                        materialIndex = faces[offset++];\n                        face.materialIndex = materialIndex;\n                    }\n                    // to get face <=> uv index correspondence\n                    fi = geometry.faces.length;\n                    if (hasFaceVertexUv) {\n                        for (i = 0; i < nUvLayers; i++) {\n                            uvLayer = json.uvs[i];\n                            geometry.faceVertexUvs[i][fi] = [];\n                            for (j = 0; j < 3; j++) {\n                                uvIndex = faces[offset++];\n                                u = uvLayer[uvIndex * 2];\n                                v = uvLayer[uvIndex * 2 + 1];\n                                uv = new Vector2(u, v);\n                                geometry.faceVertexUvs[i][fi].push(uv);\n                            }\n                        }\n                    }\n                    if (hasFaceNormal) {\n                        normalIndex = faces[offset++] * 3;\n                        face.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n                    }\n                    if (hasFaceVertexNormal) {\n                        for (i = 0; i < 3; i++) {\n                            normalIndex = faces[offset++] * 3;\n                            normal = new Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n                            face.vertexNormals.push(normal);\n                        }\n                    }\n                    if (hasFaceColor) {\n                        colorIndex = faces[offset++];\n                        face.color.setHex(colors[colorIndex]);\n                    }\n                    if (hasFaceVertexColor) {\n                        for (i = 0; i < 3; i++) {\n                            colorIndex = faces[offset++];\n                            face.vertexColors.push(new Color(colors[colorIndex]));\n                        }\n                    }\n                    geometry.faces.push(face);\n                }\n            }\n        }\n        function parseSkin(json, geometry) {\n            var influencesPerVertex = (json.influencesPerVertex !== undefined) ? json.influencesPerVertex : 2;\n            if (json.skinWeights) {\n                for (var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex) {\n                    var x = json.skinWeights[i];\n                    var y = (influencesPerVertex > 1) ? json.skinWeights[i + 1] : 0;\n                    var z = (influencesPerVertex > 2) ? json.skinWeights[i + 2] : 0;\n                    var w = (influencesPerVertex > 3) ? json.skinWeights[i + 3] : 0;\n                    geometry.skinWeights.push(new Vector4(x, y, z, w));\n                }\n            }\n            if (json.skinIndices) {\n                for (var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex) {\n                    var a = json.skinIndices[i];\n                    var b = (influencesPerVertex > 1) ? json.skinIndices[i + 1] : 0;\n                    var c = (influencesPerVertex > 2) ? json.skinIndices[i + 2] : 0;\n                    var d = (influencesPerVertex > 3) ? json.skinIndices[i + 3] : 0;\n                    geometry.skinIndices.push(new Vector4(a, b, c, d));\n                }\n            }\n            geometry.bones = json.bones;\n            if (geometry.bones && geometry.bones.length > 0 && (geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length)) {\n                console.warn('When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\n                    geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.');\n            }\n        }\n        function parseMorphing(json, geometry) {\n            var scale = json.scale;\n            if (json.morphTargets !== undefined) {\n                for (var i = 0, l = json.morphTargets.length; i < l; i++) {\n                    geometry.morphTargets[i] = {};\n                    geometry.morphTargets[i].name = json.morphTargets[i].name;\n                    geometry.morphTargets[i].vertices = [];\n                    var dstVertices = geometry.morphTargets[i].vertices;\n                    var srcVertices = json.morphTargets[i].vertices;\n                    for (var v = 0, vl = srcVertices.length; v < vl; v += 3) {\n                        var vertex = new Vector3();\n                        vertex.x = srcVertices[v] * scale;\n                        vertex.y = srcVertices[v + 1] * scale;\n                        vertex.z = srcVertices[v + 2] * scale;\n                        dstVertices.push(vertex);\n                    }\n                }\n            }\n            if (json.morphColors !== undefined && json.morphColors.length > 0) {\n                console.warn('THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.');\n                var faces = geometry.faces;\n                var morphColors = json.morphColors[0].colors;\n                for (var i = 0, l = faces.length; i < l; i++) {\n                    faces[i].color.fromArray(morphColors, i * 3);\n                }\n            }\n        }\n        function parseAnimations(json, geometry) {\n            var outputAnimations = [];\n            // parse old style Bone/Hierarchy animations\n            var animations = [];\n            if (json.animation !== undefined) {\n                animations.push(json.animation);\n            }\n            if (json.animations !== undefined) {\n                if (json.animations.length) {\n                    animations = animations.concat(json.animations);\n                }\n                else {\n                    animations.push(json.animations);\n                }\n            }\n            for (var i = 0; i < animations.length; i++) {\n                var clip = AnimationClip.parseAnimation(animations[i], geometry.bones);\n                if (clip)\n                    outputAnimations.push(clip);\n            }\n            // parse implicit morph animations\n            if (geometry.morphTargets) {\n                // TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n                var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets, 10);\n                outputAnimations = outputAnimations.concat(morphAnimationClips);\n            }\n            if (outputAnimations.length > 0)\n                geometry.animations = outputAnimations;\n        }\n        return function parse(json, texturePath) {\n            if (json.data !== undefined) {\n                // Geometry 4.0 spec\n                json = json.data;\n            }\n            if (json.scale !== undefined) {\n                json.scale = 1.0 / json.scale;\n            }\n            else {\n                json.scale = 1.0;\n            }\n            var geometry = new Geometry();\n            parseModel(json, geometry);\n            parseSkin(json, geometry);\n            parseMorphing(json, geometry);\n            parseAnimations(json, geometry);\n            geometry.computeFaceNormals();\n            geometry.computeBoundingSphere();\n            if (json.materials === undefined || json.materials.length === 0) {\n                return { geometry: geometry };\n            }\n            else {\n                var materials = Loader.prototype.initMaterials(json.materials, texturePath, this.crossOrigin);\n                return { geometry: geometry, materials: materials };\n            }\n        };\n    })()\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction ObjectLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n    this.texturePath = '';\n}\nObject.assign(ObjectLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n        if (this.texturePath === '') {\n            this.texturePath = url.substring(0, url.lastIndexOf('/') + 1);\n        }\n        var scope = this;\n        var loader = new FileLoader(scope.manager);\n        loader.load(url, function (text) {\n            var json = null;\n            try {\n                json = JSON.parse(text);\n            }\n            catch (error) {\n                if (onError !== undefined)\n                    onError(error);\n                console.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n                return;\n            }\n            var metadata = json.metadata;\n            if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n                console.error('THREE.ObjectLoader: Can\\'t load ' + url + '. Use THREE.JSONLoader instead.');\n                return;\n            }\n            scope.parse(json, onLoad);\n        }, onProgress, onError);\n    },\n    setTexturePath: function (value) {\n        this.texturePath = value;\n    },\n    setCrossOrigin: function (value) {\n        this.crossOrigin = value;\n    },\n    parse: function (json, onLoad) {\n        var shapes = this.parseShape(json.shapes);\n        var geometries = this.parseGeometries(json.geometries, shapes);\n        var images = this.parseImages(json.images, function () {\n            if (onLoad !== undefined)\n                onLoad(object);\n        });\n        var textures = this.parseTextures(json.textures, images);\n        var materials = this.parseMaterials(json.materials, textures);\n        var object = this.parseObject(json.object, geometries, materials);\n        if (json.animations) {\n            object.animations = this.parseAnimations(json.animations);\n        }\n        if (json.images === undefined || json.images.length === 0) {\n            if (onLoad !== undefined)\n                onLoad(object);\n        }\n        return object;\n    },\n    parseShape: function (json) {\n        var shapes = {};\n        if (json !== undefined) {\n            for (var i = 0, l = json.length; i < l; i++) {\n                var shape = new Shape().fromJSON(json[i]);\n                shapes[shape.uuid] = shape;\n            }\n        }\n        return shapes;\n    },\n    parseGeometries: function (json, shapes) {\n        var geometries = {};\n        if (json !== undefined) {\n            var geometryLoader = new JSONLoader();\n            var bufferGeometryLoader = new BufferGeometryLoader();\n            for (var i = 0, l = json.length; i < l; i++) {\n                var geometry;\n                var data = json[i];\n                switch (data.type) {\n                    case 'PlaneGeometry':\n                    case 'PlaneBufferGeometry':\n                        geometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n                        break;\n                    case 'BoxGeometry':\n                    case 'BoxBufferGeometry':\n                    case 'CubeGeometry': // backwards compatible\n                        geometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n                        break;\n                    case 'CircleGeometry':\n                    case 'CircleBufferGeometry':\n                        geometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n                        break;\n                    case 'CylinderGeometry':\n                    case 'CylinderBufferGeometry':\n                        geometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n                        break;\n                    case 'ConeGeometry':\n                    case 'ConeBufferGeometry':\n                        geometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n                        break;\n                    case 'SphereGeometry':\n                    case 'SphereBufferGeometry':\n                        geometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n                        break;\n                    case 'DodecahedronGeometry':\n                    case 'DodecahedronBufferGeometry':\n                    case 'IcosahedronGeometry':\n                    case 'IcosahedronBufferGeometry':\n                    case 'OctahedronGeometry':\n                    case 'OctahedronBufferGeometry':\n                    case 'TetrahedronGeometry':\n                    case 'TetrahedronBufferGeometry':\n                        geometry = new Geometries[data.type](data.radius, data.detail);\n                        break;\n                    case 'RingGeometry':\n                    case 'RingBufferGeometry':\n                        geometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n                        break;\n                    case 'TorusGeometry':\n                    case 'TorusBufferGeometry':\n                        geometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n                        break;\n                    case 'TorusKnotGeometry':\n                    case 'TorusKnotBufferGeometry':\n                        geometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n                        break;\n                    case 'LatheGeometry':\n                    case 'LatheBufferGeometry':\n                        geometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n                        break;\n                    case 'PolyhedronGeometry':\n                    case 'PolyhedronBufferGeometry':\n                        geometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n                        break;\n                    case 'ShapeGeometry':\n                    case 'ShapeBufferGeometry':\n                        var geometryShapes = [];\n                        for (var i = 0, l = data.shapes.length; i < l; i++) {\n                            var shape = shapes[data.shapes[i]];\n                            geometryShapes.push(shape);\n                        }\n                        geometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n                        break;\n                    case 'BufferGeometry':\n                        geometry = bufferGeometryLoader.parse(data);\n                        break;\n                    case 'Geometry':\n                        geometry = geometryLoader.parse(data, this.texturePath).geometry;\n                        break;\n                    default:\n                        console.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n                        continue;\n                }\n                geometry.uuid = data.uuid;\n                if (data.name !== undefined)\n                    geometry.name = data.name;\n                geometries[data.uuid] = geometry;\n            }\n        }\n        return geometries;\n    },\n    parseMaterials: function (json, textures) {\n        var materials = {};\n        if (json !== undefined) {\n            var loader = new MaterialLoader();\n            loader.setTextures(textures);\n            for (var i = 0, l = json.length; i < l; i++) {\n                var data = json[i];\n                if (data.type === 'MultiMaterial') {\n                    // Deprecated\n                    var array = [];\n                    for (var j = 0; j < data.materials.length; j++) {\n                        array.push(loader.parse(data.materials[j]));\n                    }\n                    materials[data.uuid] = array;\n                }\n                else {\n                    materials[data.uuid] = loader.parse(data);\n                }\n            }\n        }\n        return materials;\n    },\n    parseAnimations: function (json) {\n        var animations = [];\n        for (var i = 0; i < json.length; i++) {\n            var clip = AnimationClip.parse(json[i]);\n            animations.push(clip);\n        }\n        return animations;\n    },\n    parseImages: function (json, onLoad) {\n        var scope = this;\n        var images = {};\n        function loadImage(url) {\n            scope.manager.itemStart(url);\n            return loader.load(url, function () {\n                scope.manager.itemEnd(url);\n            }, undefined, function () {\n                scope.manager.itemEnd(url);\n                scope.manager.itemError(url);\n            });\n        }\n        if (json !== undefined && json.length > 0) {\n            var manager = new LoadingManager(onLoad);\n            var loader = new ImageLoader(manager);\n            loader.setCrossOrigin(this.crossOrigin);\n            for (var i = 0, l = json.length; i < l; i++) {\n                var image = json[i];\n                var path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(image.url) ? image.url : scope.texturePath + image.url;\n                images[image.uuid] = loadImage(path);\n            }\n        }\n        return images;\n    },\n    parseTextures: function (json, images) {\n        function parseConstant(value, type) {\n            if (typeof value === 'number')\n                return value;\n            console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n            return type[value];\n        }\n        var textures = {};\n        if (json !== undefined) {\n            for (var i = 0, l = json.length; i < l; i++) {\n                var data = json[i];\n                if (data.image === undefined) {\n                    console.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n                }\n                if (images[data.image] === undefined) {\n                    console.warn('THREE.ObjectLoader: Undefined image', data.image);\n                }\n                var texture = new Texture(images[data.image]);\n                texture.needsUpdate = true;\n                texture.uuid = data.uuid;\n                if (data.name !== undefined)\n                    texture.name = data.name;\n                if (data.mapping !== undefined)\n                    texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n                if (data.offset !== undefined)\n                    texture.offset.fromArray(data.offset);\n                if (data.repeat !== undefined)\n                    texture.repeat.fromArray(data.repeat);\n                if (data.center !== undefined)\n                    texture.center.fromArray(data.center);\n                if (data.rotation !== undefined)\n                    texture.rotation = data.rotation;\n                if (data.wrap !== undefined) {\n                    texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n                    texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n                }\n                if (data.minFilter !== undefined)\n                    texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n                if (data.magFilter !== undefined)\n                    texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n                if (data.anisotropy !== undefined)\n                    texture.anisotropy = data.anisotropy;\n                if (data.flipY !== undefined)\n                    texture.flipY = data.flipY;\n                textures[data.uuid] = texture;\n            }\n        }\n        return textures;\n    },\n    parseObject: function (data, geometries, materials) {\n        var object;\n        function getGeometry(name) {\n            if (geometries[name] === undefined) {\n                console.warn('THREE.ObjectLoader: Undefined geometry', name);\n            }\n            return geometries[name];\n        }\n        function getMaterial(name) {\n            if (name === undefined)\n                return undefined;\n            if (Array.isArray(name)) {\n                var array = [];\n                for (var i = 0, l = name.length; i < l; i++) {\n                    var uuid = name[i];\n                    if (materials[uuid] === undefined) {\n                        console.warn('THREE.ObjectLoader: Undefined material', uuid);\n                    }\n                    array.push(materials[uuid]);\n                }\n                return array;\n            }\n            if (materials[name] === undefined) {\n                console.warn('THREE.ObjectLoader: Undefined material', name);\n            }\n            return materials[name];\n        }\n        switch (data.type) {\n            case 'Scene':\n                object = new Scene();\n                if (data.background !== undefined) {\n                    if (Number.isInteger(data.background)) {\n                        object.background = new Color(data.background);\n                    }\n                }\n                if (data.fog !== undefined) {\n                    if (data.fog.type === 'Fog') {\n                        object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n                    }\n                    else if (data.fog.type === 'FogExp2') {\n                        object.fog = new FogExp2(data.fog.color, data.fog.density);\n                    }\n                }\n                break;\n            case 'PerspectiveCamera':\n                object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n                if (data.focus !== undefined)\n                    object.focus = data.focus;\n                if (data.zoom !== undefined)\n                    object.zoom = data.zoom;\n                if (data.filmGauge !== undefined)\n                    object.filmGauge = data.filmGauge;\n                if (data.filmOffset !== undefined)\n                    object.filmOffset = data.filmOffset;\n                if (data.view !== undefined)\n                    object.view = Object.assign({}, data.view);\n                break;\n            case 'OrthographicCamera':\n                object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n                break;\n            case 'AmbientLight':\n                object = new AmbientLight(data.color, data.intensity);\n                break;\n            case 'DirectionalLight':\n                object = new DirectionalLight(data.color, data.intensity);\n                break;\n            case 'PointLight':\n                object = new PointLight(data.color, data.intensity, data.distance, data.decay);\n                break;\n            case 'RectAreaLight':\n                object = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n                break;\n            case 'SpotLight':\n                object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n                break;\n            case 'HemisphereLight':\n                object = new HemisphereLight(data.color, data.groundColor, data.intensity);\n                break;\n            case 'SkinnedMesh':\n                console.warn('THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.');\n            case 'Mesh':\n                var geometry = getGeometry(data.geometry);\n                var material = getMaterial(data.material);\n                if (geometry.bones && geometry.bones.length > 0) {\n                    object = new SkinnedMesh(geometry, material);\n                }\n                else {\n                    object = new Mesh(geometry, material);\n                }\n                break;\n            case 'LOD':\n                object = new LOD();\n                break;\n            case 'Line':\n                object = new Line(getGeometry(data.geometry), getMaterial(data.material), data.mode);\n                break;\n            case 'LineLoop':\n                object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n                break;\n            case 'LineSegments':\n                object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n                break;\n            case 'PointCloud':\n            case 'Points':\n                object = new Points(getGeometry(data.geometry), getMaterial(data.material));\n                break;\n            case 'Sprite':\n                object = new Sprite(getMaterial(data.material));\n                break;\n            case 'Group':\n                object = new Group();\n                break;\n            default:\n                object = new Object3D();\n        }\n        object.uuid = data.uuid;\n        if (data.name !== undefined)\n            object.name = data.name;\n        if (data.matrix !== undefined) {\n            object.matrix.fromArray(data.matrix);\n            object.matrix.decompose(object.position, object.quaternion, object.scale);\n        }\n        else {\n            if (data.position !== undefined)\n                object.position.fromArray(data.position);\n            if (data.rotation !== undefined)\n                object.rotation.fromArray(data.rotation);\n            if (data.quaternion !== undefined)\n                object.quaternion.fromArray(data.quaternion);\n            if (data.scale !== undefined)\n                object.scale.fromArray(data.scale);\n        }\n        if (data.castShadow !== undefined)\n            object.castShadow = data.castShadow;\n        if (data.receiveShadow !== undefined)\n            object.receiveShadow = data.receiveShadow;\n        if (data.shadow) {\n            if (data.shadow.bias !== undefined)\n                object.shadow.bias = data.shadow.bias;\n            if (data.shadow.radius !== undefined)\n                object.shadow.radius = data.shadow.radius;\n            if (data.shadow.mapSize !== undefined)\n                object.shadow.mapSize.fromArray(data.shadow.mapSize);\n            if (data.shadow.camera !== undefined)\n                object.shadow.camera = this.parseObject(data.shadow.camera);\n        }\n        if (data.visible !== undefined)\n            object.visible = data.visible;\n        if (data.userData !== undefined)\n            object.userData = data.userData;\n        if (data.children !== undefined) {\n            var children = data.children;\n            for (var i = 0; i < children.length; i++) {\n                object.add(this.parseObject(children[i], geometries, materials));\n            }\n        }\n        if (data.type === 'LOD') {\n            var levels = data.levels;\n            for (var l = 0; l < levels.length; l++) {\n                var level = levels[l];\n                var child = object.getObjectByProperty('uuid', level.object);\n                if (child !== undefined) {\n                    object.addLevel(child, level.distance);\n                }\n            }\n        }\n        return object;\n    }\n});\nvar TEXTURE_MAPPING = {\n    UVMapping: UVMapping,\n    CubeReflectionMapping: CubeReflectionMapping,\n    CubeRefractionMapping: CubeRefractionMapping,\n    EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n    EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n    SphericalReflectionMapping: SphericalReflectionMapping,\n    CubeUVReflectionMapping: CubeUVReflectionMapping,\n    CubeUVRefractionMapping: CubeUVRefractionMapping\n};\nvar TEXTURE_WRAPPING = {\n    RepeatWrapping: RepeatWrapping,\n    ClampToEdgeWrapping: ClampToEdgeWrapping,\n    MirroredRepeatWrapping: MirroredRepeatWrapping\n};\nvar TEXTURE_FILTER = {\n    NearestFilter: NearestFilter,\n    NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n    NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n    LinearFilter: LinearFilter,\n    LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n    LinearMipMapLinearFilter: LinearMipMapLinearFilter\n};\n/**\n * @author thespite / http://clicktorelease.com/\n */\nfunction ImageBitmapLoader(manager) {\n    if (typeof createImageBitmap === 'undefined') {\n        console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n    }\n    if (typeof fetch === 'undefined') {\n        console.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n    }\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n    this.options = undefined;\n}\nImageBitmapLoader.prototype = {\n    constructor: ImageBitmapLoader,\n    setOptions: function setOptions(options) {\n        this.options = options;\n        return this;\n    },\n    load: function load(url, onLoad, onProgress, onError) {\n        if (url === undefined)\n            url = '';\n        if (this.path !== undefined)\n            url = this.path + url;\n        var scope = this;\n        var cached = Cache.get(url);\n        if (cached !== undefined) {\n            scope.manager.itemStart(url);\n            setTimeout(function () {\n                if (onLoad)\n                    onLoad(cached);\n                scope.manager.itemEnd(url);\n            }, 0);\n            return cached;\n        }\n        fetch(url).then(function (res) {\n            return res.blob();\n        }).then(function (blob) {\n            return createImageBitmap(blob, scope.options);\n        }).then(function (imageBitmap) {\n            Cache.add(url, imageBitmap);\n            if (onLoad)\n                onLoad(imageBitmap);\n            scope.manager.itemEnd(url);\n        }).catch(function (e) {\n            if (onError)\n                onError(e);\n            scope.manager.itemEnd(url);\n            scope.manager.itemError(url);\n        });\n    },\n    setCrossOrigin: function ( /* value */) {\n        return this;\n    },\n    setPath: function (value) {\n        this.path = value;\n        return this;\n    }\n};\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n **/\nfunction ShapePath() {\n    this.type = 'ShapePath';\n    this.subPaths = [];\n    this.currentPath = null;\n}\nObject.assign(ShapePath.prototype, {\n    moveTo: function (x, y) {\n        this.currentPath = new Path();\n        this.subPaths.push(this.currentPath);\n        this.currentPath.moveTo(x, y);\n    },\n    lineTo: function (x, y) {\n        this.currentPath.lineTo(x, y);\n    },\n    quadraticCurveTo: function (aCPx, aCPy, aX, aY) {\n        this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n    },\n    bezierCurveTo: function (aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n        this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n    },\n    splineThru: function (pts) {\n        this.currentPath.splineThru(pts);\n    },\n    toShapes: function (isCCW, noHoles) {\n        function toShapesNoHoles(inSubpaths) {\n            var shapes = [];\n            for (var i = 0, l = inSubpaths.length; i < l; i++) {\n                var tmpPath = inSubpaths[i];\n                var tmpShape = new Shape();\n                tmpShape.curves = tmpPath.curves;\n                shapes.push(tmpShape);\n            }\n            return shapes;\n        }\n        function isPointInsidePolygon(inPt, inPolygon) {\n            var polyLen = inPolygon.length;\n            // inPt on polygon contour => immediate success    or\n            // toggling of inside/outside at every single! intersection point of an edge\n            //  with the horizontal line through inPt, left of inPt\n            //  not counting lowerY endpoints of edges and whole edges on that line\n            var inside = false;\n            for (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n                var edgeLowPt = inPolygon[p];\n                var edgeHighPt = inPolygon[q];\n                var edgeDx = edgeHighPt.x - edgeLowPt.x;\n                var edgeDy = edgeHighPt.y - edgeLowPt.y;\n                if (Math.abs(edgeDy) > Number.EPSILON) {\n                    // not parallel\n                    if (edgeDy < 0) {\n                        edgeLowPt = inPolygon[q];\n                        edgeDx = -edgeDx;\n                        edgeHighPt = inPolygon[p];\n                        edgeDy = -edgeDy;\n                    }\n                    if ((inPt.y < edgeLowPt.y) || (inPt.y > edgeHighPt.y))\n                        continue;\n                    if (inPt.y === edgeLowPt.y) {\n                        if (inPt.x === edgeLowPt.x)\n                            return true; // inPt is on contour ?\n                        // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n                    }\n                    else {\n                        var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n                        if (perpEdge === 0)\n                            return true; // inPt is on contour ?\n                        if (perpEdge < 0)\n                            continue;\n                        inside = !inside; // true intersection left of inPt\n                    }\n                }\n                else {\n                    // parallel or collinear\n                    if (inPt.y !== edgeLowPt.y)\n                        continue; // parallel\n                    // edge lies on the same horizontal line as inPt\n                    if (((edgeHighPt.x <= inPt.x) && (inPt.x <= edgeLowPt.x)) ||\n                        ((edgeLowPt.x <= inPt.x) && (inPt.x <= edgeHighPt.x)))\n                        return true; // inPt: Point on contour !\n                    // continue;\n                }\n            }\n            return inside;\n        }\n        var isClockWise = ShapeUtils.isClockWise;\n        var subPaths = this.subPaths;\n        if (subPaths.length === 0)\n            return [];\n        if (noHoles === true)\n            return toShapesNoHoles(subPaths);\n        var solid, tmpPath, tmpShape, shapes = [];\n        if (subPaths.length === 1) {\n            tmpPath = subPaths[0];\n            tmpShape = new Shape();\n            tmpShape.curves = tmpPath.curves;\n            shapes.push(tmpShape);\n            return shapes;\n        }\n        var holesFirst = !isClockWise(subPaths[0].getPoints());\n        holesFirst = isCCW ? !holesFirst : holesFirst;\n        // console.log(\"Holes first\", holesFirst);\n        var betterShapeHoles = [];\n        var newShapes = [];\n        var newShapeHoles = [];\n        var mainIdx = 0;\n        var tmpPoints;\n        newShapes[mainIdx] = undefined;\n        newShapeHoles[mainIdx] = [];\n        for (var i = 0, l = subPaths.length; i < l; i++) {\n            tmpPath = subPaths[i];\n            tmpPoints = tmpPath.getPoints();\n            solid = isClockWise(tmpPoints);\n            solid = isCCW ? !solid : solid;\n            if (solid) {\n                if ((!holesFirst) && (newShapes[mainIdx]))\n                    mainIdx++;\n                newShapes[mainIdx] = { s: new Shape(), p: tmpPoints };\n                newShapes[mainIdx].s.curves = tmpPath.curves;\n                if (holesFirst)\n                    mainIdx++;\n                newShapeHoles[mainIdx] = [];\n                //console.log('cw', i);\n            }\n            else {\n                newShapeHoles[mainIdx].push({ h: tmpPath, p: tmpPoints[0] });\n                //console.log('ccw', i);\n            }\n        }\n        // only Holes? -> probably all Shapes with wrong orientation\n        if (!newShapes[0])\n            return toShapesNoHoles(subPaths);\n        if (newShapes.length > 1) {\n            var ambiguous = false;\n            var toChange = [];\n            for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n                betterShapeHoles[sIdx] = [];\n            }\n            for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n                var sho = newShapeHoles[sIdx];\n                for (var hIdx = 0; hIdx < sho.length; hIdx++) {\n                    var ho = sho[hIdx];\n                    var hole_unassigned = true;\n                    for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n                        if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n                            if (sIdx !== s2Idx)\n                                toChange.push({ froms: sIdx, tos: s2Idx, hole: hIdx });\n                            if (hole_unassigned) {\n                                hole_unassigned = false;\n                                betterShapeHoles[s2Idx].push(ho);\n                            }\n                            else {\n                                ambiguous = true;\n                            }\n                        }\n                    }\n                    if (hole_unassigned) {\n                        betterShapeHoles[sIdx].push(ho);\n                    }\n                }\n            }\n            // console.log(\"ambiguous: \", ambiguous);\n            if (toChange.length > 0) {\n                // console.log(\"to change: \", toChange);\n                if (!ambiguous)\n                    newShapeHoles = betterShapeHoles;\n            }\n        }\n        var tmpHoles;\n        for (var i = 0, il = newShapes.length; i < il; i++) {\n            tmpShape = newShapes[i].s;\n            shapes.push(tmpShape);\n            tmpHoles = newShapeHoles[i];\n            for (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n                tmpShape.holes.push(tmpHoles[j].h);\n            }\n        }\n        //console.log(\"shape\", shapes);\n        return shapes;\n    }\n});\n/**\n * @author zz85 / http://www.lab4games.net/zz85/blog\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Font(data) {\n    this.type = 'Font';\n    this.data = data;\n}\nObject.assign(Font.prototype, {\n    isFont: true,\n    generateShapes: function (text, size, divisions) {\n        if (size === undefined)\n            size = 100;\n        if (divisions === undefined)\n            divisions = 4;\n        var shapes = [];\n        var paths = createPaths(text, size, divisions, this.data);\n        for (var p = 0, pl = paths.length; p < pl; p++) {\n            Array.prototype.push.apply(shapes, paths[p].toShapes());\n        }\n        return shapes;\n    }\n});\nfunction createPaths(text, size, divisions, data) {\n    var chars = String(text).split('');\n    var scale = size / data.resolution;\n    var line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n    var paths = [];\n    var offsetX = 0, offsetY = 0;\n    for (var i = 0; i < chars.length; i++) {\n        var char = chars[i];\n        if (char === '\\n') {\n            offsetX = 0;\n            offsetY -= line_height;\n        }\n        else {\n            var ret = createPath(char, divisions, scale, offsetX, offsetY, data);\n            offsetX += ret.offsetX;\n            paths.push(ret.path);\n        }\n    }\n    return paths;\n}\nfunction createPath(char, divisions, scale, offsetX, offsetY, data) {\n    var glyph = data.glyphs[char] || data.glyphs['?'];\n    if (!glyph)\n        return;\n    var path = new ShapePath();\n    var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n    if (glyph.o) {\n        var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n        for (var i = 0, l = outline.length; i < l;) {\n            var action = outline[i++];\n            switch (action) {\n                case 'm': // moveTo\n                    x = outline[i++] * scale + offsetX;\n                    y = outline[i++] * scale + offsetY;\n                    path.moveTo(x, y);\n                    break;\n                case 'l': // lineTo\n                    x = outline[i++] * scale + offsetX;\n                    y = outline[i++] * scale + offsetY;\n                    path.lineTo(x, y);\n                    break;\n                case 'q': // quadraticCurveTo\n                    cpx = outline[i++] * scale + offsetX;\n                    cpy = outline[i++] * scale + offsetY;\n                    cpx1 = outline[i++] * scale + offsetX;\n                    cpy1 = outline[i++] * scale + offsetY;\n                    path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n                    break;\n                case 'b': // bezierCurveTo\n                    cpx = outline[i++] * scale + offsetX;\n                    cpy = outline[i++] * scale + offsetY;\n                    cpx1 = outline[i++] * scale + offsetX;\n                    cpy1 = outline[i++] * scale + offsetY;\n                    cpx2 = outline[i++] * scale + offsetX;\n                    cpy2 = outline[i++] * scale + offsetY;\n                    path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n                    break;\n            }\n        }\n    }\n    return { offsetX: glyph.ha * scale, path: path };\n}\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction FontLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n}\nObject.assign(FontLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n        var scope = this;\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.load(url, function (text) {\n            var json;\n            try {\n                json = JSON.parse(text);\n            }\n            catch (e) {\n                console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n                json = JSON.parse(text.substring(65, text.length - 2));\n            }\n            var font = scope.parse(json);\n            if (onLoad)\n                onLoad(font);\n        }, onProgress, onError);\n    },\n    parse: function (json) {\n        return new Font(json);\n    },\n    setPath: function (value) {\n        this.path = value;\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nvar context;\nvar AudioContext = {\n    getContext: function () {\n        if (context === undefined) {\n            context = new (window.AudioContext || window.webkitAudioContext)();\n        }\n        return context;\n    },\n    setContext: function (value) {\n        context = value;\n    }\n};\n/**\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\nfunction AudioLoader(manager) {\n    this.manager = (manager !== undefined) ? manager : DefaultLoadingManager;\n}\nObject.assign(AudioLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n        var loader = new FileLoader(this.manager);\n        loader.setResponseType('arraybuffer');\n        loader.load(url, function (buffer) {\n            var context = AudioContext.getContext();\n            context.decodeAudioData(buffer, function (audioBuffer) {\n                onLoad(audioBuffer);\n            });\n        }, onProgress, onError);\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction StereoCamera() {\n    this.type = 'StereoCamera';\n    this.aspect = 1;\n    this.eyeSep = 0.064;\n    this.cameraL = new PerspectiveCamera();\n    this.cameraL.layers.enable(1);\n    this.cameraL.matrixAutoUpdate = false;\n    this.cameraR = new PerspectiveCamera();\n    this.cameraR.layers.enable(2);\n    this.cameraR.matrixAutoUpdate = false;\n}\nObject.assign(StereoCamera.prototype, {\n    update: (function () {\n        var instance, focus, fov, aspect, near, far, zoom, eyeSep;\n        var eyeRight = new Matrix4();\n        var eyeLeft = new Matrix4();\n        return function update(camera) {\n            var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||\n                aspect !== camera.aspect * this.aspect || near !== camera.near ||\n                far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;\n            if (needsUpdate) {\n                instance = this;\n                focus = camera.focus;\n                fov = camera.fov;\n                aspect = camera.aspect * this.aspect;\n                near = camera.near;\n                far = camera.far;\n                zoom = camera.zoom;\n                // Off-axis stereoscopic effect based on\n                // http://paulbourke.net/stereographics/stereorender/\n                var projectionMatrix = camera.projectionMatrix.clone();\n                eyeSep = this.eyeSep / 2;\n                var eyeSepOnProjection = eyeSep * near / focus;\n                var ymax = (near * Math.tan(_Math.DEG2RAD * fov * 0.5)) / zoom;\n                var xmin, xmax;\n                // translate xOffset\n                eyeLeft.elements[12] = -eyeSep;\n                eyeRight.elements[12] = eyeSep;\n                // for left eye\n                xmin = -ymax * aspect + eyeSepOnProjection;\n                xmax = ymax * aspect + eyeSepOnProjection;\n                projectionMatrix.elements[0] = 2 * near / (xmax - xmin);\n                projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n                this.cameraL.projectionMatrix.copy(projectionMatrix);\n                // for right eye\n                xmin = -ymax * aspect - eyeSepOnProjection;\n                xmax = ymax * aspect - eyeSepOnProjection;\n                projectionMatrix.elements[0] = 2 * near / (xmax - xmin);\n                projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n                this.cameraR.projectionMatrix.copy(projectionMatrix);\n            }\n            this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft);\n            this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight);\n        };\n    })()\n});\n/**\n * Camera for rendering cube maps\n *\t- renders scene into axis-aligned cube\n *\n * @author alteredq / http://alteredqualia.com/\n */\nfunction CubeCamera(near, far, cubeResolution) {\n    Object3D.call(this);\n    this.type = 'CubeCamera';\n    var fov = 90, aspect = 1;\n    var cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPX.up.set(0, -1, 0);\n    cameraPX.lookAt(new Vector3(1, 0, 0));\n    this.add(cameraPX);\n    var cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNX.up.set(0, -1, 0);\n    cameraNX.lookAt(new Vector3(-1, 0, 0));\n    this.add(cameraNX);\n    var cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPY.up.set(0, 0, 1);\n    cameraPY.lookAt(new Vector3(0, 1, 0));\n    this.add(cameraPY);\n    var cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNY.up.set(0, 0, -1);\n    cameraNY.lookAt(new Vector3(0, -1, 0));\n    this.add(cameraNY);\n    var cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPZ.up.set(0, -1, 0);\n    cameraPZ.lookAt(new Vector3(0, 0, 1));\n    this.add(cameraPZ);\n    var cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNZ.up.set(0, -1, 0);\n    cameraNZ.lookAt(new Vector3(0, 0, -1));\n    this.add(cameraNZ);\n    var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\n    this.renderTarget = new WebGLRenderTargetCube(cubeResolution, cubeResolution, options);\n    this.renderTarget.texture.name = \"CubeCamera\";\n    this.update = function (renderer, scene) {\n        if (this.parent === null)\n            this.updateMatrixWorld();\n        var renderTarget = this.renderTarget;\n        var generateMipmaps = renderTarget.texture.generateMipmaps;\n        renderTarget.texture.generateMipmaps = false;\n        renderTarget.activeCubeFace = 0;\n        renderer.render(scene, cameraPX, renderTarget);\n        renderTarget.activeCubeFace = 1;\n        renderer.render(scene, cameraNX, renderTarget);\n        renderTarget.activeCubeFace = 2;\n        renderer.render(scene, cameraPY, renderTarget);\n        renderTarget.activeCubeFace = 3;\n        renderer.render(scene, cameraNY, renderTarget);\n        renderTarget.activeCubeFace = 4;\n        renderer.render(scene, cameraPZ, renderTarget);\n        renderTarget.texture.generateMipmaps = generateMipmaps;\n        renderTarget.activeCubeFace = 5;\n        renderer.render(scene, cameraNZ, renderTarget);\n        renderer.setRenderTarget(null);\n    };\n    this.clear = function (renderer, color, depth, stencil) {\n        var renderTarget = this.renderTarget;\n        for (var i = 0; i < 6; i++) {\n            renderTarget.activeCubeFace = i;\n            renderer.setRenderTarget(renderTarget);\n            renderer.clear(color, depth, stencil);\n        }\n        renderer.setRenderTarget(null);\n    };\n}\nCubeCamera.prototype = Object.create(Object3D.prototype);\nCubeCamera.prototype.constructor = CubeCamera;\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction AudioListener() {\n    Object3D.call(this);\n    this.type = 'AudioListener';\n    this.context = AudioContext.getContext();\n    this.gain = this.context.createGain();\n    this.gain.connect(this.context.destination);\n    this.filter = null;\n}\nAudioListener.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: AudioListener,\n    getInput: function () {\n        return this.gain;\n    },\n    removeFilter: function () {\n        if (this.filter !== null) {\n            this.gain.disconnect(this.filter);\n            this.filter.disconnect(this.context.destination);\n            this.gain.connect(this.context.destination);\n            this.filter = null;\n        }\n    },\n    getFilter: function () {\n        return this.filter;\n    },\n    setFilter: function (value) {\n        if (this.filter !== null) {\n            this.gain.disconnect(this.filter);\n            this.filter.disconnect(this.context.destination);\n        }\n        else {\n            this.gain.disconnect(this.context.destination);\n        }\n        this.filter = value;\n        this.gain.connect(this.filter);\n        this.filter.connect(this.context.destination);\n    },\n    getMasterVolume: function () {\n        return this.gain.gain.value;\n    },\n    setMasterVolume: function (value) {\n        this.gain.gain.value = value;\n    },\n    updateMatrixWorld: (function () {\n        var position = new Vector3();\n        var quaternion = new Quaternion();\n        var scale = new Vector3();\n        var orientation = new Vector3();\n        return function updateMatrixWorld(force) {\n            Object3D.prototype.updateMatrixWorld.call(this, force);\n            var listener = this.context.listener;\n            var up = this.up;\n            this.matrixWorld.decompose(position, quaternion, scale);\n            orientation.set(0, 0, -1).applyQuaternion(quaternion);\n            if (listener.positionX) {\n                listener.positionX.setValueAtTime(position.x, this.context.currentTime);\n                listener.positionY.setValueAtTime(position.y, this.context.currentTime);\n                listener.positionZ.setValueAtTime(position.z, this.context.currentTime);\n                listener.forwardX.setValueAtTime(orientation.x, this.context.currentTime);\n                listener.forwardY.setValueAtTime(orientation.y, this.context.currentTime);\n                listener.forwardZ.setValueAtTime(orientation.z, this.context.currentTime);\n                listener.upX.setValueAtTime(up.x, this.context.currentTime);\n                listener.upY.setValueAtTime(up.y, this.context.currentTime);\n                listener.upZ.setValueAtTime(up.z, this.context.currentTime);\n            }\n            else {\n                listener.setPosition(position.x, position.y, position.z);\n                listener.setOrientation(orientation.x, orientation.y, orientation.z, up.x, up.y, up.z);\n            }\n        };\n    })()\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\n */\nfunction Audio(listener) {\n    Object3D.call(this);\n    this.type = 'Audio';\n    this.context = listener.context;\n    this.gain = this.context.createGain();\n    this.gain.connect(listener.getInput());\n    this.autoplay = false;\n    this.buffer = null;\n    this.loop = false;\n    this.startTime = 0;\n    this.offset = 0;\n    this.playbackRate = 1;\n    this.isPlaying = false;\n    this.hasPlaybackControl = true;\n    this.sourceType = 'empty';\n    this.filters = [];\n}\nAudio.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Audio,\n    getOutput: function () {\n        return this.gain;\n    },\n    setNodeSource: function (audioNode) {\n        this.hasPlaybackControl = false;\n        this.sourceType = 'audioNode';\n        this.source = audioNode;\n        this.connect();\n        return this;\n    },\n    setBuffer: function (audioBuffer) {\n        this.buffer = audioBuffer;\n        this.sourceType = 'buffer';\n        if (this.autoplay)\n            this.play();\n        return this;\n    },\n    play: function () {\n        if (this.isPlaying === true) {\n            console.warn('THREE.Audio: Audio is already playing.');\n            return;\n        }\n        if (this.hasPlaybackControl === false) {\n            console.warn('THREE.Audio: this Audio has no playback control.');\n            return;\n        }\n        var source = this.context.createBufferSource();\n        source.buffer = this.buffer;\n        source.loop = this.loop;\n        source.onended = this.onEnded.bind(this);\n        source.playbackRate.setValueAtTime(this.playbackRate, this.startTime);\n        this.startTime = this.context.currentTime;\n        source.start(this.startTime, this.offset);\n        this.isPlaying = true;\n        this.source = source;\n        return this.connect();\n    },\n    pause: function () {\n        if (this.hasPlaybackControl === false) {\n            console.warn('THREE.Audio: this Audio has no playback control.');\n            return;\n        }\n        if (this.isPlaying === true) {\n            this.source.stop();\n            this.offset += (this.context.currentTime - this.startTime) * this.playbackRate;\n            this.isPlaying = false;\n        }\n        return this;\n    },\n    stop: function () {\n        if (this.hasPlaybackControl === false) {\n            console.warn('THREE.Audio: this Audio has no playback control.');\n            return;\n        }\n        this.source.stop();\n        this.offset = 0;\n        this.isPlaying = false;\n        return this;\n    },\n    connect: function () {\n        if (this.filters.length > 0) {\n            this.source.connect(this.filters[0]);\n            for (var i = 1, l = this.filters.length; i < l; i++) {\n                this.filters[i - 1].connect(this.filters[i]);\n            }\n            this.filters[this.filters.length - 1].connect(this.getOutput());\n        }\n        else {\n            this.source.connect(this.getOutput());\n        }\n        return this;\n    },\n    disconnect: function () {\n        if (this.filters.length > 0) {\n            this.source.disconnect(this.filters[0]);\n            for (var i = 1, l = this.filters.length; i < l; i++) {\n                this.filters[i - 1].disconnect(this.filters[i]);\n            }\n            this.filters[this.filters.length - 1].disconnect(this.getOutput());\n        }\n        else {\n            this.source.disconnect(this.getOutput());\n        }\n        return this;\n    },\n    getFilters: function () {\n        return this.filters;\n    },\n    setFilters: function (value) {\n        if (!value)\n            value = [];\n        if (this.isPlaying === true) {\n            this.disconnect();\n            this.filters = value;\n            this.connect();\n        }\n        else {\n            this.filters = value;\n        }\n        return this;\n    },\n    getFilter: function () {\n        return this.getFilters()[0];\n    },\n    setFilter: function (filter) {\n        return this.setFilters(filter ? [filter] : []);\n    },\n    setPlaybackRate: function (value) {\n        if (this.hasPlaybackControl === false) {\n            console.warn('THREE.Audio: this Audio has no playback control.');\n            return;\n        }\n        this.playbackRate = value;\n        if (this.isPlaying === true) {\n            this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime);\n        }\n        return this;\n    },\n    getPlaybackRate: function () {\n        return this.playbackRate;\n    },\n    onEnded: function () {\n        this.isPlaying = false;\n    },\n    getLoop: function () {\n        if (this.hasPlaybackControl === false) {\n            console.warn('THREE.Audio: this Audio has no playback control.');\n            return false;\n        }\n        return this.loop;\n    },\n    setLoop: function (value) {\n        if (this.hasPlaybackControl === false) {\n            console.warn('THREE.Audio: this Audio has no playback control.');\n            return;\n        }\n        this.loop = value;\n        if (this.isPlaying === true) {\n            this.source.loop = this.loop;\n        }\n        return this;\n    },\n    getVolume: function () {\n        return this.gain.gain.value;\n    },\n    setVolume: function (value) {\n        this.gain.gain.value = value;\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction PositionalAudio(listener) {\n    Audio.call(this, listener);\n    this.panner = this.context.createPanner();\n    this.panner.connect(this.gain);\n}\nPositionalAudio.prototype = Object.assign(Object.create(Audio.prototype), {\n    constructor: PositionalAudio,\n    getOutput: function () {\n        return this.panner;\n    },\n    getRefDistance: function () {\n        return this.panner.refDistance;\n    },\n    setRefDistance: function (value) {\n        this.panner.refDistance = value;\n    },\n    getRolloffFactor: function () {\n        return this.panner.rolloffFactor;\n    },\n    setRolloffFactor: function (value) {\n        this.panner.rolloffFactor = value;\n    },\n    getDistanceModel: function () {\n        return this.panner.distanceModel;\n    },\n    setDistanceModel: function (value) {\n        this.panner.distanceModel = value;\n    },\n    getMaxDistance: function () {\n        return this.panner.maxDistance;\n    },\n    setMaxDistance: function (value) {\n        this.panner.maxDistance = value;\n    },\n    updateMatrixWorld: (function () {\n        var position = new Vector3();\n        return function updateMatrixWorld(force) {\n            Object3D.prototype.updateMatrixWorld.call(this, force);\n            position.setFromMatrixPosition(this.matrixWorld);\n            this.panner.setPosition(position.x, position.y, position.z);\n        };\n    })()\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction AudioAnalyser(audio, fftSize) {\n    this.analyser = audio.context.createAnalyser();\n    this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n    this.data = new Uint8Array(this.analyser.frequencyBinCount);\n    audio.getOutput().connect(this.analyser);\n}\nObject.assign(AudioAnalyser.prototype, {\n    getFrequencyData: function () {\n        this.analyser.getByteFrequencyData(this.data);\n        return this.data;\n    },\n    getAverageFrequency: function () {\n        var value = 0, data = this.getFrequencyData();\n        for (var i = 0; i < data.length; i++) {\n            value += data[i];\n        }\n        return value / data.length;\n    }\n});\n/**\n *\n * Buffered scene graph property that allows weighted accumulation.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\nfunction PropertyMixer(binding, typeName, valueSize) {\n    this.binding = binding;\n    this.valueSize = valueSize;\n    var bufferType = Float64Array, mixFunction;\n    switch (typeName) {\n        case 'quaternion':\n            mixFunction = this._slerp;\n            break;\n        case 'string':\n        case 'bool':\n            bufferType = Array;\n            mixFunction = this._select;\n            break;\n        default:\n            mixFunction = this._lerp;\n    }\n    this.buffer = new bufferType(valueSize * 4);\n    // layout: [ incoming | accu0 | accu1 | orig ]\n    //\n    // interpolators can use .buffer as their .result\n    // the data then goes to 'incoming'\n    //\n    // 'accu0' and 'accu1' are used frame-interleaved for\n    // the cumulative result and are compared to detect\n    // changes\n    //\n    // 'orig' stores the original state of the property\n    this._mixBufferRegion = mixFunction;\n    this.cumulativeWeight = 0;\n    this.useCount = 0;\n    this.referenceCount = 0;\n}\nObject.assign(PropertyMixer.prototype, {\n    // accumulate data in the 'incoming' region into 'accu<i>'\n    accumulate: function (accuIndex, weight) {\n        // note: happily accumulating nothing when weight = 0, the caller knows\n        // the weight and shouldn't have made the call in the first place\n        var buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride, currentWeight = this.cumulativeWeight;\n        if (currentWeight === 0) {\n            // accuN := incoming * weight\n            for (var i = 0; i !== stride; ++i) {\n                buffer[offset + i] = buffer[i];\n            }\n            currentWeight = weight;\n        }\n        else {\n            // accuN := accuN + incoming * weight\n            currentWeight += weight;\n            var mix = weight / currentWeight;\n            this._mixBufferRegion(buffer, offset, 0, mix, stride);\n        }\n        this.cumulativeWeight = currentWeight;\n    },\n    // apply the state of 'accu<i>' to the binding when accus differ\n    apply: function (accuIndex) {\n        var stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, binding = this.binding;\n        this.cumulativeWeight = 0;\n        if (weight < 1) {\n            // accuN := accuN + original * ( 1 - cumulativeWeight )\n            var originalValueOffset = stride * 3;\n            this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n        }\n        for (var i = stride, e = stride + stride; i !== e; ++i) {\n            if (buffer[i] !== buffer[i + stride]) {\n                // value has changed -> update scene graph\n                binding.setValue(buffer, offset);\n                break;\n            }\n        }\n    },\n    // remember the state of the bound property and copy it to both accus\n    saveOriginalState: function () {\n        var binding = this.binding;\n        var buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * 3;\n        binding.getValue(buffer, originalValueOffset);\n        // accu[0..1] := orig -- initially detect changes against the original\n        for (var i = stride, e = originalValueOffset; i !== e; ++i) {\n            buffer[i] = buffer[originalValueOffset + (i % stride)];\n        }\n        this.cumulativeWeight = 0;\n    },\n    // apply the state previously taken via 'saveOriginalState' to the binding\n    restoreOriginalState: function () {\n        var originalValueOffset = this.valueSize * 3;\n        this.binding.setValue(this.buffer, originalValueOffset);\n    },\n    // mix functions\n    _select: function (buffer, dstOffset, srcOffset, t, stride) {\n        if (t >= 0.5) {\n            for (var i = 0; i !== stride; ++i) {\n                buffer[dstOffset + i] = buffer[srcOffset + i];\n            }\n        }\n    },\n    _slerp: function (buffer, dstOffset, srcOffset, t) {\n        Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n    },\n    _lerp: function (buffer, dstOffset, srcOffset, t, stride) {\n        var s = 1 - t;\n        for (var i = 0; i !== stride; ++i) {\n            var j = dstOffset + i;\n            buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n        }\n    }\n});\n/**\n *\n * A reference to a real property in the scene graph.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\n// Characters [].:/ are reserved for track binding syntax.\nvar RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nfunction Composite(targetGroup, path, optionalParsedPath) {\n    var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n    this._targetGroup = targetGroup;\n    this._bindings = targetGroup.subscribe_(path, parsedPath);\n}\nObject.assign(Composite.prototype, {\n    getValue: function (array, offset) {\n        this.bind(); // bind all binding\n        var firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];\n        // and only call .getValue on the first\n        if (binding !== undefined)\n            binding.getValue(array, offset);\n    },\n    setValue: function (array, offset) {\n        var bindings = this._bindings;\n        for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n            bindings[i].setValue(array, offset);\n        }\n    },\n    bind: function () {\n        var bindings = this._bindings;\n        for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n            bindings[i].bind();\n        }\n    },\n    unbind: function () {\n        var bindings = this._bindings;\n        for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n            bindings[i].unbind();\n        }\n    }\n});\nfunction PropertyBinding(rootNode, path, parsedPath) {\n    this.path = path;\n    this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n    this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n    this.rootNode = rootNode;\n}\nObject.assign(PropertyBinding, {\n    Composite: Composite,\n    create: function (root, path, parsedPath) {\n        if (!(root && root.isAnimationObjectGroup)) {\n            return new PropertyBinding(root, path, parsedPath);\n        }\n        else {\n            return new PropertyBinding.Composite(root, path, parsedPath);\n        }\n    },\n    /**\n     * Replaces spaces with underscores and removes unsupported characters from\n     * node names, to ensure compatibility with parseTrackName().\n     *\n     * @param  {string} name Node name to be sanitized.\n     * @return {string}\n     */\n    sanitizeNodeName: (function () {\n        var reservedRe = new RegExp('[' + RESERVED_CHARS_RE + ']', 'g');\n        return function sanitizeNodeName(name) {\n            return name.replace(/\\s/g, '_').replace(reservedRe, '');\n        };\n    }()),\n    parseTrackName: function () {\n        // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n        // only latin characters, and the unicode \\p{L} is not yet supported. So\n        // instead, we exclude reserved characters and match everything else.\n        var wordChar = '[^' + RESERVED_CHARS_RE + ']';\n        var wordCharOrDot = '[^' + RESERVED_CHARS_RE.replace('\\\\.', '') + ']';\n        // Parent directories, delimited by '/' or ':'. Currently unused, but must\n        // be matched to parse the rest of the track name.\n        var directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', wordChar);\n        // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n        var nodeRe = /(WCOD+)?/.source.replace('WCOD', wordCharOrDot);\n        // Object on target node, and accessor. May not contain reserved\n        // characters. Accessor may contain any character except closing bracket.\n        var objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', wordChar);\n        // Property and accessor. May not contain reserved characters. Accessor may\n        // contain any non-bracket characters.\n        var propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', wordChar);\n        var trackRe = new RegExp(''\n            + '^'\n            + directoryRe\n            + nodeRe\n            + objectRe\n            + propertyRe\n            + '$');\n        var supportedObjectNames = ['material', 'materials', 'bones'];\n        return function parseTrackName(trackName) {\n            var matches = trackRe.exec(trackName);\n            if (!matches) {\n                throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n            }\n            var results = {\n                // directoryName: matches[ 1 ], // (tschw) currently unused\n                nodeName: matches[2],\n                objectName: matches[3],\n                objectIndex: matches[4],\n                propertyName: matches[5],\n                propertyIndex: matches[6]\n            };\n            var lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n            if (lastDot !== undefined && lastDot !== -1) {\n                var objectName = results.nodeName.substring(lastDot + 1);\n                // Object names must be checked against a whitelist. Otherwise, there\n                // is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n                // 'bar' could be the objectName, or part of a nodeName (which can\n                // include '.' characters).\n                if (supportedObjectNames.indexOf(objectName) !== -1) {\n                    results.nodeName = results.nodeName.substring(0, lastDot);\n                    results.objectName = objectName;\n                }\n            }\n            if (results.propertyName === null || results.propertyName.length === 0) {\n                throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n            }\n            return results;\n        };\n    }(),\n    findNode: function (root, nodeName) {\n        if (!nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n            return root;\n        }\n        // search into skeleton bones.\n        if (root.skeleton) {\n            var bone = root.skeleton.getBoneByName(nodeName);\n            if (bone !== undefined) {\n                return bone;\n            }\n        }\n        // search into node subtree.\n        if (root.children) {\n            var searchNodeSubtree = function (children) {\n                for (var i = 0; i < children.length; i++) {\n                    var childNode = children[i];\n                    if (childNode.name === nodeName || childNode.uuid === nodeName) {\n                        return childNode;\n                    }\n                    var result = searchNodeSubtree(childNode.children);\n                    if (result)\n                        return result;\n                }\n                return null;\n            };\n            var subTreeNode = searchNodeSubtree(root.children);\n            if (subTreeNode) {\n                return subTreeNode;\n            }\n        }\n        return null;\n    }\n});\nObject.assign(PropertyBinding.prototype, {\n    // these are used to \"bind\" a nonexistent property\n    _getValue_unavailable: function () { },\n    _setValue_unavailable: function () { },\n    BindingType: {\n        Direct: 0,\n        EntireArray: 1,\n        ArrayElement: 2,\n        HasFromToArray: 3\n    },\n    Versioning: {\n        None: 0,\n        NeedsUpdate: 1,\n        MatrixWorldNeedsUpdate: 2\n    },\n    GetterByBindingType: [\n        function getValue_direct(buffer, offset) {\n            buffer[offset] = this.node[this.propertyName];\n        },\n        function getValue_array(buffer, offset) {\n            var source = this.resolvedProperty;\n            for (var i = 0, n = source.length; i !== n; ++i) {\n                buffer[offset++] = source[i];\n            }\n        },\n        function getValue_arrayElement(buffer, offset) {\n            buffer[offset] = this.resolvedProperty[this.propertyIndex];\n        },\n        function getValue_toArray(buffer, offset) {\n            this.resolvedProperty.toArray(buffer, offset);\n        }\n    ],\n    SetterByBindingTypeAndVersioning: [\n        [\n            // Direct\n            function setValue_direct(buffer, offset) {\n                this.targetObject[this.propertyName] = buffer[offset];\n            },\n            function setValue_direct_setNeedsUpdate(buffer, offset) {\n                this.targetObject[this.propertyName] = buffer[offset];\n                this.targetObject.needsUpdate = true;\n            },\n            function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n                this.targetObject[this.propertyName] = buffer[offset];\n                this.targetObject.matrixWorldNeedsUpdate = true;\n            }\n        ],\n        [\n            // EntireArray\n            function setValue_array(buffer, offset) {\n                var dest = this.resolvedProperty;\n                for (var i = 0, n = dest.length; i !== n; ++i) {\n                    dest[i] = buffer[offset++];\n                }\n            },\n            function setValue_array_setNeedsUpdate(buffer, offset) {\n                var dest = this.resolvedProperty;\n                for (var i = 0, n = dest.length; i !== n; ++i) {\n                    dest[i] = buffer[offset++];\n                }\n                this.targetObject.needsUpdate = true;\n            },\n            function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n                var dest = this.resolvedProperty;\n                for (var i = 0, n = dest.length; i !== n; ++i) {\n                    dest[i] = buffer[offset++];\n                }\n                this.targetObject.matrixWorldNeedsUpdate = true;\n            }\n        ],\n        [\n            // ArrayElement\n            function setValue_arrayElement(buffer, offset) {\n                this.resolvedProperty[this.propertyIndex] = buffer[offset];\n            },\n            function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n                this.resolvedProperty[this.propertyIndex] = buffer[offset];\n                this.targetObject.needsUpdate = true;\n            },\n            function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n                this.resolvedProperty[this.propertyIndex] = buffer[offset];\n                this.targetObject.matrixWorldNeedsUpdate = true;\n            }\n        ], [\n            // HasToFromArray\n            function setValue_fromArray(buffer, offset) {\n                this.resolvedProperty.fromArray(buffer, offset);\n            },\n            function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n                this.resolvedProperty.fromArray(buffer, offset);\n                this.targetObject.needsUpdate = true;\n            },\n            function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n                this.resolvedProperty.fromArray(buffer, offset);\n                this.targetObject.matrixWorldNeedsUpdate = true;\n            }\n        ]\n    ],\n    getValue: function getValue_unbound(targetArray, offset) {\n        this.bind();\n        this.getValue(targetArray, offset);\n        // Note: This class uses a State pattern on a per-method basis:\n        // 'bind' sets 'this.getValue' / 'setValue' and shadows the\n        // prototype version of these methods with one that represents\n        // the bound state. When the property is not found, the methods\n        // become no-ops.\n    },\n    setValue: function getValue_unbound(sourceArray, offset) {\n        this.bind();\n        this.setValue(sourceArray, offset);\n    },\n    // create getter / setter pair for a property in the scene graph\n    bind: function () {\n        var targetObject = this.node, parsedPath = this.parsedPath, objectName = parsedPath.objectName, propertyName = parsedPath.propertyName, propertyIndex = parsedPath.propertyIndex;\n        if (!targetObject) {\n            targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n            this.node = targetObject;\n        }\n        // set fail state so we can just 'return' on error\n        this.getValue = this._getValue_unavailable;\n        this.setValue = this._setValue_unavailable;\n        // ensure there is a value node\n        if (!targetObject) {\n            console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n            return;\n        }\n        if (objectName) {\n            var objectIndex = parsedPath.objectIndex;\n            // special cases were we need to reach deeper into the hierarchy to get the face materials....\n            switch (objectName) {\n                case 'materials':\n                    if (!targetObject.material) {\n                        console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n                        return;\n                    }\n                    if (!targetObject.material.materials) {\n                        console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n                        return;\n                    }\n                    targetObject = targetObject.material.materials;\n                    break;\n                case 'bones':\n                    if (!targetObject.skeleton) {\n                        console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n                        return;\n                    }\n                    // potential future optimization: skip this if propertyIndex is already an integer\n                    // and convert the integer string to a true integer.\n                    targetObject = targetObject.skeleton.bones;\n                    // support resolving morphTarget names into indices.\n                    for (var i = 0; i < targetObject.length; i++) {\n                        if (targetObject[i].name === objectIndex) {\n                            objectIndex = i;\n                            break;\n                        }\n                    }\n                    break;\n                default:\n                    if (targetObject[objectName] === undefined) {\n                        console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n                        return;\n                    }\n                    targetObject = targetObject[objectName];\n            }\n            if (objectIndex !== undefined) {\n                if (targetObject[objectIndex] === undefined) {\n                    console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n                    return;\n                }\n                targetObject = targetObject[objectIndex];\n            }\n        }\n        // resolve property\n        var nodeProperty = targetObject[propertyName];\n        if (nodeProperty === undefined) {\n            var nodeName = parsedPath.nodeName;\n            console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n                '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n            return;\n        }\n        // determine versioning scheme\n        var versioning = this.Versioning.None;\n        if (targetObject.needsUpdate !== undefined) { // material\n            versioning = this.Versioning.NeedsUpdate;\n            this.targetObject = targetObject;\n        }\n        else if (targetObject.matrixWorldNeedsUpdate !== undefined) { // node transform\n            versioning = this.Versioning.MatrixWorldNeedsUpdate;\n            this.targetObject = targetObject;\n        }\n        // determine how the property gets bound\n        var bindingType = this.BindingType.Direct;\n        if (propertyIndex !== undefined) {\n            // access a sub element of the property array (only primitives are supported right now)\n            if (propertyName === \"morphTargetInfluences\") {\n                // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n                // support resolving morphTarget names into indices.\n                if (!targetObject.geometry) {\n                    console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n                    return;\n                }\n                if (targetObject.geometry.isBufferGeometry) {\n                    if (!targetObject.geometry.morphAttributes) {\n                        console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n                        return;\n                    }\n                    for (var i = 0; i < this.node.geometry.morphAttributes.position.length; i++) {\n                        if (targetObject.geometry.morphAttributes.position[i].name === propertyIndex) {\n                            propertyIndex = i;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    if (!targetObject.geometry.morphTargets) {\n                        console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this);\n                        return;\n                    }\n                    for (var i = 0; i < this.node.geometry.morphTargets.length; i++) {\n                        if (targetObject.geometry.morphTargets[i].name === propertyIndex) {\n                            propertyIndex = i;\n                            break;\n                        }\n                    }\n                }\n            }\n            bindingType = this.BindingType.ArrayElement;\n            this.resolvedProperty = nodeProperty;\n            this.propertyIndex = propertyIndex;\n        }\n        else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n            // must use copy for Object3D.Euler/Quaternion\n            bindingType = this.BindingType.HasFromToArray;\n            this.resolvedProperty = nodeProperty;\n        }\n        else if (Array.isArray(nodeProperty)) {\n            bindingType = this.BindingType.EntireArray;\n            this.resolvedProperty = nodeProperty;\n        }\n        else {\n            this.propertyName = propertyName;\n        }\n        // select getter / setter\n        this.getValue = this.GetterByBindingType[bindingType];\n        this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n    },\n    unbind: function () {\n        this.node = null;\n        // back to the prototype version of getValue / setValue\n        // note: avoiding to mutate the shape of 'this' via 'delete'\n        this.getValue = this._getValue_unbound;\n        this.setValue = this._setValue_unbound;\n    }\n});\n//!\\ DECLARE ALIAS AFTER assign prototype !\nObject.assign(PropertyBinding.prototype, {\n    // initial state of these methods that calls 'bind'\n    _getValue_unbound: PropertyBinding.prototype.getValue,\n    _setValue_unbound: PropertyBinding.prototype.setValue,\n});\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n * \t-\tAdd objects you would otherwise pass as 'root' to the\n * \t\tconstructor or the .clipAction method of AnimationMixer.\n *\n * \t-\tInstead pass this object as 'root'.\n *\n * \t-\tYou can also add and remove objects later when the mixer\n * \t\tis running.\n *\n * Note:\n *\n *  \tObjects of this class appear as one object to the mixer,\n *  \tso cache control of the individual objects must be done\n *  \ton the group.\n *\n * Limitation:\n *\n * \t- \tThe animated properties must be compatible among the\n * \t\tall objects in the group.\n *\n *  -\tA single property can either be controlled through a\n *  \ttarget group or directly, but not both.\n *\n * @author tschw\n */\nfunction AnimationObjectGroup() {\n    this.uuid = _Math.generateUUID();\n    // cached objects followed by the active ones\n    this._objects = Array.prototype.slice.call(arguments);\n    this.nCachedObjects_ = 0; // threshold\n    // note: read by PropertyBinding.Composite\n    var indices = {};\n    this._indicesByUUID = indices; // for bookkeeping\n    for (var i = 0, n = arguments.length; i !== n; ++i) {\n        indices[arguments[i].uuid] = i;\n    }\n    this._paths = []; // inside: string\n    this._parsedPaths = []; // inside: { we don't care, here }\n    this._bindings = []; // inside: Array< PropertyBinding >\n    this._bindingsIndicesByPath = {}; // inside: indices in these arrays\n    var scope = this;\n    this.stats = {\n        objects: {\n            get total() {\n                return scope._objects.length;\n            },\n            get inUse() {\n                return this.total - scope.nCachedObjects_;\n            }\n        },\n        get bindingsPerObject() {\n            return scope._bindings.length;\n        }\n    };\n}\nObject.assign(AnimationObjectGroup.prototype, {\n    isAnimationObjectGroup: true,\n    add: function () {\n        var objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length, knownObject = undefined;\n        for (var i = 0, n = arguments.length; i !== n; ++i) {\n            var object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];\n            if (index === undefined) {\n                // unknown object -> add it to the ACTIVE region\n                index = nObjects++;\n                indicesByUUID[uuid] = index;\n                objects.push(object);\n                // accounting is done, now do the same for all bindings\n                for (var j = 0, m = nBindings; j !== m; ++j) {\n                    bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n                }\n            }\n            else if (index < nCachedObjects) {\n                knownObject = objects[index];\n                // move existing object to the ACTIVE region\n                var firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];\n                indicesByUUID[lastCachedObject.uuid] = index;\n                objects[index] = lastCachedObject;\n                indicesByUUID[uuid] = firstActiveIndex;\n                objects[firstActiveIndex] = object;\n                // accounting is done, now do the same for all bindings\n                for (var j = 0, m = nBindings; j !== m; ++j) {\n                    var bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], binding = bindingsForPath[index];\n                    bindingsForPath[index] = lastCached;\n                    if (binding === undefined) {\n                        // since we do not bother to create new bindings\n                        // for objects that are cached, the binding may\n                        // or may not exist\n                        binding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n                    }\n                    bindingsForPath[firstActiveIndex] = binding;\n                }\n            }\n            else if (objects[index] !== knownObject) {\n                console.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n                    'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n            } // else the object is already where we want it to be\n        } // for arguments\n        this.nCachedObjects_ = nCachedObjects;\n    },\n    remove: function () {\n        var objects = this._objects, nCachedObjects = this.nCachedObjects_, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;\n        for (var i = 0, n = arguments.length; i !== n; ++i) {\n            var object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];\n            if (index !== undefined && index >= nCachedObjects) {\n                // move existing object into the CACHED region\n                var lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];\n                indicesByUUID[firstActiveObject.uuid] = index;\n                objects[index] = firstActiveObject;\n                indicesByUUID[uuid] = lastCachedIndex;\n                objects[lastCachedIndex] = object;\n                // accounting is done, now do the same for all bindings\n                for (var j = 0, m = nBindings; j !== m; ++j) {\n                    var bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];\n                    bindingsForPath[index] = firstActive;\n                    bindingsForPath[lastCachedIndex] = binding;\n                }\n            }\n        } // for arguments\n        this.nCachedObjects_ = nCachedObjects;\n    },\n    // remove & forget\n    uncache: function () {\n        var objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;\n        for (var i = 0, n = arguments.length; i !== n; ++i) {\n            var object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];\n            if (index !== undefined) {\n                delete indicesByUUID[uuid];\n                if (index < nCachedObjects) {\n                    // object is cached, shrink the CACHED region\n                    var firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];\n                    // last cached object takes this object's place\n                    indicesByUUID[lastCachedObject.uuid] = index;\n                    objects[index] = lastCachedObject;\n                    // last object goes to the activated slot and pop\n                    indicesByUUID[lastObject.uuid] = firstActiveIndex;\n                    objects[firstActiveIndex] = lastObject;\n                    objects.pop();\n                    // accounting is done, now do the same for all bindings\n                    for (var j = 0, m = nBindings; j !== m; ++j) {\n                        var bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];\n                        bindingsForPath[index] = lastCached;\n                        bindingsForPath[firstActiveIndex] = last;\n                        bindingsForPath.pop();\n                    }\n                }\n                else {\n                    // object is active, just swap with the last and pop\n                    var lastIndex = --nObjects, lastObject = objects[lastIndex];\n                    indicesByUUID[lastObject.uuid] = index;\n                    objects[index] = lastObject;\n                    objects.pop();\n                    // accounting is done, now do the same for all bindings\n                    for (var j = 0, m = nBindings; j !== m; ++j) {\n                        var bindingsForPath = bindings[j];\n                        bindingsForPath[index] = bindingsForPath[lastIndex];\n                        bindingsForPath.pop();\n                    }\n                } // cached or active\n            } // if object is known\n        } // for arguments\n        this.nCachedObjects_ = nCachedObjects;\n    },\n    // Internal interface used by befriended PropertyBinding.Composite:\n    subscribe_: function (path, parsedPath) {\n        // returns an array of bindings for the given path that is changed\n        // according to the contained objects in the group\n        var indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path], bindings = this._bindings;\n        if (index !== undefined)\n            return bindings[index];\n        var paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);\n        index = bindings.length;\n        indicesByPath[path] = index;\n        paths.push(path);\n        parsedPaths.push(parsedPath);\n        bindings.push(bindingsForPath);\n        for (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n            var object = objects[i];\n            bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n        }\n        return bindingsForPath;\n    },\n    unsubscribe_: function (path) {\n        // tells the group to forget about a property path and no longer\n        // update the array previously obtained with 'subscribe_'\n        var indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];\n        if (index !== undefined) {\n            var paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];\n            indicesByPath[lastBindingsPath] = index;\n            bindings[index] = lastBindings;\n            bindings.pop();\n            parsedPaths[index] = parsedPaths[lastBindingsIndex];\n            parsedPaths.pop();\n            paths[index] = paths[lastBindingsIndex];\n            paths.pop();\n        }\n    }\n});\n/**\n *\n * Action provided by AnimationMixer for scheduling clip playback on specific\n * objects.\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n *\n */\nfunction AnimationAction(mixer, clip, localRoot) {\n    this._mixer = mixer;\n    this._clip = clip;\n    this._localRoot = localRoot || null;\n    var tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);\n    var interpolantSettings = {\n        endingStart: ZeroCurvatureEnding,\n        endingEnd: ZeroCurvatureEnding\n    };\n    for (var i = 0; i !== nTracks; ++i) {\n        var interpolant = tracks[i].createInterpolant(null);\n        interpolants[i] = interpolant;\n        interpolant.settings = interpolantSettings;\n    }\n    this._interpolantSettings = interpolantSettings;\n    this._interpolants = interpolants; // bound by the mixer\n    // inside: PropertyMixer (managed by the mixer)\n    this._propertyBindings = new Array(nTracks);\n    this._cacheIndex = null; // for the memory manager\n    this._byClipCacheIndex = null; // for the memory manager\n    this._timeScaleInterpolant = null;\n    this._weightInterpolant = null;\n    this.loop = LoopRepeat;\n    this._loopCount = -1;\n    // global mixer time when the action is to be started\n    // it's set back to 'null' upon start of the action\n    this._startTime = null;\n    // scaled local time of the action\n    // gets clamped or wrapped to 0..clip.duration according to loop\n    this.time = 0;\n    this.timeScale = 1;\n    this._effectiveTimeScale = 1;\n    this.weight = 1;\n    this._effectiveWeight = 1;\n    this.repetitions = Infinity; // no. of repetitions when looping\n    this.paused = false; // true -> zero effective time scale\n    this.enabled = true; // false -> zero effective weight\n    this.clampWhenFinished = false; // keep feeding the last frame?\n    this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n    this.zeroSlopeAtEnd = true; // clips for start, loop and end\n}\nObject.assign(AnimationAction.prototype, {\n    // State & Scheduling\n    play: function () {\n        this._mixer._activateAction(this);\n        return this;\n    },\n    stop: function () {\n        this._mixer._deactivateAction(this);\n        return this.reset();\n    },\n    reset: function () {\n        this.paused = false;\n        this.enabled = true;\n        this.time = 0; // restart clip\n        this._loopCount = -1; // forget previous loops\n        this._startTime = null; // forget scheduling\n        return this.stopFading().stopWarping();\n    },\n    isRunning: function () {\n        return this.enabled && !this.paused && this.timeScale !== 0 &&\n            this._startTime === null && this._mixer._isActiveAction(this);\n    },\n    // return true when play has been called\n    isScheduled: function () {\n        return this._mixer._isActiveAction(this);\n    },\n    startAt: function (time) {\n        this._startTime = time;\n        return this;\n    },\n    setLoop: function (mode, repetitions) {\n        this.loop = mode;\n        this.repetitions = repetitions;\n        return this;\n    },\n    // Weight\n    // set the weight stopping any scheduled fading\n    // although .enabled = false yields an effective weight of zero, this\n    // method does *not* change .enabled, because it would be confusing\n    setEffectiveWeight: function (weight) {\n        this.weight = weight;\n        // note: same logic as when updated at runtime\n        this._effectiveWeight = this.enabled ? weight : 0;\n        return this.stopFading();\n    },\n    // return the weight considering fading and .enabled\n    getEffectiveWeight: function () {\n        return this._effectiveWeight;\n    },\n    fadeIn: function (duration) {\n        return this._scheduleFading(duration, 0, 1);\n    },\n    fadeOut: function (duration) {\n        return this._scheduleFading(duration, 1, 0);\n    },\n    crossFadeFrom: function (fadeOutAction, duration, warp) {\n        fadeOutAction.fadeOut(duration);\n        this.fadeIn(duration);\n        if (warp) {\n            var fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;\n            fadeOutAction.warp(1.0, startEndRatio, duration);\n            this.warp(endStartRatio, 1.0, duration);\n        }\n        return this;\n    },\n    crossFadeTo: function (fadeInAction, duration, warp) {\n        return fadeInAction.crossFadeFrom(this, duration, warp);\n    },\n    stopFading: function () {\n        var weightInterpolant = this._weightInterpolant;\n        if (weightInterpolant !== null) {\n            this._weightInterpolant = null;\n            this._mixer._takeBackControlInterpolant(weightInterpolant);\n        }\n        return this;\n    },\n    // Time Scale Control\n    // set the time scale stopping any scheduled warping\n    // although .paused = true yields an effective time scale of zero, this\n    // method does *not* change .paused, because it would be confusing\n    setEffectiveTimeScale: function (timeScale) {\n        this.timeScale = timeScale;\n        this._effectiveTimeScale = this.paused ? 0 : timeScale;\n        return this.stopWarping();\n    },\n    // return the time scale considering warping and .paused\n    getEffectiveTimeScale: function () {\n        return this._effectiveTimeScale;\n    },\n    setDuration: function (duration) {\n        this.timeScale = this._clip.duration / duration;\n        return this.stopWarping();\n    },\n    syncWith: function (action) {\n        this.time = action.time;\n        this.timeScale = action.timeScale;\n        return this.stopWarping();\n    },\n    halt: function (duration) {\n        return this.warp(this._effectiveTimeScale, 0, duration);\n    },\n    warp: function (startTimeScale, endTimeScale, duration) {\n        var mixer = this._mixer, now = mixer.time, interpolant = this._timeScaleInterpolant, timeScale = this.timeScale;\n        if (interpolant === null) {\n            interpolant = mixer._lendControlInterpolant();\n            this._timeScaleInterpolant = interpolant;\n        }\n        var times = interpolant.parameterPositions, values = interpolant.sampleValues;\n        times[0] = now;\n        times[1] = now + duration;\n        values[0] = startTimeScale / timeScale;\n        values[1] = endTimeScale / timeScale;\n        return this;\n    },\n    stopWarping: function () {\n        var timeScaleInterpolant = this._timeScaleInterpolant;\n        if (timeScaleInterpolant !== null) {\n            this._timeScaleInterpolant = null;\n            this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n        }\n        return this;\n    },\n    // Object Accessors\n    getMixer: function () {\n        return this._mixer;\n    },\n    getClip: function () {\n        return this._clip;\n    },\n    getRoot: function () {\n        return this._localRoot || this._mixer._root;\n    },\n    // Interna\n    _update: function (time, deltaTime, timeDirection, accuIndex) {\n        // called by the mixer\n        if (!this.enabled) {\n            // call ._updateWeight() to update ._effectiveWeight\n            this._updateWeight(time);\n            return;\n        }\n        var startTime = this._startTime;\n        if (startTime !== null) {\n            // check for scheduled start of action\n            var timeRunning = (time - startTime) * timeDirection;\n            if (timeRunning < 0 || timeDirection === 0) {\n                return; // yet to come / don't decide when delta = 0\n            }\n            // start\n            this._startTime = null; // unschedule\n            deltaTime = timeDirection * timeRunning;\n        }\n        // apply time scale and advance time\n        deltaTime *= this._updateTimeScale(time);\n        var clipTime = this._updateTime(deltaTime);\n        // note: _updateTime may disable the action resulting in\n        // an effective weight of 0\n        var weight = this._updateWeight(time);\n        if (weight > 0) {\n            var interpolants = this._interpolants;\n            var propertyMixers = this._propertyBindings;\n            for (var j = 0, m = interpolants.length; j !== m; ++j) {\n                interpolants[j].evaluate(clipTime);\n                propertyMixers[j].accumulate(accuIndex, weight);\n            }\n        }\n    },\n    _updateWeight: function (time) {\n        var weight = 0;\n        if (this.enabled) {\n            weight = this.weight;\n            var interpolant = this._weightInterpolant;\n            if (interpolant !== null) {\n                var interpolantValue = interpolant.evaluate(time)[0];\n                weight *= interpolantValue;\n                if (time > interpolant.parameterPositions[1]) {\n                    this.stopFading();\n                    if (interpolantValue === 0) {\n                        // faded out, disable\n                        this.enabled = false;\n                    }\n                }\n            }\n        }\n        this._effectiveWeight = weight;\n        return weight;\n    },\n    _updateTimeScale: function (time) {\n        var timeScale = 0;\n        if (!this.paused) {\n            timeScale = this.timeScale;\n            var interpolant = this._timeScaleInterpolant;\n            if (interpolant !== null) {\n                var interpolantValue = interpolant.evaluate(time)[0];\n                timeScale *= interpolantValue;\n                if (time > interpolant.parameterPositions[1]) {\n                    this.stopWarping();\n                    if (timeScale === 0) {\n                        // motion has halted, pause\n                        this.paused = true;\n                    }\n                    else {\n                        // warp done - apply final time scale\n                        this.timeScale = timeScale;\n                    }\n                }\n            }\n        }\n        this._effectiveTimeScale = timeScale;\n        return timeScale;\n    },\n    _updateTime: function (deltaTime) {\n        var time = this.time + deltaTime;\n        if (deltaTime === 0)\n            return time;\n        var duration = this._clip.duration, loop = this.loop, loopCount = this._loopCount;\n        if (loop === LoopOnce) {\n            if (loopCount === -1) {\n                // just started\n                this._loopCount = 0;\n                this._setEndings(true, true, false);\n            }\n            handle_stop: {\n                if (time >= duration) {\n                    time = duration;\n                }\n                else if (time < 0) {\n                    time = 0;\n                }\n                else\n                    break handle_stop;\n                if (this.clampWhenFinished)\n                    this.paused = true;\n                else\n                    this.enabled = false;\n                this._mixer.dispatchEvent({\n                    type: 'finished', action: this,\n                    direction: deltaTime < 0 ? -1 : 1\n                });\n            }\n        }\n        else { // repetitive Repeat or PingPong\n            var pingPong = (loop === LoopPingPong);\n            if (loopCount === -1) {\n                // just started\n                if (deltaTime >= 0) {\n                    loopCount = 0;\n                    this._setEndings(true, this.repetitions === 0, pingPong);\n                }\n                else {\n                    // when looping in reverse direction, the initial\n                    // transition through zero counts as a repetition,\n                    // so leave loopCount at -1\n                    this._setEndings(this.repetitions === 0, true, pingPong);\n                }\n            }\n            if (time >= duration || time < 0) {\n                // wrap around\n                var loopDelta = Math.floor(time / duration); // signed\n                time -= duration * loopDelta;\n                loopCount += Math.abs(loopDelta);\n                var pending = this.repetitions - loopCount;\n                if (pending < 0) {\n                    // have to stop (switch state, clamp time, fire event)\n                    if (this.clampWhenFinished)\n                        this.paused = true;\n                    else\n                        this.enabled = false;\n                    time = deltaTime > 0 ? duration : 0;\n                    this._mixer.dispatchEvent({\n                        type: 'finished', action: this,\n                        direction: deltaTime > 0 ? 1 : -1\n                    });\n                }\n                else {\n                    // keep running\n                    if (pending === 0) {\n                        // entering the last round\n                        var atStart = deltaTime < 0;\n                        this._setEndings(atStart, !atStart, pingPong);\n                    }\n                    else {\n                        this._setEndings(false, false, pingPong);\n                    }\n                    this._loopCount = loopCount;\n                    this._mixer.dispatchEvent({\n                        type: 'loop', action: this, loopDelta: loopDelta\n                    });\n                }\n            }\n            if (pingPong && (loopCount & 1) === 1) {\n                // invert time for the \"pong round\"\n                this.time = time;\n                return duration - time;\n            }\n        }\n        this.time = time;\n        return time;\n    },\n    _setEndings: function (atStart, atEnd, pingPong) {\n        var settings = this._interpolantSettings;\n        if (pingPong) {\n            settings.endingStart = ZeroSlopeEnding;\n            settings.endingEnd = ZeroSlopeEnding;\n        }\n        else {\n            // assuming for LoopOnce atStart == atEnd == true\n            if (atStart) {\n                settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n            }\n            else {\n                settings.endingStart = WrapAroundEnding;\n            }\n            if (atEnd) {\n                settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n            }\n            else {\n                settings.endingEnd = WrapAroundEnding;\n            }\n        }\n    },\n    _scheduleFading: function (duration, weightNow, weightThen) {\n        var mixer = this._mixer, now = mixer.time, interpolant = this._weightInterpolant;\n        if (interpolant === null) {\n            interpolant = mixer._lendControlInterpolant();\n            this._weightInterpolant = interpolant;\n        }\n        var times = interpolant.parameterPositions, values = interpolant.sampleValues;\n        times[0] = now;\n        values[0] = weightNow;\n        times[1] = now + duration;\n        values[1] = weightThen;\n        return this;\n    }\n});\n/**\n *\n * Player for AnimationClips.\n *\n *\n * @author Ben Houston / http://clara.io/\n * @author David Sarno / http://lighthaus.us/\n * @author tschw\n */\nfunction AnimationMixer(root) {\n    this._root = root;\n    this._initMemoryManager();\n    this._accuIndex = 0;\n    this.time = 0;\n    this.timeScale = 1.0;\n}\nAnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: AnimationMixer,\n    _bindAction: function (action, prototypeAction) {\n        var root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName, bindingsByName = bindingsByRoot[rootUuid];\n        if (bindingsByName === undefined) {\n            bindingsByName = {};\n            bindingsByRoot[rootUuid] = bindingsByName;\n        }\n        for (var i = 0; i !== nTracks; ++i) {\n            var track = tracks[i], trackName = track.name, binding = bindingsByName[trackName];\n            if (binding !== undefined) {\n                bindings[i] = binding;\n            }\n            else {\n                binding = bindings[i];\n                if (binding !== undefined) {\n                    // existing binding, make sure the cache knows\n                    if (binding._cacheIndex === null) {\n                        ++binding.referenceCount;\n                        this._addInactiveBinding(binding, rootUuid, trackName);\n                    }\n                    continue;\n                }\n                var path = prototypeAction && prototypeAction.\n                    _propertyBindings[i].binding.parsedPath;\n                binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n                ++binding.referenceCount;\n                this._addInactiveBinding(binding, rootUuid, trackName);\n                bindings[i] = binding;\n            }\n            interpolants[i].resultBuffer = binding.buffer;\n        }\n    },\n    _activateAction: function (action) {\n        if (!this._isActiveAction(action)) {\n            if (action._cacheIndex === null) {\n                // this action has been forgotten by the cache, but the user\n                // appears to be still using it -> rebind\n                var rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];\n                this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n                this._addInactiveAction(action, clipUuid, rootUuid);\n            }\n            var bindings = action._propertyBindings;\n            // increment reference counts / sort out state\n            for (var i = 0, n = bindings.length; i !== n; ++i) {\n                var binding = bindings[i];\n                if (binding.useCount++ === 0) {\n                    this._lendBinding(binding);\n                    binding.saveOriginalState();\n                }\n            }\n            this._lendAction(action);\n        }\n    },\n    _deactivateAction: function (action) {\n        if (this._isActiveAction(action)) {\n            var bindings = action._propertyBindings;\n            // decrement reference counts / sort out state\n            for (var i = 0, n = bindings.length; i !== n; ++i) {\n                var binding = bindings[i];\n                if (--binding.useCount === 0) {\n                    binding.restoreOriginalState();\n                    this._takeBackBinding(binding);\n                }\n            }\n            this._takeBackAction(action);\n        }\n    },\n    // Memory manager\n    _initMemoryManager: function () {\n        this._actions = []; // 'nActiveActions' followed by inactive ones\n        this._nActiveActions = 0;\n        this._actionsByClip = {};\n        // inside:\n        // {\n        // \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n        // \t\tactionByRoot: AnimationAction\t\t\t- lookup\n        // }\n        this._bindings = []; // 'nActiveBindings' followed by inactive ones\n        this._nActiveBindings = 0;\n        this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n        this._controlInterpolants = []; // same game as above\n        this._nActiveControlInterpolants = 0;\n        var scope = this;\n        this.stats = {\n            actions: {\n                get total() {\n                    return scope._actions.length;\n                },\n                get inUse() {\n                    return scope._nActiveActions;\n                }\n            },\n            bindings: {\n                get total() {\n                    return scope._bindings.length;\n                },\n                get inUse() {\n                    return scope._nActiveBindings;\n                }\n            },\n            controlInterpolants: {\n                get total() {\n                    return scope._controlInterpolants.length;\n                },\n                get inUse() {\n                    return scope._nActiveControlInterpolants;\n                }\n            }\n        };\n    },\n    // Memory management for AnimationAction objects\n    _isActiveAction: function (action) {\n        var index = action._cacheIndex;\n        return index !== null && index < this._nActiveActions;\n    },\n    _addInactiveAction: function (action, clipUuid, rootUuid) {\n        var actions = this._actions, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];\n        if (actionsForClip === undefined) {\n            actionsForClip = {\n                knownActions: [action],\n                actionByRoot: {}\n            };\n            action._byClipCacheIndex = 0;\n            actionsByClip[clipUuid] = actionsForClip;\n        }\n        else {\n            var knownActions = actionsForClip.knownActions;\n            action._byClipCacheIndex = knownActions.length;\n            knownActions.push(action);\n        }\n        action._cacheIndex = actions.length;\n        actions.push(action);\n        actionsForClip.actionByRoot[rootUuid] = action;\n    },\n    _removeInactiveAction: function (action) {\n        var actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;\n        lastInactiveAction._cacheIndex = cacheIndex;\n        actions[cacheIndex] = lastInactiveAction;\n        actions.pop();\n        action._cacheIndex = null;\n        var clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;\n        lastKnownAction._byClipCacheIndex = byClipCacheIndex;\n        knownActionsForClip[byClipCacheIndex] = lastKnownAction;\n        knownActionsForClip.pop();\n        action._byClipCacheIndex = null;\n        var actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;\n        delete actionByRoot[rootUuid];\n        if (knownActionsForClip.length === 0) {\n            delete actionsByClip[clipUuid];\n        }\n        this._removeInactiveBindingsForAction(action);\n    },\n    _removeInactiveBindingsForAction: function (action) {\n        var bindings = action._propertyBindings;\n        for (var i = 0, n = bindings.length; i !== n; ++i) {\n            var binding = bindings[i];\n            if (--binding.referenceCount === 0) {\n                this._removeInactiveBinding(binding);\n            }\n        }\n    },\n    _lendAction: function (action) {\n        // [ active actions |  inactive actions  ]\n        // [  active actions >| inactive actions ]\n        //                 s        a\n        //                  <-swap->\n        //                 a        s\n        var actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];\n        action._cacheIndex = lastActiveIndex;\n        actions[lastActiveIndex] = action;\n        firstInactiveAction._cacheIndex = prevIndex;\n        actions[prevIndex] = firstInactiveAction;\n    },\n    _takeBackAction: function (action) {\n        // [  active actions  | inactive actions ]\n        // [ active actions |< inactive actions  ]\n        //        a        s\n        //         <-swap->\n        //        s        a\n        var actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];\n        action._cacheIndex = firstInactiveIndex;\n        actions[firstInactiveIndex] = action;\n        lastActiveAction._cacheIndex = prevIndex;\n        actions[prevIndex] = lastActiveAction;\n    },\n    // Memory management for PropertyMixer objects\n    _addInactiveBinding: function (binding, rootUuid, trackName) {\n        var bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], bindings = this._bindings;\n        if (bindingByName === undefined) {\n            bindingByName = {};\n            bindingsByRoot[rootUuid] = bindingByName;\n        }\n        bindingByName[trackName] = binding;\n        binding._cacheIndex = bindings.length;\n        bindings.push(binding);\n    },\n    _removeInactiveBinding: function (binding) {\n        var bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;\n        lastInactiveBinding._cacheIndex = cacheIndex;\n        bindings[cacheIndex] = lastInactiveBinding;\n        bindings.pop();\n        delete bindingByName[trackName];\n        remove_empty_map: {\n            for (var _ in bindingByName)\n                break remove_empty_map; // eslint-disable-line no-unused-vars\n            delete bindingsByRoot[rootUuid];\n        }\n    },\n    _lendBinding: function (binding) {\n        var bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];\n        binding._cacheIndex = lastActiveIndex;\n        bindings[lastActiveIndex] = binding;\n        firstInactiveBinding._cacheIndex = prevIndex;\n        bindings[prevIndex] = firstInactiveBinding;\n    },\n    _takeBackBinding: function (binding) {\n        var bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];\n        binding._cacheIndex = firstInactiveIndex;\n        bindings[firstInactiveIndex] = binding;\n        lastActiveBinding._cacheIndex = prevIndex;\n        bindings[prevIndex] = lastActiveBinding;\n    },\n    // Memory management of Interpolants for weight and time scale\n    _lendControlInterpolant: function () {\n        var interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++, interpolant = interpolants[lastActiveIndex];\n        if (interpolant === undefined) {\n            interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n            interpolant.__cacheIndex = lastActiveIndex;\n            interpolants[lastActiveIndex] = interpolant;\n        }\n        return interpolant;\n    },\n    _takeBackControlInterpolant: function (interpolant) {\n        var interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];\n        interpolant.__cacheIndex = firstInactiveIndex;\n        interpolants[firstInactiveIndex] = interpolant;\n        lastActiveInterpolant.__cacheIndex = prevIndex;\n        interpolants[prevIndex] = lastActiveInterpolant;\n    },\n    _controlInterpolantsResultBuffer: new Float32Array(1),\n    // return an action for a clip optionally using a custom root target\n    // object (this method allocates a lot of dynamic memory in case a\n    // previously unknown clip/root combination is specified)\n    clipAction: function (clip, optionalRoot) {\n        var root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === 'string' ?\n            AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject !== null ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid], prototypeAction = null;\n        if (actionsForClip !== undefined) {\n            var existingAction = actionsForClip.actionByRoot[rootUuid];\n            if (existingAction !== undefined) {\n                return existingAction;\n            }\n            // we know the clip, so we don't have to parse all\n            // the bindings again but can just copy\n            prototypeAction = actionsForClip.knownActions[0];\n            // also, take the clip from the prototype action\n            if (clipObject === null)\n                clipObject = prototypeAction._clip;\n        }\n        // clip must be known when specified via string\n        if (clipObject === null)\n            return null;\n        // allocate all resources required to run it\n        var newAction = new AnimationAction(this, clipObject, optionalRoot);\n        this._bindAction(newAction, prototypeAction);\n        // and make the action known to the memory manager\n        this._addInactiveAction(newAction, clipUuid, rootUuid);\n        return newAction;\n    },\n    // get an existing action\n    existingAction: function (clip, optionalRoot) {\n        var root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === 'string' ?\n            AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];\n        if (actionsForClip !== undefined) {\n            return actionsForClip.actionByRoot[rootUuid] || null;\n        }\n        return null;\n    },\n    // deactivates all previously scheduled actions\n    stopAllAction: function () {\n        var actions = this._actions, nActions = this._nActiveActions, bindings = this._bindings, nBindings = this._nActiveBindings;\n        this._nActiveActions = 0;\n        this._nActiveBindings = 0;\n        for (var i = 0; i !== nActions; ++i) {\n            actions[i].reset();\n        }\n        for (var i = 0; i !== nBindings; ++i) {\n            bindings[i].useCount = 0;\n        }\n        return this;\n    },\n    // advance the time and update apply the animation\n    update: function (deltaTime) {\n        deltaTime *= this.timeScale;\n        var actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;\n        // run active actions\n        for (var i = 0; i !== nActions; ++i) {\n            var action = actions[i];\n            action._update(time, deltaTime, timeDirection, accuIndex);\n        }\n        // update scene graph\n        var bindings = this._bindings, nBindings = this._nActiveBindings;\n        for (var i = 0; i !== nBindings; ++i) {\n            bindings[i].apply(accuIndex);\n        }\n        return this;\n    },\n    // return this mixer's root target object\n    getRoot: function () {\n        return this._root;\n    },\n    // free all resources specific to a particular clip\n    uncacheClip: function (clip) {\n        var actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];\n        if (actionsForClip !== undefined) {\n            // note: just calling _removeInactiveAction would mess up the\n            // iteration state and also require updating the state we can\n            // just throw away\n            var actionsToRemove = actionsForClip.knownActions;\n            for (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n                var action = actionsToRemove[i];\n                this._deactivateAction(action);\n                var cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];\n                action._cacheIndex = null;\n                action._byClipCacheIndex = null;\n                lastInactiveAction._cacheIndex = cacheIndex;\n                actions[cacheIndex] = lastInactiveAction;\n                actions.pop();\n                this._removeInactiveBindingsForAction(action);\n            }\n            delete actionsByClip[clipUuid];\n        }\n    },\n    // free all resources specific to a particular root target object\n    uncacheRoot: function (root) {\n        var rootUuid = root.uuid, actionsByClip = this._actionsByClip;\n        for (var clipUuid in actionsByClip) {\n            var actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];\n            if (action !== undefined) {\n                this._deactivateAction(action);\n                this._removeInactiveAction(action);\n            }\n        }\n        var bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];\n        if (bindingByName !== undefined) {\n            for (var trackName in bindingByName) {\n                var binding = bindingByName[trackName];\n                binding.restoreOriginalState();\n                this._removeInactiveBinding(binding);\n            }\n        }\n    },\n    // remove a targeted clip from the cache\n    uncacheAction: function (clip, optionalRoot) {\n        var action = this.existingAction(clip, optionalRoot);\n        if (action !== null) {\n            this._deactivateAction(action);\n            this._removeInactiveAction(action);\n        }\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Uniform(value) {\n    if (typeof value === 'string') {\n        console.warn('THREE.Uniform: Type parameter is no longer needed.');\n        value = arguments[1];\n    }\n    this.value = value;\n}\nUniform.prototype.clone = function () {\n    return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n};\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\nfunction InstancedBufferGeometry() {\n    BufferGeometry.call(this);\n    this.type = 'InstancedBufferGeometry';\n    this.maxInstancedCount = undefined;\n}\nInstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {\n    constructor: InstancedBufferGeometry,\n    isInstancedBufferGeometry: true,\n    copy: function (source) {\n        BufferGeometry.prototype.copy.call(this, source);\n        this.maxInstancedCount = source.maxInstancedCount;\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    }\n});\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\nfunction InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {\n    this.uuid = _Math.generateUUID();\n    this.data = interleavedBuffer;\n    this.itemSize = itemSize;\n    this.offset = offset;\n    this.normalized = normalized === true;\n}\nObject.defineProperties(InterleavedBufferAttribute.prototype, {\n    count: {\n        get: function () {\n            return this.data.count;\n        }\n    },\n    array: {\n        get: function () {\n            return this.data.array;\n        }\n    }\n});\nObject.assign(InterleavedBufferAttribute.prototype, {\n    isInterleavedBufferAttribute: true,\n    setX: function (index, x) {\n        this.data.array[index * this.data.stride + this.offset] = x;\n        return this;\n    },\n    setY: function (index, y) {\n        this.data.array[index * this.data.stride + this.offset + 1] = y;\n        return this;\n    },\n    setZ: function (index, z) {\n        this.data.array[index * this.data.stride + this.offset + 2] = z;\n        return this;\n    },\n    setW: function (index, w) {\n        this.data.array[index * this.data.stride + this.offset + 3] = w;\n        return this;\n    },\n    getX: function (index) {\n        return this.data.array[index * this.data.stride + this.offset];\n    },\n    getY: function (index) {\n        return this.data.array[index * this.data.stride + this.offset + 1];\n    },\n    getZ: function (index) {\n        return this.data.array[index * this.data.stride + this.offset + 2];\n    },\n    getW: function (index) {\n        return this.data.array[index * this.data.stride + this.offset + 3];\n    },\n    setXY: function (index, x, y) {\n        index = index * this.data.stride + this.offset;\n        this.data.array[index + 0] = x;\n        this.data.array[index + 1] = y;\n        return this;\n    },\n    setXYZ: function (index, x, y, z) {\n        index = index * this.data.stride + this.offset;\n        this.data.array[index + 0] = x;\n        this.data.array[index + 1] = y;\n        this.data.array[index + 2] = z;\n        return this;\n    },\n    setXYZW: function (index, x, y, z, w) {\n        index = index * this.data.stride + this.offset;\n        this.data.array[index + 0] = x;\n        this.data.array[index + 1] = y;\n        this.data.array[index + 2] = z;\n        this.data.array[index + 3] = w;\n        return this;\n    }\n});\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\nfunction InterleavedBuffer(array, stride) {\n    this.uuid = _Math.generateUUID();\n    this.array = array;\n    this.stride = stride;\n    this.count = array !== undefined ? array.length / stride : 0;\n    this.dynamic = false;\n    this.updateRange = { offset: 0, count: -1 };\n    this.onUploadCallback = function () { };\n    this.version = 0;\n}\nObject.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {\n    set: function (value) {\n        if (value === true)\n            this.version++;\n    }\n});\nObject.assign(InterleavedBuffer.prototype, {\n    isInterleavedBuffer: true,\n    setArray: function (array) {\n        if (Array.isArray(array)) {\n            throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n        }\n        this.count = array !== undefined ? array.length / this.stride : 0;\n        this.array = array;\n    },\n    setDynamic: function (value) {\n        this.dynamic = value;\n        return this;\n    },\n    copy: function (source) {\n        this.array = new source.array.constructor(source.array);\n        this.count = source.count;\n        this.stride = source.stride;\n        this.dynamic = source.dynamic;\n        return this;\n    },\n    copyAt: function (index1, attribute, index2) {\n        index1 *= this.stride;\n        index2 *= attribute.stride;\n        for (var i = 0, l = this.stride; i < l; i++) {\n            this.array[index1 + i] = attribute.array[index2 + i];\n        }\n        return this;\n    },\n    set: function (value, offset) {\n        if (offset === undefined)\n            offset = 0;\n        this.array.set(value, offset);\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    onUpload: function (callback) {\n        this.onUploadCallback = callback;\n        return this;\n    }\n});\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\nfunction InstancedInterleavedBuffer(array, stride, meshPerAttribute) {\n    InterleavedBuffer.call(this, array, stride);\n    this.meshPerAttribute = meshPerAttribute || 1;\n}\nInstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {\n    constructor: InstancedInterleavedBuffer,\n    isInstancedInterleavedBuffer: true,\n    copy: function (source) {\n        InterleavedBuffer.prototype.copy.call(this, source);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n    }\n});\n/**\n * @author benaadams / https://twitter.com/ben_a_adams\n */\nfunction InstancedBufferAttribute(array, itemSize, meshPerAttribute) {\n    BufferAttribute.call(this, array, itemSize);\n    this.meshPerAttribute = meshPerAttribute || 1;\n}\nInstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {\n    constructor: InstancedBufferAttribute,\n    isInstancedBufferAttribute: true,\n    copy: function (source) {\n        BufferAttribute.prototype.copy.call(this, source);\n        this.meshPerAttribute = source.meshPerAttribute;\n        return this;\n    }\n});\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author bhouston / http://clara.io/\n * @author stephomi / http://stephaneginier.com/\n */\nfunction Raycaster(origin, direction, near, far) {\n    this.ray = new Ray(origin, direction);\n    // direction is assumed to be normalized (for accurate distance calculations)\n    this.near = near || 0;\n    this.far = far || Infinity;\n    this.params = {\n        Mesh: {},\n        Line: {},\n        LOD: {},\n        Points: { threshold: 1 },\n        Sprite: {}\n    };\n    Object.defineProperties(this.params, {\n        PointCloud: {\n            get: function () {\n                console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n                return this.Points;\n            }\n        }\n    });\n}\nfunction ascSort(a, b) {\n    return a.distance - b.distance;\n}\nfunction intersectObject(object, raycaster, intersects, recursive) {\n    if (object.visible === false)\n        return;\n    object.raycast(raycaster, intersects);\n    if (recursive === true) {\n        var children = object.children;\n        for (var i = 0, l = children.length; i < l; i++) {\n            intersectObject(children[i], raycaster, intersects, true);\n        }\n    }\n}\nObject.assign(Raycaster.prototype, {\n    linePrecision: 1,\n    set: function (origin, direction) {\n        // direction is assumed to be normalized (for accurate distance calculations)\n        this.ray.set(origin, direction);\n    },\n    setFromCamera: function (coords, camera) {\n        if ((camera && camera.isPerspectiveCamera)) {\n            this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n            this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n        }\n        else if ((camera && camera.isOrthographicCamera)) {\n            this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n            this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n        }\n        else {\n            console.error('THREE.Raycaster: Unsupported camera type.');\n        }\n    },\n    intersectObject: function (object, recursive) {\n        var intersects = [];\n        intersectObject(object, this, intersects, recursive);\n        intersects.sort(ascSort);\n        return intersects;\n    },\n    intersectObjects: function (objects, recursive) {\n        var intersects = [];\n        if (Array.isArray(objects) === false) {\n            console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');\n            return intersects;\n        }\n        for (var i = 0, l = objects.length; i < l; i++) {\n            intersectObject(objects[i], this, intersects, recursive);\n        }\n        intersects.sort(ascSort);\n        return intersects;\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nfunction Clock(autoStart) {\n    this.autoStart = (autoStart !== undefined) ? autoStart : true;\n    this.startTime = 0;\n    this.oldTime = 0;\n    this.elapsedTime = 0;\n    this.running = false;\n}\nObject.assign(Clock.prototype, {\n    start: function () {\n        this.startTime = (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n        this.oldTime = this.startTime;\n        this.elapsedTime = 0;\n        this.running = true;\n    },\n    stop: function () {\n        this.getElapsedTime();\n        this.running = false;\n        this.autoStart = false;\n    },\n    getElapsedTime: function () {\n        this.getDelta();\n        return this.elapsedTime;\n    },\n    getDelta: function () {\n        var diff = 0;\n        if (this.autoStart && !this.running) {\n            this.start();\n            return 0;\n        }\n        if (this.running) {\n            var newTime = (typeof performance === 'undefined' ? Date : performance).now();\n            diff = (newTime - this.oldTime) / 1000;\n            this.oldTime = newTime;\n            this.elapsedTime += diff;\n        }\n        return diff;\n    }\n});\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The poles (phi) are at the positive and negative y axis.\n * The equator starts at positive z.\n */\nfunction Spherical(radius, phi, theta) {\n    this.radius = (radius !== undefined) ? radius : 1.0;\n    this.phi = (phi !== undefined) ? phi : 0; // up / down towards top and bottom pole\n    this.theta = (theta !== undefined) ? theta : 0; // around the equator of the sphere\n    return this;\n}\nObject.assign(Spherical.prototype, {\n    set: function (radius, phi, theta) {\n        this.radius = radius;\n        this.phi = phi;\n        this.theta = theta;\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (other) {\n        this.radius = other.radius;\n        this.phi = other.phi;\n        this.theta = other.theta;\n        return this;\n    },\n    // restrict phi to be betwee EPS and PI-EPS\n    makeSafe: function () {\n        var EPS = 0.000001;\n        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n        return this;\n    },\n    setFromVector3: function (vec3) {\n        this.radius = vec3.length();\n        if (this.radius === 0) {\n            this.theta = 0;\n            this.phi = 0;\n        }\n        else {\n            this.theta = Math.atan2(vec3.x, vec3.z); // equator angle around y-up axis\n            this.phi = Math.acos(_Math.clamp(vec3.y / this.radius, -1, 1)); // polar angle\n        }\n        return this;\n    }\n});\n/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n *\n */\nfunction Cylindrical(radius, theta, y) {\n    this.radius = (radius !== undefined) ? radius : 1.0; // distance from the origin to a point in the x-z plane\n    this.theta = (theta !== undefined) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n    this.y = (y !== undefined) ? y : 0; // height above the x-z plane\n    return this;\n}\nObject.assign(Cylindrical.prototype, {\n    set: function (radius, theta, y) {\n        this.radius = radius;\n        this.theta = theta;\n        this.y = y;\n        return this;\n    },\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (other) {\n        this.radius = other.radius;\n        this.theta = other.theta;\n        this.y = other.y;\n        return this;\n    },\n    setFromVector3: function (vec3) {\n        this.radius = Math.sqrt(vec3.x * vec3.x + vec3.z * vec3.z);\n        this.theta = Math.atan2(vec3.x, vec3.z);\n        this.y = vec3.y;\n        return this;\n    }\n});\n/**\n * @author bhouston / http://clara.io\n */\nfunction Box2(min, max) {\n    this.min = (min !== undefined) ? min : new Vector2(+Infinity, +Infinity);\n    this.max = (max !== undefined) ? max : new Vector2(-Infinity, -Infinity);\n}\nObject.assign(Box2.prototype, {\n    set: function (min, max) {\n        this.min.copy(min);\n        this.max.copy(max);\n        return this;\n    },\n    setFromPoints: function (points) {\n        this.makeEmpty();\n        for (var i = 0, il = points.length; i < il; i++) {\n            this.expandByPoint(points[i]);\n        }\n        return this;\n    },\n    setFromCenterAndSize: function () {\n        var v1 = new Vector2();\n        return function setFromCenterAndSize(center, size) {\n            var halfSize = v1.copy(size).multiplyScalar(0.5);\n            this.min.copy(center).sub(halfSize);\n            this.max.copy(center).add(halfSize);\n            return this;\n        };\n    }(),\n    clone: function () {\n        return new this.constructor().copy(this);\n    },\n    copy: function (box) {\n        this.min.copy(box.min);\n        this.max.copy(box.max);\n        return this;\n    },\n    makeEmpty: function () {\n        this.min.x = this.min.y = +Infinity;\n        this.max.x = this.max.y = -Infinity;\n        return this;\n    },\n    isEmpty: function () {\n        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n        return (this.max.x < this.min.x) || (this.max.y < this.min.y);\n    },\n    getCenter: function (optionalTarget) {\n        var result = optionalTarget || new Vector2();\n        return this.isEmpty() ? result.set(0, 0) : result.addVectors(this.min, this.max).multiplyScalar(0.5);\n    },\n    getSize: function (optionalTarget) {\n        var result = optionalTarget || new Vector2();\n        return this.isEmpty() ? result.set(0, 0) : result.subVectors(this.max, this.min);\n    },\n    expandByPoint: function (point) {\n        this.min.min(point);\n        this.max.max(point);\n        return this;\n    },\n    expandByVector: function (vector) {\n        this.min.sub(vector);\n        this.max.add(vector);\n        return this;\n    },\n    expandByScalar: function (scalar) {\n        this.min.addScalar(-scalar);\n        this.max.addScalar(scalar);\n        return this;\n    },\n    containsPoint: function (point) {\n        return point.x < this.min.x || point.x > this.max.x ||\n            point.y < this.min.y || point.y > this.max.y ? false : true;\n    },\n    containsBox: function (box) {\n        return this.min.x <= box.min.x && box.max.x <= this.max.x &&\n            this.min.y <= box.min.y && box.max.y <= this.max.y;\n    },\n    getParameter: function (point, optionalTarget) {\n        // This can potentially have a divide by zero if the box\n        // has a size dimension of 0.\n        var result = optionalTarget || new Vector2();\n        return result.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n    },\n    intersectsBox: function (box) {\n        // using 4 splitting planes to rule out intersections\n        return box.max.x < this.min.x || box.min.x > this.max.x ||\n            box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n    },\n    clampPoint: function (point, optionalTarget) {\n        var result = optionalTarget || new Vector2();\n        return result.copy(point).clamp(this.min, this.max);\n    },\n    distanceToPoint: function () {\n        var v1 = new Vector2();\n        return function distanceToPoint(point) {\n            var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n            return clampedPoint.sub(point).length();\n        };\n    }(),\n    intersect: function (box) {\n        this.min.max(box.min);\n        this.max.min(box.max);\n        return this;\n    },\n    union: function (box) {\n        this.min.min(box.min);\n        this.max.max(box.max);\n        return this;\n    },\n    translate: function (offset) {\n        this.min.add(offset);\n        this.max.add(offset);\n        return this;\n    },\n    equals: function (box) {\n        return box.min.equals(this.min) && box.max.equals(this.max);\n    }\n});\n/**\n * @author alteredq / http://alteredqualia.com/\n */\nfunction ImmediateRenderObject(material) {\n    Object3D.call(this);\n    this.material = material;\n    this.render = function ( /* renderCallback */) { };\n}\nImmediateRenderObject.prototype = Object.create(Object3D.prototype);\nImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\nImmediateRenderObject.prototype.isImmediateRenderObject = true;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction VertexNormalsHelper(object, size, hex, linewidth) {\n    this.object = object;\n    this.size = (size !== undefined) ? size : 1;\n    var color = (hex !== undefined) ? hex : 0xff0000;\n    var width = (linewidth !== undefined) ? linewidth : 1;\n    //\n    var nNormals = 0;\n    var objGeometry = this.object.geometry;\n    if (objGeometry && objGeometry.isGeometry) {\n        nNormals = objGeometry.faces.length * 3;\n    }\n    else if (objGeometry && objGeometry.isBufferGeometry) {\n        nNormals = objGeometry.attributes.normal.count;\n    }\n    //\n    var geometry = new BufferGeometry();\n    var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n    geometry.addAttribute('position', positions);\n    LineSegments.call(this, geometry, new LineBasicMaterial({ color: color, linewidth: width }));\n    //\n    this.matrixAutoUpdate = false;\n    this.update();\n}\nVertexNormalsHelper.prototype = Object.create(LineSegments.prototype);\nVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\nVertexNormalsHelper.prototype.update = (function () {\n    var v1 = new Vector3();\n    var v2 = new Vector3();\n    var normalMatrix = new Matrix3();\n    return function update() {\n        var keys = ['a', 'b', 'c'];\n        this.object.updateMatrixWorld(true);\n        normalMatrix.getNormalMatrix(this.object.matrixWorld);\n        var matrixWorld = this.object.matrixWorld;\n        var position = this.geometry.attributes.position;\n        //\n        var objGeometry = this.object.geometry;\n        if (objGeometry && objGeometry.isGeometry) {\n            var vertices = objGeometry.vertices;\n            var faces = objGeometry.faces;\n            var idx = 0;\n            for (var i = 0, l = faces.length; i < l; i++) {\n                var face = faces[i];\n                for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n                    var vertex = vertices[face[keys[j]]];\n                    var normal = face.vertexNormals[j];\n                    v1.copy(vertex).applyMatrix4(matrixWorld);\n                    v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);\n                    position.setXYZ(idx, v1.x, v1.y, v1.z);\n                    idx = idx + 1;\n                    position.setXYZ(idx, v2.x, v2.y, v2.z);\n                    idx = idx + 1;\n                }\n            }\n        }\n        else if (objGeometry && objGeometry.isBufferGeometry) {\n            var objPos = objGeometry.attributes.position;\n            var objNorm = objGeometry.attributes.normal;\n            var idx = 0;\n            // for simplicity, ignore index and drawcalls, and render every normal\n            for (var j = 0, jl = objPos.count; j < jl; j++) {\n                v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);\n                v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));\n                v2.applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);\n                position.setXYZ(idx, v1.x, v1.y, v1.z);\n                idx = idx + 1;\n                position.setXYZ(idx, v2.x, v2.y, v2.z);\n                idx = idx + 1;\n            }\n        }\n        position.needsUpdate = true;\n    };\n}());\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction SpotLightHelper(light, color) {\n    Object3D.call(this);\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.color = color;\n    var geometry = new BufferGeometry();\n    var positions = [\n        0, 0, 0, 0, 0, 1,\n        0, 0, 0, 1, 0, 1,\n        0, 0, 0, -1, 0, 1,\n        0, 0, 0, 0, 1, 1,\n        0, 0, 0, 0, -1, 1\n    ];\n    for (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n        var p1 = (i / l) * Math.PI * 2;\n        var p2 = (j / l) * Math.PI * 2;\n        positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n    }\n    geometry.addAttribute('position', new Float32BufferAttribute(positions, 3));\n    var material = new LineBasicMaterial({ fog: false });\n    this.cone = new LineSegments(geometry, material);\n    this.add(this.cone);\n    this.update();\n}\nSpotLightHelper.prototype = Object.create(Object3D.prototype);\nSpotLightHelper.prototype.constructor = SpotLightHelper;\nSpotLightHelper.prototype.dispose = function () {\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n};\nSpotLightHelper.prototype.update = function () {\n    var vector = new Vector3();\n    var vector2 = new Vector3();\n    return function update() {\n        this.light.updateMatrixWorld();\n        var coneLength = this.light.distance ? this.light.distance : 1000;\n        var coneWidth = coneLength * Math.tan(this.light.angle);\n        this.cone.scale.set(coneWidth, coneWidth, coneLength);\n        vector.setFromMatrixPosition(this.light.matrixWorld);\n        vector2.setFromMatrixPosition(this.light.target.matrixWorld);\n        this.cone.lookAt(vector2.sub(vector));\n        if (this.color !== undefined) {\n            this.cone.material.color.set(this.color);\n        }\n        else {\n            this.cone.material.color.copy(this.light.color);\n        }\n    };\n}();\n/**\n * @author Sean Griffin / http://twitter.com/sgrif\n * @author Michael Guerrero / http://realitymeltdown.com\n * @author mrdoob / http://mrdoob.com/\n * @author ikerr / http://verold.com\n * @author Mugen87 / https://github.com/Mugen87\n */\nfunction getBoneList(object) {\n    var boneList = [];\n    if (object && object.isBone) {\n        boneList.push(object);\n    }\n    for (var i = 0; i < object.children.length; i++) {\n        boneList.push.apply(boneList, getBoneList(object.children[i]));\n    }\n    return boneList;\n}\nfunction SkeletonHelper(object) {\n    var bones = getBoneList(object);\n    var geometry = new BufferGeometry();\n    var vertices = [];\n    var colors = [];\n    var color1 = new Color(0, 0, 1);\n    var color2 = new Color(0, 1, 0);\n    for (var i = 0; i < bones.length; i++) {\n        var bone = bones[i];\n        if (bone.parent && bone.parent.isBone) {\n            vertices.push(0, 0, 0);\n            vertices.push(0, 0, 0);\n            colors.push(color1.r, color1.g, color1.b);\n            colors.push(color2.r, color2.g, color2.b);\n        }\n    }\n    geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));\n    var material = new LineBasicMaterial({ vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true });\n    LineSegments.call(this, geometry, material);\n    this.root = object;\n    this.bones = bones;\n    this.matrix = object.matrixWorld;\n    this.matrixAutoUpdate = false;\n}\nSkeletonHelper.prototype = Object.create(LineSegments.prototype);\nSkeletonHelper.prototype.constructor = SkeletonHelper;\nSkeletonHelper.prototype.updateMatrixWorld = function () {\n    var vector = new Vector3();\n    var boneMatrix = new Matrix4();\n    var matrixWorldInv = new Matrix4();\n    return function updateMatrixWorld(force) {\n        var bones = this.bones;\n        var geometry = this.geometry;\n        var position = geometry.getAttribute('position');\n        matrixWorldInv.getInverse(this.root.matrixWorld);\n        for (var i = 0, j = 0; i < bones.length; i++) {\n            var bone = bones[i];\n            if (bone.parent && bone.parent.isBone) {\n                boneMatrix.multiplyMatrices(matrixWorldInv, bone.matrixWorld);\n                vector.setFromMatrixPosition(boneMatrix);\n                position.setXYZ(j, vector.x, vector.y, vector.z);\n                boneMatrix.multiplyMatrices(matrixWorldInv, bone.parent.matrixWorld);\n                vector.setFromMatrixPosition(boneMatrix);\n                position.setXYZ(j + 1, vector.x, vector.y, vector.z);\n                j += 2;\n            }\n        }\n        geometry.getAttribute('position').needsUpdate = true;\n        Object3D.prototype.updateMatrixWorld.call(this, force);\n    };\n}();\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\nfunction PointLightHelper(light, sphereSize, color) {\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.color = color;\n    var geometry = new SphereBufferGeometry(sphereSize, 4, 2);\n    var material = new MeshBasicMaterial({ wireframe: true, fog: false });\n    Mesh.call(this, geometry, material);\n    this.matrix = this.light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.update();\n    /*\n    var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n    this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n    var d = light.distance;\n\n    if ( d === 0.0 ) {\n\n        this.lightDistance.visible = false;\n\n    } else {\n\n        this.lightDistance.scale.set( d, d, d );\n\n    }\n\n    this.add( this.lightDistance );\n    */\n}\nPointLightHelper.prototype = Object.create(Mesh.prototype);\nPointLightHelper.prototype.constructor = PointLightHelper;\nPointLightHelper.prototype.dispose = function () {\n    this.geometry.dispose();\n    this.material.dispose();\n};\nPointLightHelper.prototype.update = function () {\n    if (this.color !== undefined) {\n        this.material.color.set(this.color);\n    }\n    else {\n        this.material.color.copy(this.light.color);\n    }\n    /*\n    var d = this.light.distance;\n\n    if ( d === 0.0 ) {\n\n        this.lightDistance.visible = false;\n\n    } else {\n\n        this.lightDistance.visible = true;\n        this.lightDistance.scale.set( d, d, d );\n\n    }\n    */\n};\n/**\n * @author abelnation / http://github.com/abelnation\n * @author Mugen87 / http://github.com/Mugen87\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction RectAreaLightHelper(light, color) {\n    Object3D.call(this);\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.color = color;\n    var material = new LineBasicMaterial({ fog: false });\n    var geometry = new BufferGeometry();\n    geometry.addAttribute('position', new BufferAttribute(new Float32Array(5 * 3), 3));\n    this.line = new Line(geometry, material);\n    this.add(this.line);\n    this.update();\n}\nRectAreaLightHelper.prototype = Object.create(Object3D.prototype);\nRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\nRectAreaLightHelper.prototype.dispose = function () {\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n};\nRectAreaLightHelper.prototype.update = function () {\n    // calculate new dimensions of the helper\n    var hx = this.light.width * 0.5;\n    var hy = this.light.height * 0.5;\n    var position = this.line.geometry.attributes.position;\n    var array = position.array;\n    // update vertices\n    array[0] = hx;\n    array[1] = -hy;\n    array[2] = 0;\n    array[3] = hx;\n    array[4] = hy;\n    array[5] = 0;\n    array[6] = -hx;\n    array[7] = hy;\n    array[8] = 0;\n    array[9] = -hx;\n    array[10] = -hy;\n    array[11] = 0;\n    array[12] = hx;\n    array[13] = -hy;\n    array[14] = 0;\n    position.needsUpdate = true;\n    if (this.color !== undefined) {\n        this.line.material.color.set(this.color);\n    }\n    else {\n        this.line.material.color.copy(this.light.color);\n    }\n};\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\nfunction HemisphereLightHelper(light, size, color) {\n    Object3D.call(this);\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.color = color;\n    var geometry = new OctahedronBufferGeometry(size);\n    geometry.rotateY(Math.PI * 0.5);\n    this.material = new MeshBasicMaterial({ wireframe: true, fog: false });\n    if (this.color === undefined)\n        this.material.vertexColors = VertexColors;\n    var position = geometry.getAttribute('position');\n    var colors = new Float32Array(position.count * 3);\n    geometry.addAttribute('color', new BufferAttribute(colors, 3));\n    this.add(new Mesh(geometry, this.material));\n    this.update();\n}\nHemisphereLightHelper.prototype = Object.create(Object3D.prototype);\nHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\nHemisphereLightHelper.prototype.dispose = function () {\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n};\nHemisphereLightHelper.prototype.update = function () {\n    var vector = new Vector3();\n    var color1 = new Color();\n    var color2 = new Color();\n    return function update() {\n        var mesh = this.children[0];\n        if (this.color !== undefined) {\n            this.material.color.set(this.color);\n        }\n        else {\n            var colors = mesh.geometry.getAttribute('color');\n            color1.copy(this.light.color);\n            color2.copy(this.light.groundColor);\n            for (var i = 0, l = colors.count; i < l; i++) {\n                var color = (i < (l / 2)) ? color1 : color2;\n                colors.setXYZ(i, color.r, color.g, color.b);\n            }\n            colors.needsUpdate = true;\n        }\n        mesh.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate());\n    };\n}();\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction GridHelper(size, divisions, color1, color2) {\n    size = size || 10;\n    divisions = divisions || 10;\n    color1 = new Color(color1 !== undefined ? color1 : 0x444444);\n    color2 = new Color(color2 !== undefined ? color2 : 0x888888);\n    var center = divisions / 2;\n    var step = size / divisions;\n    var halfSize = size / 2;\n    var vertices = [], colors = [];\n    for (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n        vertices.push(-halfSize, 0, k, halfSize, 0, k);\n        vertices.push(k, 0, -halfSize, k, 0, halfSize);\n        var color = i === center ? color1 : color2;\n        color.toArray(colors, j);\n        j += 3;\n        color.toArray(colors, j);\n        j += 3;\n        color.toArray(colors, j);\n        j += 3;\n        color.toArray(colors, j);\n        j += 3;\n    }\n    var geometry = new BufferGeometry();\n    geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));\n    var material = new LineBasicMaterial({ vertexColors: VertexColors });\n    LineSegments.call(this, geometry, material);\n}\nGridHelper.prototype = Object.create(LineSegments.prototype);\nGridHelper.prototype.constructor = GridHelper;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n * @author Hectate / http://www.github.com/Hectate\n */\nfunction PolarGridHelper(radius, radials, circles, divisions, color1, color2) {\n    radius = radius || 10;\n    radials = radials || 16;\n    circles = circles || 8;\n    divisions = divisions || 64;\n    color1 = new Color(color1 !== undefined ? color1 : 0x444444);\n    color2 = new Color(color2 !== undefined ? color2 : 0x888888);\n    var vertices = [];\n    var colors = [];\n    var x, z;\n    var v, i, j, r, color;\n    // create the radials\n    for (i = 0; i <= radials; i++) {\n        v = (i / radials) * (Math.PI * 2);\n        x = Math.sin(v) * radius;\n        z = Math.cos(v) * radius;\n        vertices.push(0, 0, 0);\n        vertices.push(x, 0, z);\n        color = (i & 1) ? color1 : color2;\n        colors.push(color.r, color.g, color.b);\n        colors.push(color.r, color.g, color.b);\n    }\n    // create the circles\n    for (i = 0; i <= circles; i++) {\n        color = (i & 1) ? color1 : color2;\n        r = radius - (radius / circles * i);\n        for (j = 0; j < divisions; j++) {\n            // first vertex\n            v = (j / divisions) * (Math.PI * 2);\n            x = Math.sin(v) * r;\n            z = Math.cos(v) * r;\n            vertices.push(x, 0, z);\n            colors.push(color.r, color.g, color.b);\n            // second vertex\n            v = ((j + 1) / divisions) * (Math.PI * 2);\n            x = Math.sin(v) * r;\n            z = Math.cos(v) * r;\n            vertices.push(x, 0, z);\n            colors.push(color.r, color.g, color.b);\n        }\n    }\n    var geometry = new BufferGeometry();\n    geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));\n    var material = new LineBasicMaterial({ vertexColors: VertexColors });\n    LineSegments.call(this, geometry, material);\n}\nPolarGridHelper.prototype = Object.create(LineSegments.prototype);\nPolarGridHelper.prototype.constructor = PolarGridHelper;\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction FaceNormalsHelper(object, size, hex, linewidth) {\n    // FaceNormalsHelper only supports THREE.Geometry\n    this.object = object;\n    this.size = (size !== undefined) ? size : 1;\n    var color = (hex !== undefined) ? hex : 0xffff00;\n    var width = (linewidth !== undefined) ? linewidth : 1;\n    //\n    var nNormals = 0;\n    var objGeometry = this.object.geometry;\n    if (objGeometry && objGeometry.isGeometry) {\n        nNormals = objGeometry.faces.length;\n    }\n    else {\n        console.warn('THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.');\n    }\n    //\n    var geometry = new BufferGeometry();\n    var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n    geometry.addAttribute('position', positions);\n    LineSegments.call(this, geometry, new LineBasicMaterial({ color: color, linewidth: width }));\n    //\n    this.matrixAutoUpdate = false;\n    this.update();\n}\nFaceNormalsHelper.prototype = Object.create(LineSegments.prototype);\nFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\nFaceNormalsHelper.prototype.update = (function () {\n    var v1 = new Vector3();\n    var v2 = new Vector3();\n    var normalMatrix = new Matrix3();\n    return function update() {\n        this.object.updateMatrixWorld(true);\n        normalMatrix.getNormalMatrix(this.object.matrixWorld);\n        var matrixWorld = this.object.matrixWorld;\n        var position = this.geometry.attributes.position;\n        //\n        var objGeometry = this.object.geometry;\n        var vertices = objGeometry.vertices;\n        var faces = objGeometry.faces;\n        var idx = 0;\n        for (var i = 0, l = faces.length; i < l; i++) {\n            var face = faces[i];\n            var normal = face.normal;\n            v1.copy(vertices[face.a])\n                .add(vertices[face.b])\n                .add(vertices[face.c])\n                .divideScalar(3)\n                .applyMatrix4(matrixWorld);\n            v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);\n            position.setXYZ(idx, v1.x, v1.y, v1.z);\n            idx = idx + 1;\n            position.setXYZ(idx, v2.x, v2.y, v2.z);\n            idx = idx + 1;\n        }\n        position.needsUpdate = true;\n    };\n}());\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction DirectionalLightHelper(light, size, color) {\n    Object3D.call(this);\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.color = color;\n    if (size === undefined)\n        size = 1;\n    var geometry = new BufferGeometry();\n    geometry.addAttribute('position', new Float32BufferAttribute([\n        -size, size, 0,\n        size, size, 0,\n        size, -size, 0,\n        -size, -size, 0,\n        -size, size, 0\n    ], 3));\n    var material = new LineBasicMaterial({ fog: false });\n    this.lightPlane = new Line(geometry, material);\n    this.add(this.lightPlane);\n    geometry = new BufferGeometry();\n    geometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n    this.targetLine = new Line(geometry, material);\n    this.add(this.targetLine);\n    this.update();\n}\nDirectionalLightHelper.prototype = Object.create(Object3D.prototype);\nDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\nDirectionalLightHelper.prototype.dispose = function () {\n    this.lightPlane.geometry.dispose();\n    this.lightPlane.material.dispose();\n    this.targetLine.geometry.dispose();\n    this.targetLine.material.dispose();\n};\nDirectionalLightHelper.prototype.update = function () {\n    var v1 = new Vector3();\n    var v2 = new Vector3();\n    var v3 = new Vector3();\n    return function update() {\n        v1.setFromMatrixPosition(this.light.matrixWorld);\n        v2.setFromMatrixPosition(this.light.target.matrixWorld);\n        v3.subVectors(v2, v1);\n        this.lightPlane.lookAt(v3);\n        if (this.color !== undefined) {\n            this.lightPlane.material.color.set(this.color);\n            this.targetLine.material.color.set(this.color);\n        }\n        else {\n            this.lightPlane.material.color.copy(this.light.color);\n            this.targetLine.material.color.copy(this.light.color);\n        }\n        this.targetLine.lookAt(v3);\n        this.targetLine.scale.z = v3.length();\n    };\n}();\n/**\n * @author alteredq / http://alteredqualia.com/\n * @author Mugen87 / https://github.com/Mugen87\n *\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\nfunction CameraHelper(camera) {\n    var geometry = new BufferGeometry();\n    var material = new LineBasicMaterial({ color: 0xffffff, vertexColors: FaceColors });\n    var vertices = [];\n    var colors = [];\n    var pointMap = {};\n    // colors\n    var colorFrustum = new Color(0xffaa00);\n    var colorCone = new Color(0xff0000);\n    var colorUp = new Color(0x00aaff);\n    var colorTarget = new Color(0xffffff);\n    var colorCross = new Color(0x333333);\n    // near\n    addLine('n1', 'n2', colorFrustum);\n    addLine('n2', 'n4', colorFrustum);\n    addLine('n4', 'n3', colorFrustum);\n    addLine('n3', 'n1', colorFrustum);\n    // far\n    addLine('f1', 'f2', colorFrustum);\n    addLine('f2', 'f4', colorFrustum);\n    addLine('f4', 'f3', colorFrustum);\n    addLine('f3', 'f1', colorFrustum);\n    // sides\n    addLine('n1', 'f1', colorFrustum);\n    addLine('n2', 'f2', colorFrustum);\n    addLine('n3', 'f3', colorFrustum);\n    addLine('n4', 'f4', colorFrustum);\n    // cone\n    addLine('p', 'n1', colorCone);\n    addLine('p', 'n2', colorCone);\n    addLine('p', 'n3', colorCone);\n    addLine('p', 'n4', colorCone);\n    // up\n    addLine('u1', 'u2', colorUp);\n    addLine('u2', 'u3', colorUp);\n    addLine('u3', 'u1', colorUp);\n    // target\n    addLine('c', 't', colorTarget);\n    addLine('p', 'c', colorCross);\n    // cross\n    addLine('cn1', 'cn2', colorCross);\n    addLine('cn3', 'cn4', colorCross);\n    addLine('cf1', 'cf2', colorCross);\n    addLine('cf3', 'cf4', colorCross);\n    function addLine(a, b, color) {\n        addPoint(a, color);\n        addPoint(b, color);\n    }\n    function addPoint(id, color) {\n        vertices.push(0, 0, 0);\n        colors.push(color.r, color.g, color.b);\n        if (pointMap[id] === undefined) {\n            pointMap[id] = [];\n        }\n        pointMap[id].push((vertices.length / 3) - 1);\n    }\n    geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));\n    LineSegments.call(this, geometry, material);\n    this.camera = camera;\n    if (this.camera.updateProjectionMatrix)\n        this.camera.updateProjectionMatrix();\n    this.matrix = camera.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.pointMap = pointMap;\n    this.update();\n}\nCameraHelper.prototype = Object.create(LineSegments.prototype);\nCameraHelper.prototype.constructor = CameraHelper;\nCameraHelper.prototype.update = function () {\n    var geometry, pointMap;\n    var vector = new Vector3();\n    var camera = new Camera();\n    function setPoint(point, x, y, z) {\n        vector.set(x, y, z).unproject(camera);\n        var points = pointMap[point];\n        if (points !== undefined) {\n            var position = geometry.getAttribute('position');\n            for (var i = 0, l = points.length; i < l; i++) {\n                position.setXYZ(points[i], vector.x, vector.y, vector.z);\n            }\n        }\n    }\n    return function update() {\n        geometry = this.geometry;\n        pointMap = this.pointMap;\n        var w = 1, h = 1;\n        // we need just camera projection matrix\n        // world matrix must be identity\n        camera.projectionMatrix.copy(this.camera.projectionMatrix);\n        // center / target\n        setPoint('c', 0, 0, -1);\n        setPoint('t', 0, 0, 1);\n        // near\n        setPoint('n1', -w, -h, -1);\n        setPoint('n2', w, -h, -1);\n        setPoint('n3', -w, h, -1);\n        setPoint('n4', w, h, -1);\n        // far\n        setPoint('f1', -w, -h, 1);\n        setPoint('f2', w, -h, 1);\n        setPoint('f3', -w, h, 1);\n        setPoint('f4', w, h, 1);\n        // up\n        setPoint('u1', w * 0.7, h * 1.1, -1);\n        setPoint('u2', -w * 0.7, h * 1.1, -1);\n        setPoint('u3', 0, h * 2, -1);\n        // cross\n        setPoint('cf1', -w, 0, 1);\n        setPoint('cf2', w, 0, 1);\n        setPoint('cf3', 0, -h, 1);\n        setPoint('cf4', 0, h, 1);\n        setPoint('cn1', -w, 0, -1);\n        setPoint('cn2', w, 0, -1);\n        setPoint('cn3', 0, -h, -1);\n        setPoint('cn4', 0, h, -1);\n        geometry.getAttribute('position').needsUpdate = true;\n    };\n}();\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / http://github.com/Mugen87\n */\nfunction BoxHelper(object, color) {\n    this.object = object;\n    if (color === undefined)\n        color = 0xffff00;\n    var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    var positions = new Float32Array(8 * 3);\n    var geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.addAttribute('position', new BufferAttribute(positions, 3));\n    LineSegments.call(this, geometry, new LineBasicMaterial({ color: color }));\n    this.matrixAutoUpdate = false;\n    this.update();\n}\nBoxHelper.prototype = Object.create(LineSegments.prototype);\nBoxHelper.prototype.constructor = BoxHelper;\nBoxHelper.prototype.update = (function () {\n    var box = new Box3();\n    return function update(object) {\n        if (object !== undefined) {\n            console.warn('THREE.BoxHelper: .update() has no longer arguments.');\n        }\n        if (this.object !== undefined) {\n            box.setFromObject(this.object);\n        }\n        if (box.isEmpty())\n            return;\n        var min = box.min;\n        var max = box.max;\n        /*\n          5____4\n        1/___0/|\n        | 6__|_7\n        2/___3/\n\n        0: max.x, max.y, max.z\n        1: min.x, max.y, max.z\n        2: min.x, min.y, max.z\n        3: max.x, min.y, max.z\n        4: max.x, max.y, min.z\n        5: min.x, max.y, min.z\n        6: min.x, min.y, min.z\n        7: max.x, min.y, min.z\n        */\n        var position = this.geometry.attributes.position;\n        var array = position.array;\n        array[0] = max.x;\n        array[1] = max.y;\n        array[2] = max.z;\n        array[3] = min.x;\n        array[4] = max.y;\n        array[5] = max.z;\n        array[6] = min.x;\n        array[7] = min.y;\n        array[8] = max.z;\n        array[9] = max.x;\n        array[10] = min.y;\n        array[11] = max.z;\n        array[12] = max.x;\n        array[13] = max.y;\n        array[14] = min.z;\n        array[15] = min.x;\n        array[16] = max.y;\n        array[17] = min.z;\n        array[18] = min.x;\n        array[19] = min.y;\n        array[20] = min.z;\n        array[21] = max.x;\n        array[22] = min.y;\n        array[23] = min.z;\n        position.needsUpdate = true;\n        this.geometry.computeBoundingSphere();\n    };\n})();\nBoxHelper.prototype.setFromObject = function (object) {\n    this.object = object;\n    this.update();\n    return this;\n};\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction Box3Helper(box, hex) {\n    this.type = 'Box3Helper';\n    this.box = box;\n    var color = (hex !== undefined) ? hex : 0xffff00;\n    var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    var positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n    var geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.addAttribute('position', new Float32BufferAttribute(positions, 3));\n    LineSegments.call(this, geometry, new LineBasicMaterial({ color: color }));\n    this.geometry.computeBoundingSphere();\n}\nBox3Helper.prototype = Object.create(LineSegments.prototype);\nBox3Helper.prototype.constructor = Box3Helper;\nBox3Helper.prototype.updateMatrixWorld = function (force) {\n    var box = this.box;\n    if (box.isEmpty())\n        return;\n    box.getCenter(this.position);\n    box.getSize(this.scale);\n    this.scale.multiplyScalar(0.5);\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n};\n/**\n * @author WestLangley / http://github.com/WestLangley\n */\nfunction PlaneHelper(plane, size, hex) {\n    this.type = 'PlaneHelper';\n    this.plane = plane;\n    this.size = (size === undefined) ? 1 : size;\n    var color = (hex !== undefined) ? hex : 0xffff00;\n    var positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n    var geometry = new BufferGeometry();\n    geometry.addAttribute('position', new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n    Line.call(this, geometry, new LineBasicMaterial({ color: color }));\n    //\n    var positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n    var geometry2 = new BufferGeometry();\n    geometry2.addAttribute('position', new Float32BufferAttribute(positions2, 3));\n    geometry2.computeBoundingSphere();\n    this.add(new Mesh(geometry2, new MeshBasicMaterial({ color: color, opacity: 0.2, transparent: true, depthWrite: false })));\n}\nPlaneHelper.prototype = Object.create(Line.prototype);\nPlaneHelper.prototype.constructor = PlaneHelper;\nPlaneHelper.prototype.updateMatrixWorld = function (force) {\n    var scale = -this.plane.constant;\n    if (Math.abs(scale) < 1e-8)\n        scale = 1e-8; // sign does not matter\n    this.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n    this.lookAt(this.plane.normal);\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n};\n/**\n * @author WestLangley / http://github.com/WestLangley\n * @author zz85 / http://github.com/zz85\n * @author bhouston / http://clara.io\n *\n * Creates an arrow for visualizing directions\n *\n * Parameters:\n *  dir - Vector3\n *  origin - Vector3\n *  length - Number\n *  color - color in hex value\n *  headLength - Number\n *  headWidth - Number\n */\nvar lineGeometry;\nvar coneGeometry;\nfunction ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n    // dir is assumed to be normalized\n    Object3D.call(this);\n    if (color === undefined)\n        color = 0xffff00;\n    if (length === undefined)\n        length = 1;\n    if (headLength === undefined)\n        headLength = 0.2 * length;\n    if (headWidth === undefined)\n        headWidth = 0.2 * headLength;\n    if (lineGeometry === undefined) {\n        lineGeometry = new BufferGeometry();\n        lineGeometry.addAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n        coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1);\n        coneGeometry.translate(0, -0.5, 0);\n    }\n    this.position.copy(origin);\n    this.line = new Line(lineGeometry, new LineBasicMaterial({ color: color }));\n    this.line.matrixAutoUpdate = false;\n    this.add(this.line);\n    this.cone = new Mesh(coneGeometry, new MeshBasicMaterial({ color: color }));\n    this.cone.matrixAutoUpdate = false;\n    this.add(this.cone);\n    this.setDirection(dir);\n    this.setLength(length, headLength, headWidth);\n}\nArrowHelper.prototype = Object.create(Object3D.prototype);\nArrowHelper.prototype.constructor = ArrowHelper;\nArrowHelper.prototype.setDirection = (function () {\n    var axis = new Vector3();\n    var radians;\n    return function setDirection(dir) {\n        // dir is assumed to be normalized\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        }\n        else if (dir.y < -0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        }\n        else {\n            axis.set(dir.z, 0, -dir.x).normalize();\n            radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(axis, radians);\n        }\n    };\n}());\nArrowHelper.prototype.setLength = function (length, headLength, headWidth) {\n    if (headLength === undefined)\n        headLength = 0.2 * length;\n    if (headWidth === undefined)\n        headWidth = 0.2 * headLength;\n    this.line.scale.set(1, Math.max(0, length - headLength), 1);\n    this.line.updateMatrix();\n    this.cone.scale.set(headWidth, headLength, headWidth);\n    this.cone.position.y = length;\n    this.cone.updateMatrix();\n};\nArrowHelper.prototype.setColor = function (color) {\n    this.line.material.color.copy(color);\n    this.cone.material.color.copy(color);\n};\n/**\n * @author sroucheray / http://sroucheray.org/\n * @author mrdoob / http://mrdoob.com/\n */\nfunction AxesHelper(size) {\n    size = size || 1;\n    var vertices = [\n        0, 0, 0, size, 0, 0,\n        0, 0, 0, 0, size, 0,\n        0, 0, 0, 0, 0, size\n    ];\n    var colors = [\n        1, 0, 0, 1, 0.6, 0,\n        0, 1, 0, 0.6, 1, 0,\n        0, 0, 1, 0, 0.6, 1\n    ];\n    var geometry = new BufferGeometry();\n    geometry.addAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute('color', new Float32BufferAttribute(colors, 3));\n    var material = new LineBasicMaterial({ vertexColors: VertexColors });\n    LineSegments.call(this, geometry, material);\n}\nAxesHelper.prototype = Object.create(LineSegments.prototype);\nAxesHelper.prototype.constructor = AxesHelper;\n/**\n * @author mrdoob / http://mrdoob.com/\n */\nfunction Face4(a, b, c, d, normal, color, materialIndex) {\n    console.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');\n    return new Face3(a, b, c, normal, color, materialIndex);\n}\nvar LineStrip = 0;\nvar LinePieces = 1;\nfunction MeshFaceMaterial(materials) {\n    console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n    return materials;\n}\nfunction MultiMaterial(materials) {\n    if (materials === undefined)\n        materials = [];\n    console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n    materials.isMultiMaterial = true;\n    materials.materials = materials;\n    materials.clone = function () {\n        return materials.slice();\n    };\n    return materials;\n}\nfunction PointCloud(geometry, material) {\n    console.warn('THREE.PointCloud has been renamed to THREE.Points.');\n    return new Points(geometry, material);\n}\nfunction Particle(material) {\n    console.warn('THREE.Particle has been renamed to THREE.Sprite.');\n    return new Sprite(material);\n}\nfunction ParticleSystem(geometry, material) {\n    console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n    return new Points(geometry, material);\n}\nfunction PointCloudMaterial(parameters) {\n    console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n    return new PointsMaterial(parameters);\n}\nfunction ParticleBasicMaterial(parameters) {\n    console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n    return new PointsMaterial(parameters);\n}\nfunction ParticleSystemMaterial(parameters) {\n    console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n    return new PointsMaterial(parameters);\n}\nfunction Vertex(x, y, z) {\n    console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n    return new Vector3(x, y, z);\n}\n//\nfunction DynamicBufferAttribute(array, itemSize) {\n    console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.');\n    return new BufferAttribute(array, itemSize).setDynamic(true);\n}\nfunction Int8Attribute(array, itemSize) {\n    console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n    return new Int8BufferAttribute(array, itemSize);\n}\nfunction Uint8Attribute(array, itemSize) {\n    console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n    return new Uint8BufferAttribute(array, itemSize);\n}\nfunction Uint8ClampedAttribute(array, itemSize) {\n    console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n    return new Uint8ClampedBufferAttribute(array, itemSize);\n}\nfunction Int16Attribute(array, itemSize) {\n    console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n    return new Int16BufferAttribute(array, itemSize);\n}\nfunction Uint16Attribute(array, itemSize) {\n    console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n    return new Uint16BufferAttribute(array, itemSize);\n}\nfunction Int32Attribute(array, itemSize) {\n    console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n    return new Int32BufferAttribute(array, itemSize);\n}\nfunction Uint32Attribute(array, itemSize) {\n    console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n    return new Uint32BufferAttribute(array, itemSize);\n}\nfunction Float32Attribute(array, itemSize) {\n    console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n    return new Float32BufferAttribute(array, itemSize);\n}\nfunction Float64Attribute(array, itemSize) {\n    console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n    return new Float64BufferAttribute(array, itemSize);\n}\n//\nCurve.create = function (construct, getPoint) {\n    console.log('THREE.Curve.create() has been deprecated');\n    construct.prototype = Object.create(Curve.prototype);\n    construct.prototype.constructor = construct;\n    construct.prototype.getPoint = getPoint;\n    return construct;\n};\n//\nObject.assign(CurvePath.prototype, {\n    createPointsGeometry: function (divisions) {\n        console.warn('THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');\n        // generate geometry from path points (for Line or Points objects)\n        var pts = this.getPoints(divisions);\n        return this.createGeometry(pts);\n    },\n    createSpacedPointsGeometry: function (divisions) {\n        console.warn('THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');\n        // generate geometry from equidistant sampling along the path\n        var pts = this.getSpacedPoints(divisions);\n        return this.createGeometry(pts);\n    },\n    createGeometry: function (points) {\n        console.warn('THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');\n        var geometry = new Geometry();\n        for (var i = 0, l = points.length; i < l; i++) {\n            var point = points[i];\n            geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n        }\n        return geometry;\n    }\n});\n//\nObject.assign(Path.prototype, {\n    fromPoints: function (points) {\n        console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n        this.setFromPoints(points);\n    }\n});\n//\nfunction ClosedSplineCurve3(points) {\n    console.warn('THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n    CatmullRomCurve3.call(this, points);\n    this.type = 'catmullrom';\n    this.closed = true;\n}\nClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);\n//\nfunction SplineCurve3(points) {\n    console.warn('THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.');\n    CatmullRomCurve3.call(this, points);\n    this.type = 'catmullrom';\n}\nSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);\n//\nfunction Spline(points) {\n    console.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.');\n    CatmullRomCurve3.call(this, points);\n    this.type = 'catmullrom';\n}\nSpline.prototype = Object.create(CatmullRomCurve3.prototype);\nObject.assign(Spline.prototype, {\n    initFromArray: function ( /* a */) {\n        console.error('THREE.Spline: .initFromArray() has been removed.');\n    },\n    getControlPointsArray: function ( /* optionalTarget */) {\n        console.error('THREE.Spline: .getControlPointsArray() has been removed.');\n    },\n    reparametrizeByArcLength: function ( /* samplingCoef */) {\n        console.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');\n    }\n});\n//\nfunction AxisHelper(size) {\n    console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n    return new AxesHelper(size);\n}\nfunction BoundingBoxHelper(object, color) {\n    console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n    return new BoxHelper(object, color);\n}\nfunction EdgesHelper(object, hex) {\n    console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n    return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({ color: hex !== undefined ? hex : 0xffffff }));\n}\nGridHelper.prototype.setColors = function () {\n    console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n};\nSkeletonHelper.prototype.update = function () {\n    console.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n};\nfunction WireframeHelper(object, hex) {\n    console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n    return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({ color: hex !== undefined ? hex : 0xffffff }));\n}\n//\nObject.assign(Loader.prototype, {\n    extractUrlBase: function (url) {\n        console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n        return LoaderUtils.extractUrlBase(url);\n    }\n});\nfunction XHRLoader(manager) {\n    console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n    return new FileLoader(manager);\n}\nfunction BinaryTextureLoader(manager) {\n    console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n    return new DataTextureLoader(manager);\n}\n//\nObject.assign(Box2.prototype, {\n    center: function (optionalTarget) {\n        console.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n        return this.getCenter(optionalTarget);\n    },\n    empty: function () {\n        console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n        return this.isEmpty();\n    },\n    isIntersectionBox: function (box) {\n        console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n        return this.intersectsBox(box);\n    },\n    size: function (optionalTarget) {\n        console.warn('THREE.Box2: .size() has been renamed to .getSize().');\n        return this.getSize(optionalTarget);\n    }\n});\nObject.assign(Box3.prototype, {\n    center: function (optionalTarget) {\n        console.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n        return this.getCenter(optionalTarget);\n    },\n    empty: function () {\n        console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n        return this.isEmpty();\n    },\n    isIntersectionBox: function (box) {\n        console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n        return this.intersectsBox(box);\n    },\n    isIntersectionSphere: function (sphere) {\n        console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n        return this.intersectsSphere(sphere);\n    },\n    size: function (optionalTarget) {\n        console.warn('THREE.Box3: .size() has been renamed to .getSize().');\n        return this.getSize(optionalTarget);\n    }\n});\nLine3.prototype.center = function (optionalTarget) {\n    console.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n    return this.getCenter(optionalTarget);\n};\nObject.assign(_Math, {\n    random16: function () {\n        console.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');\n        return Math.random();\n    },\n    nearestPowerOfTwo: function (value) {\n        console.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');\n        return _Math.floorPowerOfTwo(value);\n    },\n    nextPowerOfTwo: function (value) {\n        console.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');\n        return _Math.ceilPowerOfTwo(value);\n    }\n});\nObject.assign(Matrix3.prototype, {\n    flattenToArrayOffset: function (array, offset) {\n        console.warn(\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\");\n        return this.toArray(array, offset);\n    },\n    multiplyVector3: function (vector) {\n        console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n        return vector.applyMatrix3(this);\n    },\n    multiplyVector3Array: function ( /* a */) {\n        console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n    },\n    applyToBuffer: function (buffer /*, offset, length */) {\n        console.warn('THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.');\n        return this.applyToBufferAttribute(buffer);\n    },\n    applyToVector3Array: function ( /* array, offset, length */) {\n        console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n    }\n});\nObject.assign(Matrix4.prototype, {\n    extractPosition: function (m) {\n        console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n        return this.copyPosition(m);\n    },\n    flattenToArrayOffset: function (array, offset) {\n        console.warn(\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\");\n        return this.toArray(array, offset);\n    },\n    getPosition: function () {\n        var v1;\n        return function getPosition() {\n            if (v1 === undefined)\n                v1 = new Vector3();\n            console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n            return v1.setFromMatrixColumn(this, 3);\n        };\n    }(),\n    setRotationFromQuaternion: function (q) {\n        console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n        return this.makeRotationFromQuaternion(q);\n    },\n    multiplyToArray: function () {\n        console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n    },\n    multiplyVector3: function (vector) {\n        console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n        return vector.applyMatrix4(this);\n    },\n    multiplyVector4: function (vector) {\n        console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n        return vector.applyMatrix4(this);\n    },\n    multiplyVector3Array: function ( /* a */) {\n        console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n    },\n    rotateAxis: function (v) {\n        console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n        v.transformDirection(this);\n    },\n    crossVector: function (vector) {\n        console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n        return vector.applyMatrix4(this);\n    },\n    translate: function () {\n        console.error('THREE.Matrix4: .translate() has been removed.');\n    },\n    rotateX: function () {\n        console.error('THREE.Matrix4: .rotateX() has been removed.');\n    },\n    rotateY: function () {\n        console.error('THREE.Matrix4: .rotateY() has been removed.');\n    },\n    rotateZ: function () {\n        console.error('THREE.Matrix4: .rotateZ() has been removed.');\n    },\n    rotateByAxis: function () {\n        console.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n    },\n    applyToBuffer: function (buffer /*, offset, length */) {\n        console.warn('THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.');\n        return this.applyToBufferAttribute(buffer);\n    },\n    applyToVector3Array: function ( /* array, offset, length */) {\n        console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n    },\n    makeFrustum: function (left, right, bottom, top, near, far) {\n        console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n        return this.makePerspective(left, right, top, bottom, near, far);\n    }\n});\nPlane.prototype.isIntersectionLine = function (line) {\n    console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n    return this.intersectsLine(line);\n};\nQuaternion.prototype.multiplyVector3 = function (vector) {\n    console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n    return vector.applyQuaternion(this);\n};\nObject.assign(Ray.prototype, {\n    isIntersectionBox: function (box) {\n        console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n        return this.intersectsBox(box);\n    },\n    isIntersectionPlane: function (plane) {\n        console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n        return this.intersectsPlane(plane);\n    },\n    isIntersectionSphere: function (sphere) {\n        console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n        return this.intersectsSphere(sphere);\n    }\n});\nObject.assign(Shape.prototype, {\n    extractAllPoints: function (divisions) {\n        console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n        return this.extractPoints(divisions);\n    },\n    extrude: function (options) {\n        console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n        return new ExtrudeGeometry(this, options);\n    },\n    makeGeometry: function (options) {\n        console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n        return new ShapeGeometry(this, options);\n    }\n});\nObject.assign(Vector2.prototype, {\n    fromAttribute: function (attribute, index, offset) {\n        console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n        return this.fromBufferAttribute(attribute, index, offset);\n    },\n    distanceToManhattan: function (v) {\n        console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n        return this.manhattanDistanceTo(v);\n    },\n    lengthManhattan: function () {\n        console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n        return this.manhattanLength();\n    }\n});\nObject.assign(Vector3.prototype, {\n    setEulerFromRotationMatrix: function () {\n        console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n    },\n    setEulerFromQuaternion: function () {\n        console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n    },\n    getPositionFromMatrix: function (m) {\n        console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n        return this.setFromMatrixPosition(m);\n    },\n    getScaleFromMatrix: function (m) {\n        console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n        return this.setFromMatrixScale(m);\n    },\n    getColumnFromMatrix: function (index, matrix) {\n        console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n        return this.setFromMatrixColumn(matrix, index);\n    },\n    applyProjection: function (m) {\n        console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n        return this.applyMatrix4(m);\n    },\n    fromAttribute: function (attribute, index, offset) {\n        console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n        return this.fromBufferAttribute(attribute, index, offset);\n    },\n    distanceToManhattan: function (v) {\n        console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n        return this.manhattanDistanceTo(v);\n    },\n    lengthManhattan: function () {\n        console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n        return this.manhattanLength();\n    }\n});\nObject.assign(Vector4.prototype, {\n    fromAttribute: function (attribute, index, offset) {\n        console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n        return this.fromBufferAttribute(attribute, index, offset);\n    },\n    lengthManhattan: function () {\n        console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n        return this.manhattanLength();\n    }\n});\n//\nObject.assign(Geometry.prototype, {\n    computeTangents: function () {\n        console.error('THREE.Geometry: .computeTangents() has been removed.');\n    },\n    computeLineDistances: function () {\n        console.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');\n    }\n});\nObject.assign(Object3D.prototype, {\n    getChildByName: function (name) {\n        console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n        return this.getObjectByName(name);\n    },\n    renderDepth: function () {\n        console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n    },\n    translate: function (distance, axis) {\n        console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n        return this.translateOnAxis(axis, distance);\n    }\n});\nObject.defineProperties(Object3D.prototype, {\n    eulerOrder: {\n        get: function () {\n            console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n            return this.rotation.order;\n        },\n        set: function (value) {\n            console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n            this.rotation.order = value;\n        }\n    },\n    useQuaternion: {\n        get: function () {\n            console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n        },\n        set: function () {\n            console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n        }\n    }\n});\nObject.defineProperties(LOD.prototype, {\n    objects: {\n        get: function () {\n            console.warn('THREE.LOD: .objects has been renamed to .levels.');\n            return this.levels;\n        }\n    }\n});\nObject.defineProperty(Skeleton.prototype, 'useVertexTexture', {\n    get: function () {\n        console.warn('THREE.Skeleton: useVertexTexture has been removed.');\n    },\n    set: function () {\n        console.warn('THREE.Skeleton: useVertexTexture has been removed.');\n    }\n});\nObject.defineProperty(Curve.prototype, '__arcLengthDivisions', {\n    get: function () {\n        console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n        return this.arcLengthDivisions;\n    },\n    set: function (value) {\n        console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n        this.arcLengthDivisions = value;\n    }\n});\n//\nPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n    console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. \" +\n        \"Use .setFocalLength and .filmGauge for a photographic setup.\");\n    if (filmGauge !== undefined)\n        this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength);\n};\n//\nObject.defineProperties(Light.prototype, {\n    onlyShadow: {\n        set: function () {\n            console.warn('THREE.Light: .onlyShadow has been removed.');\n        }\n    },\n    shadowCameraFov: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n            this.shadow.camera.fov = value;\n        }\n    },\n    shadowCameraLeft: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n            this.shadow.camera.left = value;\n        }\n    },\n    shadowCameraRight: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n            this.shadow.camera.right = value;\n        }\n    },\n    shadowCameraTop: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n            this.shadow.camera.top = value;\n        }\n    },\n    shadowCameraBottom: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n            this.shadow.camera.bottom = value;\n        }\n    },\n    shadowCameraNear: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n            this.shadow.camera.near = value;\n        }\n    },\n    shadowCameraFar: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n            this.shadow.camera.far = value;\n        }\n    },\n    shadowCameraVisible: {\n        set: function () {\n            console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n        }\n    },\n    shadowBias: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n            this.shadow.bias = value;\n        }\n    },\n    shadowDarkness: {\n        set: function () {\n            console.warn('THREE.Light: .shadowDarkness has been removed.');\n        }\n    },\n    shadowMapWidth: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n            this.shadow.mapSize.width = value;\n        }\n    },\n    shadowMapHeight: {\n        set: function (value) {\n            console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n            this.shadow.mapSize.height = value;\n        }\n    }\n});\n//\nObject.defineProperties(BufferAttribute.prototype, {\n    length: {\n        get: function () {\n            console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n            return this.array.length;\n        }\n    }\n});\nObject.assign(BufferGeometry.prototype, {\n    addIndex: function (index) {\n        console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n        this.setIndex(index);\n    },\n    addDrawCall: function (start, count, indexOffset) {\n        if (indexOffset !== undefined) {\n            console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n        }\n        console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n        this.addGroup(start, count);\n    },\n    clearDrawCalls: function () {\n        console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n        this.clearGroups();\n    },\n    computeTangents: function () {\n        console.warn('THREE.BufferGeometry: .computeTangents() has been removed.');\n    },\n    computeOffsets: function () {\n        console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n    }\n});\nObject.defineProperties(BufferGeometry.prototype, {\n    drawcalls: {\n        get: function () {\n            console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n            return this.groups;\n        }\n    },\n    offsets: {\n        get: function () {\n            console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n            return this.groups;\n        }\n    }\n});\n//\nObject.defineProperties(Uniform.prototype, {\n    dynamic: {\n        set: function () {\n            console.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');\n        }\n    },\n    onUpdate: {\n        value: function () {\n            console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n            return this;\n        }\n    }\n});\n//\nObject.defineProperties(Material.prototype, {\n    wrapAround: {\n        get: function () {\n            console.warn('THREE.Material: .wrapAround has been removed.');\n        },\n        set: function () {\n            console.warn('THREE.Material: .wrapAround has been removed.');\n        }\n    },\n    wrapRGB: {\n        get: function () {\n            console.warn('THREE.Material: .wrapRGB has been removed.');\n            return new Color();\n        }\n    },\n    shading: {\n        get: function () {\n            console.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n        },\n        set: function (value) {\n            console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n            this.flatShading = (value === FlatShading);\n        }\n    }\n});\nObject.defineProperties(MeshPhongMaterial.prototype, {\n    metal: {\n        get: function () {\n            console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');\n            return false;\n        },\n        set: function () {\n            console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');\n        }\n    }\n});\nObject.defineProperties(ShaderMaterial.prototype, {\n    derivatives: {\n        get: function () {\n            console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n            return this.extensions.derivatives;\n        },\n        set: function (value) {\n            console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n            this.extensions.derivatives = value;\n        }\n    }\n});\n//\nObject.assign(WebGLRenderer.prototype, {\n    getCurrentRenderTarget: function () {\n        console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n        return this.getRenderTarget();\n    },\n    getMaxAnisotropy: function () {\n        console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n        return this.capabilities.getMaxAnisotropy();\n    },\n    getPrecision: function () {\n        console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n        return this.capabilities.precision;\n    },\n    resetGLState: function () {\n        console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n        return this.state.reset();\n    },\n    supportsFloatTextures: function () {\n        console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n        return this.extensions.get('OES_texture_float');\n    },\n    supportsHalfFloatTextures: function () {\n        console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n        return this.extensions.get('OES_texture_half_float');\n    },\n    supportsStandardDerivatives: function () {\n        console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n        return this.extensions.get('OES_standard_derivatives');\n    },\n    supportsCompressedTextureS3TC: function () {\n        console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n        return this.extensions.get('WEBGL_compressed_texture_s3tc');\n    },\n    supportsCompressedTexturePVRTC: function () {\n        console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n        return this.extensions.get('WEBGL_compressed_texture_pvrtc');\n    },\n    supportsBlendMinMax: function () {\n        console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n        return this.extensions.get('EXT_blend_minmax');\n    },\n    supportsVertexTextures: function () {\n        console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n        return this.capabilities.vertexTextures;\n    },\n    supportsInstancedArrays: function () {\n        console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n        return this.extensions.get('ANGLE_instanced_arrays');\n    },\n    enableScissorTest: function (boolean) {\n        console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n        this.setScissorTest(boolean);\n    },\n    initMaterial: function () {\n        console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n    },\n    addPrePlugin: function () {\n        console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n    },\n    addPostPlugin: function () {\n        console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n    },\n    updateShadowMap: function () {\n        console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n    },\n    setFaceCulling: function () {\n        console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n    }\n});\nObject.defineProperties(WebGLRenderer.prototype, {\n    shadowMapEnabled: {\n        get: function () {\n            return this.shadowMap.enabled;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n            this.shadowMap.enabled = value;\n        }\n    },\n    shadowMapType: {\n        get: function () {\n            return this.shadowMap.type;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n            this.shadowMap.type = value;\n        }\n    },\n    shadowMapCullFace: {\n        get: function () {\n            console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n            return undefined;\n        },\n        set: function ( /* value */) {\n            console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n        }\n    }\n});\nObject.defineProperties(WebGLShadowMap.prototype, {\n    cullFace: {\n        get: function () {\n            console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n            return undefined;\n        },\n        set: function ( /* cullFace */) {\n            console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n        }\n    },\n    renderReverseSided: {\n        get: function () {\n            console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n            return undefined;\n        },\n        set: function () {\n            console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n        }\n    },\n    renderSingleSided: {\n        get: function () {\n            console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n            return undefined;\n        },\n        set: function () {\n            console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n        }\n    }\n});\n//\nObject.defineProperties(WebGLRenderTarget.prototype, {\n    wrapS: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n            return this.texture.wrapS;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n            this.texture.wrapS = value;\n        }\n    },\n    wrapT: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n            return this.texture.wrapT;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n            this.texture.wrapT = value;\n        }\n    },\n    magFilter: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n            return this.texture.magFilter;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n            this.texture.magFilter = value;\n        }\n    },\n    minFilter: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n            return this.texture.minFilter;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n            this.texture.minFilter = value;\n        }\n    },\n    anisotropy: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n            return this.texture.anisotropy;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n            this.texture.anisotropy = value;\n        }\n    },\n    offset: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n            return this.texture.offset;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n            this.texture.offset = value;\n        }\n    },\n    repeat: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n            return this.texture.repeat;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n            this.texture.repeat = value;\n        }\n    },\n    format: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n            return this.texture.format;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n            this.texture.format = value;\n        }\n    },\n    type: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n            return this.texture.type;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n            this.texture.type = value;\n        }\n    },\n    generateMipmaps: {\n        get: function () {\n            console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n            return this.texture.generateMipmaps;\n        },\n        set: function (value) {\n            console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n            this.texture.generateMipmaps = value;\n        }\n    }\n});\n//\nObject.defineProperties(WebVRManager.prototype, {\n    standing: {\n        set: function ( /* value */) {\n            console.warn('THREE.WebVRManager: .standing has been removed.');\n        }\n    }\n});\n//\nAudio.prototype.load = function (file) {\n    console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n    var scope = this;\n    var audioLoader = new AudioLoader();\n    audioLoader.load(file, function (buffer) {\n        scope.setBuffer(buffer);\n    });\n    return this;\n};\nAudioAnalyser.prototype.getData = function () {\n    console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n    return this.getFrequencyData();\n};\n//\nCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n    console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n    return this.update(renderer, scene);\n};\n//\nvar GeometryUtils = {\n    merge: function (geometry1, geometry2, materialIndexOffset) {\n        console.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');\n        var matrix;\n        if (geometry2.isMesh) {\n            geometry2.matrixAutoUpdate && geometry2.updateMatrix();\n            matrix = geometry2.matrix;\n            geometry2 = geometry2.geometry;\n        }\n        geometry1.merge(geometry2, matrix, materialIndexOffset);\n    },\n    center: function (geometry) {\n        console.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');\n        return geometry.center();\n    }\n};\nvar ImageUtils = {\n    crossOrigin: undefined,\n    loadTexture: function (url, mapping, onLoad, onError) {\n        console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n        var loader = new TextureLoader();\n        loader.setCrossOrigin(this.crossOrigin);\n        var texture = loader.load(url, onLoad, undefined, onError);\n        if (mapping)\n            texture.mapping = mapping;\n        return texture;\n    },\n    loadTextureCube: function (urls, mapping, onLoad, onError) {\n        console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n        var loader = new CubeTextureLoader();\n        loader.setCrossOrigin(this.crossOrigin);\n        var texture = loader.load(urls, onLoad, undefined, onError);\n        if (mapping)\n            texture.mapping = mapping;\n        return texture;\n    },\n    loadCompressedTexture: function () {\n        console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n    },\n    loadCompressedTextureCube: function () {\n        console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n    }\n};\n//\nfunction Projector() {\n    console.error('THREE.Projector has been moved to /examples/js/renderers/Projector.js.');\n    this.projectVector = function (vector, camera) {\n        console.warn('THREE.Projector: .projectVector() is now vector.project().');\n        vector.project(camera);\n    };\n    this.unprojectVector = function (vector, camera) {\n        console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n        vector.unproject(camera);\n    };\n    this.pickingRay = function () {\n        console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n    };\n}\n//\nfunction CanvasRenderer() {\n    console.error('THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js');\n    this.domElement = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n    this.clear = function () { };\n    this.render = function () { };\n    this.setClearColor = function () { };\n    this.setSize = function () { };\n}\n//\nvar SceneUtils = {\n    createMultiMaterialObject: function ( /* geometry, materials */) {\n        console.error('THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js');\n    },\n    detach: function ( /* child, parent, scene */) {\n        console.error('THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js');\n    },\n    attach: function ( /* child, scene, parent */) {\n        console.error('THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js');\n    }\n};\n//\nfunction LensFlare() {\n    console.error('THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js');\n}\n\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/three@0.90.0/node_modules/three/build/three.module.js?");

/***/ }),

/***/ "./node_modules/.pnpm/timers-browserify@2.0.12/node_modules/timers-browserify/main.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/.pnpm/timers-browserify@2.0.12/node_modules/timers-browserify/main.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n    (typeof self !== \"undefined\" && self) ||\n    window;\nvar apply = Function.prototype.apply;\n// DOM APIs, for completeness\nexports.setTimeout = function () {\n    return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function () {\n    return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\n    exports.clearInterval = function (timeout) {\n        if (timeout) {\n            timeout.close();\n        }\n    };\nfunction Timeout(id, clearFn) {\n    this._id = id;\n    this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function () { };\nTimeout.prototype.close = function () {\n    this._clearFn.call(scope, this._id);\n};\n// Does not start the time, just sets up the members needed.\nexports.enroll = function (item, msecs) {\n    clearTimeout(item._idleTimeoutId);\n    item._idleTimeout = msecs;\n};\nexports.unenroll = function (item) {\n    clearTimeout(item._idleTimeoutId);\n    item._idleTimeout = -1;\n};\nexports._unrefActive = exports.active = function (item) {\n    clearTimeout(item._idleTimeoutId);\n    var msecs = item._idleTimeout;\n    if (msecs >= 0) {\n        item._idleTimeoutId = setTimeout(function onTimeout() {\n            if (item._onTimeout)\n                item._onTimeout();\n        }, msecs);\n    }\n};\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/.pnpm/setimmediate@1.0.5/node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n    (typeof global !== \"undefined\" && global.setImmediate) ||\n    (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n    (typeof global !== \"undefined\" && global.clearImmediate) ||\n    (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack@4.19.1_webpack-cli@2.1.5/node_modules/webpack/buildin/global.js */ \"./node_modules/.pnpm/webpack@4.19.1_webpack-cli@2.1.5/node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/.pnpm/timers-browserify@2.0.12/node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/.pnpm/type@1.2.0/node_modules/type/function/is.js":
/*!************************************************************************!*\
  !*** ./node_modules/.pnpm/type@1.2.0/node_modules/type/function/is.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isPrototype = __webpack_require__(/*! ../prototype/is */ \"./node_modules/.pnpm/type@1.2.0/node_modules/type/prototype/is.js\");\nmodule.exports = function (value) {\n    if (typeof value !== \"function\")\n        return false;\n    if (!hasOwnProperty.call(value, \"length\"))\n        return false;\n    try {\n        if (typeof value.length !== \"number\")\n            return false;\n        if (typeof value.call !== \"function\")\n            return false;\n        if (typeof value.apply !== \"function\")\n            return false;\n    }\n    catch (error) {\n        return false;\n    }\n    return !isPrototype(value);\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/type@1.2.0/node_modules/type/function/is.js?");

/***/ }),

/***/ "./node_modules/.pnpm/type@1.2.0/node_modules/type/object/is.js":
/*!**********************************************************************!*\
  !*** ./node_modules/.pnpm/type@1.2.0/node_modules/type/object/is.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isValue = __webpack_require__(/*! ../value/is */ \"./node_modules/.pnpm/type@1.2.0/node_modules/type/value/is.js\");\n// prettier-ignore\nvar possibleTypes = { \"object\": true, \"function\": true, \"undefined\": true /* document.all */ };\nmodule.exports = function (value) {\n    if (!isValue(value))\n        return false;\n    return hasOwnProperty.call(possibleTypes, typeof value);\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/type@1.2.0/node_modules/type/object/is.js?");

/***/ }),

/***/ "./node_modules/.pnpm/type@1.2.0/node_modules/type/plain-function/is.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/type@1.2.0/node_modules/type/plain-function/is.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isFunction = __webpack_require__(/*! ../function/is */ \"./node_modules/.pnpm/type@1.2.0/node_modules/type/function/is.js\");\nvar classRe = /^\\s*class[\\s{/}]/, functionToString = Function.prototype.toString;\nmodule.exports = function (value) {\n    if (!isFunction(value))\n        return false;\n    if (classRe.test(functionToString.call(value)))\n        return false;\n    return true;\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/type@1.2.0/node_modules/type/plain-function/is.js?");

/***/ }),

/***/ "./node_modules/.pnpm/type@1.2.0/node_modules/type/prototype/is.js":
/*!*************************************************************************!*\
  !*** ./node_modules/.pnpm/type@1.2.0/node_modules/type/prototype/is.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar isObject = __webpack_require__(/*! ../object/is */ \"./node_modules/.pnpm/type@1.2.0/node_modules/type/object/is.js\");\nmodule.exports = function (value) {\n    if (!isObject(value))\n        return false;\n    try {\n        if (!value.constructor)\n            return false;\n        return value.constructor.prototype === value;\n    }\n    catch (error) {\n        return false;\n    }\n};\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/type@1.2.0/node_modules/type/prototype/is.js?");

/***/ }),

/***/ "./node_modules/.pnpm/type@1.2.0/node_modules/type/value/is.js":
/*!*********************************************************************!*\
  !*** ./node_modules/.pnpm/type@1.2.0/node_modules/type/value/is.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// ES3 safe\nvar _undefined = void 0;\nmodule.exports = function (value) { return value !== _undefined && value !== null; };\n\n\n//# sourceURL=webpack:///./node_modules/.pnpm/type@1.2.0/node_modules/type/value/is.js?");

/***/ }),

/***/ "./node_modules/.pnpm/vue@2.7.15/node_modules/vue/dist/vue.js":
/*!********************************************************************!*\
  !*** ./node_modules/.pnpm/vue@2.7.15/node_modules/vue/dist/vue.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.7.15\n * (c) 2014-2023 Evan You\n * Released under the MIT License.\n */\n(function (global, factory) {\n     true ? module.exports = factory() :\n        undefined;\n})(this, (function () {\n    'use strict';\n    var emptyObject = Object.freeze({});\n    var isArray = Array.isArray;\n    // These helpers produce better VM code in JS engines due to their\n    // explicitness and function inlining.\n    function isUndef(v) {\n        return v === undefined || v === null;\n    }\n    function isDef(v) {\n        return v !== undefined && v !== null;\n    }\n    function isTrue(v) {\n        return v === true;\n    }\n    function isFalse(v) {\n        return v === false;\n    }\n    /**\n     * Check if value is primitive.\n     */\n    function isPrimitive(value) {\n        return (typeof value === 'string' ||\n            typeof value === 'number' ||\n            // $flow-disable-line\n            typeof value === 'symbol' ||\n            typeof value === 'boolean');\n    }\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n    /**\n     * Quick object check - this is primarily used to tell\n     * objects from primitive values when we know the value\n     * is a JSON-compliant type.\n     */\n    function isObject(obj) {\n        return obj !== null && typeof obj === 'object';\n    }\n    /**\n     * Get the raw type string of a value, e.g., [object Object].\n     */\n    var _toString = Object.prototype.toString;\n    function toRawType(value) {\n        return _toString.call(value).slice(8, -1);\n    }\n    /**\n     * Strict object type check. Only returns true\n     * for plain JavaScript objects.\n     */\n    function isPlainObject(obj) {\n        return _toString.call(obj) === '[object Object]';\n    }\n    function isRegExp(v) {\n        return _toString.call(v) === '[object RegExp]';\n    }\n    /**\n     * Check if val is a valid array index.\n     */\n    function isValidArrayIndex(val) {\n        var n = parseFloat(String(val));\n        return n >= 0 && Math.floor(n) === n && isFinite(val);\n    }\n    function isPromise(val) {\n        return (isDef(val) &&\n            typeof val.then === 'function' &&\n            typeof val.catch === 'function');\n    }\n    /**\n     * Convert a value to a string that is actually rendered.\n     */\n    function toString(val) {\n        return val == null\n            ? ''\n            : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n                ? JSON.stringify(val, null, 2)\n                : String(val);\n    }\n    /**\n     * Convert an input value to a number for persistence.\n     * If the conversion fails, return original string.\n     */\n    function toNumber(val) {\n        var n = parseFloat(val);\n        return isNaN(n) ? val : n;\n    }\n    /**\n     * Make a map and return a function for checking if a key\n     * is in that map.\n     */\n    function makeMap(str, expectsLowerCase) {\n        var map = Object.create(null);\n        var list = str.split(',');\n        for (var i = 0; i < list.length; i++) {\n            map[list[i]] = true;\n        }\n        return expectsLowerCase ? function (val) { return map[val.toLowerCase()]; } : function (val) { return map[val]; };\n    }\n    /**\n     * Check if a tag is a built-in tag.\n     */\n    var isBuiltInTag = makeMap('slot,component', true);\n    /**\n     * Check if an attribute is a reserved attribute.\n     */\n    var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n    /**\n     * Remove an item from an array.\n     */\n    function remove$2(arr, item) {\n        var len = arr.length;\n        if (len) {\n            // fast path for the only / last item\n            if (item === arr[len - 1]) {\n                arr.length = len - 1;\n                return;\n            }\n            var index = arr.indexOf(item);\n            if (index > -1) {\n                return arr.splice(index, 1);\n            }\n        }\n    }\n    /**\n     * Check whether an object has the property.\n     */\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    function hasOwn(obj, key) {\n        return hasOwnProperty.call(obj, key);\n    }\n    /**\n     * Create a cached version of a pure function.\n     */\n    function cached(fn) {\n        var cache = Object.create(null);\n        return function cachedFn(str) {\n            var hit = cache[str];\n            return hit || (cache[str] = fn(str));\n        };\n    }\n    /**\n     * Camelize a hyphen-delimited string.\n     */\n    var camelizeRE = /-(\\w)/g;\n    var camelize = cached(function (str) {\n        return str.replace(camelizeRE, function (_, c) { return (c ? c.toUpperCase() : ''); });\n    });\n    /**\n     * Capitalize a string.\n     */\n    var capitalize = cached(function (str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    });\n    /**\n     * Hyphenate a camelCase string.\n     */\n    var hyphenateRE = /\\B([A-Z])/g;\n    var hyphenate = cached(function (str) {\n        return str.replace(hyphenateRE, '-$1').toLowerCase();\n    });\n    /**\n     * Simple bind polyfill for environments that do not support it,\n     * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n     * since native bind is now performant enough in most browsers.\n     * But removing it would mean breaking code that was able to run in\n     * PhantomJS 1.x, so this must be kept for backward compatibility.\n     */\n    /* istanbul ignore next */\n    function polyfillBind(fn, ctx) {\n        function boundFn(a) {\n            var l = arguments.length;\n            return l\n                ? l > 1\n                    ? fn.apply(ctx, arguments)\n                    : fn.call(ctx, a)\n                : fn.call(ctx);\n        }\n        boundFn._length = fn.length;\n        return boundFn;\n    }\n    function nativeBind(fn, ctx) {\n        return fn.bind(ctx);\n    }\n    // @ts-expect-error bind cannot be `undefined`\n    var bind$1 = Function.prototype.bind ? nativeBind : polyfillBind;\n    /**\n     * Convert an Array-like object to a real Array.\n     */\n    function toArray(list, start) {\n        start = start || 0;\n        var i = list.length - start;\n        var ret = new Array(i);\n        while (i--) {\n            ret[i] = list[i + start];\n        }\n        return ret;\n    }\n    /**\n     * Mix properties into target object.\n     */\n    function extend(to, _from) {\n        for (var key in _from) {\n            to[key] = _from[key];\n        }\n        return to;\n    }\n    /**\n     * Merge an Array of Objects into a single Object.\n     */\n    function toObject(arr) {\n        var res = {};\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i]) {\n                extend(res, arr[i]);\n            }\n        }\n        return res;\n    }\n    /* eslint-disable no-unused-vars */\n    /**\n     * Perform no operation.\n     * Stubbing args to make Flow happy without leaving useless transpiled code\n     * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n     */\n    function noop(a, b, c) { }\n    /**\n     * Always return false.\n     */\n    var no = function (a, b, c) { return false; };\n    /* eslint-enable no-unused-vars */\n    /**\n     * Return the same value.\n     */\n    var identity = function (_) { return _; };\n    /**\n     * Generate a string containing static keys from compiler modules.\n     */\n    function genStaticKeys$1(modules) {\n        return modules\n            .reduce(function (keys, m) { return keys.concat(m.staticKeys || []); }, [])\n            .join(',');\n    }\n    /**\n     * Check if two values are loosely equal - that is,\n     * if they are plain objects, do they have the same shape?\n     */\n    function looseEqual(a, b) {\n        if (a === b)\n            return true;\n        var isObjectA = isObject(a);\n        var isObjectB = isObject(b);\n        if (isObjectA && isObjectB) {\n            try {\n                var isArrayA = Array.isArray(a);\n                var isArrayB = Array.isArray(b);\n                if (isArrayA && isArrayB) {\n                    return (a.length === b.length &&\n                        a.every(function (e, i) {\n                            return looseEqual(e, b[i]);\n                        }));\n                }\n                else if (a instanceof Date && b instanceof Date) {\n                    return a.getTime() === b.getTime();\n                }\n                else if (!isArrayA && !isArrayB) {\n                    var keysA = Object.keys(a);\n                    var keysB = Object.keys(b);\n                    return (keysA.length === keysB.length &&\n                        keysA.every(function (key) {\n                            return looseEqual(a[key], b[key]);\n                        }));\n                }\n                else {\n                    /* istanbul ignore next */\n                    return false;\n                }\n            }\n            catch (e) {\n                /* istanbul ignore next */\n                return false;\n            }\n        }\n        else if (!isObjectA && !isObjectB) {\n            return String(a) === String(b);\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Return the first index at which a loosely equal value can be\n     * found in the array (if value is a plain object, the array must\n     * contain an object of the same shape), or -1 if it is not present.\n     */\n    function looseIndexOf(arr, val) {\n        for (var i = 0; i < arr.length; i++) {\n            if (looseEqual(arr[i], val))\n                return i;\n        }\n        return -1;\n    }\n    /**\n     * Ensure a function is called only once.\n     */\n    function once(fn) {\n        var called = false;\n        return function () {\n            if (!called) {\n                called = true;\n                fn.apply(this, arguments);\n            }\n        };\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#polyfill\n    function hasChanged(x, y) {\n        if (x === y) {\n            return x === 0 && 1 / x !== 1 / y;\n        }\n        else {\n            return x === x || y === y;\n        }\n    }\n    var SSR_ATTR = 'data-server-rendered';\n    var ASSET_TYPES = ['component', 'directive', 'filter'];\n    var LIFECYCLE_HOOKS = [\n        'beforeCreate',\n        'created',\n        'beforeMount',\n        'mounted',\n        'beforeUpdate',\n        'updated',\n        'beforeDestroy',\n        'destroyed',\n        'activated',\n        'deactivated',\n        'errorCaptured',\n        'serverPrefetch',\n        'renderTracked',\n        'renderTriggered'\n    ];\n    var config = {\n        /**\n         * Option merge strategies (used in core/util/options)\n         */\n        // $flow-disable-line\n        optionMergeStrategies: Object.create(null),\n        /**\n         * Whether to suppress warnings.\n         */\n        silent: false,\n        /**\n         * Show production mode tip message on boot?\n         */\n        productionTip: true,\n        /**\n         * Whether to enable devtools\n         */\n        devtools: true,\n        /**\n         * Whether to record perf\n         */\n        performance: false,\n        /**\n         * Error handler for watcher errors\n         */\n        errorHandler: null,\n        /**\n         * Warn handler for watcher warns\n         */\n        warnHandler: null,\n        /**\n         * Ignore certain custom elements\n         */\n        ignoredElements: [],\n        /**\n         * Custom user key aliases for v-on\n         */\n        // $flow-disable-line\n        keyCodes: Object.create(null),\n        /**\n         * Check if a tag is reserved so that it cannot be registered as a\n         * component. This is platform-dependent and may be overwritten.\n         */\n        isReservedTag: no,\n        /**\n         * Check if an attribute is reserved so that it cannot be used as a component\n         * prop. This is platform-dependent and may be overwritten.\n         */\n        isReservedAttr: no,\n        /**\n         * Check if a tag is an unknown element.\n         * Platform-dependent.\n         */\n        isUnknownElement: no,\n        /**\n         * Get the namespace of an element\n         */\n        getTagNamespace: noop,\n        /**\n         * Parse the real tag name for the specific platform.\n         */\n        parsePlatformTagName: identity,\n        /**\n         * Check if an attribute must be bound using property, e.g. value\n         * Platform-dependent.\n         */\n        mustUseProp: no,\n        /**\n         * Perform updates asynchronously. Intended to be used by Vue Test Utils\n         * This will significantly reduce performance if set to false.\n         */\n        async: true,\n        /**\n         * Exposed for legacy reasons\n         */\n        _lifecycleHooks: LIFECYCLE_HOOKS\n    };\n    /**\n     * unicode letters used for parsing html tags, component names and property paths.\n     * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n     * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n     */\n    var unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n    /**\n     * Check if a string starts with $ or _\n     */\n    function isReserved(str) {\n        var c = (str + '').charCodeAt(0);\n        return c === 0x24 || c === 0x5f;\n    }\n    /**\n     * Define a property.\n     */\n    function def(obj, key, val, enumerable) {\n        Object.defineProperty(obj, key, {\n            value: val,\n            enumerable: !!enumerable,\n            writable: true,\n            configurable: true\n        });\n    }\n    /**\n     * Parse simple path.\n     */\n    var bailRE = new RegExp(\"[^\".concat(unicodeRegExp.source, \".$_\\\\d]\"));\n    function parsePath(path) {\n        if (bailRE.test(path)) {\n            return;\n        }\n        var segments = path.split('.');\n        return function (obj) {\n            for (var i = 0; i < segments.length; i++) {\n                if (!obj)\n                    return;\n                obj = obj[segments[i]];\n            }\n            return obj;\n        };\n    }\n    // can we use __proto__?\n    var hasProto = '__proto__' in {};\n    // Browser environment sniffing\n    var inBrowser = typeof window !== 'undefined';\n    var UA = inBrowser && window.navigator.userAgent.toLowerCase();\n    var isIE = UA && /msie|trident/.test(UA);\n    var isIE9 = UA && UA.indexOf('msie 9.0') > 0;\n    var isEdge = UA && UA.indexOf('edge/') > 0;\n    UA && UA.indexOf('android') > 0;\n    var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n    UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n    UA && /phantomjs/.test(UA);\n    var isFF = UA && UA.match(/firefox\\/(\\d+)/);\n    // Firefox has a \"watch\" function on Object.prototype...\n    // @ts-expect-error firebox support\n    var nativeWatch = {}.watch;\n    var supportsPassive = false;\n    if (inBrowser) {\n        try {\n            var opts = {};\n            Object.defineProperty(opts, 'passive', {\n                get: function () {\n                    /* istanbul ignore next */\n                    supportsPassive = true;\n                }\n            }); // https://github.com/facebook/flow/issues/285\n            window.addEventListener('test-passive', null, opts);\n        }\n        catch (e) { }\n    }\n    // this needs to be lazy-evaled because vue may be required before\n    // vue-server-renderer can set VUE_ENV\n    var _isServer;\n    var isServerRendering = function () {\n        if (_isServer === undefined) {\n            /* istanbul ignore if */\n            if (!inBrowser && typeof global !== 'undefined') {\n                // detect presence of vue-server-renderer and avoid\n                // Webpack shimming the process\n                _isServer =\n                    global['process'] && global['process'].env.VUE_ENV === 'server';\n            }\n            else {\n                _isServer = false;\n            }\n        }\n        return _isServer;\n    };\n    // detect devtools\n    var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n    /* istanbul ignore next */\n    function isNative(Ctor) {\n        return typeof Ctor === 'function' && /native code/.test(Ctor.toString());\n    }\n    var hasSymbol = typeof Symbol !== 'undefined' &&\n        isNative(Symbol) &&\n        typeof Reflect !== 'undefined' &&\n        isNative(Reflect.ownKeys);\n    var _Set; // $flow-disable-line\n    /* istanbul ignore if */ if (typeof Set !== 'undefined' && isNative(Set)) {\n        // use native Set when available.\n        _Set = Set;\n    }\n    else {\n        // a non-standard Set polyfill that only works with primitive keys.\n        _Set = /** @class */ (function () {\n            function Set() {\n                this.set = Object.create(null);\n            }\n            Set.prototype.has = function (key) {\n                return this.set[key] === true;\n            };\n            Set.prototype.add = function (key) {\n                this.set[key] = true;\n            };\n            Set.prototype.clear = function () {\n                this.set = Object.create(null);\n            };\n            return Set;\n        }());\n    }\n    var currentInstance = null;\n    /**\n     * This is exposed for compatibility with v3 (e.g. some functions in VueUse\n     * relies on it). Do not use this internally, just use `currentInstance`.\n     *\n     * @internal this function needs manual type declaration because it relies\n     * on previously manually authored types from Vue 2\n     */\n    function getCurrentInstance() {\n        return currentInstance && { proxy: currentInstance };\n    }\n    /**\n     * @internal\n     */\n    function setCurrentInstance(vm) {\n        if (vm === void 0) {\n            vm = null;\n        }\n        if (!vm)\n            currentInstance && currentInstance._scope.off();\n        currentInstance = vm;\n        vm && vm._scope.on();\n    }\n    /**\n     * @internal\n     */\n    var VNode = /** @class */ (function () {\n        function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {\n            this.tag = tag;\n            this.data = data;\n            this.children = children;\n            this.text = text;\n            this.elm = elm;\n            this.ns = undefined;\n            this.context = context;\n            this.fnContext = undefined;\n            this.fnOptions = undefined;\n            this.fnScopeId = undefined;\n            this.key = data && data.key;\n            this.componentOptions = componentOptions;\n            this.componentInstance = undefined;\n            this.parent = undefined;\n            this.raw = false;\n            this.isStatic = false;\n            this.isRootInsert = true;\n            this.isComment = false;\n            this.isCloned = false;\n            this.isOnce = false;\n            this.asyncFactory = asyncFactory;\n            this.asyncMeta = undefined;\n            this.isAsyncPlaceholder = false;\n        }\n        Object.defineProperty(VNode.prototype, \"child\", {\n            // DEPRECATED: alias for componentInstance for backwards compat.\n            /* istanbul ignore next */\n            get: function () {\n                return this.componentInstance;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return VNode;\n    }());\n    var createEmptyVNode = function (text) {\n        if (text === void 0) {\n            text = '';\n        }\n        var node = new VNode();\n        node.text = text;\n        node.isComment = true;\n        return node;\n    };\n    function createTextVNode(val) {\n        return new VNode(undefined, undefined, undefined, String(val));\n    }\n    // optimized shallow clone\n    // used for static nodes and slot nodes because they may be reused across\n    // multiple renders, cloning them avoids errors when DOM manipulations rely\n    // on their elm reference.\n    function cloneVNode(vnode) {\n        var cloned = new VNode(vnode.tag, vnode.data, \n        // #7975\n        // clone children array to avoid mutating original in case of cloning\n        // a child.\n        vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);\n        cloned.ns = vnode.ns;\n        cloned.isStatic = vnode.isStatic;\n        cloned.key = vnode.key;\n        cloned.isComment = vnode.isComment;\n        cloned.fnContext = vnode.fnContext;\n        cloned.fnOptions = vnode.fnOptions;\n        cloned.fnScopeId = vnode.fnScopeId;\n        cloned.asyncMeta = vnode.asyncMeta;\n        cloned.isCloned = true;\n        return cloned;\n    }\n    /* not type checking this file because flow doesn't play well with Proxy */\n    var initProxy;\n    {\n        var allowedGlobals_1 = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' +\n            'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n            'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' +\n            'require' // for Webpack/Browserify\n        );\n        var warnNonPresent_1 = function (target, key) {\n            warn$2(\"Property or method \\\"\".concat(key, \"\\\" is not defined on the instance but \") +\n                'referenced during render. Make sure that this property is reactive, ' +\n                'either in the data option, or for class-based components, by ' +\n                'initializing the property. ' +\n                'See: https://v2.vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);\n        };\n        var warnReservedPrefix_1 = function (target, key) {\n            warn$2(\"Property \\\"\".concat(key, \"\\\" must be accessed with \\\"$data.\").concat(key, \"\\\" because \") +\n                'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n                'prevent conflicts with Vue internals. ' +\n                'See: https://v2.vuejs.org/v2/api/#data', target);\n        };\n        var hasProxy_1 = typeof Proxy !== 'undefined' && isNative(Proxy);\n        if (hasProxy_1) {\n            var isBuiltInModifier_1 = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n            config.keyCodes = new Proxy(config.keyCodes, {\n                set: function (target, key, value) {\n                    if (isBuiltInModifier_1(key)) {\n                        warn$2(\"Avoid overwriting built-in modifier in config.keyCodes: .\".concat(key));\n                        return false;\n                    }\n                    else {\n                        target[key] = value;\n                        return true;\n                    }\n                }\n            });\n        }\n        var hasHandler_1 = {\n            has: function (target, key) {\n                var has = key in target;\n                var isAllowed = allowedGlobals_1(key) ||\n                    (typeof key === 'string' &&\n                        key.charAt(0) === '_' &&\n                        !(key in target.$data));\n                if (!has && !isAllowed) {\n                    if (key in target.$data)\n                        warnReservedPrefix_1(target, key);\n                    else\n                        warnNonPresent_1(target, key);\n                }\n                return has || !isAllowed;\n            }\n        };\n        var getHandler_1 = {\n            get: function (target, key) {\n                if (typeof key === 'string' && !(key in target)) {\n                    if (key in target.$data)\n                        warnReservedPrefix_1(target, key);\n                    else\n                        warnNonPresent_1(target, key);\n                }\n                return target[key];\n            }\n        };\n        initProxy = function initProxy(vm) {\n            if (hasProxy_1) {\n                // determine which proxy handler to use\n                var options = vm.$options;\n                var handlers = options.render && options.render._withStripped ? getHandler_1 : hasHandler_1;\n                vm._renderProxy = new Proxy(vm, handlers);\n            }\n            else {\n                vm._renderProxy = vm;\n            }\n        };\n    }\n    /******************************************************************************\n    Copyright (c) Microsoft Corporation.\n  \n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n  \n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */\n    var __assign = function () {\n        __assign = Object.assign || function __assign(t) {\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\n                s = arguments[i];\n                for (var p in s)\n                    if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n            }\n            return t;\n        };\n        return __assign.apply(this, arguments);\n    };\n    var uid$2 = 0;\n    var pendingCleanupDeps = [];\n    var cleanupDeps = function () {\n        for (var i = 0; i < pendingCleanupDeps.length; i++) {\n            var dep = pendingCleanupDeps[i];\n            dep.subs = dep.subs.filter(function (s) { return s; });\n            dep._pending = false;\n        }\n        pendingCleanupDeps.length = 0;\n    };\n    /**\n     * A dep is an observable that can have multiple\n     * directives subscribing to it.\n     * @internal\n     */\n    var Dep = /** @class */ (function () {\n        function Dep() {\n            // pending subs cleanup\n            this._pending = false;\n            this.id = uid$2++;\n            this.subs = [];\n        }\n        Dep.prototype.addSub = function (sub) {\n            this.subs.push(sub);\n        };\n        Dep.prototype.removeSub = function (sub) {\n            // #12696 deps with massive amount of subscribers are extremely slow to\n            // clean up in Chromium\n            // to workaround this, we unset the sub for now, and clear them on\n            // next scheduler flush.\n            this.subs[this.subs.indexOf(sub)] = null;\n            if (!this._pending) {\n                this._pending = true;\n                pendingCleanupDeps.push(this);\n            }\n        };\n        Dep.prototype.depend = function (info) {\n            if (Dep.target) {\n                Dep.target.addDep(this);\n                if (info && Dep.target.onTrack) {\n                    Dep.target.onTrack(__assign({ effect: Dep.target }, info));\n                }\n            }\n        };\n        Dep.prototype.notify = function (info) {\n            // stabilize the subscriber list first\n            var subs = this.subs.filter(function (s) { return s; });\n            if (!config.async) {\n                // subs aren't sorted in scheduler if not running async\n                // we need to sort them now to make sure they fire in correct\n                // order\n                subs.sort(function (a, b) { return a.id - b.id; });\n            }\n            for (var i = 0, l = subs.length; i < l; i++) {\n                var sub = subs[i];\n                if (info) {\n                    sub.onTrigger &&\n                        sub.onTrigger(__assign({ effect: subs[i] }, info));\n                }\n                sub.update();\n            }\n        };\n        return Dep;\n    }());\n    // The current target watcher being evaluated.\n    // This is globally unique because only one watcher\n    // can be evaluated at a time.\n    Dep.target = null;\n    var targetStack = [];\n    function pushTarget(target) {\n        targetStack.push(target);\n        Dep.target = target;\n    }\n    function popTarget() {\n        targetStack.pop();\n        Dep.target = targetStack[targetStack.length - 1];\n    }\n    /*\n     * not type checking this file because flow doesn't play well with\n     * dynamically accessing methods on Array prototype\n     */\n    var arrayProto = Array.prototype;\n    var arrayMethods = Object.create(arrayProto);\n    var methodsToPatch = [\n        'push',\n        'pop',\n        'shift',\n        'unshift',\n        'splice',\n        'sort',\n        'reverse'\n    ];\n    /**\n     * Intercept mutating methods and emit events\n     */\n    methodsToPatch.forEach(function (method) {\n        // cache original method\n        var original = arrayProto[method];\n        def(arrayMethods, method, function mutator() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var result = original.apply(this, args);\n            var ob = this.__ob__;\n            var inserted;\n            switch (method) {\n                case 'push':\n                case 'unshift':\n                    inserted = args;\n                    break;\n                case 'splice':\n                    inserted = args.slice(2);\n                    break;\n            }\n            if (inserted)\n                ob.observeArray(inserted);\n            // notify change\n            {\n                ob.dep.notify({\n                    type: \"array mutation\" /* TriggerOpTypes.ARRAY_MUTATION */,\n                    target: this,\n                    key: method\n                });\n            }\n            return result;\n        });\n    });\n    var arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n    var NO_INITIAL_VALUE = {};\n    /**\n     * In some cases we may want to disable observation inside a component's\n     * update computation.\n     */\n    var shouldObserve = true;\n    function toggleObserving(value) {\n        shouldObserve = value;\n    }\n    // ssr mock dep\n    var mockDep = {\n        notify: noop,\n        depend: noop,\n        addSub: noop,\n        removeSub: noop\n    };\n    /**\n     * Observer class that is attached to each observed\n     * object. Once attached, the observer converts the target\n     * object's property keys into getter/setters that\n     * collect dependencies and dispatch updates.\n     */\n    var Observer = /** @class */ (function () {\n        function Observer(value, shallow, mock) {\n            if (shallow === void 0) {\n                shallow = false;\n            }\n            if (mock === void 0) {\n                mock = false;\n            }\n            this.value = value;\n            this.shallow = shallow;\n            this.mock = mock;\n            // this.value = value\n            this.dep = mock ? mockDep : new Dep();\n            this.vmCount = 0;\n            def(value, '__ob__', this);\n            if (isArray(value)) {\n                if (!mock) {\n                    if (hasProto) {\n                        value.__proto__ = arrayMethods;\n                        /* eslint-enable no-proto */\n                    }\n                    else {\n                        for (var i = 0, l = arrayKeys.length; i < l; i++) {\n                            var key = arrayKeys[i];\n                            def(value, key, arrayMethods[key]);\n                        }\n                    }\n                }\n                if (!shallow) {\n                    this.observeArray(value);\n                }\n            }\n            else {\n                /**\n                 * Walk through all properties and convert them into\n                 * getter/setters. This method should only be called when\n                 * value type is Object.\n                 */\n                var keys = Object.keys(value);\n                for (var i = 0; i < keys.length; i++) {\n                    var key = keys[i];\n                    defineReactive(value, key, NO_INITIAL_VALUE, undefined, shallow, mock);\n                }\n            }\n        }\n        /**\n         * Observe a list of Array items.\n         */\n        Observer.prototype.observeArray = function (value) {\n            for (var i = 0, l = value.length; i < l; i++) {\n                observe(value[i], false, this.mock);\n            }\n        };\n        return Observer;\n    }());\n    // helpers\n    /**\n     * Attempt to create an observer instance for a value,\n     * returns the new observer if successfully observed,\n     * or the existing observer if the value already has one.\n     */\n    function observe(value, shallow, ssrMockReactivity) {\n        if (value && hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n            return value.__ob__;\n        }\n        if (shouldObserve &&\n            (ssrMockReactivity || !isServerRendering()) &&\n            (isArray(value) || isPlainObject(value)) &&\n            Object.isExtensible(value) &&\n            !value.__v_skip /* ReactiveFlags.SKIP */ &&\n            !isRef(value) &&\n            !(value instanceof VNode)) {\n            return new Observer(value, shallow, ssrMockReactivity);\n        }\n    }\n    /**\n     * Define a reactive property on an Object.\n     */\n    function defineReactive(obj, key, val, customSetter, shallow, mock) {\n        var dep = new Dep();\n        var property = Object.getOwnPropertyDescriptor(obj, key);\n        if (property && property.configurable === false) {\n            return;\n        }\n        // cater for pre-defined getter/setters\n        var getter = property && property.get;\n        var setter = property && property.set;\n        if ((!getter || setter) &&\n            (val === NO_INITIAL_VALUE || arguments.length === 2)) {\n            val = obj[key];\n        }\n        var childOb = !shallow && observe(val, false, mock);\n        Object.defineProperty(obj, key, {\n            enumerable: true,\n            configurable: true,\n            get: function reactiveGetter() {\n                var value = getter ? getter.call(obj) : val;\n                if (Dep.target) {\n                    {\n                        dep.depend({\n                            target: obj,\n                            type: \"get\" /* TrackOpTypes.GET */,\n                            key: key\n                        });\n                    }\n                    if (childOb) {\n                        childOb.dep.depend();\n                        if (isArray(value)) {\n                            dependArray(value);\n                        }\n                    }\n                }\n                return isRef(value) && !shallow ? value.value : value;\n            },\n            set: function reactiveSetter(newVal) {\n                var value = getter ? getter.call(obj) : val;\n                if (!hasChanged(value, newVal)) {\n                    return;\n                }\n                if (customSetter) {\n                    customSetter();\n                }\n                if (setter) {\n                    setter.call(obj, newVal);\n                }\n                else if (getter) {\n                    // #7981: for accessor properties without setter\n                    return;\n                }\n                else if (!shallow && isRef(value) && !isRef(newVal)) {\n                    value.value = newVal;\n                    return;\n                }\n                else {\n                    val = newVal;\n                }\n                childOb = !shallow && observe(newVal, false, mock);\n                {\n                    dep.notify({\n                        type: \"set\" /* TriggerOpTypes.SET */,\n                        target: obj,\n                        key: key,\n                        newValue: newVal,\n                        oldValue: value\n                    });\n                }\n            }\n        });\n        return dep;\n    }\n    function set(target, key, val) {\n        if ((isUndef(target) || isPrimitive(target))) {\n            warn$2(\"Cannot set reactive property on undefined, null, or primitive value: \".concat(target));\n        }\n        if (isReadonly(target)) {\n            warn$2(\"Set operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\"));\n            return;\n        }\n        var ob = target.__ob__;\n        if (isArray(target) && isValidArrayIndex(key)) {\n            target.length = Math.max(target.length, key);\n            target.splice(key, 1, val);\n            // when mocking for SSR, array methods are not hijacked\n            if (ob && !ob.shallow && ob.mock) {\n                observe(val, false, true);\n            }\n            return val;\n        }\n        if (key in target && !(key in Object.prototype)) {\n            target[key] = val;\n            return val;\n        }\n        if (target._isVue || (ob && ob.vmCount)) {\n            warn$2('Avoid adding reactive properties to a Vue instance or its root $data ' +\n                'at runtime - declare it upfront in the data option.');\n            return val;\n        }\n        if (!ob) {\n            target[key] = val;\n            return val;\n        }\n        defineReactive(ob.value, key, val, undefined, ob.shallow, ob.mock);\n        {\n            ob.dep.notify({\n                type: \"add\" /* TriggerOpTypes.ADD */,\n                target: target,\n                key: key,\n                newValue: val,\n                oldValue: undefined\n            });\n        }\n        return val;\n    }\n    function del(target, key) {\n        if ((isUndef(target) || isPrimitive(target))) {\n            warn$2(\"Cannot delete reactive property on undefined, null, or primitive value: \".concat(target));\n        }\n        if (isArray(target) && isValidArrayIndex(key)) {\n            target.splice(key, 1);\n            return;\n        }\n        var ob = target.__ob__;\n        if (target._isVue || (ob && ob.vmCount)) {\n            warn$2('Avoid deleting properties on a Vue instance or its root $data ' +\n                '- just set it to null.');\n            return;\n        }\n        if (isReadonly(target)) {\n            warn$2(\"Delete operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\"));\n            return;\n        }\n        if (!hasOwn(target, key)) {\n            return;\n        }\n        delete target[key];\n        if (!ob) {\n            return;\n        }\n        {\n            ob.dep.notify({\n                type: \"delete\" /* TriggerOpTypes.DELETE */,\n                target: target,\n                key: key\n            });\n        }\n    }\n    /**\n     * Collect dependencies on array elements when the array is touched, since\n     * we cannot intercept array element access like property getters.\n     */\n    function dependArray(value) {\n        for (var e = void 0, i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            if (e && e.__ob__) {\n                e.__ob__.dep.depend();\n            }\n            if (isArray(e)) {\n                dependArray(e);\n            }\n        }\n    }\n    function reactive(target) {\n        makeReactive(target, false);\n        return target;\n    }\n    /**\n     * Return a shallowly-reactive copy of the original object, where only the root\n     * level properties are reactive. It also does not auto-unwrap refs (even at the\n     * root level).\n     */\n    function shallowReactive(target) {\n        makeReactive(target, true);\n        def(target, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, true);\n        return target;\n    }\n    function makeReactive(target, shallow) {\n        // if trying to observe a readonly proxy, return the readonly version.\n        if (!isReadonly(target)) {\n            {\n                if (isArray(target)) {\n                    warn$2(\"Avoid using Array as root value for \".concat(shallow ? \"shallowReactive()\" : \"reactive()\", \" as it cannot be tracked in watch() or watchEffect(). Use \").concat(shallow ? \"shallowRef()\" : \"ref()\", \" instead. This is a Vue-2-only limitation.\"));\n                }\n                var existingOb = target && target.__ob__;\n                if (existingOb && existingOb.shallow !== shallow) {\n                    warn$2(\"Target is already a \".concat(existingOb.shallow ? \"\" : \"non-\", \"shallow reactive object, and cannot be converted to \").concat(shallow ? \"\" : \"non-\", \"shallow.\"));\n                }\n            }\n            var ob = observe(target, shallow, isServerRendering() /* ssr mock reactivity */);\n            if (!ob) {\n                if (target == null || isPrimitive(target)) {\n                    warn$2(\"value cannot be made reactive: \".concat(String(target)));\n                }\n                if (isCollectionType(target)) {\n                    warn$2(\"Vue 2 does not support reactive collection types such as Map or Set.\");\n                }\n            }\n        }\n    }\n    function isReactive(value) {\n        if (isReadonly(value)) {\n            return isReactive(value[\"__v_raw\" /* ReactiveFlags.RAW */]);\n        }\n        return !!(value && value.__ob__);\n    }\n    function isShallow(value) {\n        return !!(value && value.__v_isShallow);\n    }\n    function isReadonly(value) {\n        return !!(value && value.__v_isReadonly);\n    }\n    function isProxy(value) {\n        return isReactive(value) || isReadonly(value);\n    }\n    function toRaw(observed) {\n        var raw = observed && observed[\"__v_raw\" /* ReactiveFlags.RAW */];\n        return raw ? toRaw(raw) : observed;\n    }\n    function markRaw(value) {\n        // non-extensible objects won't be observed anyway\n        if (Object.isExtensible(value)) {\n            def(value, \"__v_skip\" /* ReactiveFlags.SKIP */, true);\n        }\n        return value;\n    }\n    /**\n     * @internal\n     */\n    function isCollectionType(value) {\n        var type = toRawType(value);\n        return (type === 'Map' || type === 'WeakMap' || type === 'Set' || type === 'WeakSet');\n    }\n    /**\n     * @internal\n     */\n    var RefFlag = \"__v_isRef\";\n    function isRef(r) {\n        return !!(r && r.__v_isRef === true);\n    }\n    function ref$1(value) {\n        return createRef(value, false);\n    }\n    function shallowRef(value) {\n        return createRef(value, true);\n    }\n    function createRef(rawValue, shallow) {\n        if (isRef(rawValue)) {\n            return rawValue;\n        }\n        var ref = {};\n        def(ref, RefFlag, true);\n        def(ref, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, shallow);\n        def(ref, 'dep', defineReactive(ref, 'value', rawValue, null, shallow, isServerRendering()));\n        return ref;\n    }\n    function triggerRef(ref) {\n        if (!ref.dep) {\n            warn$2(\"received object is not a triggerable ref.\");\n        }\n        {\n            ref.dep &&\n                ref.dep.notify({\n                    type: \"set\" /* TriggerOpTypes.SET */,\n                    target: ref,\n                    key: 'value'\n                });\n        }\n    }\n    function unref(ref) {\n        return isRef(ref) ? ref.value : ref;\n    }\n    function proxyRefs(objectWithRefs) {\n        if (isReactive(objectWithRefs)) {\n            return objectWithRefs;\n        }\n        var proxy = {};\n        var keys = Object.keys(objectWithRefs);\n        for (var i = 0; i < keys.length; i++) {\n            proxyWithRefUnwrap(proxy, objectWithRefs, keys[i]);\n        }\n        return proxy;\n    }\n    function proxyWithRefUnwrap(target, source, key) {\n        Object.defineProperty(target, key, {\n            enumerable: true,\n            configurable: true,\n            get: function () {\n                var val = source[key];\n                if (isRef(val)) {\n                    return val.value;\n                }\n                else {\n                    var ob = val && val.__ob__;\n                    if (ob)\n                        ob.dep.depend();\n                    return val;\n                }\n            },\n            set: function (value) {\n                var oldValue = source[key];\n                if (isRef(oldValue) && !isRef(value)) {\n                    oldValue.value = value;\n                }\n                else {\n                    source[key] = value;\n                }\n            }\n        });\n    }\n    function customRef(factory) {\n        var dep = new Dep();\n        var _a = factory(function () {\n            {\n                dep.depend({\n                    target: ref,\n                    type: \"get\" /* TrackOpTypes.GET */,\n                    key: 'value'\n                });\n            }\n        }, function () {\n            {\n                dep.notify({\n                    target: ref,\n                    type: \"set\" /* TriggerOpTypes.SET */,\n                    key: 'value'\n                });\n            }\n        }), get = _a.get, set = _a.set;\n        var ref = {\n            get value() {\n                return get();\n            },\n            set value(newVal) {\n                set(newVal);\n            }\n        };\n        def(ref, RefFlag, true);\n        return ref;\n    }\n    function toRefs(object) {\n        if (!isReactive(object)) {\n            warn$2(\"toRefs() expects a reactive object but received a plain one.\");\n        }\n        var ret = isArray(object) ? new Array(object.length) : {};\n        for (var key in object) {\n            ret[key] = toRef(object, key);\n        }\n        return ret;\n    }\n    function toRef(object, key, defaultValue) {\n        var val = object[key];\n        if (isRef(val)) {\n            return val;\n        }\n        var ref = {\n            get value() {\n                var val = object[key];\n                return val === undefined ? defaultValue : val;\n            },\n            set value(newVal) {\n                object[key] = newVal;\n            }\n        };\n        def(ref, RefFlag, true);\n        return ref;\n    }\n    var rawToReadonlyFlag = \"__v_rawToReadonly\";\n    var rawToShallowReadonlyFlag = \"__v_rawToShallowReadonly\";\n    function readonly(target) {\n        return createReadonly(target, false);\n    }\n    function createReadonly(target, shallow) {\n        if (!isPlainObject(target)) {\n            {\n                if (isArray(target)) {\n                    warn$2(\"Vue 2 does not support readonly arrays.\");\n                }\n                else if (isCollectionType(target)) {\n                    warn$2(\"Vue 2 does not support readonly collection types such as Map or Set.\");\n                }\n                else {\n                    warn$2(\"value cannot be made readonly: \".concat(typeof target));\n                }\n            }\n            return target;\n        }\n        if (!Object.isExtensible(target)) {\n            warn$2(\"Vue 2 does not support creating readonly proxy for non-extensible object.\");\n        }\n        // already a readonly object\n        if (isReadonly(target)) {\n            return target;\n        }\n        // already has a readonly proxy\n        var existingFlag = shallow ? rawToShallowReadonlyFlag : rawToReadonlyFlag;\n        var existingProxy = target[existingFlag];\n        if (existingProxy) {\n            return existingProxy;\n        }\n        var proxy = Object.create(Object.getPrototypeOf(target));\n        def(target, existingFlag, proxy);\n        def(proxy, \"__v_isReadonly\" /* ReactiveFlags.IS_READONLY */, true);\n        def(proxy, \"__v_raw\" /* ReactiveFlags.RAW */, target);\n        if (isRef(target)) {\n            def(proxy, RefFlag, true);\n        }\n        if (shallow || isShallow(target)) {\n            def(proxy, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, true);\n        }\n        var keys = Object.keys(target);\n        for (var i = 0; i < keys.length; i++) {\n            defineReadonlyProperty(proxy, target, keys[i], shallow);\n        }\n        return proxy;\n    }\n    function defineReadonlyProperty(proxy, target, key, shallow) {\n        Object.defineProperty(proxy, key, {\n            enumerable: true,\n            configurable: true,\n            get: function () {\n                var val = target[key];\n                return shallow || !isPlainObject(val) ? val : readonly(val);\n            },\n            set: function () {\n                warn$2(\"Set operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\"));\n            }\n        });\n    }\n    /**\n     * Returns a reactive-copy of the original object, where only the root level\n     * properties are readonly, and does NOT unwrap refs nor recursively convert\n     * returned properties.\n     * This is used for creating the props proxy object for stateful components.\n     */\n    function shallowReadonly(target) {\n        return createReadonly(target, true);\n    }\n    function computed(getterOrOptions, debugOptions) {\n        var getter;\n        var setter;\n        var onlyGetter = isFunction(getterOrOptions);\n        if (onlyGetter) {\n            getter = getterOrOptions;\n            setter = function () {\n                warn$2('Write operation failed: computed value is readonly');\n            };\n        }\n        else {\n            getter = getterOrOptions.get;\n            setter = getterOrOptions.set;\n        }\n        var watcher = isServerRendering()\n            ? null\n            : new Watcher(currentInstance, getter, noop, { lazy: true });\n        if (watcher && debugOptions) {\n            watcher.onTrack = debugOptions.onTrack;\n            watcher.onTrigger = debugOptions.onTrigger;\n        }\n        var ref = {\n            // some libs rely on the presence effect for checking computed refs\n            // from normal refs, but the implementation doesn't matter\n            effect: watcher,\n            get value() {\n                if (watcher) {\n                    if (watcher.dirty) {\n                        watcher.evaluate();\n                    }\n                    if (Dep.target) {\n                        if (Dep.target.onTrack) {\n                            Dep.target.onTrack({\n                                effect: Dep.target,\n                                target: ref,\n                                type: \"get\" /* TrackOpTypes.GET */,\n                                key: 'value'\n                            });\n                        }\n                        watcher.depend();\n                    }\n                    return watcher.value;\n                }\n                else {\n                    return getter();\n                }\n            },\n            set value(newVal) {\n                setter(newVal);\n            }\n        };\n        def(ref, RefFlag, true);\n        def(ref, \"__v_isReadonly\" /* ReactiveFlags.IS_READONLY */, onlyGetter);\n        return ref;\n    }\n    var mark;\n    var measure;\n    {\n        var perf_1 = inBrowser && window.performance;\n        /* istanbul ignore if */\n        if (perf_1 &&\n            // @ts-ignore\n            perf_1.mark &&\n            // @ts-ignore\n            perf_1.measure &&\n            // @ts-ignore\n            perf_1.clearMarks &&\n            // @ts-ignore\n            perf_1.clearMeasures) {\n            mark = function (tag) { return perf_1.mark(tag); };\n            measure = function (name, startTag, endTag) {\n                perf_1.measure(name, startTag, endTag);\n                perf_1.clearMarks(startTag);\n                perf_1.clearMarks(endTag);\n                // perf.clearMeasures(name)\n            };\n        }\n    }\n    var normalizeEvent = cached(function (name) {\n        var passive = name.charAt(0) === '&';\n        name = passive ? name.slice(1) : name;\n        var once = name.charAt(0) === '~'; // Prefixed last, checked first\n        name = once ? name.slice(1) : name;\n        var capture = name.charAt(0) === '!';\n        name = capture ? name.slice(1) : name;\n        return {\n            name: name,\n            once: once,\n            capture: capture,\n            passive: passive\n        };\n    });\n    function createFnInvoker(fns, vm) {\n        function invoker() {\n            var fns = invoker.fns;\n            if (isArray(fns)) {\n                var cloned = fns.slice();\n                for (var i = 0; i < cloned.length; i++) {\n                    invokeWithErrorHandling(cloned[i], null, arguments, vm, \"v-on handler\");\n                }\n            }\n            else {\n                // return handler return value for single handlers\n                return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\");\n            }\n        }\n        invoker.fns = fns;\n        return invoker;\n    }\n    function updateListeners(on, oldOn, add, remove, createOnceHandler, vm) {\n        var name, cur, old, event;\n        for (name in on) {\n            cur = on[name];\n            old = oldOn[name];\n            event = normalizeEvent(name);\n            if (isUndef(cur)) {\n                warn$2(\"Invalid handler for event \\\"\".concat(event.name, \"\\\": got \") + String(cur), vm);\n            }\n            else if (isUndef(old)) {\n                if (isUndef(cur.fns)) {\n                    cur = on[name] = createFnInvoker(cur, vm);\n                }\n                if (isTrue(event.once)) {\n                    cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n                }\n                add(event.name, cur, event.capture, event.passive, event.params);\n            }\n            else if (cur !== old) {\n                old.fns = cur;\n                on[name] = old;\n            }\n        }\n        for (name in oldOn) {\n            if (isUndef(on[name])) {\n                event = normalizeEvent(name);\n                remove(event.name, oldOn[name], event.capture);\n            }\n        }\n    }\n    function mergeVNodeHook(def, hookKey, hook) {\n        if (def instanceof VNode) {\n            def = def.data.hook || (def.data.hook = {});\n        }\n        var invoker;\n        var oldHook = def[hookKey];\n        function wrappedHook() {\n            hook.apply(this, arguments);\n            // important: remove merged hook to ensure it's called only once\n            // and prevent memory leak\n            remove$2(invoker.fns, wrappedHook);\n        }\n        if (isUndef(oldHook)) {\n            // no existing hook\n            invoker = createFnInvoker([wrappedHook]);\n        }\n        else {\n            /* istanbul ignore if */\n            if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n                // already a merged invoker\n                invoker = oldHook;\n                invoker.fns.push(wrappedHook);\n            }\n            else {\n                // existing plain hook\n                invoker = createFnInvoker([oldHook, wrappedHook]);\n            }\n        }\n        invoker.merged = true;\n        def[hookKey] = invoker;\n    }\n    function extractPropsFromVNodeData(data, Ctor, tag) {\n        // we are only extracting raw values here.\n        // validation and default values are handled in the child\n        // component itself.\n        var propOptions = Ctor.options.props;\n        if (isUndef(propOptions)) {\n            return;\n        }\n        var res = {};\n        var attrs = data.attrs, props = data.props;\n        if (isDef(attrs) || isDef(props)) {\n            for (var key in propOptions) {\n                var altKey = hyphenate(key);\n                {\n                    var keyInLowerCase = key.toLowerCase();\n                    if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {\n                        tip(\"Prop \\\"\".concat(keyInLowerCase, \"\\\" is passed to component \") +\n                            \"\".concat(formatComponentName(\n                            // @ts-expect-error tag is string\n                            tag || Ctor), \", but the declared prop name is\") +\n                            \" \\\"\".concat(key, \"\\\". \") +\n                            \"Note that HTML attributes are case-insensitive and camelCased \" +\n                            \"props need to use their kebab-case equivalents when using in-DOM \" +\n                            \"templates. You should probably use \\\"\".concat(altKey, \"\\\" instead of \\\"\").concat(key, \"\\\".\"));\n                    }\n                }\n                checkProp(res, props, key, altKey, true) ||\n                    checkProp(res, attrs, key, altKey, false);\n            }\n        }\n        return res;\n    }\n    function checkProp(res, hash, key, altKey, preserve) {\n        if (isDef(hash)) {\n            if (hasOwn(hash, key)) {\n                res[key] = hash[key];\n                if (!preserve) {\n                    delete hash[key];\n                }\n                return true;\n            }\n            else if (hasOwn(hash, altKey)) {\n                res[key] = hash[altKey];\n                if (!preserve) {\n                    delete hash[altKey];\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    // The template compiler attempts to minimize the need for normalization by\n    // statically analyzing the template at compile time.\n    //\n    // For plain HTML markup, normalization can be completely skipped because the\n    // generated render function is guaranteed to return Array<VNode>. There are\n    // two cases where extra normalization is needed:\n    // 1. When the children contains components - because a functional component\n    // may return an Array instead of a single root. In this case, just a simple\n    // normalization is needed - if any child is an Array, we flatten the whole\n    // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n    // because functional components already normalize their own children.\n    function simpleNormalizeChildren(children) {\n        for (var i = 0; i < children.length; i++) {\n            if (isArray(children[i])) {\n                return Array.prototype.concat.apply([], children);\n            }\n        }\n        return children;\n    }\n    // 2. When the children contains constructs that always generated nested Arrays,\n    // e.g. <template>, <slot>, v-for, or when the children is provided by user\n    // with hand-written render functions / JSX. In such cases a full normalization\n    // is needed to cater to all possible types of children values.\n    function normalizeChildren(children) {\n        return isPrimitive(children)\n            ? [createTextVNode(children)]\n            : isArray(children)\n                ? normalizeArrayChildren(children)\n                : undefined;\n    }\n    function isTextNode(node) {\n        return isDef(node) && isDef(node.text) && isFalse(node.isComment);\n    }\n    function normalizeArrayChildren(children, nestedIndex) {\n        var res = [];\n        var i, c, lastIndex, last;\n        for (i = 0; i < children.length; i++) {\n            c = children[i];\n            if (isUndef(c) || typeof c === 'boolean')\n                continue;\n            lastIndex = res.length - 1;\n            last = res[lastIndex];\n            //  nested\n            if (isArray(c)) {\n                if (c.length > 0) {\n                    c = normalizeArrayChildren(c, \"\".concat(nestedIndex || '', \"_\").concat(i));\n                    // merge adjacent text nodes\n                    if (isTextNode(c[0]) && isTextNode(last)) {\n                        res[lastIndex] = createTextVNode(last.text + c[0].text);\n                        c.shift();\n                    }\n                    res.push.apply(res, c);\n                }\n            }\n            else if (isPrimitive(c)) {\n                if (isTextNode(last)) {\n                    // merge adjacent text nodes\n                    // this is necessary for SSR hydration because text nodes are\n                    // essentially merged when rendered to HTML strings\n                    res[lastIndex] = createTextVNode(last.text + c);\n                }\n                else if (c !== '') {\n                    // convert primitive to vnode\n                    res.push(createTextVNode(c));\n                }\n            }\n            else {\n                if (isTextNode(c) && isTextNode(last)) {\n                    // merge adjacent text nodes\n                    res[lastIndex] = createTextVNode(last.text + c.text);\n                }\n                else {\n                    // default key for nested array children (likely generated by v-for)\n                    if (isTrue(children._isVList) &&\n                        isDef(c.tag) &&\n                        isUndef(c.key) &&\n                        isDef(nestedIndex)) {\n                        c.key = \"__vlist\".concat(nestedIndex, \"_\").concat(i, \"__\");\n                    }\n                    res.push(c);\n                }\n            }\n        }\n        return res;\n    }\n    var SIMPLE_NORMALIZE = 1;\n    var ALWAYS_NORMALIZE = 2;\n    // wrapper function for providing a more flexible interface\n    // without getting yelled at by flow\n    function createElement$1(context, tag, data, children, normalizationType, alwaysNormalize) {\n        if (isArray(data) || isPrimitive(data)) {\n            normalizationType = children;\n            children = data;\n            data = undefined;\n        }\n        if (isTrue(alwaysNormalize)) {\n            normalizationType = ALWAYS_NORMALIZE;\n        }\n        return _createElement(context, tag, data, children, normalizationType);\n    }\n    function _createElement(context, tag, data, children, normalizationType) {\n        if (isDef(data) && isDef(data.__ob__)) {\n            warn$2(\"Avoid using observed data object as vnode data: \".concat(JSON.stringify(data), \"\\n\") + 'Always create fresh vnode data objects in each render!', context);\n            return createEmptyVNode();\n        }\n        // object syntax in v-bind\n        if (isDef(data) && isDef(data.is)) {\n            tag = data.is;\n        }\n        if (!tag) {\n            // in case of component :is set to falsy value\n            return createEmptyVNode();\n        }\n        // warn against non-primitive key\n        if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {\n            warn$2('Avoid using non-primitive value as key, ' +\n                'use string/number value instead.', context);\n        }\n        // support single function children as default scoped slot\n        if (isArray(children) && isFunction(children[0])) {\n            data = data || {};\n            data.scopedSlots = { default: children[0] };\n            children.length = 0;\n        }\n        if (normalizationType === ALWAYS_NORMALIZE) {\n            children = normalizeChildren(children);\n        }\n        else if (normalizationType === SIMPLE_NORMALIZE) {\n            children = simpleNormalizeChildren(children);\n        }\n        var vnode, ns;\n        if (typeof tag === 'string') {\n            var Ctor = void 0;\n            ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n            if (config.isReservedTag(tag)) {\n                // platform built-in elements\n                if (isDef(data) &&\n                    isDef(data.nativeOn) &&\n                    data.tag !== 'component') {\n                    warn$2(\"The .native modifier for v-on is only valid on components but it was used on <\".concat(tag, \">.\"), context);\n                }\n                vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);\n            }\n            else if ((!data || !data.pre) &&\n                isDef((Ctor = resolveAsset(context.$options, 'components', tag)))) {\n                // component\n                vnode = createComponent(Ctor, data, context, children, tag);\n            }\n            else {\n                // unknown or unlisted namespaced elements\n                // check at runtime because it may get assigned a namespace when its\n                // parent normalizes children\n                vnode = new VNode(tag, data, children, undefined, undefined, context);\n            }\n        }\n        else {\n            // direct component options / constructor\n            vnode = createComponent(tag, data, context, children);\n        }\n        if (isArray(vnode)) {\n            return vnode;\n        }\n        else if (isDef(vnode)) {\n            if (isDef(ns))\n                applyNS(vnode, ns);\n            if (isDef(data))\n                registerDeepBindings(data);\n            return vnode;\n        }\n        else {\n            return createEmptyVNode();\n        }\n    }\n    function applyNS(vnode, ns, force) {\n        vnode.ns = ns;\n        if (vnode.tag === 'foreignObject') {\n            // use default namespace inside foreignObject\n            ns = undefined;\n            force = true;\n        }\n        if (isDef(vnode.children)) {\n            for (var i = 0, l = vnode.children.length; i < l; i++) {\n                var child = vnode.children[i];\n                if (isDef(child.tag) &&\n                    (isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n                    applyNS(child, ns, force);\n                }\n            }\n        }\n    }\n    // ref #5318\n    // necessary to ensure parent re-render when deep bindings like :style and\n    // :class are used on slot nodes\n    function registerDeepBindings(data) {\n        if (isObject(data.style)) {\n            traverse(data.style);\n        }\n        if (isObject(data.class)) {\n            traverse(data.class);\n        }\n    }\n    /**\n     * Runtime helper for rendering v-for lists.\n     */\n    function renderList(val, render) {\n        var ret = null, i, l, keys, key;\n        if (isArray(val) || typeof val === 'string') {\n            ret = new Array(val.length);\n            for (i = 0, l = val.length; i < l; i++) {\n                ret[i] = render(val[i], i);\n            }\n        }\n        else if (typeof val === 'number') {\n            ret = new Array(val);\n            for (i = 0; i < val; i++) {\n                ret[i] = render(i + 1, i);\n            }\n        }\n        else if (isObject(val)) {\n            if (hasSymbol && val[Symbol.iterator]) {\n                ret = [];\n                var iterator = val[Symbol.iterator]();\n                var result = iterator.next();\n                while (!result.done) {\n                    ret.push(render(result.value, ret.length));\n                    result = iterator.next();\n                }\n            }\n            else {\n                keys = Object.keys(val);\n                ret = new Array(keys.length);\n                for (i = 0, l = keys.length; i < l; i++) {\n                    key = keys[i];\n                    ret[i] = render(val[key], key, i);\n                }\n            }\n        }\n        if (!isDef(ret)) {\n            ret = [];\n        }\n        ret._isVList = true;\n        return ret;\n    }\n    /**\n     * Runtime helper for rendering <slot>\n     */\n    function renderSlot(name, fallbackRender, props, bindObject) {\n        var scopedSlotFn = this.$scopedSlots[name];\n        var nodes;\n        if (scopedSlotFn) {\n            // scoped slot\n            props = props || {};\n            if (bindObject) {\n                if (!isObject(bindObject)) {\n                    warn$2('slot v-bind without argument expects an Object', this);\n                }\n                props = extend(extend({}, bindObject), props);\n            }\n            nodes =\n                scopedSlotFn(props) ||\n                    (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);\n        }\n        else {\n            nodes =\n                this.$slots[name] ||\n                    (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);\n        }\n        var target = props && props.slot;\n        if (target) {\n            return this.$createElement('template', { slot: target }, nodes);\n        }\n        else {\n            return nodes;\n        }\n    }\n    /**\n     * Runtime helper for resolving filters\n     */\n    function resolveFilter(id) {\n        return resolveAsset(this.$options, 'filters', id, true) || identity;\n    }\n    function isKeyNotMatch(expect, actual) {\n        if (isArray(expect)) {\n            return expect.indexOf(actual) === -1;\n        }\n        else {\n            return expect !== actual;\n        }\n    }\n    /**\n     * Runtime helper for checking keyCodes from config.\n     * exposed as Vue.prototype._k\n     * passing in eventKeyName as last argument separately for backwards compat\n     */\n    function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {\n        var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n        if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n            return isKeyNotMatch(builtInKeyName, eventKeyName);\n        }\n        else if (mappedKeyCode) {\n            return isKeyNotMatch(mappedKeyCode, eventKeyCode);\n        }\n        else if (eventKeyName) {\n            return hyphenate(eventKeyName) !== key;\n        }\n        return eventKeyCode === undefined;\n    }\n    /**\n     * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n     */\n    function bindObjectProps(data, tag, value, asProp, isSync) {\n        if (value) {\n            if (!isObject(value)) {\n                warn$2('v-bind without argument expects an Object or Array value', this);\n            }\n            else {\n                if (isArray(value)) {\n                    value = toObject(value);\n                }\n                var hash = void 0;\n                var _loop_1 = function (key) {\n                    if (key === 'class' || key === 'style' || isReservedAttribute(key)) {\n                        hash = data;\n                    }\n                    else {\n                        var type = data.attrs && data.attrs.type;\n                        hash =\n                            asProp || config.mustUseProp(tag, type, key)\n                                ? data.domProps || (data.domProps = {})\n                                : data.attrs || (data.attrs = {});\n                    }\n                    var camelizedKey = camelize(key);\n                    var hyphenatedKey = hyphenate(key);\n                    if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n                        hash[key] = value[key];\n                        if (isSync) {\n                            var on = data.on || (data.on = {});\n                            on[\"update:\".concat(key)] = function ($event) {\n                                value[key] = $event;\n                            };\n                        }\n                    }\n                };\n                for (var key in value) {\n                    _loop_1(key);\n                }\n            }\n        }\n        return data;\n    }\n    /**\n     * Runtime helper for rendering static trees.\n     */\n    function renderStatic(index, isInFor) {\n        var cached = this._staticTrees || (this._staticTrees = []);\n        var tree = cached[index];\n        // if has already-rendered static tree and not inside v-for,\n        // we can reuse the same tree.\n        if (tree && !isInFor) {\n            return tree;\n        }\n        // otherwise, render a fresh tree.\n        tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, this._c, this // for render fns generated for functional component templates\n        );\n        markStatic$1(tree, \"__static__\".concat(index), false);\n        return tree;\n    }\n    /**\n     * Runtime helper for v-once.\n     * Effectively it means marking the node as static with a unique key.\n     */\n    function markOnce(tree, index, key) {\n        markStatic$1(tree, \"__once__\".concat(index).concat(key ? \"_\".concat(key) : \"\"), true);\n        return tree;\n    }\n    function markStatic$1(tree, key, isOnce) {\n        if (isArray(tree)) {\n            for (var i = 0; i < tree.length; i++) {\n                if (tree[i] && typeof tree[i] !== 'string') {\n                    markStaticNode(tree[i], \"\".concat(key, \"_\").concat(i), isOnce);\n                }\n            }\n        }\n        else {\n            markStaticNode(tree, key, isOnce);\n        }\n    }\n    function markStaticNode(node, key, isOnce) {\n        node.isStatic = true;\n        node.key = key;\n        node.isOnce = isOnce;\n    }\n    function bindObjectListeners(data, value) {\n        if (value) {\n            if (!isPlainObject(value)) {\n                warn$2('v-on without argument expects an Object value', this);\n            }\n            else {\n                var on = (data.on = data.on ? extend({}, data.on) : {});\n                for (var key in value) {\n                    var existing = on[key];\n                    var ours = value[key];\n                    on[key] = existing ? [].concat(existing, ours) : ours;\n                }\n            }\n        }\n        return data;\n    }\n    function resolveScopedSlots(fns, res, \n    // the following are added in 2.6\n    hasDynamicKeys, contentHashKey) {\n        res = res || { $stable: !hasDynamicKeys };\n        for (var i = 0; i < fns.length; i++) {\n            var slot = fns[i];\n            if (isArray(slot)) {\n                resolveScopedSlots(slot, res, hasDynamicKeys);\n            }\n            else if (slot) {\n                // marker for reverse proxying v-slot without scope on this.$slots\n                // @ts-expect-error\n                if (slot.proxy) {\n                    // @ts-expect-error\n                    slot.fn.proxy = true;\n                }\n                res[slot.key] = slot.fn;\n            }\n        }\n        if (contentHashKey) {\n            res.$key = contentHashKey;\n        }\n        return res;\n    }\n    // helper to process dynamic keys for dynamic arguments in v-bind and v-on.\n    function bindDynamicKeys(baseObj, values) {\n        for (var i = 0; i < values.length; i += 2) {\n            var key = values[i];\n            if (typeof key === 'string' && key) {\n                baseObj[values[i]] = values[i + 1];\n            }\n            else if (key !== '' && key !== null) {\n                // null is a special value for explicitly removing a binding\n                warn$2(\"Invalid value for dynamic directive argument (expected string or null): \".concat(key), this);\n            }\n        }\n        return baseObj;\n    }\n    // helper to dynamically append modifier runtime markers to event names.\n    // ensure only append when value is already string, otherwise it will be cast\n    // to string and cause the type check to miss.\n    function prependModifier(value, symbol) {\n        return typeof value === 'string' ? symbol + value : value;\n    }\n    function installRenderHelpers(target) {\n        target._o = markOnce;\n        target._n = toNumber;\n        target._s = toString;\n        target._l = renderList;\n        target._t = renderSlot;\n        target._q = looseEqual;\n        target._i = looseIndexOf;\n        target._m = renderStatic;\n        target._f = resolveFilter;\n        target._k = checkKeyCodes;\n        target._b = bindObjectProps;\n        target._v = createTextVNode;\n        target._e = createEmptyVNode;\n        target._u = resolveScopedSlots;\n        target._g = bindObjectListeners;\n        target._d = bindDynamicKeys;\n        target._p = prependModifier;\n    }\n    /**\n     * Runtime helper for resolving raw children VNodes into a slot object.\n     */\n    function resolveSlots(children, context) {\n        if (!children || !children.length) {\n            return {};\n        }\n        var slots = {};\n        for (var i = 0, l = children.length; i < l; i++) {\n            var child = children[i];\n            var data = child.data;\n            // remove slot attribute if the node is resolved as a Vue slot node\n            if (data && data.attrs && data.attrs.slot) {\n                delete data.attrs.slot;\n            }\n            // named slots should only be respected if the vnode was rendered in the\n            // same context.\n            if ((child.context === context || child.fnContext === context) &&\n                data &&\n                data.slot != null) {\n                var name_1 = data.slot;\n                var slot = slots[name_1] || (slots[name_1] = []);\n                if (child.tag === 'template') {\n                    slot.push.apply(slot, child.children || []);\n                }\n                else {\n                    slot.push(child);\n                }\n            }\n            else {\n                (slots.default || (slots.default = [])).push(child);\n            }\n        }\n        // ignore slots that contains only whitespace\n        for (var name_2 in slots) {\n            if (slots[name_2].every(isWhitespace)) {\n                delete slots[name_2];\n            }\n        }\n        return slots;\n    }\n    function isWhitespace(node) {\n        return (node.isComment && !node.asyncFactory) || node.text === ' ';\n    }\n    function isAsyncPlaceholder(node) {\n        // @ts-expect-error not really boolean type\n        return node.isComment && node.asyncFactory;\n    }\n    function normalizeScopedSlots(ownerVm, scopedSlots, normalSlots, prevScopedSlots) {\n        var res;\n        var hasNormalSlots = Object.keys(normalSlots).length > 0;\n        var isStable = scopedSlots ? !!scopedSlots.$stable : !hasNormalSlots;\n        var key = scopedSlots && scopedSlots.$key;\n        if (!scopedSlots) {\n            res = {};\n        }\n        else if (scopedSlots._normalized) {\n            // fast path 1: child component re-render only, parent did not change\n            return scopedSlots._normalized;\n        }\n        else if (isStable &&\n            prevScopedSlots &&\n            prevScopedSlots !== emptyObject &&\n            key === prevScopedSlots.$key &&\n            !hasNormalSlots &&\n            !prevScopedSlots.$hasNormal) {\n            // fast path 2: stable scoped slots w/ no normal slots to proxy,\n            // only need to normalize once\n            return prevScopedSlots;\n        }\n        else {\n            res = {};\n            for (var key_1 in scopedSlots) {\n                if (scopedSlots[key_1] && key_1[0] !== '$') {\n                    res[key_1] = normalizeScopedSlot(ownerVm, normalSlots, key_1, scopedSlots[key_1]);\n                }\n            }\n        }\n        // expose normal slots on scopedSlots\n        for (var key_2 in normalSlots) {\n            if (!(key_2 in res)) {\n                res[key_2] = proxyNormalSlot(normalSlots, key_2);\n            }\n        }\n        // avoriaz seems to mock a non-extensible $scopedSlots object\n        // and when that is passed down this would cause an error\n        if (scopedSlots && Object.isExtensible(scopedSlots)) {\n            scopedSlots._normalized = res;\n        }\n        def(res, '$stable', isStable);\n        def(res, '$key', key);\n        def(res, '$hasNormal', hasNormalSlots);\n        return res;\n    }\n    function normalizeScopedSlot(vm, normalSlots, key, fn) {\n        var normalized = function () {\n            var cur = currentInstance;\n            setCurrentInstance(vm);\n            var res = arguments.length ? fn.apply(null, arguments) : fn({});\n            res =\n                res && typeof res === 'object' && !isArray(res)\n                    ? [res] // single vnode\n                    : normalizeChildren(res);\n            var vnode = res && res[0];\n            setCurrentInstance(cur);\n            return res &&\n                (!vnode ||\n                    (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode))) // #9658, #10391\n                ? undefined\n                : res;\n        };\n        // this is a slot using the new v-slot syntax without scope. although it is\n        // compiled as a scoped slot, render fn users would expect it to be present\n        // on this.$slots because the usage is semantically a normal slot.\n        if (fn.proxy) {\n            Object.defineProperty(normalSlots, key, {\n                get: normalized,\n                enumerable: true,\n                configurable: true\n            });\n        }\n        return normalized;\n    }\n    function proxyNormalSlot(slots, key) {\n        return function () { return slots[key]; };\n    }\n    function initSetup(vm) {\n        var options = vm.$options;\n        var setup = options.setup;\n        if (setup) {\n            var ctx = (vm._setupContext = createSetupContext(vm));\n            setCurrentInstance(vm);\n            pushTarget();\n            var setupResult = invokeWithErrorHandling(setup, null, [vm._props || shallowReactive({}), ctx], vm, \"setup\");\n            popTarget();\n            setCurrentInstance();\n            if (isFunction(setupResult)) {\n                // render function\n                // @ts-ignore\n                options.render = setupResult;\n            }\n            else if (isObject(setupResult)) {\n                // bindings\n                if (setupResult instanceof VNode) {\n                    warn$2(\"setup() should not return VNodes directly - \" +\n                        \"return a render function instead.\");\n                }\n                vm._setupState = setupResult;\n                // __sfc indicates compiled bindings from <script setup>\n                if (!setupResult.__sfc) {\n                    for (var key in setupResult) {\n                        if (!isReserved(key)) {\n                            proxyWithRefUnwrap(vm, setupResult, key);\n                        }\n                        else {\n                            warn$2(\"Avoid using variables that start with _ or $ in setup().\");\n                        }\n                    }\n                }\n                else {\n                    // exposed for compiled render fn\n                    var proxy = (vm._setupProxy = {});\n                    for (var key in setupResult) {\n                        if (key !== '__sfc') {\n                            proxyWithRefUnwrap(proxy, setupResult, key);\n                        }\n                    }\n                }\n            }\n            else if (setupResult !== undefined) {\n                warn$2(\"setup() should return an object. Received: \".concat(setupResult === null ? 'null' : typeof setupResult));\n            }\n        }\n    }\n    function createSetupContext(vm) {\n        var exposeCalled = false;\n        return {\n            get attrs() {\n                if (!vm._attrsProxy) {\n                    var proxy = (vm._attrsProxy = {});\n                    def(proxy, '_v_attr_proxy', true);\n                    syncSetupProxy(proxy, vm.$attrs, emptyObject, vm, '$attrs');\n                }\n                return vm._attrsProxy;\n            },\n            get listeners() {\n                if (!vm._listenersProxy) {\n                    var proxy = (vm._listenersProxy = {});\n                    syncSetupProxy(proxy, vm.$listeners, emptyObject, vm, '$listeners');\n                }\n                return vm._listenersProxy;\n            },\n            get slots() {\n                return initSlotsProxy(vm);\n            },\n            emit: bind$1(vm.$emit, vm),\n            expose: function (exposed) {\n                {\n                    if (exposeCalled) {\n                        warn$2(\"expose() should be called only once per setup().\", vm);\n                    }\n                    exposeCalled = true;\n                }\n                if (exposed) {\n                    Object.keys(exposed).forEach(function (key) {\n                        return proxyWithRefUnwrap(vm, exposed, key);\n                    });\n                }\n            }\n        };\n    }\n    function syncSetupProxy(to, from, prev, instance, type) {\n        var changed = false;\n        for (var key in from) {\n            if (!(key in to)) {\n                changed = true;\n                defineProxyAttr(to, key, instance, type);\n            }\n            else if (from[key] !== prev[key]) {\n                changed = true;\n            }\n        }\n        for (var key in to) {\n            if (!(key in from)) {\n                changed = true;\n                delete to[key];\n            }\n        }\n        return changed;\n    }\n    function defineProxyAttr(proxy, key, instance, type) {\n        Object.defineProperty(proxy, key, {\n            enumerable: true,\n            configurable: true,\n            get: function () {\n                return instance[type][key];\n            }\n        });\n    }\n    function initSlotsProxy(vm) {\n        if (!vm._slotsProxy) {\n            syncSetupSlots((vm._slotsProxy = {}), vm.$scopedSlots);\n        }\n        return vm._slotsProxy;\n    }\n    function syncSetupSlots(to, from) {\n        for (var key in from) {\n            to[key] = from[key];\n        }\n        for (var key in to) {\n            if (!(key in from)) {\n                delete to[key];\n            }\n        }\n    }\n    /**\n     * @internal use manual type def because public setup context type relies on\n     * legacy VNode types\n     */\n    function useSlots() {\n        return getContext().slots;\n    }\n    /**\n     * @internal use manual type def because public setup context type relies on\n     * legacy VNode types\n     */\n    function useAttrs() {\n        return getContext().attrs;\n    }\n    /**\n     * Vue 2 only\n     * @internal use manual type def because public setup context type relies on\n     * legacy VNode types\n     */\n    function useListeners() {\n        return getContext().listeners;\n    }\n    function getContext() {\n        if (!currentInstance) {\n            warn$2(\"useContext() called without active instance.\");\n        }\n        var vm = currentInstance;\n        return vm._setupContext || (vm._setupContext = createSetupContext(vm));\n    }\n    /**\n     * Runtime helper for merging default declarations. Imported by compiled code\n     * only.\n     * @internal\n     */\n    function mergeDefaults(raw, defaults) {\n        var props = isArray(raw)\n            ? raw.reduce(function (normalized, p) { return ((normalized[p] = {}), normalized); }, {})\n            : raw;\n        for (var key in defaults) {\n            var opt = props[key];\n            if (opt) {\n                if (isArray(opt) || isFunction(opt)) {\n                    props[key] = { type: opt, default: defaults[key] };\n                }\n                else {\n                    opt.default = defaults[key];\n                }\n            }\n            else if (opt === null) {\n                props[key] = { default: defaults[key] };\n            }\n            else {\n                warn$2(\"props default key \\\"\".concat(key, \"\\\" has no corresponding declaration.\"));\n            }\n        }\n        return props;\n    }\n    function initRender(vm) {\n        vm._vnode = null; // the root of the child tree\n        vm._staticTrees = null; // v-once cached trees\n        var options = vm.$options;\n        var parentVnode = (vm.$vnode = options._parentVnode); // the placeholder node in parent tree\n        var renderContext = parentVnode && parentVnode.context;\n        vm.$slots = resolveSlots(options._renderChildren, renderContext);\n        vm.$scopedSlots = parentVnode\n            ? normalizeScopedSlots(vm.$parent, parentVnode.data.scopedSlots, vm.$slots)\n            : emptyObject;\n        // bind the createElement fn to this instance\n        // so that we get proper render context inside it.\n        // args order: tag, data, children, normalizationType, alwaysNormalize\n        // internal version is used by render functions compiled from templates\n        // @ts-expect-error\n        vm._c = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, false); };\n        // normalization is always applied for the public version, used in\n        // user-written render functions.\n        // @ts-expect-error\n        vm.$createElement = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, true); };\n        // $attrs & $listeners are exposed for easier HOC creation.\n        // they need to be reactive so that HOCs using them are always updated\n        var parentData = parentVnode && parentVnode.data;\n        /* istanbul ignore else */\n        {\n            defineReactive(vm, '$attrs', (parentData && parentData.attrs) || emptyObject, function () {\n                !isUpdatingChildComponent && warn$2(\"$attrs is readonly.\", vm);\n            }, true);\n            defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n                !isUpdatingChildComponent && warn$2(\"$listeners is readonly.\", vm);\n            }, true);\n        }\n    }\n    var currentRenderingInstance = null;\n    function renderMixin(Vue) {\n        // install runtime convenience helpers\n        installRenderHelpers(Vue.prototype);\n        Vue.prototype.$nextTick = function (fn) {\n            return nextTick(fn, this);\n        };\n        Vue.prototype._render = function () {\n            var vm = this;\n            var _a = vm.$options, render = _a.render, _parentVnode = _a._parentVnode;\n            if (_parentVnode && vm._isMounted) {\n                vm.$scopedSlots = normalizeScopedSlots(vm.$parent, _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);\n                if (vm._slotsProxy) {\n                    syncSetupSlots(vm._slotsProxy, vm.$scopedSlots);\n                }\n            }\n            // set parent vnode. this allows render functions to have access\n            // to the data on the placeholder node.\n            vm.$vnode = _parentVnode;\n            // render self\n            var vnode;\n            try {\n                // There's no need to maintain a stack because all render fns are called\n                // separately from one another. Nested component's render fns are called\n                // when parent component is patched.\n                setCurrentInstance(vm);\n                currentRenderingInstance = vm;\n                vnode = render.call(vm._renderProxy, vm.$createElement);\n            }\n            catch (e) {\n                handleError(e, vm, \"render\");\n                // return error render result,\n                // or previous vnode to prevent render error causing blank component\n                /* istanbul ignore else */\n                if (vm.$options.renderError) {\n                    try {\n                        vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n                    }\n                    catch (e) {\n                        handleError(e, vm, \"renderError\");\n                        vnode = vm._vnode;\n                    }\n                }\n                else {\n                    vnode = vm._vnode;\n                }\n            }\n            finally {\n                currentRenderingInstance = null;\n                setCurrentInstance();\n            }\n            // if the returned array contains only a single node, allow it\n            if (isArray(vnode) && vnode.length === 1) {\n                vnode = vnode[0];\n            }\n            // return empty vnode in case the render function errored out\n            if (!(vnode instanceof VNode)) {\n                if (isArray(vnode)) {\n                    warn$2('Multiple root nodes returned from render function. Render function ' +\n                        'should return a single root node.', vm);\n                }\n                vnode = createEmptyVNode();\n            }\n            // set parent\n            vnode.parent = _parentVnode;\n            return vnode;\n        };\n    }\n    function ensureCtor(comp, base) {\n        if (comp.__esModule || (hasSymbol && comp[Symbol.toStringTag] === 'Module')) {\n            comp = comp.default;\n        }\n        return isObject(comp) ? base.extend(comp) : comp;\n    }\n    function createAsyncPlaceholder(factory, data, context, children, tag) {\n        var node = createEmptyVNode();\n        node.asyncFactory = factory;\n        node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n        return node;\n    }\n    function resolveAsyncComponent(factory, baseCtor) {\n        if (isTrue(factory.error) && isDef(factory.errorComp)) {\n            return factory.errorComp;\n        }\n        if (isDef(factory.resolved)) {\n            return factory.resolved;\n        }\n        var owner = currentRenderingInstance;\n        if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n            // already pending\n            factory.owners.push(owner);\n        }\n        if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n            return factory.loadingComp;\n        }\n        if (owner && !isDef(factory.owners)) {\n            var owners_1 = (factory.owners = [owner]);\n            var sync_1 = true;\n            var timerLoading_1 = null;\n            var timerTimeout_1 = null;\n            owner.$on('hook:destroyed', function () { return remove$2(owners_1, owner); });\n            var forceRender_1 = function (renderCompleted) {\n                for (var i = 0, l = owners_1.length; i < l; i++) {\n                    owners_1[i].$forceUpdate();\n                }\n                if (renderCompleted) {\n                    owners_1.length = 0;\n                    if (timerLoading_1 !== null) {\n                        clearTimeout(timerLoading_1);\n                        timerLoading_1 = null;\n                    }\n                    if (timerTimeout_1 !== null) {\n                        clearTimeout(timerTimeout_1);\n                        timerTimeout_1 = null;\n                    }\n                }\n            };\n            var resolve = once(function (res) {\n                // cache resolved\n                factory.resolved = ensureCtor(res, baseCtor);\n                // invoke callbacks only if this is not a synchronous resolve\n                // (async resolves are shimmed as synchronous during SSR)\n                if (!sync_1) {\n                    forceRender_1(true);\n                }\n                else {\n                    owners_1.length = 0;\n                }\n            });\n            var reject_1 = once(function (reason) {\n                warn$2(\"Failed to resolve async component: \".concat(String(factory)) +\n                    (reason ? \"\\nReason: \".concat(reason) : ''));\n                if (isDef(factory.errorComp)) {\n                    factory.error = true;\n                    forceRender_1(true);\n                }\n            });\n            var res_1 = factory(resolve, reject_1);\n            if (isObject(res_1)) {\n                if (isPromise(res_1)) {\n                    // () => Promise\n                    if (isUndef(factory.resolved)) {\n                        res_1.then(resolve, reject_1);\n                    }\n                }\n                else if (isPromise(res_1.component)) {\n                    res_1.component.then(resolve, reject_1);\n                    if (isDef(res_1.error)) {\n                        factory.errorComp = ensureCtor(res_1.error, baseCtor);\n                    }\n                    if (isDef(res_1.loading)) {\n                        factory.loadingComp = ensureCtor(res_1.loading, baseCtor);\n                        if (res_1.delay === 0) {\n                            factory.loading = true;\n                        }\n                        else {\n                            // @ts-expect-error NodeJS timeout type\n                            timerLoading_1 = setTimeout(function () {\n                                timerLoading_1 = null;\n                                if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                                    factory.loading = true;\n                                    forceRender_1(false);\n                                }\n                            }, res_1.delay || 200);\n                        }\n                    }\n                    if (isDef(res_1.timeout)) {\n                        // @ts-expect-error NodeJS timeout type\n                        timerTimeout_1 = setTimeout(function () {\n                            timerTimeout_1 = null;\n                            if (isUndef(factory.resolved)) {\n                                reject_1(\"timeout (\".concat(res_1.timeout, \"ms)\"));\n                            }\n                        }, res_1.timeout);\n                    }\n                }\n            }\n            sync_1 = false;\n            // return in case resolved synchronously\n            return factory.loading ? factory.loadingComp : factory.resolved;\n        }\n    }\n    function getFirstComponentChild(children) {\n        if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n                var c = children[i];\n                if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n                    return c;\n                }\n            }\n        }\n    }\n    function initEvents(vm) {\n        vm._events = Object.create(null);\n        vm._hasHookEvent = false;\n        // init parent attached events\n        var listeners = vm.$options._parentListeners;\n        if (listeners) {\n            updateComponentListeners(vm, listeners);\n        }\n    }\n    var target$1;\n    function add$1(event, fn) {\n        target$1.$on(event, fn);\n    }\n    function remove$1(event, fn) {\n        target$1.$off(event, fn);\n    }\n    function createOnceHandler$1(event, fn) {\n        var _target = target$1;\n        return function onceHandler() {\n            var res = fn.apply(null, arguments);\n            if (res !== null) {\n                _target.$off(event, onceHandler);\n            }\n        };\n    }\n    function updateComponentListeners(vm, listeners, oldListeners) {\n        target$1 = vm;\n        updateListeners(listeners, oldListeners || {}, add$1, remove$1, createOnceHandler$1, vm);\n        target$1 = undefined;\n    }\n    function eventsMixin(Vue) {\n        var hookRE = /^hook:/;\n        Vue.prototype.$on = function (event, fn) {\n            var vm = this;\n            if (isArray(event)) {\n                for (var i = 0, l = event.length; i < l; i++) {\n                    vm.$on(event[i], fn);\n                }\n            }\n            else {\n                (vm._events[event] || (vm._events[event] = [])).push(fn);\n                // optimize hook:event cost by using a boolean flag marked at registration\n                // instead of a hash lookup\n                if (hookRE.test(event)) {\n                    vm._hasHookEvent = true;\n                }\n            }\n            return vm;\n        };\n        Vue.prototype.$once = function (event, fn) {\n            var vm = this;\n            function on() {\n                vm.$off(event, on);\n                fn.apply(vm, arguments);\n            }\n            on.fn = fn;\n            vm.$on(event, on);\n            return vm;\n        };\n        Vue.prototype.$off = function (event, fn) {\n            var vm = this;\n            // all\n            if (!arguments.length) {\n                vm._events = Object.create(null);\n                return vm;\n            }\n            // array of events\n            if (isArray(event)) {\n                for (var i_1 = 0, l = event.length; i_1 < l; i_1++) {\n                    vm.$off(event[i_1], fn);\n                }\n                return vm;\n            }\n            // specific event\n            var cbs = vm._events[event];\n            if (!cbs) {\n                return vm;\n            }\n            if (!fn) {\n                vm._events[event] = null;\n                return vm;\n            }\n            // specific handler\n            var cb;\n            var i = cbs.length;\n            while (i--) {\n                cb = cbs[i];\n                if (cb === fn || cb.fn === fn) {\n                    cbs.splice(i, 1);\n                    break;\n                }\n            }\n            return vm;\n        };\n        Vue.prototype.$emit = function (event) {\n            var vm = this;\n            {\n                var lowerCaseEvent = event.toLowerCase();\n                if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n                    tip(\"Event \\\"\".concat(lowerCaseEvent, \"\\\" is emitted in component \") +\n                        \"\".concat(formatComponentName(vm), \" but the handler is registered for \\\"\").concat(event, \"\\\". \") +\n                        \"Note that HTML attributes are case-insensitive and you cannot use \" +\n                        \"v-on to listen to camelCase events when using in-DOM templates. \" +\n                        \"You should probably use \\\"\".concat(hyphenate(event), \"\\\" instead of \\\"\").concat(event, \"\\\".\"));\n                }\n            }\n            var cbs = vm._events[event];\n            if (cbs) {\n                cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n                var args = toArray(arguments, 1);\n                var info = \"event handler for \\\"\".concat(event, \"\\\"\");\n                for (var i = 0, l = cbs.length; i < l; i++) {\n                    invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n                }\n            }\n            return vm;\n        };\n    }\n    var activeEffectScope;\n    var EffectScope = /** @class */ (function () {\n        function EffectScope(detached) {\n            if (detached === void 0) {\n                detached = false;\n            }\n            this.detached = detached;\n            /**\n             * @internal\n             */\n            this.active = true;\n            /**\n             * @internal\n             */\n            this.effects = [];\n            /**\n             * @internal\n             */\n            this.cleanups = [];\n            this.parent = activeEffectScope;\n            if (!detached && activeEffectScope) {\n                this.index =\n                    (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;\n            }\n        }\n        EffectScope.prototype.run = function (fn) {\n            if (this.active) {\n                var currentEffectScope = activeEffectScope;\n                try {\n                    activeEffectScope = this;\n                    return fn();\n                }\n                finally {\n                    activeEffectScope = currentEffectScope;\n                }\n            }\n            else {\n                warn$2(\"cannot run an inactive effect scope.\");\n            }\n        };\n        /**\n         * This should only be called on non-detached scopes\n         * @internal\n         */\n        EffectScope.prototype.on = function () {\n            activeEffectScope = this;\n        };\n        /**\n         * This should only be called on non-detached scopes\n         * @internal\n         */\n        EffectScope.prototype.off = function () {\n            activeEffectScope = this.parent;\n        };\n        EffectScope.prototype.stop = function (fromParent) {\n            if (this.active) {\n                var i = void 0, l = void 0;\n                for (i = 0, l = this.effects.length; i < l; i++) {\n                    this.effects[i].teardown();\n                }\n                for (i = 0, l = this.cleanups.length; i < l; i++) {\n                    this.cleanups[i]();\n                }\n                if (this.scopes) {\n                    for (i = 0, l = this.scopes.length; i < l; i++) {\n                        this.scopes[i].stop(true);\n                    }\n                }\n                // nested scope, dereference from parent to avoid memory leaks\n                if (!this.detached && this.parent && !fromParent) {\n                    // optimized O(1) removal\n                    var last = this.parent.scopes.pop();\n                    if (last && last !== this) {\n                        this.parent.scopes[this.index] = last;\n                        last.index = this.index;\n                    }\n                }\n                this.parent = undefined;\n                this.active = false;\n            }\n        };\n        return EffectScope;\n    }());\n    function effectScope(detached) {\n        return new EffectScope(detached);\n    }\n    /**\n     * @internal\n     */\n    function recordEffectScope(effect, scope) {\n        if (scope === void 0) {\n            scope = activeEffectScope;\n        }\n        if (scope && scope.active) {\n            scope.effects.push(effect);\n        }\n    }\n    function getCurrentScope() {\n        return activeEffectScope;\n    }\n    function onScopeDispose(fn) {\n        if (activeEffectScope) {\n            activeEffectScope.cleanups.push(fn);\n        }\n        else {\n            warn$2(\"onScopeDispose() is called when there is no active effect scope\" +\n                \" to be associated with.\");\n        }\n    }\n    var activeInstance = null;\n    var isUpdatingChildComponent = false;\n    function setActiveInstance(vm) {\n        var prevActiveInstance = activeInstance;\n        activeInstance = vm;\n        return function () {\n            activeInstance = prevActiveInstance;\n        };\n    }\n    function initLifecycle(vm) {\n        var options = vm.$options;\n        // locate first non-abstract parent\n        var parent = options.parent;\n        if (parent && !options.abstract) {\n            while (parent.$options.abstract && parent.$parent) {\n                parent = parent.$parent;\n            }\n            parent.$children.push(vm);\n        }\n        vm.$parent = parent;\n        vm.$root = parent ? parent.$root : vm;\n        vm.$children = [];\n        vm.$refs = {};\n        vm._provided = parent ? parent._provided : Object.create(null);\n        vm._watcher = null;\n        vm._inactive = null;\n        vm._directInactive = false;\n        vm._isMounted = false;\n        vm._isDestroyed = false;\n        vm._isBeingDestroyed = false;\n    }\n    function lifecycleMixin(Vue) {\n        Vue.prototype._update = function (vnode, hydrating) {\n            var vm = this;\n            var prevEl = vm.$el;\n            var prevVnode = vm._vnode;\n            var restoreActiveInstance = setActiveInstance(vm);\n            vm._vnode = vnode;\n            // Vue.prototype.__patch__ is injected in entry points\n            // based on the rendering backend used.\n            if (!prevVnode) {\n                // initial render\n                vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n            }\n            else {\n                // updates\n                vm.$el = vm.__patch__(prevVnode, vnode);\n            }\n            restoreActiveInstance();\n            // update __vue__ reference\n            if (prevEl) {\n                prevEl.__vue__ = null;\n            }\n            if (vm.$el) {\n                vm.$el.__vue__ = vm;\n            }\n            // if parent is an HOC, update its $el as well\n            var wrapper = vm;\n            while (wrapper &&\n                wrapper.$vnode &&\n                wrapper.$parent &&\n                wrapper.$vnode === wrapper.$parent._vnode) {\n                wrapper.$parent.$el = wrapper.$el;\n                wrapper = wrapper.$parent;\n            }\n            // updated hook is called by the scheduler to ensure that children are\n            // updated in a parent's updated hook.\n        };\n        Vue.prototype.$forceUpdate = function () {\n            var vm = this;\n            if (vm._watcher) {\n                vm._watcher.update();\n            }\n        };\n        Vue.prototype.$destroy = function () {\n            var vm = this;\n            if (vm._isBeingDestroyed) {\n                return;\n            }\n            callHook$1(vm, 'beforeDestroy');\n            vm._isBeingDestroyed = true;\n            // remove self from parent\n            var parent = vm.$parent;\n            if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n                remove$2(parent.$children, vm);\n            }\n            // teardown scope. this includes both the render watcher and other\n            // watchers created\n            vm._scope.stop();\n            // remove reference from data ob\n            // frozen object may not have observer.\n            if (vm._data.__ob__) {\n                vm._data.__ob__.vmCount--;\n            }\n            // call the last hook...\n            vm._isDestroyed = true;\n            // invoke destroy hooks on current rendered tree\n            vm.__patch__(vm._vnode, null);\n            // fire destroyed hook\n            callHook$1(vm, 'destroyed');\n            // turn off all instance listeners.\n            vm.$off();\n            // remove __vue__ reference\n            if (vm.$el) {\n                vm.$el.__vue__ = null;\n            }\n            // release circular reference (#6759)\n            if (vm.$vnode) {\n                vm.$vnode.parent = null;\n            }\n        };\n    }\n    function mountComponent(vm, el, hydrating) {\n        vm.$el = el;\n        if (!vm.$options.render) {\n            // @ts-expect-error invalid type\n            vm.$options.render = createEmptyVNode;\n            {\n                /* istanbul ignore if */\n                if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n                    vm.$options.el ||\n                    el) {\n                    warn$2('You are using the runtime-only build of Vue where the template ' +\n                        'compiler is not available. Either pre-compile the templates into ' +\n                        'render functions, or use the compiler-included build.', vm);\n                }\n                else {\n                    warn$2('Failed to mount component: template or render function not defined.', vm);\n                }\n            }\n        }\n        callHook$1(vm, 'beforeMount');\n        var updateComponent;\n        /* istanbul ignore if */\n        if (config.performance && mark) {\n            updateComponent = function () {\n                var name = vm._name;\n                var id = vm._uid;\n                var startTag = \"vue-perf-start:\".concat(id);\n                var endTag = \"vue-perf-end:\".concat(id);\n                mark(startTag);\n                var vnode = vm._render();\n                mark(endTag);\n                measure(\"vue \".concat(name, \" render\"), startTag, endTag);\n                mark(startTag);\n                vm._update(vnode, hydrating);\n                mark(endTag);\n                measure(\"vue \".concat(name, \" patch\"), startTag, endTag);\n            };\n        }\n        else {\n            updateComponent = function () {\n                vm._update(vm._render(), hydrating);\n            };\n        }\n        var watcherOptions = {\n            before: function () {\n                if (vm._isMounted && !vm._isDestroyed) {\n                    callHook$1(vm, 'beforeUpdate');\n                }\n            }\n        };\n        {\n            watcherOptions.onTrack = function (e) { return callHook$1(vm, 'renderTracked', [e]); };\n            watcherOptions.onTrigger = function (e) { return callHook$1(vm, 'renderTriggered', [e]); };\n        }\n        // we set this to vm._watcher inside the watcher's constructor\n        // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n        // component's mounted hook), which relies on vm._watcher being already defined\n        new Watcher(vm, updateComponent, noop, watcherOptions, true /* isRenderWatcher */);\n        hydrating = false;\n        // flush buffer for flush: \"pre\" watchers queued in setup()\n        var preWatchers = vm._preWatchers;\n        if (preWatchers) {\n            for (var i = 0; i < preWatchers.length; i++) {\n                preWatchers[i].run();\n            }\n        }\n        // manually mounted instance, call mounted on self\n        // mounted is called for render-created child components in its inserted hook\n        if (vm.$vnode == null) {\n            vm._isMounted = true;\n            callHook$1(vm, 'mounted');\n        }\n        return vm;\n    }\n    function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {\n        {\n            isUpdatingChildComponent = true;\n        }\n        // determine whether component has slot children\n        // we need to do this before overwriting $options._renderChildren.\n        // check if there are dynamic scopedSlots (hand-written or compiled but with\n        // dynamic slot names). Static scoped slots compiled from template has the\n        // \"$stable\" marker.\n        var newScopedSlots = parentVnode.data.scopedSlots;\n        var oldScopedSlots = vm.$scopedSlots;\n        var hasDynamicScopedSlot = !!((newScopedSlots && !newScopedSlots.$stable) ||\n            (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n            (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||\n            (!newScopedSlots && vm.$scopedSlots.$key));\n        // Any static slot children from the parent may have changed during parent's\n        // update. Dynamic scoped slots may also have changed. In such cases, a forced\n        // update is necessary to ensure correctness.\n        var needsForceUpdate = !!(renderChildren || // has new static slots\n            vm.$options._renderChildren || // has old static slots\n            hasDynamicScopedSlot);\n        var prevVNode = vm.$vnode;\n        vm.$options._parentVnode = parentVnode;\n        vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n        if (vm._vnode) {\n            // update child tree's parent\n            vm._vnode.parent = parentVnode;\n        }\n        vm.$options._renderChildren = renderChildren;\n        // update $attrs and $listeners hash\n        // these are also reactive so they may trigger child update if the child\n        // used them during render\n        var attrs = parentVnode.data.attrs || emptyObject;\n        if (vm._attrsProxy) {\n            // force update if attrs are accessed and has changed since it may be\n            // passed to a child component.\n            if (syncSetupProxy(vm._attrsProxy, attrs, (prevVNode.data && prevVNode.data.attrs) || emptyObject, vm, '$attrs')) {\n                needsForceUpdate = true;\n            }\n        }\n        vm.$attrs = attrs;\n        // update listeners\n        listeners = listeners || emptyObject;\n        var prevListeners = vm.$options._parentListeners;\n        if (vm._listenersProxy) {\n            syncSetupProxy(vm._listenersProxy, listeners, prevListeners || emptyObject, vm, '$listeners');\n        }\n        vm.$listeners = vm.$options._parentListeners = listeners;\n        updateComponentListeners(vm, listeners, prevListeners);\n        // update props\n        if (propsData && vm.$options.props) {\n            toggleObserving(false);\n            var props = vm._props;\n            var propKeys = vm.$options._propKeys || [];\n            for (var i = 0; i < propKeys.length; i++) {\n                var key = propKeys[i];\n                var propOptions = vm.$options.props; // wtf flow?\n                props[key] = validateProp(key, propOptions, propsData, vm);\n            }\n            toggleObserving(true);\n            // keep a copy of raw propsData\n            vm.$options.propsData = propsData;\n        }\n        // resolve slots + force update if has children\n        if (needsForceUpdate) {\n            vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n            vm.$forceUpdate();\n        }\n        {\n            isUpdatingChildComponent = false;\n        }\n    }\n    function isInInactiveTree(vm) {\n        while (vm && (vm = vm.$parent)) {\n            if (vm._inactive)\n                return true;\n        }\n        return false;\n    }\n    function activateChildComponent(vm, direct) {\n        if (direct) {\n            vm._directInactive = false;\n            if (isInInactiveTree(vm)) {\n                return;\n            }\n        }\n        else if (vm._directInactive) {\n            return;\n        }\n        if (vm._inactive || vm._inactive === null) {\n            vm._inactive = false;\n            for (var i = 0; i < vm.$children.length; i++) {\n                activateChildComponent(vm.$children[i]);\n            }\n            callHook$1(vm, 'activated');\n        }\n    }\n    function deactivateChildComponent(vm, direct) {\n        if (direct) {\n            vm._directInactive = true;\n            if (isInInactiveTree(vm)) {\n                return;\n            }\n        }\n        if (!vm._inactive) {\n            vm._inactive = true;\n            for (var i = 0; i < vm.$children.length; i++) {\n                deactivateChildComponent(vm.$children[i]);\n            }\n            callHook$1(vm, 'deactivated');\n        }\n    }\n    function callHook$1(vm, hook, args, setContext) {\n        if (setContext === void 0) {\n            setContext = true;\n        }\n        // #7573 disable dep collection when invoking lifecycle hooks\n        pushTarget();\n        var prevInst = currentInstance;\n        var prevScope = getCurrentScope();\n        setContext && setCurrentInstance(vm);\n        var handlers = vm.$options[hook];\n        var info = \"\".concat(hook, \" hook\");\n        if (handlers) {\n            for (var i = 0, j = handlers.length; i < j; i++) {\n                invokeWithErrorHandling(handlers[i], vm, args || null, vm, info);\n            }\n        }\n        if (vm._hasHookEvent) {\n            vm.$emit('hook:' + hook);\n        }\n        if (setContext) {\n            setCurrentInstance(prevInst);\n            prevScope && prevScope.on();\n        }\n        popTarget();\n    }\n    var MAX_UPDATE_COUNT = 100;\n    var queue = [];\n    var activatedChildren = [];\n    var has = {};\n    var circular = {};\n    var waiting = false;\n    var flushing = false;\n    var index$1 = 0;\n    /**\n     * Reset the scheduler's state.\n     */\n    function resetSchedulerState() {\n        index$1 = queue.length = activatedChildren.length = 0;\n        has = {};\n        {\n            circular = {};\n        }\n        waiting = flushing = false;\n    }\n    // Async edge case #6566 requires saving the timestamp when event listeners are\n    // attached. However, calling performance.now() has a perf overhead especially\n    // if the page has thousands of event listeners. Instead, we take a timestamp\n    // every time the scheduler flushes and use that for all event listeners\n    // attached during that flush.\n    var currentFlushTimestamp = 0;\n    // Async edge case fix requires storing an event listener's attach timestamp.\n    var getNow = Date.now;\n    // Determine what event timestamp the browser is using. Annoyingly, the\n    // timestamp can either be hi-res (relative to page load) or low-res\n    // (relative to UNIX epoch), so in order to compare time we have to use the\n    // same timestamp type when saving the flush timestamp.\n    // All IE versions use low-res event timestamps, and have problematic clock\n    // implementations (#9632)\n    if (inBrowser && !isIE) {\n        var performance_1 = window.performance;\n        if (performance_1 &&\n            typeof performance_1.now === 'function' &&\n            getNow() > document.createEvent('Event').timeStamp) {\n            // if the event timestamp, although evaluated AFTER the Date.now(), is\n            // smaller than it, it means the event is using a hi-res timestamp,\n            // and we need to use the hi-res version for event listener timestamps as\n            // well.\n            getNow = function () { return performance_1.now(); };\n        }\n    }\n    var sortCompareFn = function (a, b) {\n        if (a.post) {\n            if (!b.post)\n                return 1;\n        }\n        else if (b.post) {\n            return -1;\n        }\n        return a.id - b.id;\n    };\n    /**\n     * Flush both queues and run the watchers.\n     */\n    function flushSchedulerQueue() {\n        currentFlushTimestamp = getNow();\n        flushing = true;\n        var watcher, id;\n        // Sort queue before flush.\n        // This ensures that:\n        // 1. Components are updated from parent to child. (because parent is always\n        //    created before the child)\n        // 2. A component's user watchers are run before its render watcher (because\n        //    user watchers are created before the render watcher)\n        // 3. If a component is destroyed during a parent component's watcher run,\n        //    its watchers can be skipped.\n        queue.sort(sortCompareFn);\n        // do not cache length because more watchers might be pushed\n        // as we run existing watchers\n        for (index$1 = 0; index$1 < queue.length; index$1++) {\n            watcher = queue[index$1];\n            if (watcher.before) {\n                watcher.before();\n            }\n            id = watcher.id;\n            has[id] = null;\n            watcher.run();\n            // in dev build, check and stop circular updates.\n            if (has[id] != null) {\n                circular[id] = (circular[id] || 0) + 1;\n                if (circular[id] > MAX_UPDATE_COUNT) {\n                    warn$2('You may have an infinite update loop ' +\n                        (watcher.user\n                            ? \"in watcher with expression \\\"\".concat(watcher.expression, \"\\\"\")\n                            : \"in a component render function.\"), watcher.vm);\n                    break;\n                }\n            }\n        }\n        // keep copies of post queues before resetting state\n        var activatedQueue = activatedChildren.slice();\n        var updatedQueue = queue.slice();\n        resetSchedulerState();\n        // call component updated and activated hooks\n        callActivatedHooks(activatedQueue);\n        callUpdatedHooks(updatedQueue);\n        cleanupDeps();\n        // devtool hook\n        /* istanbul ignore if */\n        if (devtools && config.devtools) {\n            devtools.emit('flush');\n        }\n    }\n    function callUpdatedHooks(queue) {\n        var i = queue.length;\n        while (i--) {\n            var watcher = queue[i];\n            var vm = watcher.vm;\n            if (vm && vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n                callHook$1(vm, 'updated');\n            }\n        }\n    }\n    /**\n     * Queue a kept-alive component that was activated during patch.\n     * The queue will be processed after the entire tree has been patched.\n     */\n    function queueActivatedComponent(vm) {\n        // setting _inactive to false here so that a render function can\n        // rely on checking whether it's in an inactive tree (e.g. router-view)\n        vm._inactive = false;\n        activatedChildren.push(vm);\n    }\n    function callActivatedHooks(queue) {\n        for (var i = 0; i < queue.length; i++) {\n            queue[i]._inactive = true;\n            activateChildComponent(queue[i], true /* true */);\n        }\n    }\n    /**\n     * Push a watcher into the watcher queue.\n     * Jobs with duplicate IDs will be skipped unless it's\n     * pushed when the queue is being flushed.\n     */\n    function queueWatcher(watcher) {\n        var id = watcher.id;\n        if (has[id] != null) {\n            return;\n        }\n        if (watcher === Dep.target && watcher.noRecurse) {\n            return;\n        }\n        has[id] = true;\n        if (!flushing) {\n            queue.push(watcher);\n        }\n        else {\n            // if already flushing, splice the watcher based on its id\n            // if already past its id, it will be run next immediately.\n            var i = queue.length - 1;\n            while (i > index$1 && queue[i].id > watcher.id) {\n                i--;\n            }\n            queue.splice(i + 1, 0, watcher);\n        }\n        // queue the flush\n        if (!waiting) {\n            waiting = true;\n            if (!config.async) {\n                flushSchedulerQueue();\n                return;\n            }\n            nextTick(flushSchedulerQueue);\n        }\n    }\n    var WATCHER = \"watcher\";\n    var WATCHER_CB = \"\".concat(WATCHER, \" callback\");\n    var WATCHER_GETTER = \"\".concat(WATCHER, \" getter\");\n    var WATCHER_CLEANUP = \"\".concat(WATCHER, \" cleanup\");\n    // Simple effect.\n    function watchEffect(effect, options) {\n        return doWatch(effect, null, options);\n    }\n    function watchPostEffect(effect, options) {\n        return doWatch(effect, null, (__assign(__assign({}, options), { flush: 'post' })));\n    }\n    function watchSyncEffect(effect, options) {\n        return doWatch(effect, null, (__assign(__assign({}, options), { flush: 'sync' })));\n    }\n    // initial value for watchers to trigger on undefined initial values\n    var INITIAL_WATCHER_VALUE = {};\n    // implementation\n    function watch(source, cb, options) {\n        if (typeof cb !== 'function') {\n            warn$2(\"`watch(fn, options?)` signature has been moved to a separate API. \" +\n                \"Use `watchEffect(fn, options?)` instead. `watch` now only \" +\n                \"supports `watch(source, cb, options?) signature.\");\n        }\n        return doWatch(source, cb, options);\n    }\n    function doWatch(source, cb, _a) {\n        var _b = _a === void 0 ? emptyObject : _a, immediate = _b.immediate, deep = _b.deep, _c = _b.flush, flush = _c === void 0 ? 'pre' : _c, onTrack = _b.onTrack, onTrigger = _b.onTrigger;\n        if (!cb) {\n            if (immediate !== undefined) {\n                warn$2(\"watch() \\\"immediate\\\" option is only respected when using the \" +\n                    \"watch(source, callback, options?) signature.\");\n            }\n            if (deep !== undefined) {\n                warn$2(\"watch() \\\"deep\\\" option is only respected when using the \" +\n                    \"watch(source, callback, options?) signature.\");\n            }\n        }\n        var warnInvalidSource = function (s) {\n            warn$2(\"Invalid watch source: \".concat(s, \". A watch source can only be a getter/effect \") +\n                \"function, a ref, a reactive object, or an array of these types.\");\n        };\n        var instance = currentInstance;\n        var call = function (fn, type, args) {\n            if (args === void 0) {\n                args = null;\n            }\n            return invokeWithErrorHandling(fn, null, args, instance, type);\n        };\n        var getter;\n        var forceTrigger = false;\n        var isMultiSource = false;\n        if (isRef(source)) {\n            getter = function () { return source.value; };\n            forceTrigger = isShallow(source);\n        }\n        else if (isReactive(source)) {\n            getter = function () {\n                source.__ob__.dep.depend();\n                return source;\n            };\n            deep = true;\n        }\n        else if (isArray(source)) {\n            isMultiSource = true;\n            forceTrigger = source.some(function (s) { return isReactive(s) || isShallow(s); });\n            getter = function () {\n                return source.map(function (s) {\n                    if (isRef(s)) {\n                        return s.value;\n                    }\n                    else if (isReactive(s)) {\n                        return traverse(s);\n                    }\n                    else if (isFunction(s)) {\n                        return call(s, WATCHER_GETTER);\n                    }\n                    else {\n                        warnInvalidSource(s);\n                    }\n                });\n            };\n        }\n        else if (isFunction(source)) {\n            if (cb) {\n                // getter with cb\n                getter = function () { return call(source, WATCHER_GETTER); };\n            }\n            else {\n                // no cb -> simple effect\n                getter = function () {\n                    if (instance && instance._isDestroyed) {\n                        return;\n                    }\n                    if (cleanup) {\n                        cleanup();\n                    }\n                    return call(source, WATCHER, [onCleanup]);\n                };\n            }\n        }\n        else {\n            getter = noop;\n            warnInvalidSource(source);\n        }\n        if (cb && deep) {\n            var baseGetter_1 = getter;\n            getter = function () { return traverse(baseGetter_1()); };\n        }\n        var cleanup;\n        var onCleanup = function (fn) {\n            cleanup = watcher.onStop = function () {\n                call(fn, WATCHER_CLEANUP);\n            };\n        };\n        // in SSR there is no need to setup an actual effect, and it should be noop\n        // unless it's eager\n        if (isServerRendering()) {\n            // we will also not call the invalidate callback (+ runner is not set up)\n            onCleanup = noop;\n            if (!cb) {\n                getter();\n            }\n            else if (immediate) {\n                call(cb, WATCHER_CB, [\n                    getter(),\n                    isMultiSource ? [] : undefined,\n                    onCleanup\n                ]);\n            }\n            return noop;\n        }\n        var watcher = new Watcher(currentInstance, getter, noop, {\n            lazy: true\n        });\n        watcher.noRecurse = !cb;\n        var oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;\n        // overwrite default run\n        watcher.run = function () {\n            if (!watcher.active) {\n                return;\n            }\n            if (cb) {\n                // watch(source, cb)\n                var newValue = watcher.get();\n                if (deep ||\n                    forceTrigger ||\n                    (isMultiSource\n                        ? newValue.some(function (v, i) {\n                            return hasChanged(v, oldValue[i]);\n                        })\n                        : hasChanged(newValue, oldValue))) {\n                    // cleanup before running cb again\n                    if (cleanup) {\n                        cleanup();\n                    }\n                    call(cb, WATCHER_CB, [\n                        newValue,\n                        // pass undefined as the old value when it's changed for the first time\n                        oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,\n                        onCleanup\n                    ]);\n                    oldValue = newValue;\n                }\n            }\n            else {\n                // watchEffect\n                watcher.get();\n            }\n        };\n        if (flush === 'sync') {\n            watcher.update = watcher.run;\n        }\n        else if (flush === 'post') {\n            watcher.post = true;\n            watcher.update = function () { return queueWatcher(watcher); };\n        }\n        else {\n            // pre\n            watcher.update = function () {\n                if (instance && instance === currentInstance && !instance._isMounted) {\n                    // pre-watcher triggered before\n                    var buffer = instance._preWatchers || (instance._preWatchers = []);\n                    if (buffer.indexOf(watcher) < 0)\n                        buffer.push(watcher);\n                }\n                else {\n                    queueWatcher(watcher);\n                }\n            };\n        }\n        {\n            watcher.onTrack = onTrack;\n            watcher.onTrigger = onTrigger;\n        }\n        // initial run\n        if (cb) {\n            if (immediate) {\n                watcher.run();\n            }\n            else {\n                oldValue = watcher.get();\n            }\n        }\n        else if (flush === 'post' && instance) {\n            instance.$once('hook:mounted', function () { return watcher.get(); });\n        }\n        else {\n            watcher.get();\n        }\n        return function () {\n            watcher.teardown();\n        };\n    }\n    function provide(key, value) {\n        if (!currentInstance) {\n            {\n                warn$2(\"provide() can only be used inside setup().\");\n            }\n        }\n        else {\n            // TS doesn't allow symbol as index type\n            resolveProvided(currentInstance)[key] = value;\n        }\n    }\n    function resolveProvided(vm) {\n        // by default an instance inherits its parent's provides object\n        // but when it needs to provide values of its own, it creates its\n        // own provides object using parent provides object as prototype.\n        // this way in `inject` we can simply look up injections from direct\n        // parent and let the prototype chain do the work.\n        var existing = vm._provided;\n        var parentProvides = vm.$parent && vm.$parent._provided;\n        if (parentProvides === existing) {\n            return (vm._provided = Object.create(parentProvides));\n        }\n        else {\n            return existing;\n        }\n    }\n    function inject(key, defaultValue, treatDefaultAsFactory) {\n        if (treatDefaultAsFactory === void 0) {\n            treatDefaultAsFactory = false;\n        }\n        // fallback to `currentRenderingInstance` so that this can be called in\n        // a functional component\n        var instance = currentInstance;\n        if (instance) {\n            // #2400\n            // to support `app.use` plugins,\n            // fallback to appContext's `provides` if the instance is at root\n            var provides = instance.$parent && instance.$parent._provided;\n            if (provides && key in provides) {\n                // TS doesn't allow symbol as index type\n                return provides[key];\n            }\n            else if (arguments.length > 1) {\n                return treatDefaultAsFactory && isFunction(defaultValue)\n                    ? defaultValue.call(instance)\n                    : defaultValue;\n            }\n            else {\n                warn$2(\"injection \\\"\".concat(String(key), \"\\\" not found.\"));\n            }\n        }\n        else {\n            warn$2(\"inject() can only be used inside setup() or functional components.\");\n        }\n    }\n    /**\n     * @internal this function needs manual public type declaration because it relies\n     * on previously manually authored types from Vue 2\n     */\n    function h(type, props, children) {\n        if (!currentInstance) {\n            warn$2(\"globally imported h() can only be invoked when there is an active \" +\n                \"component instance, e.g. synchronously in a component's render or setup function.\");\n        }\n        return createElement$1(currentInstance, type, props, children, 2, true);\n    }\n    function handleError(err, vm, info) {\n        // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n        // See: https://github.com/vuejs/vuex/issues/1505\n        pushTarget();\n        try {\n            if (vm) {\n                var cur = vm;\n                while ((cur = cur.$parent)) {\n                    var hooks = cur.$options.errorCaptured;\n                    if (hooks) {\n                        for (var i = 0; i < hooks.length; i++) {\n                            try {\n                                var capture = hooks[i].call(cur, err, vm, info) === false;\n                                if (capture)\n                                    return;\n                            }\n                            catch (e) {\n                                globalHandleError(e, cur, 'errorCaptured hook');\n                            }\n                        }\n                    }\n                }\n            }\n            globalHandleError(err, vm, info);\n        }\n        finally {\n            popTarget();\n        }\n    }\n    function invokeWithErrorHandling(handler, context, args, vm, info) {\n        var res;\n        try {\n            res = args ? handler.apply(context, args) : handler.call(context);\n            if (res && !res._isVue && isPromise(res) && !res._handled) {\n                res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n                res._handled = true;\n            }\n        }\n        catch (e) {\n            handleError(e, vm, info);\n        }\n        return res;\n    }\n    function globalHandleError(err, vm, info) {\n        if (config.errorHandler) {\n            try {\n                return config.errorHandler.call(null, err, vm, info);\n            }\n            catch (e) {\n                // if the user intentionally throws the original error in the handler,\n                // do not log it twice\n                if (e !== err) {\n                    logError(e, null, 'config.errorHandler');\n                }\n            }\n        }\n        logError(err, vm, info);\n    }\n    function logError(err, vm, info) {\n        {\n            warn$2(\"Error in \".concat(info, \": \\\"\").concat(err.toString(), \"\\\"\"), vm);\n        }\n        /* istanbul ignore else */\n        if (inBrowser && typeof console !== 'undefined') {\n            console.error(err);\n        }\n        else {\n            throw err;\n        }\n    }\n    /* globals MutationObserver */\n    var isUsingMicroTask = false;\n    var callbacks = [];\n    var pending = false;\n    function flushCallbacks() {\n        pending = false;\n        var copies = callbacks.slice(0);\n        callbacks.length = 0;\n        for (var i = 0; i < copies.length; i++) {\n            copies[i]();\n        }\n    }\n    // Here we have async deferring wrappers using microtasks.\n    // In 2.5 we used (macro) tasks (in combination with microtasks).\n    // However, it has subtle problems when state is changed right before repaint\n    // (e.g. #6813, out-in transitions).\n    // Also, using (macro) tasks in event handler would cause some weird behaviors\n    // that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n    // So we now use microtasks everywhere, again.\n    // A major drawback of this tradeoff is that there are some scenarios\n    // where microtasks have too high a priority and fire in between supposedly\n    // sequential events (e.g. #4521, #6690, which have workarounds)\n    // or even between bubbling of the same event (#6566).\n    var timerFunc;\n    // The nextTick behavior leverages the microtask queue, which can be accessed\n    // via either native Promise.then or MutationObserver.\n    // MutationObserver has wider support, however it is seriously bugged in\n    // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n    // completely stops working after triggering a few times... so, if native\n    // Promise is available, we will use it:\n    /* istanbul ignore next, $flow-disable-line */\n    if (typeof Promise !== 'undefined' && isNative(Promise)) {\n        var p_1 = Promise.resolve();\n        timerFunc = function () {\n            p_1.then(flushCallbacks);\n            // In problematic UIWebViews, Promise.then doesn't completely break, but\n            // it can get stuck in a weird state where callbacks are pushed into the\n            // microtask queue but the queue isn't being flushed, until the browser\n            // needs to do some other work, e.g. handle a timer. Therefore we can\n            // \"force\" the microtask queue to be flushed by adding an empty timer.\n            if (isIOS)\n                setTimeout(noop);\n        };\n        isUsingMicroTask = true;\n    }\n    else if (!isIE &&\n        typeof MutationObserver !== 'undefined' &&\n        (isNative(MutationObserver) ||\n            // PhantomJS and iOS 7.x\n            MutationObserver.toString() === '[object MutationObserverConstructor]')) {\n        // Use MutationObserver where native Promise is not available,\n        // e.g. PhantomJS, iOS7, Android 4.4\n        // (#6466 MutationObserver is unreliable in IE11)\n        var counter_1 = 1;\n        var observer = new MutationObserver(flushCallbacks);\n        var textNode_1 = document.createTextNode(String(counter_1));\n        observer.observe(textNode_1, {\n            characterData: true\n        });\n        timerFunc = function () {\n            counter_1 = (counter_1 + 1) % 2;\n            textNode_1.data = String(counter_1);\n        };\n        isUsingMicroTask = true;\n    }\n    else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n        // Fallback to setImmediate.\n        // Technically it leverages the (macro) task queue,\n        // but it is still a better choice than setTimeout.\n        timerFunc = function () {\n            setImmediate(flushCallbacks);\n        };\n    }\n    else {\n        // Fallback to setTimeout.\n        timerFunc = function () {\n            setTimeout(flushCallbacks, 0);\n        };\n    }\n    /**\n     * @internal\n     */\n    function nextTick(cb, ctx) {\n        var _resolve;\n        callbacks.push(function () {\n            if (cb) {\n                try {\n                    cb.call(ctx);\n                }\n                catch (e) {\n                    handleError(e, ctx, 'nextTick');\n                }\n            }\n            else if (_resolve) {\n                _resolve(ctx);\n            }\n        });\n        if (!pending) {\n            pending = true;\n            timerFunc();\n        }\n        // $flow-disable-line\n        if (!cb && typeof Promise !== 'undefined') {\n            return new Promise(function (resolve) {\n                _resolve = resolve;\n            });\n        }\n    }\n    function useCssModule(name) {\n        /* istanbul ignore else */\n        {\n            {\n                warn$2(\"useCssModule() is not supported in the global build.\");\n            }\n            return emptyObject;\n        }\n    }\n    /**\n     * Runtime helper for SFC's CSS variable injection feature.\n     * @private\n     */\n    function useCssVars(getter) {\n        if (!inBrowser && !false)\n            return;\n        var instance = currentInstance;\n        if (!instance) {\n            warn$2(\"useCssVars is called without current active component instance.\");\n            return;\n        }\n        watchPostEffect(function () {\n            var el = instance.$el;\n            var vars = getter(instance, instance._setupProxy);\n            if (el && el.nodeType === 1) {\n                var style = el.style;\n                for (var key in vars) {\n                    style.setProperty(\"--\".concat(key), vars[key]);\n                }\n            }\n        });\n    }\n    /**\n     * v3-compatible async component API.\n     * @internal the type is manually declared in <root>/types/v3-define-async-component.d.ts\n     * because it relies on existing manual types\n     */\n    function defineAsyncComponent(source) {\n        if (isFunction(source)) {\n            source = { loader: source };\n        }\n        var loader = source.loader, loadingComponent = source.loadingComponent, errorComponent = source.errorComponent, _a = source.delay, delay = _a === void 0 ? 200 : _a, timeout = source.timeout, // undefined = never times out\n        _b = source.suspensible, // undefined = never times out\n        suspensible = _b === void 0 ? false : _b, // in Vue 3 default is true\n        userOnError = source.onError;\n        if (suspensible) {\n            warn$2(\"The suspensible option for async components is not supported in Vue2. It is ignored.\");\n        }\n        var pendingRequest = null;\n        var retries = 0;\n        var retry = function () {\n            retries++;\n            pendingRequest = null;\n            return load();\n        };\n        var load = function () {\n            var thisRequest;\n            return (pendingRequest ||\n                (thisRequest = pendingRequest =\n                    loader()\n                        .catch(function (err) {\n                        err = err instanceof Error ? err : new Error(String(err));\n                        if (userOnError) {\n                            return new Promise(function (resolve, reject) {\n                                var userRetry = function () { return resolve(retry()); };\n                                var userFail = function () { return reject(err); };\n                                userOnError(err, userRetry, userFail, retries + 1);\n                            });\n                        }\n                        else {\n                            throw err;\n                        }\n                    })\n                        .then(function (comp) {\n                        if (thisRequest !== pendingRequest && pendingRequest) {\n                            return pendingRequest;\n                        }\n                        if (!comp) {\n                            warn$2(\"Async component loader resolved to undefined. \" +\n                                \"If you are using retry(), make sure to return its return value.\");\n                        }\n                        // interop module default\n                        if (comp &&\n                            (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {\n                            comp = comp.default;\n                        }\n                        if (comp && !isObject(comp) && !isFunction(comp)) {\n                            throw new Error(\"Invalid async component load result: \".concat(comp));\n                        }\n                        return comp;\n                    })));\n        };\n        return function () {\n            var component = load();\n            return {\n                component: component,\n                delay: delay,\n                timeout: timeout,\n                error: errorComponent,\n                loading: loadingComponent\n            };\n        };\n    }\n    function createLifeCycle(hookName) {\n        return function (fn, target) {\n            if (target === void 0) {\n                target = currentInstance;\n            }\n            if (!target) {\n                warn$2(\"\".concat(formatName(hookName), \" is called when there is no active component instance to be \") +\n                    \"associated with. \" +\n                    \"Lifecycle injection APIs can only be used during execution of setup().\");\n                return;\n            }\n            return injectHook(target, hookName, fn);\n        };\n    }\n    function formatName(name) {\n        if (name === 'beforeDestroy') {\n            name = 'beforeUnmount';\n        }\n        else if (name === 'destroyed') {\n            name = 'unmounted';\n        }\n        return \"on\".concat(name[0].toUpperCase() + name.slice(1));\n    }\n    function injectHook(instance, hookName, fn) {\n        var options = instance.$options;\n        options[hookName] = mergeLifecycleHook(options[hookName], fn);\n    }\n    var onBeforeMount = createLifeCycle('beforeMount');\n    var onMounted = createLifeCycle('mounted');\n    var onBeforeUpdate = createLifeCycle('beforeUpdate');\n    var onUpdated = createLifeCycle('updated');\n    var onBeforeUnmount = createLifeCycle('beforeDestroy');\n    var onUnmounted = createLifeCycle('destroyed');\n    var onActivated = createLifeCycle('activated');\n    var onDeactivated = createLifeCycle('deactivated');\n    var onServerPrefetch = createLifeCycle('serverPrefetch');\n    var onRenderTracked = createLifeCycle('renderTracked');\n    var onRenderTriggered = createLifeCycle('renderTriggered');\n    var injectErrorCapturedHook = createLifeCycle('errorCaptured');\n    function onErrorCaptured(hook, target) {\n        if (target === void 0) {\n            target = currentInstance;\n        }\n        injectErrorCapturedHook(hook, target);\n    }\n    /**\n     * Note: also update dist/vue.runtime.mjs when adding new exports to this file.\n     */\n    var version = '2.7.15';\n    /**\n     * @internal type is manually declared in <root>/types/v3-define-component.d.ts\n     */\n    function defineComponent(options) {\n        return options;\n    }\n    var vca = /*#__PURE__*/ Object.freeze({\n        __proto__: null,\n        version: version,\n        defineComponent: defineComponent,\n        ref: ref$1,\n        shallowRef: shallowRef,\n        isRef: isRef,\n        toRef: toRef,\n        toRefs: toRefs,\n        unref: unref,\n        proxyRefs: proxyRefs,\n        customRef: customRef,\n        triggerRef: triggerRef,\n        reactive: reactive,\n        isReactive: isReactive,\n        isReadonly: isReadonly,\n        isShallow: isShallow,\n        isProxy: isProxy,\n        shallowReactive: shallowReactive,\n        markRaw: markRaw,\n        toRaw: toRaw,\n        readonly: readonly,\n        shallowReadonly: shallowReadonly,\n        computed: computed,\n        watch: watch,\n        watchEffect: watchEffect,\n        watchPostEffect: watchPostEffect,\n        watchSyncEffect: watchSyncEffect,\n        EffectScope: EffectScope,\n        effectScope: effectScope,\n        onScopeDispose: onScopeDispose,\n        getCurrentScope: getCurrentScope,\n        provide: provide,\n        inject: inject,\n        h: h,\n        getCurrentInstance: getCurrentInstance,\n        useSlots: useSlots,\n        useAttrs: useAttrs,\n        useListeners: useListeners,\n        mergeDefaults: mergeDefaults,\n        nextTick: nextTick,\n        set: set,\n        del: del,\n        useCssModule: useCssModule,\n        useCssVars: useCssVars,\n        defineAsyncComponent: defineAsyncComponent,\n        onBeforeMount: onBeforeMount,\n        onMounted: onMounted,\n        onBeforeUpdate: onBeforeUpdate,\n        onUpdated: onUpdated,\n        onBeforeUnmount: onBeforeUnmount,\n        onUnmounted: onUnmounted,\n        onActivated: onActivated,\n        onDeactivated: onDeactivated,\n        onServerPrefetch: onServerPrefetch,\n        onRenderTracked: onRenderTracked,\n        onRenderTriggered: onRenderTriggered,\n        onErrorCaptured: onErrorCaptured\n    });\n    var seenObjects = new _Set();\n    /**\n     * Recursively traverse an object to evoke all converted\n     * getters, so that every nested property inside the object\n     * is collected as a \"deep\" dependency.\n     */\n    function traverse(val) {\n        _traverse(val, seenObjects);\n        seenObjects.clear();\n        return val;\n    }\n    function _traverse(val, seen) {\n        var i, keys;\n        var isA = isArray(val);\n        if ((!isA && !isObject(val)) ||\n            val.__v_skip /* ReactiveFlags.SKIP */ ||\n            Object.isFrozen(val) ||\n            val instanceof VNode) {\n            return;\n        }\n        if (val.__ob__) {\n            var depId = val.__ob__.dep.id;\n            if (seen.has(depId)) {\n                return;\n            }\n            seen.add(depId);\n        }\n        if (isA) {\n            i = val.length;\n            while (i--)\n                _traverse(val[i], seen);\n        }\n        else if (isRef(val)) {\n            _traverse(val.value, seen);\n        }\n        else {\n            keys = Object.keys(val);\n            i = keys.length;\n            while (i--)\n                _traverse(val[keys[i]], seen);\n        }\n    }\n    var uid$1 = 0;\n    /**\n     * A watcher parses an expression, collects dependencies,\n     * and fires callback when the expression value changes.\n     * This is used for both the $watch() api and directives.\n     * @internal\n     */\n    var Watcher = /** @class */ (function () {\n        function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {\n            recordEffectScope(this, \n            // if the active effect scope is manually created (not a component scope),\n            // prioritize it\n            activeEffectScope && !activeEffectScope._vm\n                ? activeEffectScope\n                : vm\n                    ? vm._scope\n                    : undefined);\n            if ((this.vm = vm) && isRenderWatcher) {\n                vm._watcher = this;\n            }\n            // options\n            if (options) {\n                this.deep = !!options.deep;\n                this.user = !!options.user;\n                this.lazy = !!options.lazy;\n                this.sync = !!options.sync;\n                this.before = options.before;\n                {\n                    this.onTrack = options.onTrack;\n                    this.onTrigger = options.onTrigger;\n                }\n            }\n            else {\n                this.deep = this.user = this.lazy = this.sync = false;\n            }\n            this.cb = cb;\n            this.id = ++uid$1; // uid for batching\n            this.active = true;\n            this.post = false;\n            this.dirty = this.lazy; // for lazy watchers\n            this.deps = [];\n            this.newDeps = [];\n            this.depIds = new _Set();\n            this.newDepIds = new _Set();\n            this.expression = expOrFn.toString();\n            // parse expression for getter\n            if (isFunction(expOrFn)) {\n                this.getter = expOrFn;\n            }\n            else {\n                this.getter = parsePath(expOrFn);\n                if (!this.getter) {\n                    this.getter = noop;\n                    warn$2(\"Failed watching path: \\\"\".concat(expOrFn, \"\\\" \") +\n                        'Watcher only accepts simple dot-delimited paths. ' +\n                        'For full control, use a function instead.', vm);\n                }\n            }\n            this.value = this.lazy ? undefined : this.get();\n        }\n        /**\n         * Evaluate the getter, and re-collect dependencies.\n         */\n        Watcher.prototype.get = function () {\n            pushTarget(this);\n            var value;\n            var vm = this.vm;\n            try {\n                value = this.getter.call(vm, vm);\n            }\n            catch (e) {\n                if (this.user) {\n                    handleError(e, vm, \"getter for watcher \\\"\".concat(this.expression, \"\\\"\"));\n                }\n                else {\n                    throw e;\n                }\n            }\n            finally {\n                // \"touch\" every property so they are all tracked as\n                // dependencies for deep watching\n                if (this.deep) {\n                    traverse(value);\n                }\n                popTarget();\n                this.cleanupDeps();\n            }\n            return value;\n        };\n        /**\n         * Add a dependency to this directive.\n         */\n        Watcher.prototype.addDep = function (dep) {\n            var id = dep.id;\n            if (!this.newDepIds.has(id)) {\n                this.newDepIds.add(id);\n                this.newDeps.push(dep);\n                if (!this.depIds.has(id)) {\n                    dep.addSub(this);\n                }\n            }\n        };\n        /**\n         * Clean up for dependency collection.\n         */\n        Watcher.prototype.cleanupDeps = function () {\n            var i = this.deps.length;\n            while (i--) {\n                var dep = this.deps[i];\n                if (!this.newDepIds.has(dep.id)) {\n                    dep.removeSub(this);\n                }\n            }\n            var tmp = this.depIds;\n            this.depIds = this.newDepIds;\n            this.newDepIds = tmp;\n            this.newDepIds.clear();\n            tmp = this.deps;\n            this.deps = this.newDeps;\n            this.newDeps = tmp;\n            this.newDeps.length = 0;\n        };\n        /**\n         * Subscriber interface.\n         * Will be called when a dependency changes.\n         */\n        Watcher.prototype.update = function () {\n            /* istanbul ignore else */\n            if (this.lazy) {\n                this.dirty = true;\n            }\n            else if (this.sync) {\n                this.run();\n            }\n            else {\n                queueWatcher(this);\n            }\n        };\n        /**\n         * Scheduler job interface.\n         * Will be called by the scheduler.\n         */\n        Watcher.prototype.run = function () {\n            if (this.active) {\n                var value = this.get();\n                if (value !== this.value ||\n                    // Deep watchers and watchers on Object/Arrays should fire even\n                    // when the value is the same, because the value may\n                    // have mutated.\n                    isObject(value) ||\n                    this.deep) {\n                    // set new value\n                    var oldValue = this.value;\n                    this.value = value;\n                    if (this.user) {\n                        var info = \"callback for watcher \\\"\".concat(this.expression, \"\\\"\");\n                        invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);\n                    }\n                    else {\n                        this.cb.call(this.vm, value, oldValue);\n                    }\n                }\n            }\n        };\n        /**\n         * Evaluate the value of the watcher.\n         * This only gets called for lazy watchers.\n         */\n        Watcher.prototype.evaluate = function () {\n            this.value = this.get();\n            this.dirty = false;\n        };\n        /**\n         * Depend on all deps collected by this watcher.\n         */\n        Watcher.prototype.depend = function () {\n            var i = this.deps.length;\n            while (i--) {\n                this.deps[i].depend();\n            }\n        };\n        /**\n         * Remove self from all dependencies' subscriber list.\n         */\n        Watcher.prototype.teardown = function () {\n            if (this.vm && !this.vm._isBeingDestroyed) {\n                remove$2(this.vm._scope.effects, this);\n            }\n            if (this.active) {\n                var i = this.deps.length;\n                while (i--) {\n                    this.deps[i].removeSub(this);\n                }\n                this.active = false;\n                if (this.onStop) {\n                    this.onStop();\n                }\n            }\n        };\n        return Watcher;\n    }());\n    var sharedPropertyDefinition = {\n        enumerable: true,\n        configurable: true,\n        get: noop,\n        set: noop\n    };\n    function proxy(target, sourceKey, key) {\n        sharedPropertyDefinition.get = function proxyGetter() {\n            return this[sourceKey][key];\n        };\n        sharedPropertyDefinition.set = function proxySetter(val) {\n            this[sourceKey][key] = val;\n        };\n        Object.defineProperty(target, key, sharedPropertyDefinition);\n    }\n    function initState(vm) {\n        var opts = vm.$options;\n        if (opts.props)\n            initProps$1(vm, opts.props);\n        // Composition API\n        initSetup(vm);\n        if (opts.methods)\n            initMethods(vm, opts.methods);\n        if (opts.data) {\n            initData(vm);\n        }\n        else {\n            var ob = observe((vm._data = {}));\n            ob && ob.vmCount++;\n        }\n        if (opts.computed)\n            initComputed$1(vm, opts.computed);\n        if (opts.watch && opts.watch !== nativeWatch) {\n            initWatch(vm, opts.watch);\n        }\n    }\n    function initProps$1(vm, propsOptions) {\n        var propsData = vm.$options.propsData || {};\n        var props = (vm._props = shallowReactive({}));\n        // cache prop keys so that future props updates can iterate using Array\n        // instead of dynamic object key enumeration.\n        var keys = (vm.$options._propKeys = []);\n        var isRoot = !vm.$parent;\n        // root instance props should be converted\n        if (!isRoot) {\n            toggleObserving(false);\n        }\n        var _loop_1 = function (key) {\n            keys.push(key);\n            var value = validateProp(key, propsOptions, propsData, vm);\n            /* istanbul ignore else */\n            {\n                var hyphenatedKey = hyphenate(key);\n                if (isReservedAttribute(hyphenatedKey) ||\n                    config.isReservedAttr(hyphenatedKey)) {\n                    warn$2(\"\\\"\".concat(hyphenatedKey, \"\\\" is a reserved attribute and cannot be used as component prop.\"), vm);\n                }\n                defineReactive(props, key, value, function () {\n                    if (!isRoot && !isUpdatingChildComponent) {\n                        warn$2(\"Avoid mutating a prop directly since the value will be \" +\n                            \"overwritten whenever the parent component re-renders. \" +\n                            \"Instead, use a data or computed property based on the prop's \" +\n                            \"value. Prop being mutated: \\\"\".concat(key, \"\\\"\"), vm);\n                    }\n                });\n            }\n            // static props are already proxied on the component's prototype\n            // during Vue.extend(). We only need to proxy props defined at\n            // instantiation here.\n            if (!(key in vm)) {\n                proxy(vm, \"_props\", key);\n            }\n        };\n        for (var key in propsOptions) {\n            _loop_1(key);\n        }\n        toggleObserving(true);\n    }\n    function initData(vm) {\n        var data = vm.$options.data;\n        data = vm._data = isFunction(data) ? getData(data, vm) : data || {};\n        if (!isPlainObject(data)) {\n            data = {};\n            warn$2('data functions should return an object:\\n' +\n                'https://v2.vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);\n        }\n        // proxy data on instance\n        var keys = Object.keys(data);\n        var props = vm.$options.props;\n        var methods = vm.$options.methods;\n        var i = keys.length;\n        while (i--) {\n            var key = keys[i];\n            {\n                if (methods && hasOwn(methods, key)) {\n                    warn$2(\"Method \\\"\".concat(key, \"\\\" has already been defined as a data property.\"), vm);\n                }\n            }\n            if (props && hasOwn(props, key)) {\n                warn$2(\"The data property \\\"\".concat(key, \"\\\" is already declared as a prop. \") +\n                    \"Use prop default value instead.\", vm);\n            }\n            else if (!isReserved(key)) {\n                proxy(vm, \"_data\", key);\n            }\n        }\n        // observe data\n        var ob = observe(data);\n        ob && ob.vmCount++;\n    }\n    function getData(data, vm) {\n        // #7573 disable dep collection when invoking data getters\n        pushTarget();\n        try {\n            return data.call(vm, vm);\n        }\n        catch (e) {\n            handleError(e, vm, \"data()\");\n            return {};\n        }\n        finally {\n            popTarget();\n        }\n    }\n    var computedWatcherOptions = { lazy: true };\n    function initComputed$1(vm, computed) {\n        // $flow-disable-line\n        var watchers = (vm._computedWatchers = Object.create(null));\n        // computed properties are just getters during SSR\n        var isSSR = isServerRendering();\n        for (var key in computed) {\n            var userDef = computed[key];\n            var getter = isFunction(userDef) ? userDef : userDef.get;\n            if (getter == null) {\n                warn$2(\"Getter is missing for computed property \\\"\".concat(key, \"\\\".\"), vm);\n            }\n            if (!isSSR) {\n                // create internal watcher for the computed property.\n                watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);\n            }\n            // component-defined computed properties are already defined on the\n            // component prototype. We only need to define computed properties defined\n            // at instantiation here.\n            if (!(key in vm)) {\n                defineComputed(vm, key, userDef);\n            }\n            else {\n                if (key in vm.$data) {\n                    warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined in data.\"), vm);\n                }\n                else if (vm.$options.props && key in vm.$options.props) {\n                    warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined as a prop.\"), vm);\n                }\n                else if (vm.$options.methods && key in vm.$options.methods) {\n                    warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined as a method.\"), vm);\n                }\n            }\n        }\n    }\n    function defineComputed(target, key, userDef) {\n        var shouldCache = !isServerRendering();\n        if (isFunction(userDef)) {\n            sharedPropertyDefinition.get = shouldCache\n                ? createComputedGetter(key)\n                : createGetterInvoker(userDef);\n            sharedPropertyDefinition.set = noop;\n        }\n        else {\n            sharedPropertyDefinition.get = userDef.get\n                ? shouldCache && userDef.cache !== false\n                    ? createComputedGetter(key)\n                    : createGetterInvoker(userDef.get)\n                : noop;\n            sharedPropertyDefinition.set = userDef.set || noop;\n        }\n        if (sharedPropertyDefinition.set === noop) {\n            sharedPropertyDefinition.set = function () {\n                warn$2(\"Computed property \\\"\".concat(key, \"\\\" was assigned to but it has no setter.\"), this);\n            };\n        }\n        Object.defineProperty(target, key, sharedPropertyDefinition);\n    }\n    function createComputedGetter(key) {\n        return function computedGetter() {\n            var watcher = this._computedWatchers && this._computedWatchers[key];\n            if (watcher) {\n                if (watcher.dirty) {\n                    watcher.evaluate();\n                }\n                if (Dep.target) {\n                    if (Dep.target.onTrack) {\n                        Dep.target.onTrack({\n                            effect: Dep.target,\n                            target: this,\n                            type: \"get\" /* TrackOpTypes.GET */,\n                            key: key\n                        });\n                    }\n                    watcher.depend();\n                }\n                return watcher.value;\n            }\n        };\n    }\n    function createGetterInvoker(fn) {\n        return function computedGetter() {\n            return fn.call(this, this);\n        };\n    }\n    function initMethods(vm, methods) {\n        var props = vm.$options.props;\n        for (var key in methods) {\n            {\n                if (typeof methods[key] !== 'function') {\n                    warn$2(\"Method \\\"\".concat(key, \"\\\" has type \\\"\").concat(typeof methods[key], \"\\\" in the component definition. \") +\n                        \"Did you reference the function correctly?\", vm);\n                }\n                if (props && hasOwn(props, key)) {\n                    warn$2(\"Method \\\"\".concat(key, \"\\\" has already been defined as a prop.\"), vm);\n                }\n                if (key in vm && isReserved(key)) {\n                    warn$2(\"Method \\\"\".concat(key, \"\\\" conflicts with an existing Vue instance method. \") +\n                        \"Avoid defining component methods that start with _ or $.\");\n                }\n            }\n            vm[key] = typeof methods[key] !== 'function' ? noop : bind$1(methods[key], vm);\n        }\n    }\n    function initWatch(vm, watch) {\n        for (var key in watch) {\n            var handler = watch[key];\n            if (isArray(handler)) {\n                for (var i = 0; i < handler.length; i++) {\n                    createWatcher(vm, key, handler[i]);\n                }\n            }\n            else {\n                createWatcher(vm, key, handler);\n            }\n        }\n    }\n    function createWatcher(vm, expOrFn, handler, options) {\n        if (isPlainObject(handler)) {\n            options = handler;\n            handler = handler.handler;\n        }\n        if (typeof handler === 'string') {\n            handler = vm[handler];\n        }\n        return vm.$watch(expOrFn, handler, options);\n    }\n    function stateMixin(Vue) {\n        // flow somehow has problems with directly declared definition object\n        // when using Object.defineProperty, so we have to procedurally build up\n        // the object here.\n        var dataDef = {};\n        dataDef.get = function () {\n            return this._data;\n        };\n        var propsDef = {};\n        propsDef.get = function () {\n            return this._props;\n        };\n        {\n            dataDef.set = function () {\n                warn$2('Avoid replacing instance root $data. ' +\n                    'Use nested data properties instead.', this);\n            };\n            propsDef.set = function () {\n                warn$2(\"$props is readonly.\", this);\n            };\n        }\n        Object.defineProperty(Vue.prototype, '$data', dataDef);\n        Object.defineProperty(Vue.prototype, '$props', propsDef);\n        Vue.prototype.$set = set;\n        Vue.prototype.$delete = del;\n        Vue.prototype.$watch = function (expOrFn, cb, options) {\n            var vm = this;\n            if (isPlainObject(cb)) {\n                return createWatcher(vm, expOrFn, cb, options);\n            }\n            options = options || {};\n            options.user = true;\n            var watcher = new Watcher(vm, expOrFn, cb, options);\n            if (options.immediate) {\n                var info = \"callback for immediate watcher \\\"\".concat(watcher.expression, \"\\\"\");\n                pushTarget();\n                invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);\n                popTarget();\n            }\n            return function unwatchFn() {\n                watcher.teardown();\n            };\n        };\n    }\n    function initProvide(vm) {\n        var provideOption = vm.$options.provide;\n        if (provideOption) {\n            var provided = isFunction(provideOption)\n                ? provideOption.call(vm)\n                : provideOption;\n            if (!isObject(provided)) {\n                return;\n            }\n            var source = resolveProvided(vm);\n            // IE9 doesn't support Object.getOwnPropertyDescriptors so we have to\n            // iterate the keys ourselves.\n            var keys = hasSymbol ? Reflect.ownKeys(provided) : Object.keys(provided);\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                Object.defineProperty(source, key, Object.getOwnPropertyDescriptor(provided, key));\n            }\n        }\n    }\n    function initInjections(vm) {\n        var result = resolveInject(vm.$options.inject, vm);\n        if (result) {\n            toggleObserving(false);\n            Object.keys(result).forEach(function (key) {\n                /* istanbul ignore else */\n                {\n                    defineReactive(vm, key, result[key], function () {\n                        warn$2(\"Avoid mutating an injected value directly since the changes will be \" +\n                            \"overwritten whenever the provided component re-renders. \" +\n                            \"injection being mutated: \\\"\".concat(key, \"\\\"\"), vm);\n                    });\n                }\n            });\n            toggleObserving(true);\n        }\n    }\n    function resolveInject(inject, vm) {\n        if (inject) {\n            // inject is :any because flow is not smart enough to figure out cached\n            var result = Object.create(null);\n            var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                // #6574 in case the inject object is observed...\n                if (key === '__ob__')\n                    continue;\n                var provideKey = inject[key].from;\n                if (provideKey in vm._provided) {\n                    result[key] = vm._provided[provideKey];\n                }\n                else if ('default' in inject[key]) {\n                    var provideDefault = inject[key].default;\n                    result[key] = isFunction(provideDefault)\n                        ? provideDefault.call(vm)\n                        : provideDefault;\n                }\n                else {\n                    warn$2(\"Injection \\\"\".concat(key, \"\\\" not found\"), vm);\n                }\n            }\n            return result;\n        }\n    }\n    var uid = 0;\n    function initMixin$1(Vue) {\n        Vue.prototype._init = function (options) {\n            var vm = this;\n            // a uid\n            vm._uid = uid++;\n            var startTag, endTag;\n            /* istanbul ignore if */\n            if (config.performance && mark) {\n                startTag = \"vue-perf-start:\".concat(vm._uid);\n                endTag = \"vue-perf-end:\".concat(vm._uid);\n                mark(startTag);\n            }\n            // a flag to mark this as a Vue instance without having to do instanceof\n            // check\n            vm._isVue = true;\n            // avoid instances from being observed\n            vm.__v_skip = true;\n            // effect scope\n            vm._scope = new EffectScope(true /* detached */);\n            vm._scope._vm = true;\n            // merge options\n            if (options && options._isComponent) {\n                // optimize internal component instantiation\n                // since dynamic options merging is pretty slow, and none of the\n                // internal component options needs special treatment.\n                initInternalComponent(vm, options);\n            }\n            else {\n                vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);\n            }\n            /* istanbul ignore else */\n            {\n                initProxy(vm);\n            }\n            // expose real self\n            vm._self = vm;\n            initLifecycle(vm);\n            initEvents(vm);\n            initRender(vm);\n            callHook$1(vm, 'beforeCreate', undefined, false /* setContext */);\n            initInjections(vm); // resolve injections before data/props\n            initState(vm);\n            initProvide(vm); // resolve provide after data/props\n            callHook$1(vm, 'created');\n            /* istanbul ignore if */\n            if (config.performance && mark) {\n                vm._name = formatComponentName(vm, false);\n                mark(endTag);\n                measure(\"vue \".concat(vm._name, \" init\"), startTag, endTag);\n            }\n            if (vm.$options.el) {\n                vm.$mount(vm.$options.el);\n            }\n        };\n    }\n    function initInternalComponent(vm, options) {\n        var opts = (vm.$options = Object.create(vm.constructor.options));\n        // doing this because it's faster than dynamic enumeration.\n        var parentVnode = options._parentVnode;\n        opts.parent = options.parent;\n        opts._parentVnode = parentVnode;\n        var vnodeComponentOptions = parentVnode.componentOptions;\n        opts.propsData = vnodeComponentOptions.propsData;\n        opts._parentListeners = vnodeComponentOptions.listeners;\n        opts._renderChildren = vnodeComponentOptions.children;\n        opts._componentTag = vnodeComponentOptions.tag;\n        if (options.render) {\n            opts.render = options.render;\n            opts.staticRenderFns = options.staticRenderFns;\n        }\n    }\n    function resolveConstructorOptions(Ctor) {\n        var options = Ctor.options;\n        if (Ctor.super) {\n            var superOptions = resolveConstructorOptions(Ctor.super);\n            var cachedSuperOptions = Ctor.superOptions;\n            if (superOptions !== cachedSuperOptions) {\n                // super option changed,\n                // need to resolve new options.\n                Ctor.superOptions = superOptions;\n                // check if there are any late-modified/attached options (#4976)\n                var modifiedOptions = resolveModifiedOptions(Ctor);\n                // update base extend options\n                if (modifiedOptions) {\n                    extend(Ctor.extendOptions, modifiedOptions);\n                }\n                options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n                if (options.name) {\n                    options.components[options.name] = Ctor;\n                }\n            }\n        }\n        return options;\n    }\n    function resolveModifiedOptions(Ctor) {\n        var modified;\n        var latest = Ctor.options;\n        var sealed = Ctor.sealedOptions;\n        for (var key in latest) {\n            if (latest[key] !== sealed[key]) {\n                if (!modified)\n                    modified = {};\n                modified[key] = latest[key];\n            }\n        }\n        return modified;\n    }\n    function FunctionalRenderContext(data, props, children, parent, Ctor) {\n        var _this = this;\n        var options = Ctor.options;\n        // ensure the createElement function in functional components\n        // gets a unique context - this is necessary for correct named slot check\n        var contextVm;\n        if (hasOwn(parent, '_uid')) {\n            contextVm = Object.create(parent);\n            contextVm._original = parent;\n        }\n        else {\n            // the context vm passed in is a functional context as well.\n            // in this case we want to make sure we are able to get a hold to the\n            // real context instance.\n            contextVm = parent;\n            // @ts-ignore\n            parent = parent._original;\n        }\n        var isCompiled = isTrue(options._compiled);\n        var needNormalization = !isCompiled;\n        this.data = data;\n        this.props = props;\n        this.children = children;\n        this.parent = parent;\n        this.listeners = data.on || emptyObject;\n        this.injections = resolveInject(options.inject, parent);\n        this.slots = function () {\n            if (!_this.$slots) {\n                normalizeScopedSlots(parent, data.scopedSlots, (_this.$slots = resolveSlots(children, parent)));\n            }\n            return _this.$slots;\n        };\n        Object.defineProperty(this, 'scopedSlots', {\n            enumerable: true,\n            get: function () {\n                return normalizeScopedSlots(parent, data.scopedSlots, this.slots());\n            }\n        });\n        // support for compiled functional template\n        if (isCompiled) {\n            // exposing $options for renderStatic()\n            this.$options = options;\n            // pre-resolve slots for renderSlot()\n            this.$slots = this.slots();\n            this.$scopedSlots = normalizeScopedSlots(parent, data.scopedSlots, this.$slots);\n        }\n        if (options._scopeId) {\n            this._c = function (a, b, c, d) {\n                var vnode = createElement$1(contextVm, a, b, c, d, needNormalization);\n                if (vnode && !isArray(vnode)) {\n                    vnode.fnScopeId = options._scopeId;\n                    vnode.fnContext = parent;\n                }\n                return vnode;\n            };\n        }\n        else {\n            this._c = function (a, b, c, d) {\n                return createElement$1(contextVm, a, b, c, d, needNormalization);\n            };\n        }\n    }\n    installRenderHelpers(FunctionalRenderContext.prototype);\n    function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {\n        var options = Ctor.options;\n        var props = {};\n        var propOptions = options.props;\n        if (isDef(propOptions)) {\n            for (var key in propOptions) {\n                props[key] = validateProp(key, propOptions, propsData || emptyObject);\n            }\n        }\n        else {\n            if (isDef(data.attrs))\n                mergeProps(props, data.attrs);\n            if (isDef(data.props))\n                mergeProps(props, data.props);\n        }\n        var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);\n        var vnode = options.render.call(null, renderContext._c, renderContext);\n        if (vnode instanceof VNode) {\n            return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);\n        }\n        else if (isArray(vnode)) {\n            var vnodes = normalizeChildren(vnode) || [];\n            var res = new Array(vnodes.length);\n            for (var i = 0; i < vnodes.length; i++) {\n                res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n            }\n            return res;\n        }\n    }\n    function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {\n        // #7817 clone node before setting fnContext, otherwise if the node is reused\n        // (e.g. it was from a cached normal slot) the fnContext causes named slots\n        // that should not be matched to match.\n        var clone = cloneVNode(vnode);\n        clone.fnContext = contextVm;\n        clone.fnOptions = options;\n        {\n            (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext =\n                renderContext;\n        }\n        if (data.slot) {\n            (clone.data || (clone.data = {})).slot = data.slot;\n        }\n        return clone;\n    }\n    function mergeProps(to, from) {\n        for (var key in from) {\n            to[camelize(key)] = from[key];\n        }\n    }\n    function getComponentName(options) {\n        return options.name || options.__name || options._componentTag;\n    }\n    // inline hooks to be invoked on component VNodes during patch\n    var componentVNodeHooks = {\n        init: function (vnode, hydrating) {\n            if (vnode.componentInstance &&\n                !vnode.componentInstance._isDestroyed &&\n                vnode.data.keepAlive) {\n                // kept-alive components, treat as a patch\n                var mountedNode = vnode; // work around flow\n                componentVNodeHooks.prepatch(mountedNode, mountedNode);\n            }\n            else {\n                var child = (vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance));\n                child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n            }\n        },\n        prepatch: function (oldVnode, vnode) {\n            var options = vnode.componentOptions;\n            var child = (vnode.componentInstance = oldVnode.componentInstance);\n            updateChildComponent(child, options.propsData, // updated props\n            options.listeners, // updated listeners\n            vnode, // new parent vnode\n            options.children // new children\n            );\n        },\n        insert: function (vnode) {\n            var context = vnode.context, componentInstance = vnode.componentInstance;\n            if (!componentInstance._isMounted) {\n                componentInstance._isMounted = true;\n                callHook$1(componentInstance, 'mounted');\n            }\n            if (vnode.data.keepAlive) {\n                if (context._isMounted) {\n                    // vue-router#1212\n                    // During updates, a kept-alive component's child components may\n                    // change, so directly walking the tree here may call activated hooks\n                    // on incorrect children. Instead we push them into a queue which will\n                    // be processed after the whole patch process ended.\n                    queueActivatedComponent(componentInstance);\n                }\n                else {\n                    activateChildComponent(componentInstance, true /* direct */);\n                }\n            }\n        },\n        destroy: function (vnode) {\n            var componentInstance = vnode.componentInstance;\n            if (!componentInstance._isDestroyed) {\n                if (!vnode.data.keepAlive) {\n                    componentInstance.$destroy();\n                }\n                else {\n                    deactivateChildComponent(componentInstance, true /* direct */);\n                }\n            }\n        }\n    };\n    var hooksToMerge = Object.keys(componentVNodeHooks);\n    function createComponent(Ctor, data, context, children, tag) {\n        if (isUndef(Ctor)) {\n            return;\n        }\n        var baseCtor = context.$options._base;\n        // plain options object: turn it into a constructor\n        if (isObject(Ctor)) {\n            Ctor = baseCtor.extend(Ctor);\n        }\n        // if at this stage it's not a constructor or an async component factory,\n        // reject.\n        if (typeof Ctor !== 'function') {\n            {\n                warn$2(\"Invalid Component definition: \".concat(String(Ctor)), context);\n            }\n            return;\n        }\n        // async component\n        var asyncFactory;\n        // @ts-expect-error\n        if (isUndef(Ctor.cid)) {\n            asyncFactory = Ctor;\n            Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n            if (Ctor === undefined) {\n                // return a placeholder node for async component, which is rendered\n                // as a comment node but preserves all the raw information for the node.\n                // the information will be used for async server-rendering and hydration.\n                return createAsyncPlaceholder(asyncFactory, data, context, children, tag);\n            }\n        }\n        data = data || {};\n        // resolve constructor options in case global mixins are applied after\n        // component constructor creation\n        resolveConstructorOptions(Ctor);\n        // transform component v-model data into props & events\n        if (isDef(data.model)) {\n            // @ts-expect-error\n            transformModel(Ctor.options, data);\n        }\n        // extract props\n        // @ts-expect-error\n        var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n        // functional component\n        // @ts-expect-error\n        if (isTrue(Ctor.options.functional)) {\n            return createFunctionalComponent(Ctor, propsData, data, context, children);\n        }\n        // extract listeners, since these needs to be treated as\n        // child component listeners instead of DOM listeners\n        var listeners = data.on;\n        // replace with listeners with .native modifier\n        // so it gets processed during parent component patch.\n        data.on = data.nativeOn;\n        // @ts-expect-error\n        if (isTrue(Ctor.options.abstract)) {\n            // abstract components do not keep anything\n            // other than props & listeners & slot\n            // work around flow\n            var slot = data.slot;\n            data = {};\n            if (slot) {\n                data.slot = slot;\n            }\n        }\n        // install component management hooks onto the placeholder node\n        installComponentHooks(data);\n        // return a placeholder vnode\n        // @ts-expect-error\n        var name = getComponentName(Ctor.options) || tag;\n        var vnode = new VNode(\n        // @ts-expect-error\n        \"vue-component-\".concat(Ctor.cid).concat(name ? \"-\".concat(name) : ''), data, undefined, undefined, undefined, context, \n        // @ts-expect-error\n        { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);\n        return vnode;\n    }\n    function createComponentInstanceForVnode(\n    // we know it's MountedComponentVNode but flow doesn't\n    vnode, \n    // activeInstance in lifecycle state\n    parent) {\n        var options = {\n            _isComponent: true,\n            _parentVnode: vnode,\n            parent: parent\n        };\n        // check inline-template render functions\n        var inlineTemplate = vnode.data.inlineTemplate;\n        if (isDef(inlineTemplate)) {\n            options.render = inlineTemplate.render;\n            options.staticRenderFns = inlineTemplate.staticRenderFns;\n        }\n        return new vnode.componentOptions.Ctor(options);\n    }\n    function installComponentHooks(data) {\n        var hooks = data.hook || (data.hook = {});\n        for (var i = 0; i < hooksToMerge.length; i++) {\n            var key = hooksToMerge[i];\n            var existing = hooks[key];\n            var toMerge = componentVNodeHooks[key];\n            // @ts-expect-error\n            if (existing !== toMerge && !(existing && existing._merged)) {\n                hooks[key] = existing ? mergeHook(toMerge, existing) : toMerge;\n            }\n        }\n    }\n    function mergeHook(f1, f2) {\n        var merged = function (a, b) {\n            // flow complains about extra args which is why we use any\n            f1(a, b);\n            f2(a, b);\n        };\n        merged._merged = true;\n        return merged;\n    }\n    // transform component v-model info (value and callback) into\n    // prop and event handler respectively.\n    function transformModel(options, data) {\n        var prop = (options.model && options.model.prop) || 'value';\n        var event = (options.model && options.model.event) || 'input';\n        (data.attrs || (data.attrs = {}))[prop] = data.model.value;\n        var on = data.on || (data.on = {});\n        var existing = on[event];\n        var callback = data.model.callback;\n        if (isDef(existing)) {\n            if (isArray(existing)\n                ? existing.indexOf(callback) === -1\n                : existing !== callback) {\n                on[event] = [callback].concat(existing);\n            }\n        }\n        else {\n            on[event] = callback;\n        }\n    }\n    var warn$2 = noop;\n    var tip = noop;\n    var generateComponentTrace; // work around flow check\n    var formatComponentName;\n    {\n        var hasConsole_1 = typeof console !== 'undefined';\n        var classifyRE_1 = /(?:^|[-_])(\\w)/g;\n        var classify_1 = function (str) {\n            return str.replace(classifyRE_1, function (c) { return c.toUpperCase(); }).replace(/[-_]/g, '');\n        };\n        warn$2 = function (msg, vm) {\n            if (vm === void 0) {\n                vm = currentInstance;\n            }\n            var trace = vm ? generateComponentTrace(vm) : '';\n            if (config.warnHandler) {\n                config.warnHandler.call(null, msg, vm, trace);\n            }\n            else if (hasConsole_1 && !config.silent) {\n                console.error(\"[Vue warn]: \".concat(msg).concat(trace));\n            }\n        };\n        tip = function (msg, vm) {\n            if (hasConsole_1 && !config.silent) {\n                console.warn(\"[Vue tip]: \".concat(msg) + (vm ? generateComponentTrace(vm) : ''));\n            }\n        };\n        formatComponentName = function (vm, includeFile) {\n            if (vm.$root === vm) {\n                return '<Root>';\n            }\n            var options = isFunction(vm) && vm.cid != null\n                ? vm.options\n                : vm._isVue\n                    ? vm.$options || vm.constructor.options\n                    : vm;\n            var name = getComponentName(options);\n            var file = options.__file;\n            if (!name && file) {\n                var match = file.match(/([^/\\\\]+)\\.vue$/);\n                name = match && match[1];\n            }\n            return ((name ? \"<\".concat(classify_1(name), \">\") : \"<Anonymous>\") +\n                (file && includeFile !== false ? \" at \".concat(file) : ''));\n        };\n        var repeat_1 = function (str, n) {\n            var res = '';\n            while (n) {\n                if (n % 2 === 1)\n                    res += str;\n                if (n > 1)\n                    str += str;\n                n >>= 1;\n            }\n            return res;\n        };\n        generateComponentTrace = function (vm) {\n            if (vm._isVue && vm.$parent) {\n                var tree = [];\n                var currentRecursiveSequence = 0;\n                while (vm) {\n                    if (tree.length > 0) {\n                        var last = tree[tree.length - 1];\n                        if (last.constructor === vm.constructor) {\n                            currentRecursiveSequence++;\n                            vm = vm.$parent;\n                            continue;\n                        }\n                        else if (currentRecursiveSequence > 0) {\n                            tree[tree.length - 1] = [last, currentRecursiveSequence];\n                            currentRecursiveSequence = 0;\n                        }\n                    }\n                    tree.push(vm);\n                    vm = vm.$parent;\n                }\n                return ('\\n\\nfound in\\n\\n' +\n                    tree\n                        .map(function (vm, i) {\n                        return \"\".concat(i === 0 ? '---> ' : repeat_1(' ', 5 + i * 2)).concat(isArray(vm)\n                            ? \"\".concat(formatComponentName(vm[0]), \"... (\").concat(vm[1], \" recursive calls)\")\n                            : formatComponentName(vm));\n                    })\n                        .join('\\n'));\n            }\n            else {\n                return \"\\n\\n(found in \".concat(formatComponentName(vm), \")\");\n            }\n        };\n    }\n    /**\n     * Option overwriting strategies are functions that handle\n     * how to merge a parent option value and a child option\n     * value into the final value.\n     */\n    var strats = config.optionMergeStrategies;\n    /**\n     * Options with restrictions\n     */\n    {\n        strats.el = strats.propsData = function (parent, child, vm, key) {\n            if (!vm) {\n                warn$2(\"option \\\"\".concat(key, \"\\\" can only be used during instance \") +\n                    'creation with the `new` keyword.');\n            }\n            return defaultStrat(parent, child);\n        };\n    }\n    /**\n     * Helper that recursively merges two data objects together.\n     */\n    function mergeData(to, from, recursive) {\n        if (recursive === void 0) {\n            recursive = true;\n        }\n        if (!from)\n            return to;\n        var key, toVal, fromVal;\n        var keys = hasSymbol\n            ? Reflect.ownKeys(from)\n            : Object.keys(from);\n        for (var i = 0; i < keys.length; i++) {\n            key = keys[i];\n            // in case the object is already observed...\n            if (key === '__ob__')\n                continue;\n            toVal = to[key];\n            fromVal = from[key];\n            if (!recursive || !hasOwn(to, key)) {\n                set(to, key, fromVal);\n            }\n            else if (toVal !== fromVal &&\n                isPlainObject(toVal) &&\n                isPlainObject(fromVal)) {\n                mergeData(toVal, fromVal);\n            }\n        }\n        return to;\n    }\n    /**\n     * Data\n     */\n    function mergeDataOrFn(parentVal, childVal, vm) {\n        if (!vm) {\n            // in a Vue.extend merge, both should be functions\n            if (!childVal) {\n                return parentVal;\n            }\n            if (!parentVal) {\n                return childVal;\n            }\n            // when parentVal & childVal are both present,\n            // we need to return a function that returns the\n            // merged result of both functions... no need to\n            // check if parentVal is a function here because\n            // it has to be a function to pass previous merges.\n            return function mergedDataFn() {\n                return mergeData(isFunction(childVal) ? childVal.call(this, this) : childVal, isFunction(parentVal) ? parentVal.call(this, this) : parentVal);\n            };\n        }\n        else {\n            return function mergedInstanceDataFn() {\n                // instance merge\n                var instanceData = isFunction(childVal)\n                    ? childVal.call(vm, vm)\n                    : childVal;\n                var defaultData = isFunction(parentVal)\n                    ? parentVal.call(vm, vm)\n                    : parentVal;\n                if (instanceData) {\n                    return mergeData(instanceData, defaultData);\n                }\n                else {\n                    return defaultData;\n                }\n            };\n        }\n    }\n    strats.data = function (parentVal, childVal, vm) {\n        if (!vm) {\n            if (childVal && typeof childVal !== 'function') {\n                warn$2('The \"data\" option should be a function ' +\n                    'that returns a per-instance value in component ' +\n                    'definitions.', vm);\n                return parentVal;\n            }\n            return mergeDataOrFn(parentVal, childVal);\n        }\n        return mergeDataOrFn(parentVal, childVal, vm);\n    };\n    /**\n     * Hooks and props are merged as arrays.\n     */\n    function mergeLifecycleHook(parentVal, childVal) {\n        var res = childVal\n            ? parentVal\n                ? parentVal.concat(childVal)\n                : isArray(childVal)\n                    ? childVal\n                    : [childVal]\n            : parentVal;\n        return res ? dedupeHooks(res) : res;\n    }\n    function dedupeHooks(hooks) {\n        var res = [];\n        for (var i = 0; i < hooks.length; i++) {\n            if (res.indexOf(hooks[i]) === -1) {\n                res.push(hooks[i]);\n            }\n        }\n        return res;\n    }\n    LIFECYCLE_HOOKS.forEach(function (hook) {\n        strats[hook] = mergeLifecycleHook;\n    });\n    /**\n     * Assets\n     *\n     * When a vm is present (instance creation), we need to do\n     * a three-way merge between constructor options, instance\n     * options and parent options.\n     */\n    function mergeAssets(parentVal, childVal, vm, key) {\n        var res = Object.create(parentVal || null);\n        if (childVal) {\n            assertObjectType(key, childVal, vm);\n            return extend(res, childVal);\n        }\n        else {\n            return res;\n        }\n    }\n    ASSET_TYPES.forEach(function (type) {\n        strats[type + 's'] = mergeAssets;\n    });\n    /**\n     * Watchers.\n     *\n     * Watchers hashes should not overwrite one\n     * another, so we merge them as arrays.\n     */\n    strats.watch = function (parentVal, childVal, vm, key) {\n        // work around Firefox's Object.prototype.watch...\n        //@ts-expect-error work around\n        if (parentVal === nativeWatch)\n            parentVal = undefined;\n        //@ts-expect-error work around\n        if (childVal === nativeWatch)\n            childVal = undefined;\n        /* istanbul ignore if */\n        if (!childVal)\n            return Object.create(parentVal || null);\n        {\n            assertObjectType(key, childVal, vm);\n        }\n        if (!parentVal)\n            return childVal;\n        var ret = {};\n        extend(ret, parentVal);\n        for (var key_1 in childVal) {\n            var parent_1 = ret[key_1];\n            var child = childVal[key_1];\n            if (parent_1 && !isArray(parent_1)) {\n                parent_1 = [parent_1];\n            }\n            ret[key_1] = parent_1 ? parent_1.concat(child) : isArray(child) ? child : [child];\n        }\n        return ret;\n    };\n    /**\n     * Other object hashes.\n     */\n    strats.props =\n        strats.methods =\n            strats.inject =\n                strats.computed =\n                    function (parentVal, childVal, vm, key) {\n                        if (childVal && true) {\n                            assertObjectType(key, childVal, vm);\n                        }\n                        if (!parentVal)\n                            return childVal;\n                        var ret = Object.create(null);\n                        extend(ret, parentVal);\n                        if (childVal)\n                            extend(ret, childVal);\n                        return ret;\n                    };\n    strats.provide = function (parentVal, childVal) {\n        if (!parentVal)\n            return childVal;\n        return function () {\n            var ret = Object.create(null);\n            mergeData(ret, isFunction(parentVal) ? parentVal.call(this) : parentVal);\n            if (childVal) {\n                mergeData(ret, isFunction(childVal) ? childVal.call(this) : childVal, false // non-recursive\n                );\n            }\n            return ret;\n        };\n    };\n    /**\n     * Default strategy.\n     */\n    var defaultStrat = function (parentVal, childVal) {\n        return childVal === undefined ? parentVal : childVal;\n    };\n    /**\n     * Validate component names\n     */\n    function checkComponents(options) {\n        for (var key in options.components) {\n            validateComponentName(key);\n        }\n    }\n    function validateComponentName(name) {\n        if (!new RegExp(\"^[a-zA-Z][\\\\-\\\\.0-9_\".concat(unicodeRegExp.source, \"]*$\")).test(name)) {\n            warn$2('Invalid component name: \"' +\n                name +\n                '\". Component names ' +\n                'should conform to valid custom element name in html5 specification.');\n        }\n        if (isBuiltInTag(name) || config.isReservedTag(name)) {\n            warn$2('Do not use built-in or reserved HTML elements as component ' +\n                'id: ' +\n                name);\n        }\n    }\n    /**\n     * Ensure all props option syntax are normalized into the\n     * Object-based format.\n     */\n    function normalizeProps(options, vm) {\n        var props = options.props;\n        if (!props)\n            return;\n        var res = {};\n        var i, val, name;\n        if (isArray(props)) {\n            i = props.length;\n            while (i--) {\n                val = props[i];\n                if (typeof val === 'string') {\n                    name = camelize(val);\n                    res[name] = { type: null };\n                }\n                else {\n                    warn$2('props must be strings when using array syntax.');\n                }\n            }\n        }\n        else if (isPlainObject(props)) {\n            for (var key in props) {\n                val = props[key];\n                name = camelize(key);\n                res[name] = isPlainObject(val) ? val : { type: val };\n            }\n        }\n        else {\n            warn$2(\"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n                \"but got \".concat(toRawType(props), \".\"), vm);\n        }\n        options.props = res;\n    }\n    /**\n     * Normalize all injections into Object-based format\n     */\n    function normalizeInject(options, vm) {\n        var inject = options.inject;\n        if (!inject)\n            return;\n        var normalized = (options.inject = {});\n        if (isArray(inject)) {\n            for (var i = 0; i < inject.length; i++) {\n                normalized[inject[i]] = { from: inject[i] };\n            }\n        }\n        else if (isPlainObject(inject)) {\n            for (var key in inject) {\n                var val = inject[key];\n                normalized[key] = isPlainObject(val)\n                    ? extend({ from: key }, val)\n                    : { from: val };\n            }\n        }\n        else {\n            warn$2(\"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n                \"but got \".concat(toRawType(inject), \".\"), vm);\n        }\n    }\n    /**\n     * Normalize raw function directives into object format.\n     */\n    function normalizeDirectives$1(options) {\n        var dirs = options.directives;\n        if (dirs) {\n            for (var key in dirs) {\n                var def = dirs[key];\n                if (isFunction(def)) {\n                    dirs[key] = { bind: def, update: def };\n                }\n            }\n        }\n    }\n    function assertObjectType(name, value, vm) {\n        if (!isPlainObject(value)) {\n            warn$2(\"Invalid value for option \\\"\".concat(name, \"\\\": expected an Object, \") +\n                \"but got \".concat(toRawType(value), \".\"), vm);\n        }\n    }\n    /**\n     * Merge two option objects into a new one.\n     * Core utility used in both instantiation and inheritance.\n     */\n    function mergeOptions(parent, child, vm) {\n        {\n            checkComponents(child);\n        }\n        if (isFunction(child)) {\n            // @ts-expect-error\n            child = child.options;\n        }\n        normalizeProps(child, vm);\n        normalizeInject(child, vm);\n        normalizeDirectives$1(child);\n        // Apply extends and mixins on the child options,\n        // but only if it is a raw options object that isn't\n        // the result of another mergeOptions call.\n        // Only merged options has the _base property.\n        if (!child._base) {\n            if (child.extends) {\n                parent = mergeOptions(parent, child.extends, vm);\n            }\n            if (child.mixins) {\n                for (var i = 0, l = child.mixins.length; i < l; i++) {\n                    parent = mergeOptions(parent, child.mixins[i], vm);\n                }\n            }\n        }\n        var options = {};\n        var key;\n        for (key in parent) {\n            mergeField(key);\n        }\n        for (key in child) {\n            if (!hasOwn(parent, key)) {\n                mergeField(key);\n            }\n        }\n        function mergeField(key) {\n            var strat = strats[key] || defaultStrat;\n            options[key] = strat(parent[key], child[key], vm, key);\n        }\n        return options;\n    }\n    /**\n     * Resolve an asset.\n     * This function is used because child instances need access\n     * to assets defined in its ancestor chain.\n     */\n    function resolveAsset(options, type, id, warnMissing) {\n        /* istanbul ignore if */\n        if (typeof id !== 'string') {\n            return;\n        }\n        var assets = options[type];\n        // check local registration variations first\n        if (hasOwn(assets, id))\n            return assets[id];\n        var camelizedId = camelize(id);\n        if (hasOwn(assets, camelizedId))\n            return assets[camelizedId];\n        var PascalCaseId = capitalize(camelizedId);\n        if (hasOwn(assets, PascalCaseId))\n            return assets[PascalCaseId];\n        // fallback to prototype chain\n        var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n        if (warnMissing && !res) {\n            warn$2('Failed to resolve ' + type.slice(0, -1) + ': ' + id);\n        }\n        return res;\n    }\n    function validateProp(key, propOptions, propsData, vm) {\n        var prop = propOptions[key];\n        var absent = !hasOwn(propsData, key);\n        var value = propsData[key];\n        // boolean casting\n        var booleanIndex = getTypeIndex(Boolean, prop.type);\n        if (booleanIndex > -1) {\n            if (absent && !hasOwn(prop, 'default')) {\n                value = false;\n            }\n            else if (value === '' || value === hyphenate(key)) {\n                // only cast empty string / same name to boolean if\n                // boolean has higher priority\n                var stringIndex = getTypeIndex(String, prop.type);\n                if (stringIndex < 0 || booleanIndex < stringIndex) {\n                    value = true;\n                }\n            }\n        }\n        // check default value\n        if (value === undefined) {\n            value = getPropDefaultValue(vm, prop, key);\n            // since the default value is a fresh copy,\n            // make sure to observe it.\n            var prevShouldObserve = shouldObserve;\n            toggleObserving(true);\n            observe(value);\n            toggleObserving(prevShouldObserve);\n        }\n        {\n            assertProp(prop, key, value, vm, absent);\n        }\n        return value;\n    }\n    /**\n     * Get the default value of a prop.\n     */\n    function getPropDefaultValue(vm, prop, key) {\n        // no default, return undefined\n        if (!hasOwn(prop, 'default')) {\n            return undefined;\n        }\n        var def = prop.default;\n        // warn against non-factory defaults for Object & Array\n        if (isObject(def)) {\n            warn$2('Invalid default value for prop \"' +\n                key +\n                '\": ' +\n                'Props with type Object/Array must use a factory function ' +\n                'to return the default value.', vm);\n        }\n        // the raw prop value was also undefined from previous render,\n        // return previous default value to avoid unnecessary watcher trigger\n        if (vm &&\n            vm.$options.propsData &&\n            vm.$options.propsData[key] === undefined &&\n            vm._props[key] !== undefined) {\n            return vm._props[key];\n        }\n        // call factory function for non-Function types\n        // a value is Function if its prototype is function even across different execution context\n        return isFunction(def) && getType(prop.type) !== 'Function'\n            ? def.call(vm)\n            : def;\n    }\n    /**\n     * Assert whether a prop is valid.\n     */\n    function assertProp(prop, name, value, vm, absent) {\n        if (prop.required && absent) {\n            warn$2('Missing required prop: \"' + name + '\"', vm);\n            return;\n        }\n        if (value == null && !prop.required) {\n            return;\n        }\n        var type = prop.type;\n        var valid = !type || type === true;\n        var expectedTypes = [];\n        if (type) {\n            if (!isArray(type)) {\n                type = [type];\n            }\n            for (var i = 0; i < type.length && !valid; i++) {\n                var assertedType = assertType(value, type[i], vm);\n                expectedTypes.push(assertedType.expectedType || '');\n                valid = assertedType.valid;\n            }\n        }\n        var haveExpectedTypes = expectedTypes.some(function (t) { return t; });\n        if (!valid && haveExpectedTypes) {\n            warn$2(getInvalidTypeMessage(name, value, expectedTypes), vm);\n            return;\n        }\n        var validator = prop.validator;\n        if (validator) {\n            if (!validator(value)) {\n                warn$2('Invalid prop: custom validator check failed for prop \"' + name + '\".', vm);\n            }\n        }\n    }\n    var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;\n    function assertType(value, type, vm) {\n        var valid;\n        var expectedType = getType(type);\n        if (simpleCheckRE.test(expectedType)) {\n            var t = typeof value;\n            valid = t === expectedType.toLowerCase();\n            // for primitive wrapper objects\n            if (!valid && t === 'object') {\n                valid = value instanceof type;\n            }\n        }\n        else if (expectedType === 'Object') {\n            valid = isPlainObject(value);\n        }\n        else if (expectedType === 'Array') {\n            valid = isArray(value);\n        }\n        else {\n            try {\n                valid = value instanceof type;\n            }\n            catch (e) {\n                warn$2('Invalid prop type: \"' + String(type) + '\" is not a constructor', vm);\n                valid = false;\n            }\n        }\n        return {\n            valid: valid,\n            expectedType: expectedType\n        };\n    }\n    var functionTypeCheckRE = /^\\s*function (\\w+)/;\n    /**\n     * Use function string name to check built-in types,\n     * because a simple equality check will fail when running\n     * across different vms / iframes.\n     */\n    function getType(fn) {\n        var match = fn && fn.toString().match(functionTypeCheckRE);\n        return match ? match[1] : '';\n    }\n    function isSameType(a, b) {\n        return getType(a) === getType(b);\n    }\n    function getTypeIndex(type, expectedTypes) {\n        if (!isArray(expectedTypes)) {\n            return isSameType(expectedTypes, type) ? 0 : -1;\n        }\n        for (var i = 0, len = expectedTypes.length; i < len; i++) {\n            if (isSameType(expectedTypes[i], type)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    function getInvalidTypeMessage(name, value, expectedTypes) {\n        var message = \"Invalid prop: type check failed for prop \\\"\".concat(name, \"\\\".\") +\n            \" Expected \".concat(expectedTypes.map(capitalize).join(', '));\n        var expectedType = expectedTypes[0];\n        var receivedType = toRawType(value);\n        // check if we need to specify expected value\n        if (expectedTypes.length === 1 &&\n            isExplicable(expectedType) &&\n            isExplicable(typeof value) &&\n            !isBoolean(expectedType, receivedType)) {\n            message += \" with value \".concat(styleValue(value, expectedType));\n        }\n        message += \", got \".concat(receivedType, \" \");\n        // check if we need to specify received value\n        if (isExplicable(receivedType)) {\n            message += \"with value \".concat(styleValue(value, receivedType), \".\");\n        }\n        return message;\n    }\n    function styleValue(value, type) {\n        if (type === 'String') {\n            return \"\\\"\".concat(value, \"\\\"\");\n        }\n        else if (type === 'Number') {\n            return \"\".concat(Number(value));\n        }\n        else {\n            return \"\".concat(value);\n        }\n    }\n    var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];\n    function isExplicable(value) {\n        return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; });\n    }\n    function isBoolean() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; });\n    }\n    function Vue(options) {\n        if (!(this instanceof Vue)) {\n            warn$2('Vue is a constructor and should be called with the `new` keyword');\n        }\n        this._init(options);\n    }\n    //@ts-expect-error Vue has function type\n    initMixin$1(Vue);\n    //@ts-expect-error Vue has function type\n    stateMixin(Vue);\n    //@ts-expect-error Vue has function type\n    eventsMixin(Vue);\n    //@ts-expect-error Vue has function type\n    lifecycleMixin(Vue);\n    //@ts-expect-error Vue has function type\n    renderMixin(Vue);\n    function initUse(Vue) {\n        Vue.use = function (plugin) {\n            var installedPlugins = this._installedPlugins || (this._installedPlugins = []);\n            if (installedPlugins.indexOf(plugin) > -1) {\n                return this;\n            }\n            // additional parameters\n            var args = toArray(arguments, 1);\n            args.unshift(this);\n            if (isFunction(plugin.install)) {\n                plugin.install.apply(plugin, args);\n            }\n            else if (isFunction(plugin)) {\n                plugin.apply(null, args);\n            }\n            installedPlugins.push(plugin);\n            return this;\n        };\n    }\n    function initMixin(Vue) {\n        Vue.mixin = function (mixin) {\n            this.options = mergeOptions(this.options, mixin);\n            return this;\n        };\n    }\n    function initExtend(Vue) {\n        /**\n         * Each instance constructor, including Vue, has a unique\n         * cid. This enables us to create wrapped \"child\n         * constructors\" for prototypal inheritance and cache them.\n         */\n        Vue.cid = 0;\n        var cid = 1;\n        /**\n         * Class inheritance\n         */\n        Vue.extend = function (extendOptions) {\n            extendOptions = extendOptions || {};\n            var Super = this;\n            var SuperId = Super.cid;\n            var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n            if (cachedCtors[SuperId]) {\n                return cachedCtors[SuperId];\n            }\n            var name = getComponentName(extendOptions) || getComponentName(Super.options);\n            if (name) {\n                validateComponentName(name);\n            }\n            var Sub = function VueComponent(options) {\n                this._init(options);\n            };\n            Sub.prototype = Object.create(Super.prototype);\n            Sub.prototype.constructor = Sub;\n            Sub.cid = cid++;\n            Sub.options = mergeOptions(Super.options, extendOptions);\n            Sub['super'] = Super;\n            // For props and computed properties, we define the proxy getters on\n            // the Vue instances at extension time, on the extended prototype. This\n            // avoids Object.defineProperty calls for each instance created.\n            if (Sub.options.props) {\n                initProps(Sub);\n            }\n            if (Sub.options.computed) {\n                initComputed(Sub);\n            }\n            // allow further extension/mixin/plugin usage\n            Sub.extend = Super.extend;\n            Sub.mixin = Super.mixin;\n            Sub.use = Super.use;\n            // create asset registers, so extended classes\n            // can have their private assets too.\n            ASSET_TYPES.forEach(function (type) {\n                Sub[type] = Super[type];\n            });\n            // enable recursive self-lookup\n            if (name) {\n                Sub.options.components[name] = Sub;\n            }\n            // keep a reference to the super options at extension time.\n            // later at instantiation we can check if Super's options have\n            // been updated.\n            Sub.superOptions = Super.options;\n            Sub.extendOptions = extendOptions;\n            Sub.sealedOptions = extend({}, Sub.options);\n            // cache constructor\n            cachedCtors[SuperId] = Sub;\n            return Sub;\n        };\n    }\n    function initProps(Comp) {\n        var props = Comp.options.props;\n        for (var key in props) {\n            proxy(Comp.prototype, \"_props\", key);\n        }\n    }\n    function initComputed(Comp) {\n        var computed = Comp.options.computed;\n        for (var key in computed) {\n            defineComputed(Comp.prototype, key, computed[key]);\n        }\n    }\n    function initAssetRegisters(Vue) {\n        /**\n         * Create asset registration methods.\n         */\n        ASSET_TYPES.forEach(function (type) {\n            // @ts-expect-error function is not exact same type\n            Vue[type] = function (id, definition) {\n                if (!definition) {\n                    return this.options[type + 's'][id];\n                }\n                else {\n                    /* istanbul ignore if */\n                    if (type === 'component') {\n                        validateComponentName(id);\n                    }\n                    if (type === 'component' && isPlainObject(definition)) {\n                        // @ts-expect-error\n                        definition.name = definition.name || id;\n                        definition = this.options._base.extend(definition);\n                    }\n                    if (type === 'directive' && isFunction(definition)) {\n                        definition = { bind: definition, update: definition };\n                    }\n                    this.options[type + 's'][id] = definition;\n                    return definition;\n                }\n            };\n        });\n    }\n    function _getComponentName(opts) {\n        return opts && (getComponentName(opts.Ctor.options) || opts.tag);\n    }\n    function matches(pattern, name) {\n        if (isArray(pattern)) {\n            return pattern.indexOf(name) > -1;\n        }\n        else if (typeof pattern === 'string') {\n            return pattern.split(',').indexOf(name) > -1;\n        }\n        else if (isRegExp(pattern)) {\n            return pattern.test(name);\n        }\n        /* istanbul ignore next */\n        return false;\n    }\n    function pruneCache(keepAliveInstance, filter) {\n        var cache = keepAliveInstance.cache, keys = keepAliveInstance.keys, _vnode = keepAliveInstance._vnode;\n        for (var key in cache) {\n            var entry = cache[key];\n            if (entry) {\n                var name_1 = entry.name;\n                if (name_1 && !filter(name_1)) {\n                    pruneCacheEntry(cache, key, keys, _vnode);\n                }\n            }\n        }\n    }\n    function pruneCacheEntry(cache, key, keys, current) {\n        var entry = cache[key];\n        if (entry && (!current || entry.tag !== current.tag)) {\n            // @ts-expect-error can be undefined\n            entry.componentInstance.$destroy();\n        }\n        cache[key] = null;\n        remove$2(keys, key);\n    }\n    var patternTypes = [String, RegExp, Array];\n    // TODO defineComponent\n    var KeepAlive = {\n        name: 'keep-alive',\n        abstract: true,\n        props: {\n            include: patternTypes,\n            exclude: patternTypes,\n            max: [String, Number]\n        },\n        methods: {\n            cacheVNode: function () {\n                var _a = this, cache = _a.cache, keys = _a.keys, vnodeToCache = _a.vnodeToCache, keyToCache = _a.keyToCache;\n                if (vnodeToCache) {\n                    var tag = vnodeToCache.tag, componentInstance = vnodeToCache.componentInstance, componentOptions = vnodeToCache.componentOptions;\n                    cache[keyToCache] = {\n                        name: _getComponentName(componentOptions),\n                        tag: tag,\n                        componentInstance: componentInstance\n                    };\n                    keys.push(keyToCache);\n                    // prune oldest entry\n                    if (this.max && keys.length > parseInt(this.max)) {\n                        pruneCacheEntry(cache, keys[0], keys, this._vnode);\n                    }\n                    this.vnodeToCache = null;\n                }\n            }\n        },\n        created: function () {\n            this.cache = Object.create(null);\n            this.keys = [];\n        },\n        destroyed: function () {\n            for (var key in this.cache) {\n                pruneCacheEntry(this.cache, key, this.keys);\n            }\n        },\n        mounted: function () {\n            var _this = this;\n            this.cacheVNode();\n            this.$watch('include', function (val) {\n                pruneCache(_this, function (name) { return matches(val, name); });\n            });\n            this.$watch('exclude', function (val) {\n                pruneCache(_this, function (name) { return !matches(val, name); });\n            });\n        },\n        updated: function () {\n            this.cacheVNode();\n        },\n        render: function () {\n            var slot = this.$slots.default;\n            var vnode = getFirstComponentChild(slot);\n            var componentOptions = vnode && vnode.componentOptions;\n            if (componentOptions) {\n                // check pattern\n                var name_2 = _getComponentName(componentOptions);\n                var _a = this, include = _a.include, exclude = _a.exclude;\n                if (\n                // not included\n                (include && (!name_2 || !matches(include, name_2))) ||\n                    // excluded\n                    (exclude && name_2 && matches(exclude, name_2))) {\n                    return vnode;\n                }\n                var _b = this, cache = _b.cache, keys = _b.keys;\n                var key = vnode.key == null\n                    ? // same constructor may get registered as different local components\n                        // so cid alone is not enough (#3269)\n                        componentOptions.Ctor.cid +\n                            (componentOptions.tag ? \"::\".concat(componentOptions.tag) : '')\n                    : vnode.key;\n                if (cache[key]) {\n                    vnode.componentInstance = cache[key].componentInstance;\n                    // make current key freshest\n                    remove$2(keys, key);\n                    keys.push(key);\n                }\n                else {\n                    // delay setting the cache until update\n                    this.vnodeToCache = vnode;\n                    this.keyToCache = key;\n                }\n                // @ts-expect-error can vnode.data can be undefined\n                vnode.data.keepAlive = true;\n            }\n            return vnode || (slot && slot[0]);\n        }\n    };\n    var builtInComponents = {\n        KeepAlive: KeepAlive\n    };\n    function initGlobalAPI(Vue) {\n        // config\n        var configDef = {};\n        configDef.get = function () { return config; };\n        {\n            configDef.set = function () {\n                warn$2('Do not replace the Vue.config object, set individual fields instead.');\n            };\n        }\n        Object.defineProperty(Vue, 'config', configDef);\n        // exposed util methods.\n        // NOTE: these are not considered part of the public API - avoid relying on\n        // them unless you are aware of the risk.\n        Vue.util = {\n            warn: warn$2,\n            extend: extend,\n            mergeOptions: mergeOptions,\n            defineReactive: defineReactive\n        };\n        Vue.set = set;\n        Vue.delete = del;\n        Vue.nextTick = nextTick;\n        // 2.6 explicit observable API\n        Vue.observable = function (obj) {\n            observe(obj);\n            return obj;\n        };\n        Vue.options = Object.create(null);\n        ASSET_TYPES.forEach(function (type) {\n            Vue.options[type + 's'] = Object.create(null);\n        });\n        // this is used to identify the \"base\" constructor to extend all plain-object\n        // components with in Weex's multi-instance scenarios.\n        Vue.options._base = Vue;\n        extend(Vue.options.components, builtInComponents);\n        initUse(Vue);\n        initMixin(Vue);\n        initExtend(Vue);\n        initAssetRegisters(Vue);\n    }\n    initGlobalAPI(Vue);\n    Object.defineProperty(Vue.prototype, '$isServer', {\n        get: isServerRendering\n    });\n    Object.defineProperty(Vue.prototype, '$ssrContext', {\n        get: function () {\n            /* istanbul ignore next */\n            return this.$vnode && this.$vnode.ssrContext;\n        }\n    });\n    // expose FunctionalRenderContext for ssr runtime helper installation\n    Object.defineProperty(Vue, 'FunctionalRenderContext', {\n        value: FunctionalRenderContext\n    });\n    Vue.version = version;\n    // these are reserved for web because they are directly compiled away\n    // during template compilation\n    var isReservedAttr = makeMap('style,class');\n    // attributes that should be using props for binding\n    var acceptValue = makeMap('input,textarea,option,select,progress');\n    var mustUseProp = function (tag, type, attr) {\n        return ((attr === 'value' && acceptValue(tag) && type !== 'button') ||\n            (attr === 'selected' && tag === 'option') ||\n            (attr === 'checked' && tag === 'input') ||\n            (attr === 'muted' && tag === 'video'));\n    };\n    var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n    var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n    var convertEnumeratedValue = function (key, value) {\n        return isFalsyAttrValue(value) || value === 'false'\n            ? 'false'\n            : // allow arbitrary string value for contenteditable\n                key === 'contenteditable' && isValidContentEditableValue(value)\n                    ? value\n                    : 'true';\n    };\n    var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n        'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n        'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n        'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n        'required,reversed,scoped,seamless,selected,sortable,' +\n        'truespeed,typemustmatch,visible');\n    var xlinkNS = 'http://www.w3.org/1999/xlink';\n    var isXlink = function (name) {\n        return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';\n    };\n    var getXlinkProp = function (name) {\n        return isXlink(name) ? name.slice(6, name.length) : '';\n    };\n    var isFalsyAttrValue = function (val) {\n        return val == null || val === false;\n    };\n    function genClassForVnode(vnode) {\n        var data = vnode.data;\n        var parentNode = vnode;\n        var childNode = vnode;\n        while (isDef(childNode.componentInstance)) {\n            childNode = childNode.componentInstance._vnode;\n            if (childNode && childNode.data) {\n                data = mergeClassData(childNode.data, data);\n            }\n        }\n        // @ts-expect-error parentNode.parent not VNodeWithData\n        while (isDef((parentNode = parentNode.parent))) {\n            if (parentNode && parentNode.data) {\n                data = mergeClassData(data, parentNode.data);\n            }\n        }\n        return renderClass(data.staticClass, data.class);\n    }\n    function mergeClassData(child, parent) {\n        return {\n            staticClass: concat(child.staticClass, parent.staticClass),\n            class: isDef(child.class) ? [child.class, parent.class] : parent.class\n        };\n    }\n    function renderClass(staticClass, dynamicClass) {\n        if (isDef(staticClass) || isDef(dynamicClass)) {\n            return concat(staticClass, stringifyClass(dynamicClass));\n        }\n        /* istanbul ignore next */\n        return '';\n    }\n    function concat(a, b) {\n        return a ? (b ? a + ' ' + b : a) : b || '';\n    }\n    function stringifyClass(value) {\n        if (Array.isArray(value)) {\n            return stringifyArray(value);\n        }\n        if (isObject(value)) {\n            return stringifyObject(value);\n        }\n        if (typeof value === 'string') {\n            return value;\n        }\n        /* istanbul ignore next */\n        return '';\n    }\n    function stringifyArray(value) {\n        var res = '';\n        var stringified;\n        for (var i = 0, l = value.length; i < l; i++) {\n            if (isDef((stringified = stringifyClass(value[i]))) && stringified !== '') {\n                if (res)\n                    res += ' ';\n                res += stringified;\n            }\n        }\n        return res;\n    }\n    function stringifyObject(value) {\n        var res = '';\n        for (var key in value) {\n            if (value[key]) {\n                if (res)\n                    res += ' ';\n                res += key;\n            }\n        }\n        return res;\n    }\n    var namespaceMap = {\n        svg: 'http://www.w3.org/2000/svg',\n        math: 'http://www.w3.org/1998/Math/MathML'\n    };\n    var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' +\n        'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n        'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n        'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n        's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n        'embed,object,param,source,canvas,script,noscript,del,ins,' +\n        'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n        'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n        'output,progress,select,textarea,' +\n        'details,dialog,menu,menuitem,summary,' +\n        'content,element,shadow,template,blockquote,iframe,tfoot');\n    // this map is intentionally selective, only covering SVG elements that may\n    // contain child elements.\n    var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n        'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n        'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);\n    var isPreTag = function (tag) { return tag === 'pre'; };\n    var isReservedTag = function (tag) {\n        return isHTMLTag(tag) || isSVG(tag);\n    };\n    function getTagNamespace(tag) {\n        if (isSVG(tag)) {\n            return 'svg';\n        }\n        // basic support for MathML\n        // note it doesn't support other MathML elements being component roots\n        if (tag === 'math') {\n            return 'math';\n        }\n    }\n    var unknownElementCache = Object.create(null);\n    function isUnknownElement(tag) {\n        /* istanbul ignore if */\n        if (!inBrowser) {\n            return true;\n        }\n        if (isReservedTag(tag)) {\n            return false;\n        }\n        tag = tag.toLowerCase();\n        /* istanbul ignore if */\n        if (unknownElementCache[tag] != null) {\n            return unknownElementCache[tag];\n        }\n        var el = document.createElement(tag);\n        if (tag.indexOf('-') > -1) {\n            // https://stackoverflow.com/a/28210364/1070244\n            return (unknownElementCache[tag] =\n                el.constructor === window.HTMLUnknownElement ||\n                    el.constructor === window.HTMLElement);\n        }\n        else {\n            return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()));\n        }\n    }\n    var isTextInputType = makeMap('text,number,password,search,email,tel,url');\n    /**\n     * Query an element selector if it's not an element already.\n     */\n    function query(el) {\n        if (typeof el === 'string') {\n            var selected = document.querySelector(el);\n            if (!selected) {\n                warn$2('Cannot find element: ' + el);\n                return document.createElement('div');\n            }\n            return selected;\n        }\n        else {\n            return el;\n        }\n    }\n    function createElement(tagName, vnode) {\n        var elm = document.createElement(tagName);\n        if (tagName !== 'select') {\n            return elm;\n        }\n        // false or null will remove the attribute but undefined will not\n        if (vnode.data &&\n            vnode.data.attrs &&\n            vnode.data.attrs.multiple !== undefined) {\n            elm.setAttribute('multiple', 'multiple');\n        }\n        return elm;\n    }\n    function createElementNS(namespace, tagName) {\n        return document.createElementNS(namespaceMap[namespace], tagName);\n    }\n    function createTextNode(text) {\n        return document.createTextNode(text);\n    }\n    function createComment(text) {\n        return document.createComment(text);\n    }\n    function insertBefore(parentNode, newNode, referenceNode) {\n        parentNode.insertBefore(newNode, referenceNode);\n    }\n    function removeChild(node, child) {\n        node.removeChild(child);\n    }\n    function appendChild(node, child) {\n        node.appendChild(child);\n    }\n    function parentNode(node) {\n        return node.parentNode;\n    }\n    function nextSibling(node) {\n        return node.nextSibling;\n    }\n    function tagName(node) {\n        return node.tagName;\n    }\n    function setTextContent(node, text) {\n        node.textContent = text;\n    }\n    function setStyleScope(node, scopeId) {\n        node.setAttribute(scopeId, '');\n    }\n    var nodeOps = /*#__PURE__*/ Object.freeze({\n        __proto__: null,\n        createElement: createElement,\n        createElementNS: createElementNS,\n        createTextNode: createTextNode,\n        createComment: createComment,\n        insertBefore: insertBefore,\n        removeChild: removeChild,\n        appendChild: appendChild,\n        parentNode: parentNode,\n        nextSibling: nextSibling,\n        tagName: tagName,\n        setTextContent: setTextContent,\n        setStyleScope: setStyleScope\n    });\n    var ref = {\n        create: function (_, vnode) {\n            registerRef(vnode);\n        },\n        update: function (oldVnode, vnode) {\n            if (oldVnode.data.ref !== vnode.data.ref) {\n                registerRef(oldVnode, true);\n                registerRef(vnode);\n            }\n        },\n        destroy: function (vnode) {\n            registerRef(vnode, true);\n        }\n    };\n    function registerRef(vnode, isRemoval) {\n        var ref = vnode.data.ref;\n        if (!isDef(ref))\n            return;\n        var vm = vnode.context;\n        var refValue = vnode.componentInstance || vnode.elm;\n        var value = isRemoval ? null : refValue;\n        var $refsValue = isRemoval ? undefined : refValue;\n        if (isFunction(ref)) {\n            invokeWithErrorHandling(ref, vm, [value], vm, \"template ref function\");\n            return;\n        }\n        var isFor = vnode.data.refInFor;\n        var _isString = typeof ref === 'string' || typeof ref === 'number';\n        var _isRef = isRef(ref);\n        var refs = vm.$refs;\n        if (_isString || _isRef) {\n            if (isFor) {\n                var existing = _isString ? refs[ref] : ref.value;\n                if (isRemoval) {\n                    isArray(existing) && remove$2(existing, refValue);\n                }\n                else {\n                    if (!isArray(existing)) {\n                        if (_isString) {\n                            refs[ref] = [refValue];\n                            setSetupRef(vm, ref, refs[ref]);\n                        }\n                        else {\n                            ref.value = [refValue];\n                        }\n                    }\n                    else if (!existing.includes(refValue)) {\n                        existing.push(refValue);\n                    }\n                }\n            }\n            else if (_isString) {\n                if (isRemoval && refs[ref] !== refValue) {\n                    return;\n                }\n                refs[ref] = $refsValue;\n                setSetupRef(vm, ref, value);\n            }\n            else if (_isRef) {\n                if (isRemoval && ref.value !== refValue) {\n                    return;\n                }\n                ref.value = value;\n            }\n            else {\n                warn$2(\"Invalid template ref type: \".concat(typeof ref));\n            }\n        }\n    }\n    function setSetupRef(_a, key, val) {\n        var _setupState = _a._setupState;\n        if (_setupState && hasOwn(_setupState, key)) {\n            if (isRef(_setupState[key])) {\n                _setupState[key].value = val;\n            }\n            else {\n                _setupState[key] = val;\n            }\n        }\n    }\n    /**\n     * Virtual DOM patching algorithm based on Snabbdom by\n     * Simon Friis Vindum (@paldepind)\n     * Licensed under the MIT License\n     * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n     *\n     * modified by Evan You (@yyx990803)\n     *\n     * Not type-checking this because this file is perf-critical and the cost\n     * of making flow understand it is not worth it.\n     */\n    var emptyNode = new VNode('', {}, []);\n    var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n    function sameVnode(a, b) {\n        return (a.key === b.key &&\n            a.asyncFactory === b.asyncFactory &&\n            ((a.tag === b.tag &&\n                a.isComment === b.isComment &&\n                isDef(a.data) === isDef(b.data) &&\n                sameInputType(a, b)) ||\n                (isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error))));\n    }\n    function sameInputType(a, b) {\n        if (a.tag !== 'input')\n            return true;\n        var i;\n        var typeA = isDef((i = a.data)) && isDef((i = i.attrs)) && i.type;\n        var typeB = isDef((i = b.data)) && isDef((i = i.attrs)) && i.type;\n        return typeA === typeB || (isTextInputType(typeA) && isTextInputType(typeB));\n    }\n    function createKeyToOldIdx(children, beginIdx, endIdx) {\n        var i, key;\n        var map = {};\n        for (i = beginIdx; i <= endIdx; ++i) {\n            key = children[i].key;\n            if (isDef(key))\n                map[key] = i;\n        }\n        return map;\n    }\n    function createPatchFunction(backend) {\n        var i, j;\n        var cbs = {};\n        var modules = backend.modules, nodeOps = backend.nodeOps;\n        for (i = 0; i < hooks.length; ++i) {\n            cbs[hooks[i]] = [];\n            for (j = 0; j < modules.length; ++j) {\n                if (isDef(modules[j][hooks[i]])) {\n                    cbs[hooks[i]].push(modules[j][hooks[i]]);\n                }\n            }\n        }\n        function emptyNodeAt(elm) {\n            return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);\n        }\n        function createRmCb(childElm, listeners) {\n            function remove() {\n                if (--remove.listeners === 0) {\n                    removeNode(childElm);\n                }\n            }\n            remove.listeners = listeners;\n            return remove;\n        }\n        function removeNode(el) {\n            var parent = nodeOps.parentNode(el);\n            // element may have already been removed due to v-html / v-text\n            if (isDef(parent)) {\n                nodeOps.removeChild(parent, el);\n            }\n        }\n        function isUnknownElement(vnode, inVPre) {\n            return (!inVPre &&\n                !vnode.ns &&\n                !(config.ignoredElements.length &&\n                    config.ignoredElements.some(function (ignore) {\n                        return isRegExp(ignore)\n                            ? ignore.test(vnode.tag)\n                            : ignore === vnode.tag;\n                    })) &&\n                config.isUnknownElement(vnode.tag));\n        }\n        var creatingElmInVPre = 0;\n        function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {\n            if (isDef(vnode.elm) && isDef(ownerArray)) {\n                // This vnode was used in a previous render!\n                // now it's used as a new node, overwriting its elm would cause\n                // potential patch errors down the road when it's used as an insertion\n                // reference node. Instead, we clone the node on-demand before creating\n                // associated DOM element for it.\n                vnode = ownerArray[index] = cloneVNode(vnode);\n            }\n            vnode.isRootInsert = !nested; // for transition enter check\n            if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n                return;\n            }\n            var data = vnode.data;\n            var children = vnode.children;\n            var tag = vnode.tag;\n            if (isDef(tag)) {\n                {\n                    if (data && data.pre) {\n                        creatingElmInVPre++;\n                    }\n                    if (isUnknownElement(vnode, creatingElmInVPre)) {\n                        warn$2('Unknown custom element: <' +\n                            tag +\n                            '> - did you ' +\n                            'register the component correctly? For recursive components, ' +\n                            'make sure to provide the \"name\" option.', vnode.context);\n                    }\n                }\n                vnode.elm = vnode.ns\n                    ? nodeOps.createElementNS(vnode.ns, tag)\n                    : nodeOps.createElement(tag, vnode);\n                setScope(vnode);\n                createChildren(vnode, children, insertedVnodeQueue);\n                if (isDef(data)) {\n                    invokeCreateHooks(vnode, insertedVnodeQueue);\n                }\n                insert(parentElm, vnode.elm, refElm);\n                if (data && data.pre) {\n                    creatingElmInVPre--;\n                }\n            }\n            else if (isTrue(vnode.isComment)) {\n                vnode.elm = nodeOps.createComment(vnode.text);\n                insert(parentElm, vnode.elm, refElm);\n            }\n            else {\n                vnode.elm = nodeOps.createTextNode(vnode.text);\n                insert(parentElm, vnode.elm, refElm);\n            }\n        }\n        function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n            var i = vnode.data;\n            if (isDef(i)) {\n                var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n                if (isDef((i = i.hook)) && isDef((i = i.init))) {\n                    i(vnode, false /* hydrating */);\n                }\n                // after calling the init hook, if the vnode is a child component\n                // it should've created a child instance and mounted it. the child\n                // component also has set the placeholder vnode's elm.\n                // in that case we can just return the element and be done.\n                if (isDef(vnode.componentInstance)) {\n                    initComponent(vnode, insertedVnodeQueue);\n                    insert(parentElm, vnode.elm, refElm);\n                    if (isTrue(isReactivated)) {\n                        reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n                    }\n                    return true;\n                }\n            }\n        }\n        function initComponent(vnode, insertedVnodeQueue) {\n            if (isDef(vnode.data.pendingInsert)) {\n                insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n                vnode.data.pendingInsert = null;\n            }\n            vnode.elm = vnode.componentInstance.$el;\n            if (isPatchable(vnode)) {\n                invokeCreateHooks(vnode, insertedVnodeQueue);\n                setScope(vnode);\n            }\n            else {\n                // empty component root.\n                // skip all element-related modules except for ref (#3455)\n                registerRef(vnode);\n                // make sure to invoke the insert hook\n                insertedVnodeQueue.push(vnode);\n            }\n        }\n        function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\n            var i;\n            // hack for #4339: a reactivated component with inner transition\n            // does not trigger because the inner node's created hooks are not called\n            // again. It's not ideal to involve module-specific logic in here but\n            // there doesn't seem to be a better way to do it.\n            var innerNode = vnode;\n            while (innerNode.componentInstance) {\n                innerNode = innerNode.componentInstance._vnode;\n                if (isDef((i = innerNode.data)) && isDef((i = i.transition))) {\n                    for (i = 0; i < cbs.activate.length; ++i) {\n                        cbs.activate[i](emptyNode, innerNode);\n                    }\n                    insertedVnodeQueue.push(innerNode);\n                    break;\n                }\n            }\n            // unlike a newly created component,\n            // a reactivated keep-alive component doesn't insert itself\n            insert(parentElm, vnode.elm, refElm);\n        }\n        function insert(parent, elm, ref) {\n            if (isDef(parent)) {\n                if (isDef(ref)) {\n                    if (nodeOps.parentNode(ref) === parent) {\n                        nodeOps.insertBefore(parent, elm, ref);\n                    }\n                }\n                else {\n                    nodeOps.appendChild(parent, elm);\n                }\n            }\n        }\n        function createChildren(vnode, children, insertedVnodeQueue) {\n            if (isArray(children)) {\n                {\n                    checkDuplicateKeys(children);\n                }\n                for (var i_1 = 0; i_1 < children.length; ++i_1) {\n                    createElm(children[i_1], insertedVnodeQueue, vnode.elm, null, true, children, i_1);\n                }\n            }\n            else if (isPrimitive(vnode.text)) {\n                nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n            }\n        }\n        function isPatchable(vnode) {\n            while (vnode.componentInstance) {\n                vnode = vnode.componentInstance._vnode;\n            }\n            return isDef(vnode.tag);\n        }\n        function invokeCreateHooks(vnode, insertedVnodeQueue) {\n            for (var i_2 = 0; i_2 < cbs.create.length; ++i_2) {\n                cbs.create[i_2](emptyNode, vnode);\n            }\n            i = vnode.data.hook; // Reuse variable\n            if (isDef(i)) {\n                if (isDef(i.create))\n                    i.create(emptyNode, vnode);\n                if (isDef(i.insert))\n                    insertedVnodeQueue.push(vnode);\n            }\n        }\n        // set scope id attribute for scoped CSS.\n        // this is implemented as a special case to avoid the overhead\n        // of going through the normal attribute patching process.\n        function setScope(vnode) {\n            var i;\n            if (isDef((i = vnode.fnScopeId))) {\n                nodeOps.setStyleScope(vnode.elm, i);\n            }\n            else {\n                var ancestor = vnode;\n                while (ancestor) {\n                    if (isDef((i = ancestor.context)) && isDef((i = i.$options._scopeId))) {\n                        nodeOps.setStyleScope(vnode.elm, i);\n                    }\n                    ancestor = ancestor.parent;\n                }\n            }\n            // for slot content they should also get the scopeId from the host instance.\n            if (isDef((i = activeInstance)) &&\n                i !== vnode.context &&\n                i !== vnode.fnContext &&\n                isDef((i = i.$options._scopeId))) {\n                nodeOps.setStyleScope(vnode.elm, i);\n            }\n        }\n        function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n            for (; startIdx <= endIdx; ++startIdx) {\n                createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n            }\n        }\n        function invokeDestroyHook(vnode) {\n            var i, j;\n            var data = vnode.data;\n            if (isDef(data)) {\n                if (isDef((i = data.hook)) && isDef((i = i.destroy)))\n                    i(vnode);\n                for (i = 0; i < cbs.destroy.length; ++i)\n                    cbs.destroy[i](vnode);\n            }\n            if (isDef((i = vnode.children))) {\n                for (j = 0; j < vnode.children.length; ++j) {\n                    invokeDestroyHook(vnode.children[j]);\n                }\n            }\n        }\n        function removeVnodes(vnodes, startIdx, endIdx) {\n            for (; startIdx <= endIdx; ++startIdx) {\n                var ch = vnodes[startIdx];\n                if (isDef(ch)) {\n                    if (isDef(ch.tag)) {\n                        removeAndInvokeRemoveHook(ch);\n                        invokeDestroyHook(ch);\n                    }\n                    else {\n                        // Text node\n                        removeNode(ch.elm);\n                    }\n                }\n            }\n        }\n        function removeAndInvokeRemoveHook(vnode, rm) {\n            if (isDef(rm) || isDef(vnode.data)) {\n                var i_3;\n                var listeners = cbs.remove.length + 1;\n                if (isDef(rm)) {\n                    // we have a recursively passed down rm callback\n                    // increase the listeners count\n                    rm.listeners += listeners;\n                }\n                else {\n                    // directly removing\n                    rm = createRmCb(vnode.elm, listeners);\n                }\n                // recursively invoke hooks on child component root node\n                if (isDef((i_3 = vnode.componentInstance)) &&\n                    isDef((i_3 = i_3._vnode)) &&\n                    isDef(i_3.data)) {\n                    removeAndInvokeRemoveHook(i_3, rm);\n                }\n                for (i_3 = 0; i_3 < cbs.remove.length; ++i_3) {\n                    cbs.remove[i_3](vnode, rm);\n                }\n                if (isDef((i_3 = vnode.data.hook)) && isDef((i_3 = i_3.remove))) {\n                    i_3(vnode, rm);\n                }\n                else {\n                    rm();\n                }\n            }\n            else {\n                removeNode(vnode.elm);\n            }\n        }\n        function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n            var oldStartIdx = 0;\n            var newStartIdx = 0;\n            var oldEndIdx = oldCh.length - 1;\n            var oldStartVnode = oldCh[0];\n            var oldEndVnode = oldCh[oldEndIdx];\n            var newEndIdx = newCh.length - 1;\n            var newStartVnode = newCh[0];\n            var newEndVnode = newCh[newEndIdx];\n            var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n            // removeOnly is a special flag used only by <transition-group>\n            // to ensure removed elements stay in correct relative positions\n            // during leaving transitions\n            var canMove = !removeOnly;\n            {\n                checkDuplicateKeys(newCh);\n            }\n            while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n                if (isUndef(oldStartVnode)) {\n                    oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n                }\n                else if (isUndef(oldEndVnode)) {\n                    oldEndVnode = oldCh[--oldEndIdx];\n                }\n                else if (sameVnode(oldStartVnode, newStartVnode)) {\n                    patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n                    oldStartVnode = oldCh[++oldStartIdx];\n                    newStartVnode = newCh[++newStartIdx];\n                }\n                else if (sameVnode(oldEndVnode, newEndVnode)) {\n                    patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n                    oldEndVnode = oldCh[--oldEndIdx];\n                    newEndVnode = newCh[--newEndIdx];\n                }\n                else if (sameVnode(oldStartVnode, newEndVnode)) {\n                    // Vnode moved right\n                    patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n                    canMove &&\n                        nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n                    oldStartVnode = oldCh[++oldStartIdx];\n                    newEndVnode = newCh[--newEndIdx];\n                }\n                else if (sameVnode(oldEndVnode, newStartVnode)) {\n                    // Vnode moved left\n                    patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n                    canMove &&\n                        nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                    oldEndVnode = oldCh[--oldEndIdx];\n                    newStartVnode = newCh[++newStartIdx];\n                }\n                else {\n                    if (isUndef(oldKeyToIdx))\n                        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                    idxInOld = isDef(newStartVnode.key)\n                        ? oldKeyToIdx[newStartVnode.key]\n                        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n                    if (isUndef(idxInOld)) {\n                        // New element\n                        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                    }\n                    else {\n                        vnodeToMove = oldCh[idxInOld];\n                        if (sameVnode(vnodeToMove, newStartVnode)) {\n                            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n                            oldCh[idxInOld] = undefined;\n                            canMove &&\n                                nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n                        }\n                        else {\n                            // same key but different element. treat as new element\n                            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n                        }\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n            if (oldStartIdx > oldEndIdx) {\n                refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n                addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n            }\n            else if (newStartIdx > newEndIdx) {\n                removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n            }\n        }\n        function checkDuplicateKeys(children) {\n            var seenKeys = {};\n            for (var i_4 = 0; i_4 < children.length; i_4++) {\n                var vnode = children[i_4];\n                var key = vnode.key;\n                if (isDef(key)) {\n                    if (seenKeys[key]) {\n                        warn$2(\"Duplicate keys detected: '\".concat(key, \"'. This may cause an update error.\"), vnode.context);\n                    }\n                    else {\n                        seenKeys[key] = true;\n                    }\n                }\n            }\n        }\n        function findIdxInOld(node, oldCh, start, end) {\n            for (var i_5 = start; i_5 < end; i_5++) {\n                var c = oldCh[i_5];\n                if (isDef(c) && sameVnode(node, c))\n                    return i_5;\n            }\n        }\n        function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {\n            if (oldVnode === vnode) {\n                return;\n            }\n            if (isDef(vnode.elm) && isDef(ownerArray)) {\n                // clone reused vnode\n                vnode = ownerArray[index] = cloneVNode(vnode);\n            }\n            var elm = (vnode.elm = oldVnode.elm);\n            if (isTrue(oldVnode.isAsyncPlaceholder)) {\n                if (isDef(vnode.asyncFactory.resolved)) {\n                    hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n                }\n                else {\n                    vnode.isAsyncPlaceholder = true;\n                }\n                return;\n            }\n            // reuse element for static trees.\n            // note we only do this if the vnode is cloned -\n            // if the new node is not cloned it means the render functions have been\n            // reset by the hot-reload-api and we need to do a proper re-render.\n            if (isTrue(vnode.isStatic) &&\n                isTrue(oldVnode.isStatic) &&\n                vnode.key === oldVnode.key &&\n                (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {\n                vnode.componentInstance = oldVnode.componentInstance;\n                return;\n            }\n            var i;\n            var data = vnode.data;\n            if (isDef(data) && isDef((i = data.hook)) && isDef((i = i.prepatch))) {\n                i(oldVnode, vnode);\n            }\n            var oldCh = oldVnode.children;\n            var ch = vnode.children;\n            if (isDef(data) && isPatchable(vnode)) {\n                for (i = 0; i < cbs.update.length; ++i)\n                    cbs.update[i](oldVnode, vnode);\n                if (isDef((i = data.hook)) && isDef((i = i.update)))\n                    i(oldVnode, vnode);\n            }\n            if (isUndef(vnode.text)) {\n                if (isDef(oldCh) && isDef(ch)) {\n                    if (oldCh !== ch)\n                        updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\n                }\n                else if (isDef(ch)) {\n                    {\n                        checkDuplicateKeys(ch);\n                    }\n                    if (isDef(oldVnode.text))\n                        nodeOps.setTextContent(elm, '');\n                    addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n                }\n                else if (isDef(oldCh)) {\n                    removeVnodes(oldCh, 0, oldCh.length - 1);\n                }\n                else if (isDef(oldVnode.text)) {\n                    nodeOps.setTextContent(elm, '');\n                }\n            }\n            else if (oldVnode.text !== vnode.text) {\n                nodeOps.setTextContent(elm, vnode.text);\n            }\n            if (isDef(data)) {\n                if (isDef((i = data.hook)) && isDef((i = i.postpatch)))\n                    i(oldVnode, vnode);\n            }\n        }\n        function invokeInsertHook(vnode, queue, initial) {\n            // delay insert hooks for component root nodes, invoke them after the\n            // element is really inserted\n            if (isTrue(initial) && isDef(vnode.parent)) {\n                vnode.parent.data.pendingInsert = queue;\n            }\n            else {\n                for (var i_6 = 0; i_6 < queue.length; ++i_6) {\n                    queue[i_6].data.hook.insert(queue[i_6]);\n                }\n            }\n        }\n        var hydrationBailed = false;\n        // list of modules that can skip create hook during hydration because they\n        // are already rendered on the client or has no need for initialization\n        // Note: style is excluded because it relies on initial clone for future\n        // deep updates (#7063).\n        var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n        // Note: this is a browser-only function so we can assume elms are DOM nodes.\n        function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {\n            var i;\n            var tag = vnode.tag, data = vnode.data, children = vnode.children;\n            inVPre = inVPre || (data && data.pre);\n            vnode.elm = elm;\n            if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n                vnode.isAsyncPlaceholder = true;\n                return true;\n            }\n            // assert node match\n            {\n                if (!assertNodeMatch(elm, vnode, inVPre)) {\n                    return false;\n                }\n            }\n            if (isDef(data)) {\n                if (isDef((i = data.hook)) && isDef((i = i.init)))\n                    i(vnode, true /* hydrating */);\n                if (isDef((i = vnode.componentInstance))) {\n                    // child component. it should have hydrated its own tree.\n                    initComponent(vnode, insertedVnodeQueue);\n                    return true;\n                }\n            }\n            if (isDef(tag)) {\n                if (isDef(children)) {\n                    // empty element, allow client to pick up and populate children\n                    if (!elm.hasChildNodes()) {\n                        createChildren(vnode, children, insertedVnodeQueue);\n                    }\n                    else {\n                        // v-html and domProps: innerHTML\n                        if (isDef((i = data)) &&\n                            isDef((i = i.domProps)) &&\n                            isDef((i = i.innerHTML))) {\n                            if (i !== elm.innerHTML) {\n                                /* istanbul ignore if */\n                                if (typeof console !== 'undefined' &&\n                                    !hydrationBailed) {\n                                    hydrationBailed = true;\n                                    console.warn('Parent: ', elm);\n                                    console.warn('server innerHTML: ', i);\n                                    console.warn('client innerHTML: ', elm.innerHTML);\n                                }\n                                return false;\n                            }\n                        }\n                        else {\n                            // iterate and compare children lists\n                            var childrenMatch = true;\n                            var childNode = elm.firstChild;\n                            for (var i_7 = 0; i_7 < children.length; i_7++) {\n                                if (!childNode ||\n                                    !hydrate(childNode, children[i_7], insertedVnodeQueue, inVPre)) {\n                                    childrenMatch = false;\n                                    break;\n                                }\n                                childNode = childNode.nextSibling;\n                            }\n                            // if childNode is not null, it means the actual childNodes list is\n                            // longer than the virtual children list.\n                            if (!childrenMatch || childNode) {\n                                /* istanbul ignore if */\n                                if (typeof console !== 'undefined' &&\n                                    !hydrationBailed) {\n                                    hydrationBailed = true;\n                                    console.warn('Parent: ', elm);\n                                    console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n                                }\n                                return false;\n                            }\n                        }\n                    }\n                }\n                if (isDef(data)) {\n                    var fullInvoke = false;\n                    for (var key in data) {\n                        if (!isRenderedModule(key)) {\n                            fullInvoke = true;\n                            invokeCreateHooks(vnode, insertedVnodeQueue);\n                            break;\n                        }\n                    }\n                    if (!fullInvoke && data['class']) {\n                        // ensure collecting deps for deep class bindings for future updates\n                        traverse(data['class']);\n                    }\n                }\n            }\n            else if (elm.data !== vnode.text) {\n                elm.data = vnode.text;\n            }\n            return true;\n        }\n        function assertNodeMatch(node, vnode, inVPre) {\n            if (isDef(vnode.tag)) {\n                return (vnode.tag.indexOf('vue-component') === 0 ||\n                    (!isUnknownElement(vnode, inVPre) &&\n                        vnode.tag.toLowerCase() ===\n                            (node.tagName && node.tagName.toLowerCase())));\n            }\n            else {\n                return node.nodeType === (vnode.isComment ? 8 : 3);\n            }\n        }\n        return function patch(oldVnode, vnode, hydrating, removeOnly) {\n            if (isUndef(vnode)) {\n                if (isDef(oldVnode))\n                    invokeDestroyHook(oldVnode);\n                return;\n            }\n            var isInitialPatch = false;\n            var insertedVnodeQueue = [];\n            if (isUndef(oldVnode)) {\n                // empty mount (likely as component), create new root element\n                isInitialPatch = true;\n                createElm(vnode, insertedVnodeQueue);\n            }\n            else {\n                var isRealElement = isDef(oldVnode.nodeType);\n                if (!isRealElement && sameVnode(oldVnode, vnode)) {\n                    // patch existing root node\n                    patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n                }\n                else {\n                    if (isRealElement) {\n                        // mounting to a real element\n                        // check if this is server-rendered content and if we can perform\n                        // a successful hydration.\n                        if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n                            oldVnode.removeAttribute(SSR_ATTR);\n                            hydrating = true;\n                        }\n                        if (isTrue(hydrating)) {\n                            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n                                invokeInsertHook(vnode, insertedVnodeQueue, true);\n                                return oldVnode;\n                            }\n                            else {\n                                warn$2('The client-side rendered virtual DOM tree is not matching ' +\n                                    'server-rendered content. This is likely caused by incorrect ' +\n                                    'HTML markup, for example nesting block-level elements inside ' +\n                                    '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                                    'full client-side render.');\n                            }\n                        }\n                        // either not server-rendered, or hydration failed.\n                        // create an empty node and replace it\n                        oldVnode = emptyNodeAt(oldVnode);\n                    }\n                    // replacing existing element\n                    var oldElm = oldVnode.elm;\n                    var parentElm = nodeOps.parentNode(oldElm);\n                    // create new node\n                    createElm(vnode, insertedVnodeQueue, \n                    // extremely rare edge case: do not insert if old element is in a\n                    // leaving transition. Only happens when combining transition +\n                    // keep-alive + HOCs. (#4590)\n                    oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm));\n                    // update parent placeholder node element, recursively\n                    if (isDef(vnode.parent)) {\n                        var ancestor = vnode.parent;\n                        var patchable = isPatchable(vnode);\n                        while (ancestor) {\n                            for (var i_8 = 0; i_8 < cbs.destroy.length; ++i_8) {\n                                cbs.destroy[i_8](ancestor);\n                            }\n                            ancestor.elm = vnode.elm;\n                            if (patchable) {\n                                for (var i_9 = 0; i_9 < cbs.create.length; ++i_9) {\n                                    cbs.create[i_9](emptyNode, ancestor);\n                                }\n                                // #6513\n                                // invoke insert hooks that may have been merged by create hooks.\n                                // e.g. for directives that uses the \"inserted\" hook.\n                                var insert_1 = ancestor.data.hook.insert;\n                                if (insert_1.merged) {\n                                    // start at index 1 to avoid re-invoking component mounted hook\n                                    // clone insert hooks to avoid being mutated during iteration.\n                                    // e.g. for customed directives under transition group.\n                                    var cloned = insert_1.fns.slice(1);\n                                    for (var i_10 = 0; i_10 < cloned.length; i_10++) {\n                                        cloned[i_10]();\n                                    }\n                                }\n                            }\n                            else {\n                                registerRef(ancestor);\n                            }\n                            ancestor = ancestor.parent;\n                        }\n                    }\n                    // destroy old node\n                    if (isDef(parentElm)) {\n                        removeVnodes([oldVnode], 0, 0);\n                    }\n                    else if (isDef(oldVnode.tag)) {\n                        invokeDestroyHook(oldVnode);\n                    }\n                }\n            }\n            invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n            return vnode.elm;\n        };\n    }\n    var directives$1 = {\n        create: updateDirectives,\n        update: updateDirectives,\n        destroy: function unbindDirectives(vnode) {\n            // @ts-expect-error emptyNode is not VNodeWithData\n            updateDirectives(vnode, emptyNode);\n        }\n    };\n    function updateDirectives(oldVnode, vnode) {\n        if (oldVnode.data.directives || vnode.data.directives) {\n            _update(oldVnode, vnode);\n        }\n    }\n    function _update(oldVnode, vnode) {\n        var isCreate = oldVnode === emptyNode;\n        var isDestroy = vnode === emptyNode;\n        var oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context);\n        var newDirs = normalizeDirectives(vnode.data.directives, vnode.context);\n        var dirsWithInsert = [];\n        var dirsWithPostpatch = [];\n        var key, oldDir, dir;\n        for (key in newDirs) {\n            oldDir = oldDirs[key];\n            dir = newDirs[key];\n            if (!oldDir) {\n                // new directive, bind\n                callHook(dir, 'bind', vnode, oldVnode);\n                if (dir.def && dir.def.inserted) {\n                    dirsWithInsert.push(dir);\n                }\n            }\n            else {\n                // existing directive, update\n                dir.oldValue = oldDir.value;\n                dir.oldArg = oldDir.arg;\n                callHook(dir, 'update', vnode, oldVnode);\n                if (dir.def && dir.def.componentUpdated) {\n                    dirsWithPostpatch.push(dir);\n                }\n            }\n        }\n        if (dirsWithInsert.length) {\n            var callInsert = function () {\n                for (var i = 0; i < dirsWithInsert.length; i++) {\n                    callHook(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n                }\n            };\n            if (isCreate) {\n                mergeVNodeHook(vnode, 'insert', callInsert);\n            }\n            else {\n                callInsert();\n            }\n        }\n        if (dirsWithPostpatch.length) {\n            mergeVNodeHook(vnode, 'postpatch', function () {\n                for (var i = 0; i < dirsWithPostpatch.length; i++) {\n                    callHook(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n                }\n            });\n        }\n        if (!isCreate) {\n            for (key in oldDirs) {\n                if (!newDirs[key]) {\n                    // no longer present, unbind\n                    callHook(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n                }\n            }\n        }\n    }\n    var emptyModifiers = Object.create(null);\n    function normalizeDirectives(dirs, vm) {\n        var res = Object.create(null);\n        if (!dirs) {\n            // $flow-disable-line\n            return res;\n        }\n        var i, dir;\n        for (i = 0; i < dirs.length; i++) {\n            dir = dirs[i];\n            if (!dir.modifiers) {\n                // $flow-disable-line\n                dir.modifiers = emptyModifiers;\n            }\n            res[getRawDirName(dir)] = dir;\n            if (vm._setupState && vm._setupState.__sfc) {\n                var setupDef = dir.def || resolveAsset(vm, '_setupState', 'v-' + dir.name);\n                if (typeof setupDef === 'function') {\n                    dir.def = {\n                        bind: setupDef,\n                        update: setupDef,\n                    };\n                }\n                else {\n                    dir.def = setupDef;\n                }\n            }\n            dir.def = dir.def || resolveAsset(vm.$options, 'directives', dir.name, true);\n        }\n        // $flow-disable-line\n        return res;\n    }\n    function getRawDirName(dir) {\n        return (dir.rawName || \"\".concat(dir.name, \".\").concat(Object.keys(dir.modifiers || {}).join('.')));\n    }\n    function callHook(dir, hook, vnode, oldVnode, isDestroy) {\n        var fn = dir.def && dir.def[hook];\n        if (fn) {\n            try {\n                fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n            }\n            catch (e) {\n                handleError(e, vnode.context, \"directive \".concat(dir.name, \" \").concat(hook, \" hook\"));\n            }\n        }\n    }\n    var baseModules = [ref, directives$1];\n    function updateAttrs(oldVnode, vnode) {\n        var opts = vnode.componentOptions;\n        if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n            return;\n        }\n        if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n            return;\n        }\n        var key, cur, old;\n        var elm = vnode.elm;\n        var oldAttrs = oldVnode.data.attrs || {};\n        var attrs = vnode.data.attrs || {};\n        // clone observed objects, as the user probably wants to mutate it\n        if (isDef(attrs.__ob__) || isTrue(attrs._v_attr_proxy)) {\n            attrs = vnode.data.attrs = extend({}, attrs);\n        }\n        for (key in attrs) {\n            cur = attrs[key];\n            old = oldAttrs[key];\n            if (old !== cur) {\n                setAttr(elm, key, cur, vnode.data.pre);\n            }\n        }\n        // #4391: in IE9, setting type can reset value for input[type=radio]\n        // #6666: IE/Edge forces progress value down to 1 before setting a max\n        /* istanbul ignore if */\n        if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n            setAttr(elm, 'value', attrs.value);\n        }\n        for (key in oldAttrs) {\n            if (isUndef(attrs[key])) {\n                if (isXlink(key)) {\n                    elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n                }\n                else if (!isEnumeratedAttr(key)) {\n                    elm.removeAttribute(key);\n                }\n            }\n        }\n    }\n    function setAttr(el, key, value, isInPre) {\n        if (isInPre || el.tagName.indexOf('-') > -1) {\n            baseSetAttr(el, key, value);\n        }\n        else if (isBooleanAttr(key)) {\n            // set attribute for blank value\n            // e.g. <option disabled>Select one</option>\n            if (isFalsyAttrValue(value)) {\n                el.removeAttribute(key);\n            }\n            else {\n                // technically allowfullscreen is a boolean attribute for <iframe>,\n                // but Flash expects a value of \"true\" when used on <embed> tag\n                value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;\n                el.setAttribute(key, value);\n            }\n        }\n        else if (isEnumeratedAttr(key)) {\n            el.setAttribute(key, convertEnumeratedValue(key, value));\n        }\n        else if (isXlink(key)) {\n            if (isFalsyAttrValue(value)) {\n                el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n            }\n            else {\n                el.setAttributeNS(xlinkNS, key, value);\n            }\n        }\n        else {\n            baseSetAttr(el, key, value);\n        }\n    }\n    function baseSetAttr(el, key, value) {\n        if (isFalsyAttrValue(value)) {\n            el.removeAttribute(key);\n        }\n        else {\n            // #7138: IE10 & 11 fires input event when setting placeholder on\n            // <textarea>... block the first input event and remove the blocker\n            // immediately.\n            /* istanbul ignore if */\n            if (isIE &&\n                !isIE9 &&\n                el.tagName === 'TEXTAREA' &&\n                key === 'placeholder' &&\n                value !== '' &&\n                !el.__ieph) {\n                var blocker_1 = function (e) {\n                    e.stopImmediatePropagation();\n                    el.removeEventListener('input', blocker_1);\n                };\n                el.addEventListener('input', blocker_1);\n                // $flow-disable-line\n                el.__ieph = true; /* IE placeholder patched */\n            }\n            el.setAttribute(key, value);\n        }\n    }\n    var attrs = {\n        create: updateAttrs,\n        update: updateAttrs\n    };\n    function updateClass(oldVnode, vnode) {\n        var el = vnode.elm;\n        var data = vnode.data;\n        var oldData = oldVnode.data;\n        if (isUndef(data.staticClass) &&\n            isUndef(data.class) &&\n            (isUndef(oldData) ||\n                (isUndef(oldData.staticClass) && isUndef(oldData.class)))) {\n            return;\n        }\n        var cls = genClassForVnode(vnode);\n        // handle transition classes\n        var transitionClass = el._transitionClasses;\n        if (isDef(transitionClass)) {\n            cls = concat(cls, stringifyClass(transitionClass));\n        }\n        // set the class\n        if (cls !== el._prevClass) {\n            el.setAttribute('class', cls);\n            el._prevClass = cls;\n        }\n    }\n    var klass$1 = {\n        create: updateClass,\n        update: updateClass\n    };\n    var validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n    function parseFilters(exp) {\n        var inSingle = false;\n        var inDouble = false;\n        var inTemplateString = false;\n        var inRegex = false;\n        var curly = 0;\n        var square = 0;\n        var paren = 0;\n        var lastFilterIndex = 0;\n        var c, prev, i, expression, filters;\n        for (i = 0; i < exp.length; i++) {\n            prev = c;\n            c = exp.charCodeAt(i);\n            if (inSingle) {\n                if (c === 0x27 && prev !== 0x5c)\n                    inSingle = false;\n            }\n            else if (inDouble) {\n                if (c === 0x22 && prev !== 0x5c)\n                    inDouble = false;\n            }\n            else if (inTemplateString) {\n                if (c === 0x60 && prev !== 0x5c)\n                    inTemplateString = false;\n            }\n            else if (inRegex) {\n                if (c === 0x2f && prev !== 0x5c)\n                    inRegex = false;\n            }\n            else if (c === 0x7c && // pipe\n                exp.charCodeAt(i + 1) !== 0x7c &&\n                exp.charCodeAt(i - 1) !== 0x7c &&\n                !curly &&\n                !square &&\n                !paren) {\n                if (expression === undefined) {\n                    // first filter, end of expression\n                    lastFilterIndex = i + 1;\n                    expression = exp.slice(0, i).trim();\n                }\n                else {\n                    pushFilter();\n                }\n            }\n            else {\n                switch (c) {\n                    case 0x22:\n                        inDouble = true;\n                        break; // \"\n                    case 0x27:\n                        inSingle = true;\n                        break; // '\n                    case 0x60:\n                        inTemplateString = true;\n                        break; // `\n                    case 0x28:\n                        paren++;\n                        break; // (\n                    case 0x29:\n                        paren--;\n                        break; // )\n                    case 0x5b:\n                        square++;\n                        break; // [\n                    case 0x5d:\n                        square--;\n                        break; // ]\n                    case 0x7b:\n                        curly++;\n                        break; // {\n                    case 0x7d:\n                        curly--;\n                        break; // }\n                }\n                if (c === 0x2f) {\n                    // /\n                    var j = i - 1;\n                    var p \n                    // find first non-whitespace prev char\n                    = void 0;\n                    // find first non-whitespace prev char\n                    for (; j >= 0; j--) {\n                        p = exp.charAt(j);\n                        if (p !== ' ')\n                            break;\n                    }\n                    if (!p || !validDivisionCharRE.test(p)) {\n                        inRegex = true;\n                    }\n                }\n            }\n        }\n        if (expression === undefined) {\n            expression = exp.slice(0, i).trim();\n        }\n        else if (lastFilterIndex !== 0) {\n            pushFilter();\n        }\n        function pushFilter() {\n            (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n            lastFilterIndex = i + 1;\n        }\n        if (filters) {\n            for (i = 0; i < filters.length; i++) {\n                expression = wrapFilter(expression, filters[i]);\n            }\n        }\n        return expression;\n    }\n    function wrapFilter(exp, filter) {\n        var i = filter.indexOf('(');\n        if (i < 0) {\n            // _f: resolveFilter\n            return \"_f(\\\"\".concat(filter, \"\\\")(\").concat(exp, \")\");\n        }\n        else {\n            var name_1 = filter.slice(0, i);\n            var args = filter.slice(i + 1);\n            return \"_f(\\\"\".concat(name_1, \"\\\")(\").concat(exp).concat(args !== ')' ? ',' + args : args);\n        }\n    }\n    /* eslint-disable no-unused-vars */\n    function baseWarn(msg, range) {\n        console.error(\"[Vue compiler]: \".concat(msg));\n    }\n    /* eslint-enable no-unused-vars */\n    function pluckModuleFunction(modules, key) {\n        return modules ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; }) : [];\n    }\n    function addProp(el, name, value, range, dynamic) {\n        (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n        el.plain = false;\n    }\n    function addAttr(el, name, value, range, dynamic) {\n        var attrs = dynamic\n            ? el.dynamicAttrs || (el.dynamicAttrs = [])\n            : el.attrs || (el.attrs = []);\n        attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n        el.plain = false;\n    }\n    // add a raw attr (use this in preTransforms)\n    function addRawAttr(el, name, value, range) {\n        el.attrsMap[name] = value;\n        el.attrsList.push(rangeSetItem({ name: name, value: value }, range));\n    }\n    function addDirective(el, name, rawName, value, arg, isDynamicArg, modifiers, range) {\n        (el.directives || (el.directives = [])).push(rangeSetItem({\n            name: name,\n            rawName: rawName,\n            value: value,\n            arg: arg,\n            isDynamicArg: isDynamicArg,\n            modifiers: modifiers\n        }, range));\n        el.plain = false;\n    }\n    function prependModifierMarker(symbol, name, dynamic) {\n        return dynamic ? \"_p(\".concat(name, \",\\\"\").concat(symbol, \"\\\")\") : symbol + name; // mark the event as captured\n    }\n    function addHandler(el, name, value, modifiers, important, warn, range, dynamic) {\n        modifiers = modifiers || emptyObject;\n        // warn prevent and passive modifier\n        /* istanbul ignore if */\n        if (warn && modifiers.prevent && modifiers.passive) {\n            warn(\"passive and prevent can't be used together. \" +\n                \"Passive handler can't prevent default event.\", range);\n        }\n        // normalize click.right and click.middle since they don't actually fire\n        // this is technically browser-specific, but at least for now browsers are\n        // the only target envs that have right/middle clicks.\n        if (modifiers.right) {\n            if (dynamic) {\n                name = \"(\".concat(name, \")==='click'?'contextmenu':(\").concat(name, \")\");\n            }\n            else if (name === 'click') {\n                name = 'contextmenu';\n                delete modifiers.right;\n            }\n        }\n        else if (modifiers.middle) {\n            if (dynamic) {\n                name = \"(\".concat(name, \")==='click'?'mouseup':(\").concat(name, \")\");\n            }\n            else if (name === 'click') {\n                name = 'mouseup';\n            }\n        }\n        // check capture modifier\n        if (modifiers.capture) {\n            delete modifiers.capture;\n            name = prependModifierMarker('!', name, dynamic);\n        }\n        if (modifiers.once) {\n            delete modifiers.once;\n            name = prependModifierMarker('~', name, dynamic);\n        }\n        /* istanbul ignore if */\n        if (modifiers.passive) {\n            delete modifiers.passive;\n            name = prependModifierMarker('&', name, dynamic);\n        }\n        var events;\n        if (modifiers.native) {\n            delete modifiers.native;\n            events = el.nativeEvents || (el.nativeEvents = {});\n        }\n        else {\n            events = el.events || (el.events = {});\n        }\n        var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);\n        if (modifiers !== emptyObject) {\n            newHandler.modifiers = modifiers;\n        }\n        var handlers = events[name];\n        /* istanbul ignore if */\n        if (Array.isArray(handlers)) {\n            important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n        }\n        else if (handlers) {\n            events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n        }\n        else {\n            events[name] = newHandler;\n        }\n        el.plain = false;\n    }\n    function getRawBindingAttr(el, name) {\n        return (el.rawAttrsMap[':' + name] ||\n            el.rawAttrsMap['v-bind:' + name] ||\n            el.rawAttrsMap[name]);\n    }\n    function getBindingAttr(el, name, getStatic) {\n        var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);\n        if (dynamicValue != null) {\n            return parseFilters(dynamicValue);\n        }\n        else if (getStatic !== false) {\n            var staticValue = getAndRemoveAttr(el, name);\n            if (staticValue != null) {\n                return JSON.stringify(staticValue);\n            }\n        }\n    }\n    // note: this only removes the attr from the Array (attrsList) so that it\n    // doesn't get processed by processAttrs.\n    // By default it does NOT remove it from the map (attrsMap) because the map is\n    // needed during codegen.\n    function getAndRemoveAttr(el, name, removeFromMap) {\n        var val;\n        if ((val = el.attrsMap[name]) != null) {\n            var list = el.attrsList;\n            for (var i = 0, l = list.length; i < l; i++) {\n                if (list[i].name === name) {\n                    list.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        if (removeFromMap) {\n            delete el.attrsMap[name];\n        }\n        return val;\n    }\n    function getAndRemoveAttrByRegex(el, name) {\n        var list = el.attrsList;\n        for (var i = 0, l = list.length; i < l; i++) {\n            var attr = list[i];\n            if (name.test(attr.name)) {\n                list.splice(i, 1);\n                return attr;\n            }\n        }\n    }\n    function rangeSetItem(item, range) {\n        if (range) {\n            if (range.start != null) {\n                item.start = range.start;\n            }\n            if (range.end != null) {\n                item.end = range.end;\n            }\n        }\n        return item;\n    }\n    /**\n     * Cross-platform code generation for component v-model\n     */\n    function genComponentModel(el, value, modifiers) {\n        var _a = modifiers || {}, number = _a.number, trim = _a.trim;\n        var baseValueExpression = '$$v';\n        var valueExpression = baseValueExpression;\n        if (trim) {\n            valueExpression =\n                \"(typeof \".concat(baseValueExpression, \" === 'string'\") +\n                    \"? \".concat(baseValueExpression, \".trim()\") +\n                    \": \".concat(baseValueExpression, \")\");\n        }\n        if (number) {\n            valueExpression = \"_n(\".concat(valueExpression, \")\");\n        }\n        var assignment = genAssignmentCode(value, valueExpression);\n        el.model = {\n            value: \"(\".concat(value, \")\"),\n            expression: JSON.stringify(value),\n            callback: \"function (\".concat(baseValueExpression, \") {\").concat(assignment, \"}\")\n        };\n    }\n    /**\n     * Cross-platform codegen helper for generating v-model value assignment code.\n     */\n    function genAssignmentCode(value, assignment) {\n        var res = parseModel(value);\n        if (res.key === null) {\n            return \"\".concat(value, \"=\").concat(assignment);\n        }\n        else {\n            return \"$set(\".concat(res.exp, \", \").concat(res.key, \", \").concat(assignment, \")\");\n        }\n    }\n    /**\n     * Parse a v-model expression into a base path and a final key segment.\n     * Handles both dot-path and possible square brackets.\n     *\n     * Possible cases:\n     *\n     * - test\n     * - test[key]\n     * - test[test1[key]]\n     * - test[\"a\"][key]\n     * - xxx.test[a[a].test1[key]]\n     * - test.xxx.a[\"asa\"][test1[key]]\n     *\n     */\n    var len, str, chr, index, expressionPos, expressionEndPos;\n    function parseModel(val) {\n        // Fix https://github.com/vuejs/vue/pull/7730\n        // allow v-model=\"obj.val \" (trailing whitespace)\n        val = val.trim();\n        len = val.length;\n        if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n            index = val.lastIndexOf('.');\n            if (index > -1) {\n                return {\n                    exp: val.slice(0, index),\n                    key: '\"' + val.slice(index + 1) + '\"'\n                };\n            }\n            else {\n                return {\n                    exp: val,\n                    key: null\n                };\n            }\n        }\n        str = val;\n        index = expressionPos = expressionEndPos = 0;\n        while (!eof()) {\n            chr = next();\n            /* istanbul ignore if */\n            if (isStringStart(chr)) {\n                parseString(chr);\n            }\n            else if (chr === 0x5b) {\n                parseBracket(chr);\n            }\n        }\n        return {\n            exp: val.slice(0, expressionPos),\n            key: val.slice(expressionPos + 1, expressionEndPos)\n        };\n    }\n    function next() {\n        return str.charCodeAt(++index);\n    }\n    function eof() {\n        return index >= len;\n    }\n    function isStringStart(chr) {\n        return chr === 0x22 || chr === 0x27;\n    }\n    function parseBracket(chr) {\n        var inBracket = 1;\n        expressionPos = index;\n        while (!eof()) {\n            chr = next();\n            if (isStringStart(chr)) {\n                parseString(chr);\n                continue;\n            }\n            if (chr === 0x5b)\n                inBracket++;\n            if (chr === 0x5d)\n                inBracket--;\n            if (inBracket === 0) {\n                expressionEndPos = index;\n                break;\n            }\n        }\n    }\n    function parseString(chr) {\n        var stringQuote = chr;\n        while (!eof()) {\n            chr = next();\n            if (chr === stringQuote) {\n                break;\n            }\n        }\n    }\n    var warn$1;\n    // in some cases, the event used has to be determined at runtime\n    // so we used some reserved tokens during compile.\n    var RANGE_TOKEN = '__r';\n    var CHECKBOX_RADIO_TOKEN = '__c';\n    function model$1(el, dir, _warn) {\n        warn$1 = _warn;\n        var value = dir.value;\n        var modifiers = dir.modifiers;\n        var tag = el.tag;\n        var type = el.attrsMap.type;\n        {\n            // inputs with type=\"file\" are read only and setting the input's\n            // value will throw an error.\n            if (tag === 'input' && type === 'file') {\n                warn$1(\"<\".concat(el.tag, \" v-model=\\\"\").concat(value, \"\\\" type=\\\"file\\\">:\\n\") +\n                    \"File inputs are read only. Use a v-on:change listener instead.\", el.rawAttrsMap['v-model']);\n            }\n        }\n        if (el.component) {\n            genComponentModel(el, value, modifiers);\n            // component v-model doesn't need extra runtime\n            return false;\n        }\n        else if (tag === 'select') {\n            genSelect(el, value, modifiers);\n        }\n        else if (tag === 'input' && type === 'checkbox') {\n            genCheckboxModel(el, value, modifiers);\n        }\n        else if (tag === 'input' && type === 'radio') {\n            genRadioModel(el, value, modifiers);\n        }\n        else if (tag === 'input' || tag === 'textarea') {\n            genDefaultModel(el, value, modifiers);\n        }\n        else if (!config.isReservedTag(tag)) {\n            genComponentModel(el, value, modifiers);\n            // component v-model doesn't need extra runtime\n            return false;\n        }\n        else {\n            warn$1(\"<\".concat(el.tag, \" v-model=\\\"\").concat(value, \"\\\">: \") +\n                \"v-model is not supported on this element type. \" +\n                \"If you are working with contenteditable, it's recommended to \" +\n                'wrap a library dedicated for that purpose inside a custom component.', el.rawAttrsMap['v-model']);\n        }\n        // ensure runtime directive metadata\n        return true;\n    }\n    function genCheckboxModel(el, value, modifiers) {\n        var number = modifiers && modifiers.number;\n        var valueBinding = getBindingAttr(el, 'value') || 'null';\n        var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n        var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n        addProp(el, 'checked', \"Array.isArray(\".concat(value, \")\") +\n            \"?_i(\".concat(value, \",\").concat(valueBinding, \")>-1\") +\n            (trueValueBinding === 'true'\n                ? \":(\".concat(value, \")\")\n                : \":_q(\".concat(value, \",\").concat(trueValueBinding, \")\")));\n        addHandler(el, 'change', \"var $$a=\".concat(value, \",\") +\n            '$$el=$event.target,' +\n            \"$$c=$$el.checked?(\".concat(trueValueBinding, \"):(\").concat(falseValueBinding, \");\") +\n            'if(Array.isArray($$a)){' +\n            \"var $$v=\".concat(number ? '_n(' + valueBinding + ')' : valueBinding, \",\") +\n            '$$i=_i($$a,$$v);' +\n            \"if($$el.checked){$$i<0&&(\".concat(genAssignmentCode(value, '$$a.concat([$$v])'), \")}\") +\n            \"else{$$i>-1&&(\".concat(genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))'), \")}\") +\n            \"}else{\".concat(genAssignmentCode(value, '$$c'), \"}\"), null, true);\n    }\n    function genRadioModel(el, value, modifiers) {\n        var number = modifiers && modifiers.number;\n        var valueBinding = getBindingAttr(el, 'value') || 'null';\n        valueBinding = number ? \"_n(\".concat(valueBinding, \")\") : valueBinding;\n        addProp(el, 'checked', \"_q(\".concat(value, \",\").concat(valueBinding, \")\"));\n        addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n    }\n    function genSelect(el, value, modifiers) {\n        var number = modifiers && modifiers.number;\n        var selectedVal = \"Array.prototype.filter\" +\n            \".call($event.target.options,function(o){return o.selected})\" +\n            \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n            \"return \".concat(number ? '_n(val)' : 'val', \"})\");\n        var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n        var code = \"var $$selectedVal = \".concat(selectedVal, \";\");\n        code = \"\".concat(code, \" \").concat(genAssignmentCode(value, assignment));\n        addHandler(el, 'change', code, null, true);\n    }\n    function genDefaultModel(el, value, modifiers) {\n        var type = el.attrsMap.type;\n        // warn if v-bind:value conflicts with v-model\n        // except for inputs with v-bind:type\n        {\n            var value_1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n            var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n            if (value_1 && !typeBinding) {\n                var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n                warn$1(\"\".concat(binding, \"=\\\"\").concat(value_1, \"\\\" conflicts with v-model on the same element \") +\n                    'because the latter already expands to a value binding internally', el.rawAttrsMap[binding]);\n            }\n        }\n        var _a = modifiers || {}, lazy = _a.lazy, number = _a.number, trim = _a.trim;\n        var needCompositionGuard = !lazy && type !== 'range';\n        var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';\n        var valueExpression = '$event.target.value';\n        if (trim) {\n            valueExpression = \"$event.target.value.trim()\";\n        }\n        if (number) {\n            valueExpression = \"_n(\".concat(valueExpression, \")\");\n        }\n        var code = genAssignmentCode(value, valueExpression);\n        if (needCompositionGuard) {\n            code = \"if($event.target.composing)return;\".concat(code);\n        }\n        addProp(el, 'value', \"(\".concat(value, \")\"));\n        addHandler(el, event, code, null, true);\n        if (trim || number) {\n            addHandler(el, 'blur', '$forceUpdate()');\n        }\n    }\n    // normalize v-model event tokens that can only be determined at runtime.\n    // it's important to place the event as the first in the array because\n    // the whole point is ensuring the v-model callback gets called before\n    // user-attached handlers.\n    function normalizeEvents(on) {\n        /* istanbul ignore if */\n        if (isDef(on[RANGE_TOKEN])) {\n            // IE input[type=range] only supports `change` event\n            var event_1 = isIE ? 'change' : 'input';\n            on[event_1] = [].concat(on[RANGE_TOKEN], on[event_1] || []);\n            delete on[RANGE_TOKEN];\n        }\n        // This was originally intended to fix #4521 but no longer necessary\n        // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n        /* istanbul ignore if */\n        if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n            on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n            delete on[CHECKBOX_RADIO_TOKEN];\n        }\n    }\n    var target;\n    function createOnceHandler(event, handler, capture) {\n        var _target = target; // save current target element in closure\n        return function onceHandler() {\n            var res = handler.apply(null, arguments);\n            if (res !== null) {\n                remove(event, onceHandler, capture, _target);\n            }\n        };\n    }\n    // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n    // implementation and does not fire microtasks in between event propagation, so\n    // safe to exclude.\n    var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n    function add(name, handler, capture, passive) {\n        // async edge case #6566: inner click event triggers patch, event handler\n        // attached to outer element during patch, and triggered again. This\n        // happens because browsers fire microtask ticks between event propagation.\n        // the solution is simple: we save the timestamp when a handler is attached,\n        // and the handler would only fire if the event passed to it was fired\n        // AFTER it was attached.\n        if (useMicrotaskFix) {\n            var attachedTimestamp_1 = currentFlushTimestamp;\n            var original_1 = handler;\n            //@ts-expect-error\n            handler = original_1._wrapper = function (e) {\n                if (\n                // no bubbling, should always fire.\n                // this is just a safety net in case event.timeStamp is unreliable in\n                // certain weird environments...\n                e.target === e.currentTarget ||\n                    // event is fired after handler attachment\n                    e.timeStamp >= attachedTimestamp_1 ||\n                    // bail for environments that have buggy event.timeStamp implementations\n                    // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n                    // #9681 QtWebEngine event.timeStamp is negative value\n                    e.timeStamp <= 0 ||\n                    // #9448 bail if event is fired in another document in a multi-page\n                    // electron/nw.js app, since event.timeStamp will be using a different\n                    // starting reference\n                    e.target.ownerDocument !== document) {\n                    return original_1.apply(this, arguments);\n                }\n            };\n        }\n        target.addEventListener(name, handler, supportsPassive ? { capture: capture, passive: passive } : capture);\n    }\n    function remove(name, handler, capture, _target) {\n        (_target || target).removeEventListener(name, \n        //@ts-expect-error\n        handler._wrapper || handler, capture);\n    }\n    function updateDOMListeners(oldVnode, vnode) {\n        if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n            return;\n        }\n        var on = vnode.data.on || {};\n        var oldOn = oldVnode.data.on || {};\n        // vnode is empty when removing all listeners,\n        // and use old vnode dom element\n        target = vnode.elm || oldVnode.elm;\n        normalizeEvents(on);\n        updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context);\n        target = undefined;\n    }\n    var events = {\n        create: updateDOMListeners,\n        update: updateDOMListeners,\n        // @ts-expect-error emptyNode has actually data\n        destroy: function (vnode) { return updateDOMListeners(vnode, emptyNode); }\n    };\n    var svgContainer;\n    function updateDOMProps(oldVnode, vnode) {\n        if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n            return;\n        }\n        var key, cur;\n        var elm = vnode.elm;\n        var oldProps = oldVnode.data.domProps || {};\n        var props = vnode.data.domProps || {};\n        // clone observed objects, as the user probably wants to mutate it\n        if (isDef(props.__ob__) || isTrue(props._v_attr_proxy)) {\n            props = vnode.data.domProps = extend({}, props);\n        }\n        for (key in oldProps) {\n            if (!(key in props)) {\n                elm[key] = '';\n            }\n        }\n        for (key in props) {\n            cur = props[key];\n            // ignore children if the node has textContent or innerHTML,\n            // as these will throw away existing DOM nodes and cause removal errors\n            // on subsequent patches (#3360)\n            if (key === 'textContent' || key === 'innerHTML') {\n                if (vnode.children)\n                    vnode.children.length = 0;\n                if (cur === oldProps[key])\n                    continue;\n                // #6601 work around Chrome version <= 55 bug where single textNode\n                // replaced by innerHTML/textContent retains its parentNode property\n                if (elm.childNodes.length === 1) {\n                    elm.removeChild(elm.childNodes[0]);\n                }\n            }\n            if (key === 'value' && elm.tagName !== 'PROGRESS') {\n                // store value as _value as well since\n                // non-string values will be stringified\n                elm._value = cur;\n                // avoid resetting cursor position when value is the same\n                var strCur = isUndef(cur) ? '' : String(cur);\n                if (shouldUpdateValue(elm, strCur)) {\n                    elm.value = strCur;\n                }\n            }\n            else if (key === 'innerHTML' &&\n                isSVG(elm.tagName) &&\n                isUndef(elm.innerHTML)) {\n                // IE doesn't support innerHTML for SVG elements\n                svgContainer = svgContainer || document.createElement('div');\n                svgContainer.innerHTML = \"<svg>\".concat(cur, \"</svg>\");\n                var svg = svgContainer.firstChild;\n                while (elm.firstChild) {\n                    elm.removeChild(elm.firstChild);\n                }\n                while (svg.firstChild) {\n                    elm.appendChild(svg.firstChild);\n                }\n            }\n            else if (\n            // skip the update if old and new VDOM state is the same.\n            // `value` is handled separately because the DOM value may be temporarily\n            // out of sync with VDOM state due to focus, composition and modifiers.\n            // This  #4521 by skipping the unnecessary `checked` update.\n            cur !== oldProps[key]) {\n                // some property updates can throw\n                // e.g. `value` on <progress> w/ non-finite value\n                try {\n                    elm[key] = cur;\n                }\n                catch (e) { }\n            }\n        }\n    }\n    function shouldUpdateValue(elm, checkVal) {\n        return (\n        //@ts-expect-error\n        !elm.composing &&\n            (elm.tagName === 'OPTION' ||\n                isNotInFocusAndDirty(elm, checkVal) ||\n                isDirtyWithModifiers(elm, checkVal)));\n    }\n    function isNotInFocusAndDirty(elm, checkVal) {\n        // return true when textbox (.number and .trim) loses focus and its value is\n        // not equal to the updated value\n        var notInFocus = true;\n        // #6157\n        // work around IE bug when accessing document.activeElement in an iframe\n        try {\n            notInFocus = document.activeElement !== elm;\n        }\n        catch (e) { }\n        return notInFocus && elm.value !== checkVal;\n    }\n    function isDirtyWithModifiers(elm, newVal) {\n        var value = elm.value;\n        var modifiers = elm._vModifiers; // injected by v-model runtime\n        if (isDef(modifiers)) {\n            if (modifiers.number) {\n                return toNumber(value) !== toNumber(newVal);\n            }\n            if (modifiers.trim) {\n                return value.trim() !== newVal.trim();\n            }\n        }\n        return value !== newVal;\n    }\n    var domProps = {\n        create: updateDOMProps,\n        update: updateDOMProps\n    };\n    var parseStyleText = cached(function (cssText) {\n        var res = {};\n        var listDelimiter = /;(?![^(]*\\))/g;\n        var propertyDelimiter = /:(.+)/;\n        cssText.split(listDelimiter).forEach(function (item) {\n            if (item) {\n                var tmp = item.split(propertyDelimiter);\n                tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n            }\n        });\n        return res;\n    });\n    // merge static and dynamic style data on the same vnode\n    function normalizeStyleData(data) {\n        var style = normalizeStyleBinding(data.style);\n        // static style is pre-processed into an object during compilation\n        // and is always a fresh object, so it's safe to merge into it\n        return data.staticStyle ? extend(data.staticStyle, style) : style;\n    }\n    // normalize possible array / string values into Object\n    function normalizeStyleBinding(bindingStyle) {\n        if (Array.isArray(bindingStyle)) {\n            return toObject(bindingStyle);\n        }\n        if (typeof bindingStyle === 'string') {\n            return parseStyleText(bindingStyle);\n        }\n        return bindingStyle;\n    }\n    /**\n     * parent component style should be after child's\n     * so that parent component's style could override it\n     */\n    function getStyle(vnode, checkChild) {\n        var res = {};\n        var styleData;\n        if (checkChild) {\n            var childNode = vnode;\n            while (childNode.componentInstance) {\n                childNode = childNode.componentInstance._vnode;\n                if (childNode &&\n                    childNode.data &&\n                    (styleData = normalizeStyleData(childNode.data))) {\n                    extend(res, styleData);\n                }\n            }\n        }\n        if ((styleData = normalizeStyleData(vnode.data))) {\n            extend(res, styleData);\n        }\n        var parentNode = vnode;\n        // @ts-expect-error parentNode.parent not VNodeWithData\n        while ((parentNode = parentNode.parent)) {\n            if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n                extend(res, styleData);\n            }\n        }\n        return res;\n    }\n    var cssVarRE = /^--/;\n    var importantRE = /\\s*!important$/;\n    var setProp = function (el, name, val) {\n        /* istanbul ignore if */\n        if (cssVarRE.test(name)) {\n            el.style.setProperty(name, val);\n        }\n        else if (importantRE.test(val)) {\n            el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n        }\n        else {\n            var normalizedName = normalize(name);\n            if (Array.isArray(val)) {\n                // Support values array created by autoprefixer, e.g.\n                // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n                // Set them one by one, and the browser will only set those it can recognize\n                for (var i = 0, len = val.length; i < len; i++) {\n                    el.style[normalizedName] = val[i];\n                }\n            }\n            else {\n                el.style[normalizedName] = val;\n            }\n        }\n    };\n    var vendorNames = ['Webkit', 'Moz', 'ms'];\n    var emptyStyle;\n    var normalize = cached(function (prop) {\n        emptyStyle = emptyStyle || document.createElement('div').style;\n        prop = camelize(prop);\n        if (prop !== 'filter' && prop in emptyStyle) {\n            return prop;\n        }\n        var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n        for (var i = 0; i < vendorNames.length; i++) {\n            var name_1 = vendorNames[i] + capName;\n            if (name_1 in emptyStyle) {\n                return name_1;\n            }\n        }\n    });\n    function updateStyle(oldVnode, vnode) {\n        var data = vnode.data;\n        var oldData = oldVnode.data;\n        if (isUndef(data.staticStyle) &&\n            isUndef(data.style) &&\n            isUndef(oldData.staticStyle) &&\n            isUndef(oldData.style)) {\n            return;\n        }\n        var cur, name;\n        var el = vnode.elm;\n        var oldStaticStyle = oldData.staticStyle;\n        var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n        // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n        var oldStyle = oldStaticStyle || oldStyleBinding;\n        var style = normalizeStyleBinding(vnode.data.style) || {};\n        // store normalized style under a different key for next diff\n        // make sure to clone it if it's reactive, since the user likely wants\n        // to mutate it.\n        vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;\n        var newStyle = getStyle(vnode, true);\n        for (name in oldStyle) {\n            if (isUndef(newStyle[name])) {\n                setProp(el, name, '');\n            }\n        }\n        for (name in newStyle) {\n            cur = newStyle[name];\n            if (cur !== oldStyle[name]) {\n                // ie9 setting to null has no effect, must use empty string\n                setProp(el, name, cur == null ? '' : cur);\n            }\n        }\n    }\n    var style$1 = {\n        create: updateStyle,\n        update: updateStyle\n    };\n    var whitespaceRE$1 = /\\s+/;\n    /**\n     * Add class with compatibility for SVG since classList is not supported on\n     * SVG elements in IE\n     */\n    function addClass(el, cls) {\n        /* istanbul ignore if */\n        if (!cls || !(cls = cls.trim())) {\n            return;\n        }\n        /* istanbul ignore else */\n        if (el.classList) {\n            if (cls.indexOf(' ') > -1) {\n                cls.split(whitespaceRE$1).forEach(function (c) { return el.classList.add(c); });\n            }\n            else {\n                el.classList.add(cls);\n            }\n        }\n        else {\n            var cur = \" \".concat(el.getAttribute('class') || '', \" \");\n            if (cur.indexOf(' ' + cls + ' ') < 0) {\n                el.setAttribute('class', (cur + cls).trim());\n            }\n        }\n    }\n    /**\n     * Remove class with compatibility for SVG since classList is not supported on\n     * SVG elements in IE\n     */\n    function removeClass(el, cls) {\n        /* istanbul ignore if */\n        if (!cls || !(cls = cls.trim())) {\n            return;\n        }\n        /* istanbul ignore else */\n        if (el.classList) {\n            if (cls.indexOf(' ') > -1) {\n                cls.split(whitespaceRE$1).forEach(function (c) { return el.classList.remove(c); });\n            }\n            else {\n                el.classList.remove(cls);\n            }\n            if (!el.classList.length) {\n                el.removeAttribute('class');\n            }\n        }\n        else {\n            var cur = \" \".concat(el.getAttribute('class') || '', \" \");\n            var tar = ' ' + cls + ' ';\n            while (cur.indexOf(tar) >= 0) {\n                cur = cur.replace(tar, ' ');\n            }\n            cur = cur.trim();\n            if (cur) {\n                el.setAttribute('class', cur);\n            }\n            else {\n                el.removeAttribute('class');\n            }\n        }\n    }\n    function resolveTransition(def) {\n        if (!def) {\n            return;\n        }\n        /* istanbul ignore else */\n        if (typeof def === 'object') {\n            var res = {};\n            if (def.css !== false) {\n                extend(res, autoCssTransition(def.name || 'v'));\n            }\n            extend(res, def);\n            return res;\n        }\n        else if (typeof def === 'string') {\n            return autoCssTransition(def);\n        }\n    }\n    var autoCssTransition = cached(function (name) {\n        return {\n            enterClass: \"\".concat(name, \"-enter\"),\n            enterToClass: \"\".concat(name, \"-enter-to\"),\n            enterActiveClass: \"\".concat(name, \"-enter-active\"),\n            leaveClass: \"\".concat(name, \"-leave\"),\n            leaveToClass: \"\".concat(name, \"-leave-to\"),\n            leaveActiveClass: \"\".concat(name, \"-leave-active\")\n        };\n    });\n    var hasTransition = inBrowser && !isIE9;\n    var TRANSITION = 'transition';\n    var ANIMATION = 'animation';\n    // Transition property/event sniffing\n    var transitionProp = 'transition';\n    var transitionEndEvent = 'transitionend';\n    var animationProp = 'animation';\n    var animationEndEvent = 'animationend';\n    if (hasTransition) {\n        /* istanbul ignore if */\n        if (window.ontransitionend === undefined &&\n            window.onwebkittransitionend !== undefined) {\n            transitionProp = 'WebkitTransition';\n            transitionEndEvent = 'webkitTransitionEnd';\n        }\n        if (window.onanimationend === undefined &&\n            window.onwebkitanimationend !== undefined) {\n            animationProp = 'WebkitAnimation';\n            animationEndEvent = 'webkitAnimationEnd';\n        }\n    }\n    // binding to window is necessary to make hot reload work in IE in strict mode\n    var raf = inBrowser\n        ? window.requestAnimationFrame\n            ? window.requestAnimationFrame.bind(window)\n            : setTimeout\n        : /* istanbul ignore next */ function (/* istanbul ignore next */ fn) { return fn(); };\n    function nextFrame(fn) {\n        raf(function () {\n            // @ts-expect-error\n            raf(fn);\n        });\n    }\n    function addTransitionClass(el, cls) {\n        var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n        if (transitionClasses.indexOf(cls) < 0) {\n            transitionClasses.push(cls);\n            addClass(el, cls);\n        }\n    }\n    function removeTransitionClass(el, cls) {\n        if (el._transitionClasses) {\n            remove$2(el._transitionClasses, cls);\n        }\n        removeClass(el, cls);\n    }\n    function whenTransitionEnds(el, expectedType, cb) {\n        var _a = getTransitionInfo(el, expectedType), type = _a.type, timeout = _a.timeout, propCount = _a.propCount;\n        if (!type)\n            return cb();\n        var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n        var ended = 0;\n        var end = function () {\n            el.removeEventListener(event, onEnd);\n            cb();\n        };\n        var onEnd = function (e) {\n            if (e.target === el) {\n                if (++ended >= propCount) {\n                    end();\n                }\n            }\n        };\n        setTimeout(function () {\n            if (ended < propCount) {\n                end();\n            }\n        }, timeout + 1);\n        el.addEventListener(event, onEnd);\n    }\n    var transformRE = /\\b(transform|all)(,|$)/;\n    function getTransitionInfo(el, expectedType) {\n        var styles = window.getComputedStyle(el);\n        // JSDOM may return undefined for transition properties\n        var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n        var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n        var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n        var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n        var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n        var animationTimeout = getTimeout(animationDelays, animationDurations);\n        var type;\n        var timeout = 0;\n        var propCount = 0;\n        /* istanbul ignore if */\n        if (expectedType === TRANSITION) {\n            if (transitionTimeout > 0) {\n                type = TRANSITION;\n                timeout = transitionTimeout;\n                propCount = transitionDurations.length;\n            }\n        }\n        else if (expectedType === ANIMATION) {\n            if (animationTimeout > 0) {\n                type = ANIMATION;\n                timeout = animationTimeout;\n                propCount = animationDurations.length;\n            }\n        }\n        else {\n            timeout = Math.max(transitionTimeout, animationTimeout);\n            type =\n                timeout > 0\n                    ? transitionTimeout > animationTimeout\n                        ? TRANSITION\n                        : ANIMATION\n                    : null;\n            propCount = type\n                ? type === TRANSITION\n                    ? transitionDurations.length\n                    : animationDurations.length\n                : 0;\n        }\n        var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);\n        return {\n            type: type,\n            timeout: timeout,\n            propCount: propCount,\n            hasTransform: hasTransform\n        };\n    }\n    function getTimeout(delays, durations) {\n        /* istanbul ignore next */\n        while (delays.length < durations.length) {\n            delays = delays.concat(delays);\n        }\n        return Math.max.apply(null, durations.map(function (d, i) {\n            return toMs(d) + toMs(delays[i]);\n        }));\n    }\n    // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n    // in a locale-dependent way, using a comma instead of a dot.\n    // If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n    // as a floor function) causing unexpected behaviors\n    function toMs(s) {\n        return Number(s.slice(0, -1).replace(',', '.')) * 1000;\n    }\n    function enter(vnode, toggleDisplay) {\n        var el = vnode.elm;\n        // call leave callback now\n        if (isDef(el._leaveCb)) {\n            el._leaveCb.cancelled = true;\n            el._leaveCb();\n        }\n        var data = resolveTransition(vnode.data.transition);\n        if (isUndef(data)) {\n            return;\n        }\n        /* istanbul ignore if */\n        if (isDef(el._enterCb) || el.nodeType !== 1) {\n            return;\n        }\n        var css = data.css, type = data.type, enterClass = data.enterClass, enterToClass = data.enterToClass, enterActiveClass = data.enterActiveClass, appearClass = data.appearClass, appearToClass = data.appearToClass, appearActiveClass = data.appearActiveClass, beforeEnter = data.beforeEnter, enter = data.enter, afterEnter = data.afterEnter, enterCancelled = data.enterCancelled, beforeAppear = data.beforeAppear, appear = data.appear, afterAppear = data.afterAppear, appearCancelled = data.appearCancelled, duration = data.duration;\n        // activeInstance will always be the <transition> component managing this\n        // transition. One edge case to check is when the <transition> is placed\n        // as the root node of a child component. In that case we need to check\n        // <transition>'s parent for appear check.\n        var context = activeInstance;\n        var transitionNode = activeInstance.$vnode;\n        while (transitionNode && transitionNode.parent) {\n            context = transitionNode.context;\n            transitionNode = transitionNode.parent;\n        }\n        var isAppear = !context._isMounted || !vnode.isRootInsert;\n        if (isAppear && !appear && appear !== '') {\n            return;\n        }\n        var startClass = isAppear && appearClass ? appearClass : enterClass;\n        var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;\n        var toClass = isAppear && appearToClass ? appearToClass : enterToClass;\n        var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;\n        var enterHook = isAppear ? (isFunction(appear) ? appear : enter) : enter;\n        var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;\n        var enterCancelledHook = isAppear\n            ? appearCancelled || enterCancelled\n            : enterCancelled;\n        var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);\n        if (explicitEnterDuration != null) {\n            checkDuration(explicitEnterDuration, 'enter', vnode);\n        }\n        var expectsCSS = css !== false && !isIE9;\n        var userWantsControl = getHookArgumentsLength(enterHook);\n        var cb = (el._enterCb = once(function () {\n            if (expectsCSS) {\n                removeTransitionClass(el, toClass);\n                removeTransitionClass(el, activeClass);\n            }\n            // @ts-expect-error\n            if (cb.cancelled) {\n                if (expectsCSS) {\n                    removeTransitionClass(el, startClass);\n                }\n                enterCancelledHook && enterCancelledHook(el);\n            }\n            else {\n                afterEnterHook && afterEnterHook(el);\n            }\n            el._enterCb = null;\n        }));\n        if (!vnode.data.show) {\n            // remove pending leave element on enter by injecting an insert hook\n            mergeVNodeHook(vnode, 'insert', function () {\n                var parent = el.parentNode;\n                var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n                if (pendingNode &&\n                    pendingNode.tag === vnode.tag &&\n                    pendingNode.elm._leaveCb) {\n                    pendingNode.elm._leaveCb();\n                }\n                enterHook && enterHook(el, cb);\n            });\n        }\n        // start enter transition\n        beforeEnterHook && beforeEnterHook(el);\n        if (expectsCSS) {\n            addTransitionClass(el, startClass);\n            addTransitionClass(el, activeClass);\n            nextFrame(function () {\n                removeTransitionClass(el, startClass);\n                // @ts-expect-error\n                if (!cb.cancelled) {\n                    addTransitionClass(el, toClass);\n                    if (!userWantsControl) {\n                        if (isValidDuration(explicitEnterDuration)) {\n                            setTimeout(cb, explicitEnterDuration);\n                        }\n                        else {\n                            whenTransitionEnds(el, type, cb);\n                        }\n                    }\n                }\n            });\n        }\n        if (vnode.data.show) {\n            toggleDisplay && toggleDisplay();\n            enterHook && enterHook(el, cb);\n        }\n        if (!expectsCSS && !userWantsControl) {\n            cb();\n        }\n    }\n    function leave(vnode, rm) {\n        var el = vnode.elm;\n        // call enter callback now\n        if (isDef(el._enterCb)) {\n            el._enterCb.cancelled = true;\n            el._enterCb();\n        }\n        var data = resolveTransition(vnode.data.transition);\n        if (isUndef(data) || el.nodeType !== 1) {\n            return rm();\n        }\n        /* istanbul ignore if */\n        if (isDef(el._leaveCb)) {\n            return;\n        }\n        var css = data.css, type = data.type, leaveClass = data.leaveClass, leaveToClass = data.leaveToClass, leaveActiveClass = data.leaveActiveClass, beforeLeave = data.beforeLeave, leave = data.leave, afterLeave = data.afterLeave, leaveCancelled = data.leaveCancelled, delayLeave = data.delayLeave, duration = data.duration;\n        var expectsCSS = css !== false && !isIE9;\n        var userWantsControl = getHookArgumentsLength(leave);\n        var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);\n        if (isDef(explicitLeaveDuration)) {\n            checkDuration(explicitLeaveDuration, 'leave', vnode);\n        }\n        var cb = (el._leaveCb = once(function () {\n            if (el.parentNode && el.parentNode._pending) {\n                el.parentNode._pending[vnode.key] = null;\n            }\n            if (expectsCSS) {\n                removeTransitionClass(el, leaveToClass);\n                removeTransitionClass(el, leaveActiveClass);\n            }\n            // @ts-expect-error\n            if (cb.cancelled) {\n                if (expectsCSS) {\n                    removeTransitionClass(el, leaveClass);\n                }\n                leaveCancelled && leaveCancelled(el);\n            }\n            else {\n                rm();\n                afterLeave && afterLeave(el);\n            }\n            el._leaveCb = null;\n        }));\n        if (delayLeave) {\n            delayLeave(performLeave);\n        }\n        else {\n            performLeave();\n        }\n        function performLeave() {\n            // the delayed leave may have already been cancelled\n            // @ts-expect-error\n            if (cb.cancelled) {\n                return;\n            }\n            // record leaving element\n            if (!vnode.data.show && el.parentNode) {\n                (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] =\n                    vnode;\n            }\n            beforeLeave && beforeLeave(el);\n            if (expectsCSS) {\n                addTransitionClass(el, leaveClass);\n                addTransitionClass(el, leaveActiveClass);\n                nextFrame(function () {\n                    removeTransitionClass(el, leaveClass);\n                    // @ts-expect-error\n                    if (!cb.cancelled) {\n                        addTransitionClass(el, leaveToClass);\n                        if (!userWantsControl) {\n                            if (isValidDuration(explicitLeaveDuration)) {\n                                setTimeout(cb, explicitLeaveDuration);\n                            }\n                            else {\n                                whenTransitionEnds(el, type, cb);\n                            }\n                        }\n                    }\n                });\n            }\n            leave && leave(el, cb);\n            if (!expectsCSS && !userWantsControl) {\n                cb();\n            }\n        }\n    }\n    // only used in dev mode\n    function checkDuration(val, name, vnode) {\n        if (typeof val !== 'number') {\n            warn$2(\"<transition> explicit \".concat(name, \" duration is not a valid number - \") +\n                \"got \".concat(JSON.stringify(val), \".\"), vnode.context);\n        }\n        else if (isNaN(val)) {\n            warn$2(\"<transition> explicit \".concat(name, \" duration is NaN - \") +\n                'the duration expression might be incorrect.', vnode.context);\n        }\n    }\n    function isValidDuration(val) {\n        return typeof val === 'number' && !isNaN(val);\n    }\n    /**\n     * Normalize a transition hook's argument length. The hook may be:\n     * - a merged hook (invoker) with the original in .fns\n     * - a wrapped component method (check ._length)\n     * - a plain function (.length)\n     */\n    function getHookArgumentsLength(fn) {\n        if (isUndef(fn)) {\n            return false;\n        }\n        // @ts-expect-error\n        var invokerFns = fn.fns;\n        if (isDef(invokerFns)) {\n            // invoker\n            return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);\n        }\n        else {\n            // @ts-expect-error\n            return (fn._length || fn.length) > 1;\n        }\n    }\n    function _enter(_, vnode) {\n        if (vnode.data.show !== true) {\n            enter(vnode);\n        }\n    }\n    var transition = inBrowser\n        ? {\n            create: _enter,\n            activate: _enter,\n            remove: function (vnode, rm) {\n                /* istanbul ignore else */\n                if (vnode.data.show !== true) {\n                    // @ts-expect-error\n                    leave(vnode, rm);\n                }\n                else {\n                    rm();\n                }\n            }\n        }\n        : {};\n    var platformModules = [attrs, klass$1, events, domProps, style$1, transition];\n    // the directive module should be applied last, after all\n    // built-in modules have been applied.\n    var modules$1 = platformModules.concat(baseModules);\n    var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules$1 });\n    /**\n     * Not type checking this file because flow doesn't like attaching\n     * properties to Elements.\n     */\n    /* istanbul ignore if */\n    if (isIE9) {\n        // http://www.matts411.com/post/internet-explorer-9-oninput/\n        document.addEventListener('selectionchange', function () {\n            var el = document.activeElement;\n            // @ts-expect-error\n            if (el && el.vmodel) {\n                trigger(el, 'input');\n            }\n        });\n    }\n    var directive = {\n        inserted: function (el, binding, vnode, oldVnode) {\n            if (vnode.tag === 'select') {\n                // #6903\n                if (oldVnode.elm && !oldVnode.elm._vOptions) {\n                    mergeVNodeHook(vnode, 'postpatch', function () {\n                        directive.componentUpdated(el, binding, vnode);\n                    });\n                }\n                else {\n                    setSelected(el, binding, vnode.context);\n                }\n                el._vOptions = [].map.call(el.options, getValue);\n            }\n            else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n                el._vModifiers = binding.modifiers;\n                if (!binding.modifiers.lazy) {\n                    el.addEventListener('compositionstart', onCompositionStart);\n                    el.addEventListener('compositionend', onCompositionEnd);\n                    // Safari < 10.2 & UIWebView doesn't fire compositionend when\n                    // switching focus before confirming composition choice\n                    // this also fixes the issue where some browsers e.g. iOS Chrome\n                    // fires \"change\" instead of \"input\" on autocomplete.\n                    el.addEventListener('change', onCompositionEnd);\n                    /* istanbul ignore if */\n                    if (isIE9) {\n                        el.vmodel = true;\n                    }\n                }\n            }\n        },\n        componentUpdated: function (el, binding, vnode) {\n            if (vnode.tag === 'select') {\n                setSelected(el, binding, vnode.context);\n                // in case the options rendered by v-for have changed,\n                // it's possible that the value is out-of-sync with the rendered options.\n                // detect such cases and filter out values that no longer has a matching\n                // option in the DOM.\n                var prevOptions_1 = el._vOptions;\n                var curOptions_1 = (el._vOptions = [].map.call(el.options, getValue));\n                if (curOptions_1.some(function (o, i) { return !looseEqual(o, prevOptions_1[i]); })) {\n                    // trigger change event if\n                    // no matching option found for at least one value\n                    var needReset = el.multiple\n                        ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions_1); })\n                        : binding.value !== binding.oldValue &&\n                            hasNoMatchingOption(binding.value, curOptions_1);\n                    if (needReset) {\n                        trigger(el, 'change');\n                    }\n                }\n            }\n        }\n    };\n    function setSelected(el, binding, vm) {\n        actuallySetSelected(el, binding, vm);\n        /* istanbul ignore if */\n        if (isIE || isEdge) {\n            setTimeout(function () {\n                actuallySetSelected(el, binding, vm);\n            }, 0);\n        }\n    }\n    function actuallySetSelected(el, binding, vm) {\n        var value = binding.value;\n        var isMultiple = el.multiple;\n        if (isMultiple && !Array.isArray(value)) {\n            warn$2(\"<select multiple v-model=\\\"\".concat(binding.expression, \"\\\"> \") +\n                \"expects an Array value for its binding, but got \".concat(Object.prototype.toString\n                    .call(value)\n                    .slice(8, -1)), vm);\n            return;\n        }\n        var selected, option;\n        for (var i = 0, l = el.options.length; i < l; i++) {\n            option = el.options[i];\n            if (isMultiple) {\n                selected = looseIndexOf(value, getValue(option)) > -1;\n                if (option.selected !== selected) {\n                    option.selected = selected;\n                }\n            }\n            else {\n                if (looseEqual(getValue(option), value)) {\n                    if (el.selectedIndex !== i) {\n                        el.selectedIndex = i;\n                    }\n                    return;\n                }\n            }\n        }\n        if (!isMultiple) {\n            el.selectedIndex = -1;\n        }\n    }\n    function hasNoMatchingOption(value, options) {\n        return options.every(function (o) { return !looseEqual(o, value); });\n    }\n    function getValue(option) {\n        return '_value' in option ? option._value : option.value;\n    }\n    function onCompositionStart(e) {\n        e.target.composing = true;\n    }\n    function onCompositionEnd(e) {\n        // prevent triggering an input event for no reason\n        if (!e.target.composing)\n            return;\n        e.target.composing = false;\n        trigger(e.target, 'input');\n    }\n    function trigger(el, type) {\n        var e = document.createEvent('HTMLEvents');\n        e.initEvent(type, true, true);\n        el.dispatchEvent(e);\n    }\n    // recursively search for possible transition defined inside the component root\n    function locateNode(vnode) {\n        // @ts-expect-error\n        return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n            ? locateNode(vnode.componentInstance._vnode)\n            : vnode;\n    }\n    var show = {\n        bind: function (el, _a, vnode) {\n            var value = _a.value;\n            vnode = locateNode(vnode);\n            var transition = vnode.data && vnode.data.transition;\n            var originalDisplay = (el.__vOriginalDisplay =\n                el.style.display === 'none' ? '' : el.style.display);\n            if (value && transition) {\n                vnode.data.show = true;\n                enter(vnode, function () {\n                    el.style.display = originalDisplay;\n                });\n            }\n            else {\n                el.style.display = value ? originalDisplay : 'none';\n            }\n        },\n        update: function (el, _a, vnode) {\n            var value = _a.value, oldValue = _a.oldValue;\n            /* istanbul ignore if */\n            if (!value === !oldValue)\n                return;\n            vnode = locateNode(vnode);\n            var transition = vnode.data && vnode.data.transition;\n            if (transition) {\n                vnode.data.show = true;\n                if (value) {\n                    enter(vnode, function () {\n                        el.style.display = el.__vOriginalDisplay;\n                    });\n                }\n                else {\n                    leave(vnode, function () {\n                        el.style.display = 'none';\n                    });\n                }\n            }\n            else {\n                el.style.display = value ? el.__vOriginalDisplay : 'none';\n            }\n        },\n        unbind: function (el, binding, vnode, oldVnode, isDestroy) {\n            if (!isDestroy) {\n                el.style.display = el.__vOriginalDisplay;\n            }\n        }\n    };\n    var platformDirectives = {\n        model: directive,\n        show: show\n    };\n    // Provides transition support for a single element/component.\n    var transitionProps = {\n        name: String,\n        appear: Boolean,\n        css: Boolean,\n        mode: String,\n        type: String,\n        enterClass: String,\n        leaveClass: String,\n        enterToClass: String,\n        leaveToClass: String,\n        enterActiveClass: String,\n        leaveActiveClass: String,\n        appearClass: String,\n        appearActiveClass: String,\n        appearToClass: String,\n        duration: [Number, String, Object]\n    };\n    // in case the child is also an abstract component, e.g. <keep-alive>\n    // we want to recursively retrieve the real component to be rendered\n    function getRealChild(vnode) {\n        var compOptions = vnode && vnode.componentOptions;\n        if (compOptions && compOptions.Ctor.options.abstract) {\n            return getRealChild(getFirstComponentChild(compOptions.children));\n        }\n        else {\n            return vnode;\n        }\n    }\n    function extractTransitionData(comp) {\n        var data = {};\n        var options = comp.$options;\n        // props\n        for (var key in options.propsData) {\n            data[key] = comp[key];\n        }\n        // events.\n        // extract listeners and pass them directly to the transition methods\n        var listeners = options._parentListeners;\n        for (var key in listeners) {\n            data[camelize(key)] = listeners[key];\n        }\n        return data;\n    }\n    function placeholder(h, rawChild) {\n        // @ts-expect-error\n        if (/\\d-keep-alive$/.test(rawChild.tag)) {\n            return h('keep-alive', {\n                props: rawChild.componentOptions.propsData\n            });\n        }\n    }\n    function hasParentTransition(vnode) {\n        while ((vnode = vnode.parent)) {\n            if (vnode.data.transition) {\n                return true;\n            }\n        }\n    }\n    function isSameChild(child, oldChild) {\n        return oldChild.key === child.key && oldChild.tag === child.tag;\n    }\n    var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n    var isVShowDirective = function (d) { return d.name === 'show'; };\n    var Transition = {\n        name: 'transition',\n        props: transitionProps,\n        abstract: true,\n        render: function (h) {\n            var _this = this;\n            var children = this.$slots.default;\n            if (!children) {\n                return;\n            }\n            // filter out text nodes (possible whitespaces)\n            children = children.filter(isNotTextNode);\n            /* istanbul ignore if */\n            if (!children.length) {\n                return;\n            }\n            // warn multiple elements\n            if (children.length > 1) {\n                warn$2('<transition> can only be used on a single element. Use ' +\n                    '<transition-group> for lists.', this.$parent);\n            }\n            var mode = this.mode;\n            // warn invalid mode\n            if (mode && mode !== 'in-out' && mode !== 'out-in') {\n                warn$2('invalid <transition> mode: ' + mode, this.$parent);\n            }\n            var rawChild = children[0];\n            // if this is a component root node and the component's\n            // parent container node also has transition, skip.\n            if (hasParentTransition(this.$vnode)) {\n                return rawChild;\n            }\n            // apply transition data to child\n            // use getRealChild() to ignore abstract components e.g. keep-alive\n            var child = getRealChild(rawChild);\n            /* istanbul ignore if */\n            if (!child) {\n                return rawChild;\n            }\n            if (this._leaving) {\n                return placeholder(h, rawChild);\n            }\n            // ensure a key that is unique to the vnode type and to this transition\n            // component instance. This key will be used to remove pending leaving nodes\n            // during entering.\n            var id = \"__transition-\".concat(this._uid, \"-\");\n            child.key =\n                child.key == null\n                    ? child.isComment\n                        ? id + 'comment'\n                        : id + child.tag\n                    : isPrimitive(child.key)\n                        ? String(child.key).indexOf(id) === 0\n                            ? child.key\n                            : id + child.key\n                        : child.key;\n            var data = ((child.data || (child.data = {})).transition =\n                extractTransitionData(this));\n            var oldRawChild = this._vnode;\n            var oldChild = getRealChild(oldRawChild);\n            // mark v-show\n            // so that the transition module can hand over the control to the directive\n            if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n                child.data.show = true;\n            }\n            if (oldChild &&\n                oldChild.data &&\n                !isSameChild(child, oldChild) &&\n                !isAsyncPlaceholder(oldChild) &&\n                // #6687 component root is a comment node\n                !(oldChild.componentInstance &&\n                    oldChild.componentInstance._vnode.isComment)) {\n                // replace old child transition data with fresh one\n                // important for dynamic transitions!\n                var oldData = (oldChild.data.transition = extend({}, data));\n                // handle transition mode\n                if (mode === 'out-in') {\n                    // return placeholder node and queue update when leave finishes\n                    this._leaving = true;\n                    mergeVNodeHook(oldData, 'afterLeave', function () {\n                        _this._leaving = false;\n                        _this.$forceUpdate();\n                    });\n                    return placeholder(h, rawChild);\n                }\n                else if (mode === 'in-out') {\n                    if (isAsyncPlaceholder(child)) {\n                        return oldRawChild;\n                    }\n                    var delayedLeave_1;\n                    var performLeave = function () {\n                        delayedLeave_1();\n                    };\n                    mergeVNodeHook(data, 'afterEnter', performLeave);\n                    mergeVNodeHook(data, 'enterCancelled', performLeave);\n                    mergeVNodeHook(oldData, 'delayLeave', function (leave) {\n                        delayedLeave_1 = leave;\n                    });\n                }\n            }\n            return rawChild;\n        }\n    };\n    // Provides transition support for list items.\n    var props = extend({\n        tag: String,\n        moveClass: String\n    }, transitionProps);\n    delete props.mode;\n    var TransitionGroup = {\n        props: props,\n        beforeMount: function () {\n            var _this = this;\n            var update = this._update;\n            this._update = function (vnode, hydrating) {\n                var restoreActiveInstance = setActiveInstance(_this);\n                // force removing pass\n                _this.__patch__(_this._vnode, _this.kept, false, // hydrating\n                true // removeOnly (!important, avoids unnecessary moves)\n                );\n                _this._vnode = _this.kept;\n                restoreActiveInstance();\n                update.call(_this, vnode, hydrating);\n            };\n        },\n        render: function (h) {\n            var tag = this.tag || this.$vnode.data.tag || 'span';\n            var map = Object.create(null);\n            var prevChildren = (this.prevChildren = this.children);\n            var rawChildren = this.$slots.default || [];\n            var children = (this.children = []);\n            var transitionData = extractTransitionData(this);\n            for (var i = 0; i < rawChildren.length; i++) {\n                var c = rawChildren[i];\n                if (c.tag) {\n                    if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n                        children.push(c);\n                        map[c.key] = c;\n                        (c.data || (c.data = {})).transition = transitionData;\n                    }\n                    else {\n                        var opts = c.componentOptions;\n                        var name_1 = opts\n                            ? getComponentName(opts.Ctor.options) || opts.tag || ''\n                            : c.tag;\n                        warn$2(\"<transition-group> children must be keyed: <\".concat(name_1, \">\"));\n                    }\n                }\n            }\n            if (prevChildren) {\n                var kept = [];\n                var removed = [];\n                for (var i = 0; i < prevChildren.length; i++) {\n                    var c = prevChildren[i];\n                    c.data.transition = transitionData;\n                    // @ts-expect-error .getBoundingClientRect is not typed in Node\n                    c.data.pos = c.elm.getBoundingClientRect();\n                    if (map[c.key]) {\n                        kept.push(c);\n                    }\n                    else {\n                        removed.push(c);\n                    }\n                }\n                this.kept = h(tag, null, kept);\n                this.removed = removed;\n            }\n            return h(tag, null, children);\n        },\n        updated: function () {\n            var children = this.prevChildren;\n            var moveClass = this.moveClass || (this.name || 'v') + '-move';\n            if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n                return;\n            }\n            // we divide the work into three loops to avoid mixing DOM reads and writes\n            // in each iteration - which helps prevent layout thrashing.\n            children.forEach(callPendingCbs);\n            children.forEach(recordPosition);\n            children.forEach(applyTranslation);\n            // force reflow to put everything in position\n            // assign to this to avoid being removed in tree-shaking\n            // $flow-disable-line\n            this._reflow = document.body.offsetHeight;\n            children.forEach(function (c) {\n                if (c.data.moved) {\n                    var el_1 = c.elm;\n                    var s = el_1.style;\n                    addTransitionClass(el_1, moveClass);\n                    s.transform = s.WebkitTransform = s.transitionDuration = '';\n                    el_1.addEventListener(transitionEndEvent, (el_1._moveCb = function cb(e) {\n                        if (e && e.target !== el_1) {\n                            return;\n                        }\n                        if (!e || /transform$/.test(e.propertyName)) {\n                            el_1.removeEventListener(transitionEndEvent, cb);\n                            el_1._moveCb = null;\n                            removeTransitionClass(el_1, moveClass);\n                        }\n                    }));\n                }\n            });\n        },\n        methods: {\n            hasMove: function (el, moveClass) {\n                /* istanbul ignore if */\n                if (!hasTransition) {\n                    return false;\n                }\n                /* istanbul ignore if */\n                if (this._hasMove) {\n                    return this._hasMove;\n                }\n                // Detect whether an element with the move class applied has\n                // CSS transitions. Since the element may be inside an entering\n                // transition at this very moment, we make a clone of it and remove\n                // all other transition classes applied to ensure only the move class\n                // is applied.\n                var clone = el.cloneNode();\n                if (el._transitionClasses) {\n                    el._transitionClasses.forEach(function (cls) {\n                        removeClass(clone, cls);\n                    });\n                }\n                addClass(clone, moveClass);\n                clone.style.display = 'none';\n                this.$el.appendChild(clone);\n                var info = getTransitionInfo(clone);\n                this.$el.removeChild(clone);\n                return (this._hasMove = info.hasTransform);\n            }\n        }\n    };\n    function callPendingCbs(c) {\n        /* istanbul ignore if */\n        if (c.elm._moveCb) {\n            c.elm._moveCb();\n        }\n        /* istanbul ignore if */\n        if (c.elm._enterCb) {\n            c.elm._enterCb();\n        }\n    }\n    function recordPosition(c) {\n        c.data.newPos = c.elm.getBoundingClientRect();\n    }\n    function applyTranslation(c) {\n        var oldPos = c.data.pos;\n        var newPos = c.data.newPos;\n        var dx = oldPos.left - newPos.left;\n        var dy = oldPos.top - newPos.top;\n        if (dx || dy) {\n            c.data.moved = true;\n            var s = c.elm.style;\n            s.transform = s.WebkitTransform = \"translate(\".concat(dx, \"px,\").concat(dy, \"px)\");\n            s.transitionDuration = '0s';\n        }\n    }\n    var platformComponents = {\n        Transition: Transition,\n        TransitionGroup: TransitionGroup\n    };\n    // install platform specific utils\n    Vue.config.mustUseProp = mustUseProp;\n    Vue.config.isReservedTag = isReservedTag;\n    Vue.config.isReservedAttr = isReservedAttr;\n    Vue.config.getTagNamespace = getTagNamespace;\n    Vue.config.isUnknownElement = isUnknownElement;\n    // install platform runtime directives & components\n    extend(Vue.options.directives, platformDirectives);\n    extend(Vue.options.components, platformComponents);\n    // install platform patch function\n    Vue.prototype.__patch__ = inBrowser ? patch : noop;\n    // public mount method\n    Vue.prototype.$mount = function (el, hydrating) {\n        el = el && inBrowser ? query(el) : undefined;\n        return mountComponent(this, el, hydrating);\n    };\n    // devtools global hook\n    /* istanbul ignore next */\n    if (inBrowser) {\n        setTimeout(function () {\n            if (config.devtools) {\n                if (devtools) {\n                    devtools.emit('init', Vue);\n                }\n                else {\n                    // @ts-expect-error\n                    console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\\n' +\n                        'https://github.com/vuejs/vue-devtools');\n                }\n            }\n            if (config.productionTip !== false &&\n                typeof console !== 'undefined') {\n                // @ts-expect-error\n                console[console.info ? 'info' : 'log'](\"You are running Vue in development mode.\\n\" +\n                    \"Make sure to turn on production mode when deploying for production.\\n\" +\n                    \"See more tips at https://vuejs.org/guide/deployment.html\");\n            }\n        }, 0);\n    }\n    var defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\n    var regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n    var buildRegex = cached(function (delimiters) {\n        var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n        var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n        return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g');\n    });\n    function parseText(text, delimiters) {\n        //@ts-expect-error\n        var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n        if (!tagRE.test(text)) {\n            return;\n        }\n        var tokens = [];\n        var rawTokens = [];\n        var lastIndex = (tagRE.lastIndex = 0);\n        var match, index, tokenValue;\n        while ((match = tagRE.exec(text))) {\n            index = match.index;\n            // push text token\n            if (index > lastIndex) {\n                rawTokens.push((tokenValue = text.slice(lastIndex, index)));\n                tokens.push(JSON.stringify(tokenValue));\n            }\n            // tag token\n            var exp = parseFilters(match[1].trim());\n            tokens.push(\"_s(\".concat(exp, \")\"));\n            rawTokens.push({ '@binding': exp });\n            lastIndex = index + match[0].length;\n        }\n        if (lastIndex < text.length) {\n            rawTokens.push((tokenValue = text.slice(lastIndex)));\n            tokens.push(JSON.stringify(tokenValue));\n        }\n        return {\n            expression: tokens.join('+'),\n            tokens: rawTokens\n        };\n    }\n    function transformNode$1(el, options) {\n        var warn = options.warn || baseWarn;\n        var staticClass = getAndRemoveAttr(el, 'class');\n        if (staticClass) {\n            var res = parseText(staticClass, options.delimiters);\n            if (res) {\n                warn(\"class=\\\"\".concat(staticClass, \"\\\": \") +\n                    'Interpolation inside attributes has been removed. ' +\n                    'Use v-bind or the colon shorthand instead. For example, ' +\n                    'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.', el.rawAttrsMap['class']);\n            }\n        }\n        if (staticClass) {\n            el.staticClass = JSON.stringify(staticClass.replace(/\\s+/g, ' ').trim());\n        }\n        var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n        if (classBinding) {\n            el.classBinding = classBinding;\n        }\n    }\n    function genData$2(el) {\n        var data = '';\n        if (el.staticClass) {\n            data += \"staticClass:\".concat(el.staticClass, \",\");\n        }\n        if (el.classBinding) {\n            data += \"class:\".concat(el.classBinding, \",\");\n        }\n        return data;\n    }\n    var klass = {\n        staticKeys: ['staticClass'],\n        transformNode: transformNode$1,\n        genData: genData$2\n    };\n    function transformNode(el, options) {\n        var warn = options.warn || baseWarn;\n        var staticStyle = getAndRemoveAttr(el, 'style');\n        if (staticStyle) {\n            /* istanbul ignore if */\n            {\n                var res = parseText(staticStyle, options.delimiters);\n                if (res) {\n                    warn(\"style=\\\"\".concat(staticStyle, \"\\\": \") +\n                        'Interpolation inside attributes has been removed. ' +\n                        'Use v-bind or the colon shorthand instead. For example, ' +\n                        'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.', el.rawAttrsMap['style']);\n                }\n            }\n            el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n        }\n        var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n        if (styleBinding) {\n            el.styleBinding = styleBinding;\n        }\n    }\n    function genData$1(el) {\n        var data = '';\n        if (el.staticStyle) {\n            data += \"staticStyle:\".concat(el.staticStyle, \",\");\n        }\n        if (el.styleBinding) {\n            data += \"style:(\".concat(el.styleBinding, \"),\");\n        }\n        return data;\n    }\n    var style = {\n        staticKeys: ['staticStyle'],\n        transformNode: transformNode,\n        genData: genData$1\n    };\n    var decoder;\n    var he = {\n        decode: function (html) {\n            decoder = decoder || document.createElement('div');\n            decoder.innerHTML = html;\n            return decoder.textContent;\n        }\n    };\n    var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n        'link,meta,param,source,track,wbr');\n    // Elements that you can, intentionally, leave open\n    // (and which close themselves)\n    var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');\n    // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n    // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\n    var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n        'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n        'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n        'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n        'title,tr,track');\n    /**\n     * Not type-checking this file because it's mostly vendor code.\n     */\n    // Regular Expressions for parsing tags and attributes\n    var attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n    var dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+?\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n    var ncname = \"[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z\".concat(unicodeRegExp.source, \"]*\");\n    var qnameCapture = \"((?:\".concat(ncname, \"\\\\:)?\").concat(ncname, \")\");\n    var startTagOpen = new RegExp(\"^<\".concat(qnameCapture));\n    var startTagClose = /^\\s*(\\/?)>/;\n    var endTag = new RegExp(\"^<\\\\/\".concat(qnameCapture, \"[^>]*>\"));\n    var doctype = /^<!DOCTYPE [^>]+>/i;\n    // #7298: escape - to avoid being passed as HTML comment when inlined in page\n    var comment = /^<!\\--/;\n    var conditionalComment = /^<!\\[/;\n    // Special Elements (can contain anything)\n    var isPlainTextElement = makeMap('script,style,textarea', true);\n    var reCache = {};\n    var decodingMap = {\n        '&lt;': '<',\n        '&gt;': '>',\n        '&quot;': '\"',\n        '&amp;': '&',\n        '&#10;': '\\n',\n        '&#9;': '\\t',\n        '&#39;': \"'\"\n    };\n    var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;\n    var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;\n    // #5992\n    var isIgnoreNewlineTag = makeMap('pre,textarea', true);\n    var shouldIgnoreFirstNewline = function (tag, html) {\n        return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n';\n    };\n    function decodeAttr(value, shouldDecodeNewlines) {\n        var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n        return value.replace(re, function (match) { return decodingMap[match]; });\n    }\n    function parseHTML(html, options) {\n        var stack = [];\n        var expectHTML = options.expectHTML;\n        var isUnaryTag = options.isUnaryTag || no;\n        var canBeLeftOpenTag = options.canBeLeftOpenTag || no;\n        var index = 0;\n        var last, lastTag;\n        var _loop_1 = function () {\n            last = html;\n            // Make sure we're not in a plaintext content element like script/style\n            if (!lastTag || !isPlainTextElement(lastTag)) {\n                var textEnd = html.indexOf('<');\n                if (textEnd === 0) {\n                    // Comment:\n                    if (comment.test(html)) {\n                        var commentEnd = html.indexOf('-->');\n                        if (commentEnd >= 0) {\n                            if (options.shouldKeepComment && options.comment) {\n                                options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);\n                            }\n                            advance(commentEnd + 3);\n                            return \"continue\";\n                        }\n                    }\n                    // https://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n                    if (conditionalComment.test(html)) {\n                        var conditionalEnd = html.indexOf(']>');\n                        if (conditionalEnd >= 0) {\n                            advance(conditionalEnd + 2);\n                            return \"continue\";\n                        }\n                    }\n                    // Doctype:\n                    var doctypeMatch = html.match(doctype);\n                    if (doctypeMatch) {\n                        advance(doctypeMatch[0].length);\n                        return \"continue\";\n                    }\n                    // End tag:\n                    var endTagMatch = html.match(endTag);\n                    if (endTagMatch) {\n                        var curIndex = index;\n                        advance(endTagMatch[0].length);\n                        parseEndTag(endTagMatch[1], curIndex, index);\n                        return \"continue\";\n                    }\n                    // Start tag:\n                    var startTagMatch = parseStartTag();\n                    if (startTagMatch) {\n                        handleStartTag(startTagMatch);\n                        if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\n                            advance(1);\n                        }\n                        return \"continue\";\n                    }\n                }\n                var text = void 0, rest = void 0, next = void 0;\n                if (textEnd >= 0) {\n                    rest = html.slice(textEnd);\n                    while (!endTag.test(rest) &&\n                        !startTagOpen.test(rest) &&\n                        !comment.test(rest) &&\n                        !conditionalComment.test(rest)) {\n                        // < in plain text, be forgiving and treat it as text\n                        next = rest.indexOf('<', 1);\n                        if (next < 0)\n                            break;\n                        textEnd += next;\n                        rest = html.slice(textEnd);\n                    }\n                    text = html.substring(0, textEnd);\n                }\n                if (textEnd < 0) {\n                    text = html;\n                }\n                if (text) {\n                    advance(text.length);\n                }\n                if (options.chars && text) {\n                    options.chars(text, index - text.length, index);\n                }\n            }\n            else {\n                var endTagLength_1 = 0;\n                var stackedTag_1 = lastTag.toLowerCase();\n                var reStackedTag = reCache[stackedTag_1] ||\n                    (reCache[stackedTag_1] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag_1 + '[^>]*>)', 'i'));\n                var rest = html.replace(reStackedTag, function (all, text, endTag) {\n                    endTagLength_1 = endTag.length;\n                    if (!isPlainTextElement(stackedTag_1) && stackedTag_1 !== 'noscript') {\n                        text = text\n                            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n                            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n                    }\n                    if (shouldIgnoreFirstNewline(stackedTag_1, text)) {\n                        text = text.slice(1);\n                    }\n                    if (options.chars) {\n                        options.chars(text);\n                    }\n                    return '';\n                });\n                index += html.length - rest.length;\n                html = rest;\n                parseEndTag(stackedTag_1, index - endTagLength_1, index);\n            }\n            if (html === last) {\n                options.chars && options.chars(html);\n                if (!stack.length && options.warn) {\n                    options.warn(\"Mal-formatted tag at end of template: \\\"\".concat(html, \"\\\"\"), {\n                        start: index + html.length\n                    });\n                }\n                return \"break\";\n            }\n        };\n        while (html) {\n            var state_1 = _loop_1();\n            if (state_1 === \"break\")\n                break;\n        }\n        // Clean up any remaining tags\n        parseEndTag();\n        function advance(n) {\n            index += n;\n            html = html.substring(n);\n        }\n        function parseStartTag() {\n            var start = html.match(startTagOpen);\n            if (start) {\n                var match = {\n                    tagName: start[1],\n                    attrs: [],\n                    start: index\n                };\n                advance(start[0].length);\n                var end = void 0, attr = void 0;\n                while (!(end = html.match(startTagClose)) &&\n                    (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\n                    attr.start = index;\n                    advance(attr[0].length);\n                    attr.end = index;\n                    match.attrs.push(attr);\n                }\n                if (end) {\n                    match.unarySlash = end[1];\n                    advance(end[0].length);\n                    match.end = index;\n                    return match;\n                }\n            }\n        }\n        function handleStartTag(match) {\n            var tagName = match.tagName;\n            var unarySlash = match.unarySlash;\n            if (expectHTML) {\n                if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n                    parseEndTag(lastTag);\n                }\n                if (canBeLeftOpenTag(tagName) && lastTag === tagName) {\n                    parseEndTag(tagName);\n                }\n            }\n            var unary = isUnaryTag(tagName) || !!unarySlash;\n            var l = match.attrs.length;\n            var attrs = new Array(l);\n            for (var i = 0; i < l; i++) {\n                var args = match.attrs[i];\n                var value = args[3] || args[4] || args[5] || '';\n                var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n                    ? options.shouldDecodeNewlinesForHref\n                    : options.shouldDecodeNewlines;\n                attrs[i] = {\n                    name: args[1],\n                    value: decodeAttr(value, shouldDecodeNewlines)\n                };\n                if (options.outputSourceRange) {\n                    attrs[i].start = args.start + args[0].match(/^\\s*/).length;\n                    attrs[i].end = args.end;\n                }\n            }\n            if (!unary) {\n                stack.push({\n                    tag: tagName,\n                    lowerCasedTag: tagName.toLowerCase(),\n                    attrs: attrs,\n                    start: match.start,\n                    end: match.end\n                });\n                lastTag = tagName;\n            }\n            if (options.start) {\n                options.start(tagName, attrs, unary, match.start, match.end);\n            }\n        }\n        function parseEndTag(tagName, start, end) {\n            var pos, lowerCasedTagName;\n            if (start == null)\n                start = index;\n            if (end == null)\n                end = index;\n            // Find the closest opened tag of the same type\n            if (tagName) {\n                lowerCasedTagName = tagName.toLowerCase();\n                for (pos = stack.length - 1; pos >= 0; pos--) {\n                    if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n                        break;\n                    }\n                }\n            }\n            else {\n                // If no tag name is provided, clean shop\n                pos = 0;\n            }\n            if (pos >= 0) {\n                // Close all the open elements, up the stack\n                for (var i = stack.length - 1; i >= pos; i--) {\n                    if ((i > pos || !tagName) && options.warn) {\n                        options.warn(\"tag <\".concat(stack[i].tag, \"> has no matching end tag.\"), {\n                            start: stack[i].start,\n                            end: stack[i].end\n                        });\n                    }\n                    if (options.end) {\n                        options.end(stack[i].tag, start, end);\n                    }\n                }\n                // Remove the open elements from the stack\n                stack.length = pos;\n                lastTag = pos && stack[pos - 1].tag;\n            }\n            else if (lowerCasedTagName === 'br') {\n                if (options.start) {\n                    options.start(tagName, [], true, start, end);\n                }\n            }\n            else if (lowerCasedTagName === 'p') {\n                if (options.start) {\n                    options.start(tagName, [], false, start, end);\n                }\n                if (options.end) {\n                    options.end(tagName, start, end);\n                }\n            }\n        }\n    }\n    var onRE = /^@|^v-on:/;\n    var dirRE = /^v-|^@|^:|^#/;\n    var forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n    var forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n    var stripParensRE = /^\\(|\\)$/g;\n    var dynamicArgRE = /^\\[.*\\]$/;\n    var argRE = /:(.*)$/;\n    var bindRE = /^:|^\\.|^v-bind:/;\n    var modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;\n    var slotRE = /^v-slot(:|$)|^#/;\n    var lineBreakRE = /[\\r\\n]/;\n    var whitespaceRE = /[ \\f\\t\\r\\n]+/g;\n    var invalidAttributeRE = /[\\s\"'<>\\/=]/;\n    var decodeHTMLCached = cached(he.decode);\n    var emptySlotScopeToken = \"_empty_\";\n    // configurable state\n    var warn;\n    var delimiters;\n    var transforms;\n    var preTransforms;\n    var postTransforms;\n    var platformIsPreTag;\n    var platformMustUseProp;\n    var platformGetTagNamespace;\n    var maybeComponent;\n    function createASTElement(tag, attrs, parent) {\n        return {\n            type: 1,\n            tag: tag,\n            attrsList: attrs,\n            attrsMap: makeAttrsMap(attrs),\n            rawAttrsMap: {},\n            parent: parent,\n            children: []\n        };\n    }\n    /**\n     * Convert HTML string to AST.\n     */\n    function parse(template, options) {\n        warn = options.warn || baseWarn;\n        platformIsPreTag = options.isPreTag || no;\n        platformMustUseProp = options.mustUseProp || no;\n        platformGetTagNamespace = options.getTagNamespace || no;\n        var isReservedTag = options.isReservedTag || no;\n        maybeComponent = function (el) {\n            return !!(el.component ||\n                el.attrsMap[':is'] ||\n                el.attrsMap['v-bind:is'] ||\n                !(el.attrsMap.is ? isReservedTag(el.attrsMap.is) : isReservedTag(el.tag)));\n        };\n        transforms = pluckModuleFunction(options.modules, 'transformNode');\n        preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n        postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n        delimiters = options.delimiters;\n        var stack = [];\n        var preserveWhitespace = options.preserveWhitespace !== false;\n        var whitespaceOption = options.whitespace;\n        var root;\n        var currentParent;\n        var inVPre = false;\n        var inPre = false;\n        var warned = false;\n        function warnOnce(msg, range) {\n            if (!warned) {\n                warned = true;\n                warn(msg, range);\n            }\n        }\n        function closeElement(element) {\n            trimEndingWhitespace(element);\n            if (!inVPre && !element.processed) {\n                element = processElement(element, options);\n            }\n            // tree management\n            if (!stack.length && element !== root) {\n                // allow root elements with v-if, v-else-if and v-else\n                if (root.if && (element.elseif || element.else)) {\n                    {\n                        checkRootConstraints(element);\n                    }\n                    addIfCondition(root, {\n                        exp: element.elseif,\n                        block: element\n                    });\n                }\n                else {\n                    warnOnce(\"Component template should contain exactly one root element. \" +\n                        \"If you are using v-if on multiple elements, \" +\n                        \"use v-else-if to chain them instead.\", { start: element.start });\n                }\n            }\n            if (currentParent && !element.forbidden) {\n                if (element.elseif || element.else) {\n                    processIfConditions(element, currentParent);\n                }\n                else {\n                    if (element.slotScope) {\n                        // scoped slot\n                        // keep it in the children list so that v-else(-if) conditions can\n                        // find it as the prev node.\n                        var name_1 = element.slotTarget || '\"default\"';\n                        (currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name_1] = element;\n                    }\n                    currentParent.children.push(element);\n                    element.parent = currentParent;\n                }\n            }\n            // final children cleanup\n            // filter out scoped slots\n            element.children = element.children.filter(function (c) { return !c.slotScope; });\n            // remove trailing whitespace node again\n            trimEndingWhitespace(element);\n            // check pre state\n            if (element.pre) {\n                inVPre = false;\n            }\n            if (platformIsPreTag(element.tag)) {\n                inPre = false;\n            }\n            // apply post-transforms\n            for (var i = 0; i < postTransforms.length; i++) {\n                postTransforms[i](element, options);\n            }\n        }\n        function trimEndingWhitespace(el) {\n            // remove trailing whitespace node\n            if (!inPre) {\n                var lastNode = void 0;\n                while ((lastNode = el.children[el.children.length - 1]) &&\n                    lastNode.type === 3 &&\n                    lastNode.text === ' ') {\n                    el.children.pop();\n                }\n            }\n        }\n        function checkRootConstraints(el) {\n            if (el.tag === 'slot' || el.tag === 'template') {\n                warnOnce(\"Cannot use <\".concat(el.tag, \"> as component root element because it may \") +\n                    'contain multiple nodes.', { start: el.start });\n            }\n            if (el.attrsMap.hasOwnProperty('v-for')) {\n                warnOnce('Cannot use v-for on stateful component root element because ' +\n                    'it renders multiple elements.', el.rawAttrsMap['v-for']);\n            }\n        }\n        parseHTML(template, {\n            warn: warn,\n            expectHTML: options.expectHTML,\n            isUnaryTag: options.isUnaryTag,\n            canBeLeftOpenTag: options.canBeLeftOpenTag,\n            shouldDecodeNewlines: options.shouldDecodeNewlines,\n            shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n            shouldKeepComment: options.comments,\n            outputSourceRange: options.outputSourceRange,\n            start: function (tag, attrs, unary, start, end) {\n                // check namespace.\n                // inherit parent ns if there is one\n                var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n                // handle IE svg bug\n                /* istanbul ignore if */\n                if (isIE && ns === 'svg') {\n                    attrs = guardIESVGBug(attrs);\n                }\n                var element = createASTElement(tag, attrs, currentParent);\n                if (ns) {\n                    element.ns = ns;\n                }\n                {\n                    if (options.outputSourceRange) {\n                        element.start = start;\n                        element.end = end;\n                        element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {\n                            cumulated[attr.name] = attr;\n                            return cumulated;\n                        }, {});\n                    }\n                    attrs.forEach(function (attr) {\n                        if (invalidAttributeRE.test(attr.name)) {\n                            warn(\"Invalid dynamic argument expression: attribute names cannot contain \" +\n                                \"spaces, quotes, <, >, / or =.\", options.outputSourceRange\n                                ? {\n                                    start: attr.start + attr.name.indexOf(\"[\"),\n                                    end: attr.start + attr.name.length\n                                }\n                                : undefined);\n                        }\n                    });\n                }\n                if (isForbiddenTag(element) && !isServerRendering()) {\n                    element.forbidden = true;\n                    warn('Templates should only be responsible for mapping the state to the ' +\n                        'UI. Avoid placing tags with side-effects in your templates, such as ' +\n                        \"<\".concat(tag, \">\") +\n                        ', as they will not be parsed.', { start: element.start });\n                }\n                // apply pre-transforms\n                for (var i = 0; i < preTransforms.length; i++) {\n                    element = preTransforms[i](element, options) || element;\n                }\n                if (!inVPre) {\n                    processPre(element);\n                    if (element.pre) {\n                        inVPre = true;\n                    }\n                }\n                if (platformIsPreTag(element.tag)) {\n                    inPre = true;\n                }\n                if (inVPre) {\n                    processRawAttrs(element);\n                }\n                else if (!element.processed) {\n                    // structural directives\n                    processFor(element);\n                    processIf(element);\n                    processOnce(element);\n                }\n                if (!root) {\n                    root = element;\n                    {\n                        checkRootConstraints(root);\n                    }\n                }\n                if (!unary) {\n                    currentParent = element;\n                    stack.push(element);\n                }\n                else {\n                    closeElement(element);\n                }\n            },\n            end: function (tag, start, end) {\n                var element = stack[stack.length - 1];\n                // pop stack\n                stack.length -= 1;\n                currentParent = stack[stack.length - 1];\n                if (options.outputSourceRange) {\n                    element.end = end;\n                }\n                closeElement(element);\n            },\n            chars: function (text, start, end) {\n                if (!currentParent) {\n                    {\n                        if (text === template) {\n                            warnOnce('Component template requires a root element, rather than just text.', { start: start });\n                        }\n                        else if ((text = text.trim())) {\n                            warnOnce(\"text \\\"\".concat(text, \"\\\" outside root element will be ignored.\"), {\n                                start: start\n                            });\n                        }\n                    }\n                    return;\n                }\n                // IE textarea placeholder bug\n                /* istanbul ignore if */\n                if (isIE &&\n                    currentParent.tag === 'textarea' &&\n                    currentParent.attrsMap.placeholder === text) {\n                    return;\n                }\n                var children = currentParent.children;\n                if (inPre || text.trim()) {\n                    text = isTextTag(currentParent)\n                        ? text\n                        : decodeHTMLCached(text);\n                }\n                else if (!children.length) {\n                    // remove the whitespace-only node right after an opening tag\n                    text = '';\n                }\n                else if (whitespaceOption) {\n                    if (whitespaceOption === 'condense') {\n                        // in condense mode, remove the whitespace node if it contains\n                        // line break, otherwise condense to a single space\n                        text = lineBreakRE.test(text) ? '' : ' ';\n                    }\n                    else {\n                        text = ' ';\n                    }\n                }\n                else {\n                    text = preserveWhitespace ? ' ' : '';\n                }\n                if (text) {\n                    if (!inPre && whitespaceOption === 'condense') {\n                        // condense consecutive whitespaces into single space\n                        text = text.replace(whitespaceRE, ' ');\n                    }\n                    var res = void 0;\n                    var child = void 0;\n                    if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n                        child = {\n                            type: 2,\n                            expression: res.expression,\n                            tokens: res.tokens,\n                            text: text\n                        };\n                    }\n                    else if (text !== ' ' ||\n                        !children.length ||\n                        children[children.length - 1].text !== ' ') {\n                        child = {\n                            type: 3,\n                            text: text\n                        };\n                    }\n                    if (child) {\n                        if (options.outputSourceRange) {\n                            child.start = start;\n                            child.end = end;\n                        }\n                        children.push(child);\n                    }\n                }\n            },\n            comment: function (text, start, end) {\n                // adding anything as a sibling to the root node is forbidden\n                // comments should still be allowed, but ignored\n                if (currentParent) {\n                    var child = {\n                        type: 3,\n                        text: text,\n                        isComment: true\n                    };\n                    if (options.outputSourceRange) {\n                        child.start = start;\n                        child.end = end;\n                    }\n                    currentParent.children.push(child);\n                }\n            }\n        });\n        return root;\n    }\n    function processPre(el) {\n        if (getAndRemoveAttr(el, 'v-pre') != null) {\n            el.pre = true;\n        }\n    }\n    function processRawAttrs(el) {\n        var list = el.attrsList;\n        var len = list.length;\n        if (len) {\n            var attrs = (el.attrs = new Array(len));\n            for (var i = 0; i < len; i++) {\n                attrs[i] = {\n                    name: list[i].name,\n                    value: JSON.stringify(list[i].value)\n                };\n                if (list[i].start != null) {\n                    attrs[i].start = list[i].start;\n                    attrs[i].end = list[i].end;\n                }\n            }\n        }\n        else if (!el.pre) {\n            // non root node in pre blocks with no attributes\n            el.plain = true;\n        }\n    }\n    function processElement(element, options) {\n        processKey(element);\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain =\n            !element.key && !element.scopedSlots && !element.attrsList.length;\n        processRef(element);\n        processSlotContent(element);\n        processSlotOutlet(element);\n        processComponent(element);\n        for (var i = 0; i < transforms.length; i++) {\n            element = transforms[i](element, options) || element;\n        }\n        processAttrs(element);\n        return element;\n    }\n    function processKey(el) {\n        var exp = getBindingAttr(el, 'key');\n        if (exp) {\n            {\n                if (el.tag === 'template') {\n                    warn(\"<template> cannot be keyed. Place the key on real elements instead.\", getRawBindingAttr(el, 'key'));\n                }\n                if (el.for) {\n                    var iterator = el.iterator2 || el.iterator1;\n                    var parent_1 = el.parent;\n                    if (iterator &&\n                        iterator === exp &&\n                        parent_1 &&\n                        parent_1.tag === 'transition-group') {\n                        warn(\"Do not use v-for index as key on <transition-group> children, \" +\n                            \"this is the same as not using keys.\", getRawBindingAttr(el, 'key'), true /* tip */);\n                    }\n                }\n            }\n            el.key = exp;\n        }\n    }\n    function processRef(el) {\n        var ref = getBindingAttr(el, 'ref');\n        if (ref) {\n            el.ref = ref;\n            el.refInFor = checkInFor(el);\n        }\n    }\n    function processFor(el) {\n        var exp;\n        if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n            var res = parseFor(exp);\n            if (res) {\n                extend(el, res);\n            }\n            else {\n                warn(\"Invalid v-for expression: \".concat(exp), el.rawAttrsMap['v-for']);\n            }\n        }\n    }\n    function parseFor(exp) {\n        var inMatch = exp.match(forAliasRE);\n        if (!inMatch)\n            return;\n        var res = {};\n        res.for = inMatch[2].trim();\n        var alias = inMatch[1].trim().replace(stripParensRE, '');\n        var iteratorMatch = alias.match(forIteratorRE);\n        if (iteratorMatch) {\n            res.alias = alias.replace(forIteratorRE, '').trim();\n            res.iterator1 = iteratorMatch[1].trim();\n            if (iteratorMatch[2]) {\n                res.iterator2 = iteratorMatch[2].trim();\n            }\n        }\n        else {\n            res.alias = alias;\n        }\n        return res;\n    }\n    function processIf(el) {\n        var exp = getAndRemoveAttr(el, 'v-if');\n        if (exp) {\n            el.if = exp;\n            addIfCondition(el, {\n                exp: exp,\n                block: el\n            });\n        }\n        else {\n            if (getAndRemoveAttr(el, 'v-else') != null) {\n                el.else = true;\n            }\n            var elseif = getAndRemoveAttr(el, 'v-else-if');\n            if (elseif) {\n                el.elseif = elseif;\n            }\n        }\n    }\n    function processIfConditions(el, parent) {\n        var prev = findPrevElement(parent.children);\n        if (prev && prev.if) {\n            addIfCondition(prev, {\n                exp: el.elseif,\n                block: el\n            });\n        }\n        else {\n            warn(\"v-\".concat(el.elseif ? 'else-if=\"' + el.elseif + '\"' : 'else', \" \") +\n                \"used on element <\".concat(el.tag, \"> without corresponding v-if.\"), el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']);\n        }\n    }\n    function findPrevElement(children) {\n        var i = children.length;\n        while (i--) {\n            if (children[i].type === 1) {\n                return children[i];\n            }\n            else {\n                if (children[i].text !== ' ') {\n                    warn(\"text \\\"\".concat(children[i].text.trim(), \"\\\" between v-if and v-else(-if) \") +\n                        \"will be ignored.\", children[i]);\n                }\n                children.pop();\n            }\n        }\n    }\n    function addIfCondition(el, condition) {\n        if (!el.ifConditions) {\n            el.ifConditions = [];\n        }\n        el.ifConditions.push(condition);\n    }\n    function processOnce(el) {\n        var once = getAndRemoveAttr(el, 'v-once');\n        if (once != null) {\n            el.once = true;\n        }\n    }\n    // handle content being passed to a component as slot,\n    // e.g. <template slot=\"xxx\">, <div slot-scope=\"xxx\">\n    function processSlotContent(el) {\n        var slotScope;\n        if (el.tag === 'template') {\n            slotScope = getAndRemoveAttr(el, 'scope');\n            /* istanbul ignore if */\n            if (slotScope) {\n                warn(\"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n                    \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n                    \"can also be used on plain elements in addition to <template> to \" +\n                    \"denote scoped slots.\", el.rawAttrsMap['scope'], true);\n            }\n            el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n        }\n        else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n            /* istanbul ignore if */\n            if (el.attrsMap['v-for']) {\n                warn(\"Ambiguous combined usage of slot-scope and v-for on <\".concat(el.tag, \"> \") +\n                    \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n                    \"scoped slot to make it clearer.\", el.rawAttrsMap['slot-scope'], true);\n            }\n            el.slotScope = slotScope;\n        }\n        // slot=\"xxx\"\n        var slotTarget = getBindingAttr(el, 'slot');\n        if (slotTarget) {\n            el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n            el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);\n            // preserve slot as an attribute for native shadow DOM compat\n            // only for non-scoped slots.\n            if (el.tag !== 'template' && !el.slotScope) {\n                addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));\n            }\n        }\n        // 2.6 v-slot syntax\n        {\n            if (el.tag === 'template') {\n                // v-slot on <template>\n                var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\n                if (slotBinding) {\n                    {\n                        if (el.slotTarget || el.slotScope) {\n                            warn(\"Unexpected mixed usage of different slot syntaxes.\", el);\n                        }\n                        if (el.parent && !maybeComponent(el.parent)) {\n                            warn(\"<template v-slot> can only appear at the root level inside \" +\n                                \"the receiving component\", el);\n                        }\n                    }\n                    var _a = getSlotName(slotBinding), name_2 = _a.name, dynamic = _a.dynamic;\n                    el.slotTarget = name_2;\n                    el.slotTargetDynamic = dynamic;\n                    el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf\n                }\n            }\n            else {\n                // v-slot on component, denotes default slot\n                var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\n                if (slotBinding) {\n                    {\n                        if (!maybeComponent(el)) {\n                            warn(\"v-slot can only be used on components or <template>.\", slotBinding);\n                        }\n                        if (el.slotScope || el.slotTarget) {\n                            warn(\"Unexpected mixed usage of different slot syntaxes.\", el);\n                        }\n                        if (el.scopedSlots) {\n                            warn(\"To avoid scope ambiguity, the default slot should also use \" +\n                                \"<template> syntax when there are other named slots.\", slotBinding);\n                        }\n                    }\n                    // add the component's children to its default slot\n                    var slots = el.scopedSlots || (el.scopedSlots = {});\n                    var _b = getSlotName(slotBinding), name_3 = _b.name, dynamic = _b.dynamic;\n                    var slotContainer_1 = (slots[name_3] = createASTElement('template', [], el));\n                    slotContainer_1.slotTarget = name_3;\n                    slotContainer_1.slotTargetDynamic = dynamic;\n                    slotContainer_1.children = el.children.filter(function (c) {\n                        if (!c.slotScope) {\n                            c.parent = slotContainer_1;\n                            return true;\n                        }\n                    });\n                    slotContainer_1.slotScope = slotBinding.value || emptySlotScopeToken;\n                    // remove children as they are returned from scopedSlots now\n                    el.children = [];\n                    // mark el non-plain so data gets generated\n                    el.plain = false;\n                }\n            }\n        }\n    }\n    function getSlotName(binding) {\n        var name = binding.name.replace(slotRE, '');\n        if (!name) {\n            if (binding.name[0] !== '#') {\n                name = 'default';\n            }\n            else {\n                warn(\"v-slot shorthand syntax requires a slot name.\", binding);\n            }\n        }\n        return dynamicArgRE.test(name)\n            ? // dynamic [name]\n                { name: name.slice(1, -1), dynamic: true }\n            : // static name\n                { name: \"\\\"\".concat(name, \"\\\"\"), dynamic: false };\n    }\n    // handle <slot/> outlets\n    function processSlotOutlet(el) {\n        if (el.tag === 'slot') {\n            el.slotName = getBindingAttr(el, 'name');\n            if (el.key) {\n                warn(\"`key` does not work on <slot> because slots are abstract outlets \" +\n                    \"and can possibly expand into multiple elements. \" +\n                    \"Use the key on a wrapping element instead.\", getRawBindingAttr(el, 'key'));\n            }\n        }\n    }\n    function processComponent(el) {\n        var binding;\n        if ((binding = getBindingAttr(el, 'is'))) {\n            el.component = binding;\n        }\n        if (getAndRemoveAttr(el, 'inline-template') != null) {\n            el.inlineTemplate = true;\n        }\n    }\n    function processAttrs(el) {\n        var list = el.attrsList;\n        var i, l, name, rawName, value, modifiers, syncGen, isDynamic;\n        for (i = 0, l = list.length; i < l; i++) {\n            name = rawName = list[i].name;\n            value = list[i].value;\n            if (dirRE.test(name)) {\n                // mark element as dynamic\n                el.hasBindings = true;\n                // modifiers\n                modifiers = parseModifiers(name.replace(dirRE, ''));\n                // support .foo shorthand syntax for the .prop modifier\n                if (modifiers) {\n                    name = name.replace(modifierRE, '');\n                }\n                if (bindRE.test(name)) {\n                    // v-bind\n                    name = name.replace(bindRE, '');\n                    value = parseFilters(value);\n                    isDynamic = dynamicArgRE.test(name);\n                    if (isDynamic) {\n                        name = name.slice(1, -1);\n                    }\n                    if (value.trim().length === 0) {\n                        warn(\"The value for a v-bind expression cannot be empty. Found in \\\"v-bind:\".concat(name, \"\\\"\"));\n                    }\n                    if (modifiers) {\n                        if (modifiers.prop && !isDynamic) {\n                            name = camelize(name);\n                            if (name === 'innerHtml')\n                                name = 'innerHTML';\n                        }\n                        if (modifiers.camel && !isDynamic) {\n                            name = camelize(name);\n                        }\n                        if (modifiers.sync) {\n                            syncGen = genAssignmentCode(value, \"$event\");\n                            if (!isDynamic) {\n                                addHandler(el, \"update:\".concat(camelize(name)), syncGen, null, false, warn, list[i]);\n                                if (hyphenate(name) !== camelize(name)) {\n                                    addHandler(el, \"update:\".concat(hyphenate(name)), syncGen, null, false, warn, list[i]);\n                                }\n                            }\n                            else {\n                                // handler w/ dynamic event name\n                                addHandler(el, \"\\\"update:\\\"+(\".concat(name, \")\"), syncGen, null, false, warn, list[i], true // dynamic\n                                );\n                            }\n                        }\n                    }\n                    if ((modifiers && modifiers.prop) ||\n                        (!el.component && platformMustUseProp(el.tag, el.attrsMap.type, name))) {\n                        addProp(el, name, value, list[i], isDynamic);\n                    }\n                    else {\n                        addAttr(el, name, value, list[i], isDynamic);\n                    }\n                }\n                else if (onRE.test(name)) {\n                    // v-on\n                    name = name.replace(onRE, '');\n                    isDynamic = dynamicArgRE.test(name);\n                    if (isDynamic) {\n                        name = name.slice(1, -1);\n                    }\n                    addHandler(el, name, value, modifiers, false, warn, list[i], isDynamic);\n                }\n                else {\n                    // normal directives\n                    name = name.replace(dirRE, '');\n                    // parse arg\n                    var argMatch = name.match(argRE);\n                    var arg = argMatch && argMatch[1];\n                    isDynamic = false;\n                    if (arg) {\n                        name = name.slice(0, -(arg.length + 1));\n                        if (dynamicArgRE.test(arg)) {\n                            arg = arg.slice(1, -1);\n                            isDynamic = true;\n                        }\n                    }\n                    addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);\n                    if (name === 'model') {\n                        checkForAliasModel(el, value);\n                    }\n                }\n            }\n            else {\n                // literal attribute\n                {\n                    var res = parseText(value, delimiters);\n                    if (res) {\n                        warn(\"\".concat(name, \"=\\\"\").concat(value, \"\\\": \") +\n                            'Interpolation inside attributes has been removed. ' +\n                            'Use v-bind or the colon shorthand instead. For example, ' +\n                            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.', list[i]);\n                    }\n                }\n                addAttr(el, name, JSON.stringify(value), list[i]);\n                // #6887 firefox doesn't update muted state if set via attribute\n                // even immediately after element creation\n                if (!el.component &&\n                    name === 'muted' &&\n                    platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n                    addProp(el, name, 'true', list[i]);\n                }\n            }\n        }\n    }\n    function checkInFor(el) {\n        var parent = el;\n        while (parent) {\n            if (parent.for !== undefined) {\n                return true;\n            }\n            parent = parent.parent;\n        }\n        return false;\n    }\n    function parseModifiers(name) {\n        var match = name.match(modifierRE);\n        if (match) {\n            var ret_1 = {};\n            match.forEach(function (m) {\n                ret_1[m.slice(1)] = true;\n            });\n            return ret_1;\n        }\n    }\n    function makeAttrsMap(attrs) {\n        var map = {};\n        for (var i = 0, l = attrs.length; i < l; i++) {\n            if (map[attrs[i].name] && !isIE && !isEdge) {\n                warn('duplicate attribute: ' + attrs[i].name, attrs[i]);\n            }\n            map[attrs[i].name] = attrs[i].value;\n        }\n        return map;\n    }\n    // for script (e.g. type=\"x/template\") or style, do not decode content\n    function isTextTag(el) {\n        return el.tag === 'script' || el.tag === 'style';\n    }\n    function isForbiddenTag(el) {\n        return (el.tag === 'style' ||\n            (el.tag === 'script' &&\n                (!el.attrsMap.type || el.attrsMap.type === 'text/javascript')));\n    }\n    var ieNSBug = /^xmlns:NS\\d+/;\n    var ieNSPrefix = /^NS\\d+:/;\n    /* istanbul ignore next */\n    function guardIESVGBug(attrs) {\n        var res = [];\n        for (var i = 0; i < attrs.length; i++) {\n            var attr = attrs[i];\n            if (!ieNSBug.test(attr.name)) {\n                attr.name = attr.name.replace(ieNSPrefix, '');\n                res.push(attr);\n            }\n        }\n        return res;\n    }\n    function checkForAliasModel(el, value) {\n        var _el = el;\n        while (_el) {\n            if (_el.for && _el.alias === value) {\n                warn(\"<\".concat(el.tag, \" v-model=\\\"\").concat(value, \"\\\">: \") +\n                    \"You are binding v-model directly to a v-for iteration alias. \" +\n                    \"This will not be able to modify the v-for source array because \" +\n                    \"writing to the alias is like modifying a function local variable. \" +\n                    \"Consider using an array of objects and use v-model on an object property instead.\", el.rawAttrsMap['v-model']);\n            }\n            _el = _el.parent;\n        }\n    }\n    /**\n     * Expand input[v-model] with dynamic type bindings into v-if-else chains\n     * Turn this:\n     *   <input v-model=\"data[type]\" :type=\"type\">\n     * into this:\n     *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n     *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n     *   <input v-else :type=\"type\" v-model=\"data[type]\">\n     */\n    function preTransformNode(el, options) {\n        if (el.tag === 'input') {\n            var map = el.attrsMap;\n            if (!map['v-model']) {\n                return;\n            }\n            var typeBinding = void 0;\n            if (map[':type'] || map['v-bind:type']) {\n                typeBinding = getBindingAttr(el, 'type');\n            }\n            if (!map.type && !typeBinding && map['v-bind']) {\n                typeBinding = \"(\".concat(map['v-bind'], \").type\");\n            }\n            if (typeBinding) {\n                var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n                var ifConditionExtra = ifCondition ? \"&&(\".concat(ifCondition, \")\") : \"\";\n                var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n                var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n                // 1. checkbox\n                var branch0 = cloneASTElement(el);\n                // process for on the main node\n                processFor(branch0);\n                addRawAttr(branch0, 'type', 'checkbox');\n                processElement(branch0, options);\n                branch0.processed = true; // prevent it from double-processed\n                branch0.if = \"(\".concat(typeBinding, \")==='checkbox'\") + ifConditionExtra;\n                addIfCondition(branch0, {\n                    exp: branch0.if,\n                    block: branch0\n                });\n                // 2. add radio else-if condition\n                var branch1 = cloneASTElement(el);\n                getAndRemoveAttr(branch1, 'v-for', true);\n                addRawAttr(branch1, 'type', 'radio');\n                processElement(branch1, options);\n                addIfCondition(branch0, {\n                    exp: \"(\".concat(typeBinding, \")==='radio'\") + ifConditionExtra,\n                    block: branch1\n                });\n                // 3. other\n                var branch2 = cloneASTElement(el);\n                getAndRemoveAttr(branch2, 'v-for', true);\n                addRawAttr(branch2, ':type', typeBinding);\n                processElement(branch2, options);\n                addIfCondition(branch0, {\n                    exp: ifCondition,\n                    block: branch2\n                });\n                if (hasElse) {\n                    branch0.else = true;\n                }\n                else if (elseIfCondition) {\n                    branch0.elseif = elseIfCondition;\n                }\n                return branch0;\n            }\n        }\n    }\n    function cloneASTElement(el) {\n        return createASTElement(el.tag, el.attrsList.slice(), el.parent);\n    }\n    var model = {\n        preTransformNode: preTransformNode\n    };\n    var modules = [klass, style, model];\n    function text(el, dir) {\n        if (dir.value) {\n            addProp(el, 'textContent', \"_s(\".concat(dir.value, \")\"), dir);\n        }\n    }\n    function html(el, dir) {\n        if (dir.value) {\n            addProp(el, 'innerHTML', \"_s(\".concat(dir.value, \")\"), dir);\n        }\n    }\n    var directives = {\n        model: model$1,\n        text: text,\n        html: html\n    };\n    var baseOptions = {\n        expectHTML: true,\n        modules: modules,\n        directives: directives,\n        isPreTag: isPreTag,\n        isUnaryTag: isUnaryTag,\n        mustUseProp: mustUseProp,\n        canBeLeftOpenTag: canBeLeftOpenTag,\n        isReservedTag: isReservedTag,\n        getTagNamespace: getTagNamespace,\n        staticKeys: genStaticKeys$1(modules)\n    };\n    var isStaticKey;\n    var isPlatformReservedTag;\n    var genStaticKeysCached = cached(genStaticKeys);\n    /**\n     * Goal of the optimizer: walk the generated template AST tree\n     * and detect sub-trees that are purely static, i.e. parts of\n     * the DOM that never needs to change.\n     *\n     * Once we detect these sub-trees, we can:\n     *\n     * 1. Hoist them into constants, so that we no longer need to\n     *    create fresh nodes for them on each re-render;\n     * 2. Completely skip them in the patching process.\n     */\n    function optimize(root, options) {\n        if (!root)\n            return;\n        isStaticKey = genStaticKeysCached(options.staticKeys || '');\n        isPlatformReservedTag = options.isReservedTag || no;\n        // first pass: mark all non-static nodes.\n        markStatic(root);\n        // second pass: mark static roots.\n        markStaticRoots(root, false);\n    }\n    function genStaticKeys(keys) {\n        return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +\n            (keys ? ',' + keys : ''));\n    }\n    function markStatic(node) {\n        node.static = isStatic(node);\n        if (node.type === 1) {\n            // do not make component slot content static. this avoids\n            // 1. components not able to mutate slot nodes\n            // 2. static slot content fails for hot-reloading\n            if (!isPlatformReservedTag(node.tag) &&\n                node.tag !== 'slot' &&\n                node.attrsMap['inline-template'] == null) {\n                return;\n            }\n            for (var i = 0, l = node.children.length; i < l; i++) {\n                var child = node.children[i];\n                markStatic(child);\n                if (!child.static) {\n                    node.static = false;\n                }\n            }\n            if (node.ifConditions) {\n                for (var i = 1, l = node.ifConditions.length; i < l; i++) {\n                    var block = node.ifConditions[i].block;\n                    markStatic(block);\n                    if (!block.static) {\n                        node.static = false;\n                    }\n                }\n            }\n        }\n    }\n    function markStaticRoots(node, isInFor) {\n        if (node.type === 1) {\n            if (node.static || node.once) {\n                node.staticInFor = isInFor;\n            }\n            // For a node to qualify as a static root, it should have children that\n            // are not just static text. Otherwise the cost of hoisting out will\n            // outweigh the benefits and it's better off to just always render it fresh.\n            if (node.static &&\n                node.children.length &&\n                !(node.children.length === 1 && node.children[0].type === 3)) {\n                node.staticRoot = true;\n                return;\n            }\n            else {\n                node.staticRoot = false;\n            }\n            if (node.children) {\n                for (var i = 0, l = node.children.length; i < l; i++) {\n                    markStaticRoots(node.children[i], isInFor || !!node.for);\n                }\n            }\n            if (node.ifConditions) {\n                for (var i = 1, l = node.ifConditions.length; i < l; i++) {\n                    markStaticRoots(node.ifConditions[i].block, isInFor);\n                }\n            }\n        }\n    }\n    function isStatic(node) {\n        if (node.type === 2) {\n            // expression\n            return false;\n        }\n        if (node.type === 3) {\n            // text\n            return true;\n        }\n        return !!(node.pre ||\n            (!node.hasBindings && // no dynamic bindings\n                !node.if &&\n                !node.for && // not v-if or v-for or v-else\n                !isBuiltInTag(node.tag) && // not a built-in\n                isPlatformReservedTag(node.tag) && // not a component\n                !isDirectChildOfTemplateFor(node) &&\n                Object.keys(node).every(isStaticKey)));\n    }\n    function isDirectChildOfTemplateFor(node) {\n        while (node.parent) {\n            node = node.parent;\n            if (node.tag !== 'template') {\n                return false;\n            }\n            if (node.for) {\n                return true;\n            }\n        }\n        return false;\n    }\n    var fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\n    var fnInvokeRE = /\\([^)]*?\\);*$/;\n    var simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n    // KeyboardEvent.keyCode aliases\n    var keyCodes = {\n        esc: 27,\n        tab: 9,\n        enter: 13,\n        space: 32,\n        up: 38,\n        left: 37,\n        right: 39,\n        down: 40,\n        delete: [8, 46]\n    };\n    // KeyboardEvent.key aliases\n    var keyNames = {\n        // #7880: IE11 and Edge use `Esc` for Escape key name.\n        esc: ['Esc', 'Escape'],\n        tab: 'Tab',\n        enter: 'Enter',\n        // #9112: IE11 uses `Spacebar` for Space key name.\n        space: [' ', 'Spacebar'],\n        // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n        up: ['Up', 'ArrowUp'],\n        left: ['Left', 'ArrowLeft'],\n        right: ['Right', 'ArrowRight'],\n        down: ['Down', 'ArrowDown'],\n        // #9112: IE11 uses `Del` for Delete key name.\n        delete: ['Backspace', 'Delete', 'Del']\n    };\n    // #4868: modifiers that prevent the execution of the listener\n    // need to explicitly return null so that we can determine whether to remove\n    // the listener for .once\n    var genGuard = function (condition) { return \"if(\".concat(condition, \")return null;\"); };\n    var modifierCode = {\n        stop: '$event.stopPropagation();',\n        prevent: '$event.preventDefault();',\n        self: genGuard(\"$event.target !== $event.currentTarget\"),\n        ctrl: genGuard(\"!$event.ctrlKey\"),\n        shift: genGuard(\"!$event.shiftKey\"),\n        alt: genGuard(\"!$event.altKey\"),\n        meta: genGuard(\"!$event.metaKey\"),\n        left: genGuard(\"'button' in $event && $event.button !== 0\"),\n        middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n        right: genGuard(\"'button' in $event && $event.button !== 2\")\n    };\n    function genHandlers(events, isNative) {\n        var prefix = isNative ? 'nativeOn:' : 'on:';\n        var staticHandlers = \"\";\n        var dynamicHandlers = \"\";\n        for (var name_1 in events) {\n            var handlerCode = genHandler(events[name_1]);\n            //@ts-expect-error\n            if (events[name_1] && events[name_1].dynamic) {\n                dynamicHandlers += \"\".concat(name_1, \",\").concat(handlerCode, \",\");\n            }\n            else {\n                staticHandlers += \"\\\"\".concat(name_1, \"\\\":\").concat(handlerCode, \",\");\n            }\n        }\n        staticHandlers = \"{\".concat(staticHandlers.slice(0, -1), \"}\");\n        if (dynamicHandlers) {\n            return prefix + \"_d(\".concat(staticHandlers, \",[\").concat(dynamicHandlers.slice(0, -1), \"])\");\n        }\n        else {\n            return prefix + staticHandlers;\n        }\n    }\n    function genHandler(handler) {\n        if (!handler) {\n            return 'function(){}';\n        }\n        if (Array.isArray(handler)) {\n            return \"[\".concat(handler.map(function (handler) { return genHandler(handler); }).join(','), \"]\");\n        }\n        var isMethodPath = simplePathRE.test(handler.value);\n        var isFunctionExpression = fnExpRE.test(handler.value);\n        var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));\n        if (!handler.modifiers) {\n            if (isMethodPath || isFunctionExpression) {\n                return handler.value;\n            }\n            return \"function($event){\".concat(isFunctionInvocation ? \"return \".concat(handler.value) : handler.value, \"}\"); // inline statement\n        }\n        else {\n            var code = '';\n            var genModifierCode = '';\n            var keys = [];\n            var _loop_1 = function (key) {\n                if (modifierCode[key]) {\n                    genModifierCode += modifierCode[key];\n                    // left/right\n                    if (keyCodes[key]) {\n                        keys.push(key);\n                    }\n                }\n                else if (key === 'exact') {\n                    var modifiers_1 = handler.modifiers;\n                    genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta']\n                        .filter(function (keyModifier) { return !modifiers_1[keyModifier]; })\n                        .map(function (keyModifier) { return \"$event.\".concat(keyModifier, \"Key\"); })\n                        .join('||'));\n                }\n                else {\n                    keys.push(key);\n                }\n            };\n            for (var key in handler.modifiers) {\n                _loop_1(key);\n            }\n            if (keys.length) {\n                code += genKeyFilter(keys);\n            }\n            // Make sure modifiers like prevent and stop get executed after key filtering\n            if (genModifierCode) {\n                code += genModifierCode;\n            }\n            var handlerCode = isMethodPath\n                ? \"return \".concat(handler.value, \".apply(null, arguments)\")\n                : isFunctionExpression\n                    ? \"return (\".concat(handler.value, \").apply(null, arguments)\")\n                    : isFunctionInvocation\n                        ? \"return \".concat(handler.value)\n                        : handler.value;\n            return \"function($event){\".concat(code).concat(handlerCode, \"}\");\n        }\n    }\n    function genKeyFilter(keys) {\n        return (\n        // make sure the key filters only apply to KeyboardEvents\n        // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake\n        // key events that do not have keyCode property...\n        \"if(!$event.type.indexOf('key')&&\" +\n            \"\".concat(keys.map(genFilterCode).join('&&'), \")return null;\"));\n    }\n    function genFilterCode(key) {\n        var keyVal = parseInt(key, 10);\n        if (keyVal) {\n            return \"$event.keyCode!==\".concat(keyVal);\n        }\n        var keyCode = keyCodes[key];\n        var keyName = keyNames[key];\n        return (\"_k($event.keyCode,\" +\n            \"\".concat(JSON.stringify(key), \",\") +\n            \"\".concat(JSON.stringify(keyCode), \",\") +\n            \"$event.key,\" +\n            \"\".concat(JSON.stringify(keyName)) +\n            \")\");\n    }\n    function on(el, dir) {\n        if (dir.modifiers) {\n            warn$2(\"v-on without argument does not support modifiers.\");\n        }\n        el.wrapListeners = function (code) { return \"_g(\".concat(code, \",\").concat(dir.value, \")\"); };\n    }\n    function bind(el, dir) {\n        el.wrapData = function (code) {\n            return \"_b(\".concat(code, \",'\").concat(el.tag, \"',\").concat(dir.value, \",\").concat(dir.modifiers && dir.modifiers.prop ? 'true' : 'false').concat(dir.modifiers && dir.modifiers.sync ? ',true' : '', \")\");\n        };\n    }\n    var baseDirectives = {\n        on: on,\n        bind: bind,\n        cloak: noop\n    };\n    var CodegenState = /** @class */ (function () {\n        function CodegenState(options) {\n            this.options = options;\n            this.warn = options.warn || baseWarn;\n            this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n            this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n            this.directives = extend(extend({}, baseDirectives), options.directives);\n            var isReservedTag = options.isReservedTag || no;\n            this.maybeComponent = function (el) {\n                return !!el.component || !isReservedTag(el.tag);\n            };\n            this.onceId = 0;\n            this.staticRenderFns = [];\n            this.pre = false;\n        }\n        return CodegenState;\n    }());\n    function generate(ast, options) {\n        var state = new CodegenState(options);\n        // fix #11483, Root level <script> tags should not be rendered.\n        var code = ast\n            ? ast.tag === 'script'\n                ? 'null'\n                : genElement(ast, state)\n            : '_c(\"div\")';\n        return {\n            render: \"with(this){return \".concat(code, \"}\"),\n            staticRenderFns: state.staticRenderFns\n        };\n    }\n    function genElement(el, state) {\n        if (el.parent) {\n            el.pre = el.pre || el.parent.pre;\n        }\n        if (el.staticRoot && !el.staticProcessed) {\n            return genStatic(el, state);\n        }\n        else if (el.once && !el.onceProcessed) {\n            return genOnce(el, state);\n        }\n        else if (el.for && !el.forProcessed) {\n            return genFor(el, state);\n        }\n        else if (el.if && !el.ifProcessed) {\n            return genIf(el, state);\n        }\n        else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\n            return genChildren(el, state) || 'void 0';\n        }\n        else if (el.tag === 'slot') {\n            return genSlot(el, state);\n        }\n        else {\n            // component or element\n            var code = void 0;\n            if (el.component) {\n                code = genComponent(el.component, el, state);\n            }\n            else {\n                var data = void 0;\n                var maybeComponent = state.maybeComponent(el);\n                if (!el.plain || (el.pre && maybeComponent)) {\n                    data = genData(el, state);\n                }\n                var tag \n                // check if this is a component in <script setup>\n                = void 0;\n                // check if this is a component in <script setup>\n                var bindings = state.options.bindings;\n                if (maybeComponent && bindings && bindings.__isScriptSetup !== false) {\n                    tag = checkBindingType(bindings, el.tag);\n                }\n                if (!tag)\n                    tag = \"'\".concat(el.tag, \"'\");\n                var children = el.inlineTemplate ? null : genChildren(el, state, true);\n                code = \"_c(\".concat(tag).concat(data ? \",\".concat(data) : '' // data\n                ).concat(children ? \",\".concat(children) : '' // children\n                , \")\");\n            }\n            // module transforms\n            for (var i = 0; i < state.transforms.length; i++) {\n                code = state.transforms[i](el, code);\n            }\n            return code;\n        }\n    }\n    function checkBindingType(bindings, key) {\n        var camelName = camelize(key);\n        var PascalName = capitalize(camelName);\n        var checkType = function (type) {\n            if (bindings[key] === type) {\n                return key;\n            }\n            if (bindings[camelName] === type) {\n                return camelName;\n            }\n            if (bindings[PascalName] === type) {\n                return PascalName;\n            }\n        };\n        var fromConst = checkType(\"setup-const\" /* BindingTypes.SETUP_CONST */) ||\n            checkType(\"setup-reactive-const\" /* BindingTypes.SETUP_REACTIVE_CONST */);\n        if (fromConst) {\n            return fromConst;\n        }\n        var fromMaybeRef = checkType(\"setup-let\" /* BindingTypes.SETUP_LET */) ||\n            checkType(\"setup-ref\" /* BindingTypes.SETUP_REF */) ||\n            checkType(\"setup-maybe-ref\" /* BindingTypes.SETUP_MAYBE_REF */);\n        if (fromMaybeRef) {\n            return fromMaybeRef;\n        }\n    }\n    // hoist static sub-trees out\n    function genStatic(el, state) {\n        el.staticProcessed = true;\n        // Some elements (templates) need to behave differently inside of a v-pre\n        // node.  All pre nodes are static roots, so we can use this as a location to\n        // wrap a state change and reset it upon exiting the pre node.\n        var originalPreState = state.pre;\n        if (el.pre) {\n            state.pre = el.pre;\n        }\n        state.staticRenderFns.push(\"with(this){return \".concat(genElement(el, state), \"}\"));\n        state.pre = originalPreState;\n        return \"_m(\".concat(state.staticRenderFns.length - 1).concat(el.staticInFor ? ',true' : '', \")\");\n    }\n    // v-once\n    function genOnce(el, state) {\n        el.onceProcessed = true;\n        if (el.if && !el.ifProcessed) {\n            return genIf(el, state);\n        }\n        else if (el.staticInFor) {\n            var key = '';\n            var parent_1 = el.parent;\n            while (parent_1) {\n                if (parent_1.for) {\n                    key = parent_1.key;\n                    break;\n                }\n                parent_1 = parent_1.parent;\n            }\n            if (!key) {\n                state.warn(\"v-once can only be used inside v-for that is keyed. \", el.rawAttrsMap['v-once']);\n                return genElement(el, state);\n            }\n            return \"_o(\".concat(genElement(el, state), \",\").concat(state.onceId++, \",\").concat(key, \")\");\n        }\n        else {\n            return genStatic(el, state);\n        }\n    }\n    function genIf(el, state, altGen, altEmpty) {\n        el.ifProcessed = true; // avoid recursion\n        return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);\n    }\n    function genIfConditions(conditions, state, altGen, altEmpty) {\n        if (!conditions.length) {\n            return altEmpty || '_e()';\n        }\n        var condition = conditions.shift();\n        if (condition.exp) {\n            return \"(\".concat(condition.exp, \")?\").concat(genTernaryExp(condition.block), \":\").concat(genIfConditions(conditions, state, altGen, altEmpty));\n        }\n        else {\n            return \"\".concat(genTernaryExp(condition.block));\n        }\n        // v-if with v-once should generate code like (a)?_m(0):_m(1)\n        function genTernaryExp(el) {\n            return altGen\n                ? altGen(el, state)\n                : el.once\n                    ? genOnce(el, state)\n                    : genElement(el, state);\n        }\n    }\n    function genFor(el, state, altGen, altHelper) {\n        var exp = el.for;\n        var alias = el.alias;\n        var iterator1 = el.iterator1 ? \",\".concat(el.iterator1) : '';\n        var iterator2 = el.iterator2 ? \",\".concat(el.iterator2) : '';\n        if (state.maybeComponent(el) &&\n            el.tag !== 'slot' &&\n            el.tag !== 'template' &&\n            !el.key) {\n            state.warn(\"<\".concat(el.tag, \" v-for=\\\"\").concat(alias, \" in \").concat(exp, \"\\\">: component lists rendered with \") +\n                \"v-for should have explicit keys. \" +\n                \"See https://v2.vuejs.org/v2/guide/list.html#key for more info.\", el.rawAttrsMap['v-for'], true /* tip */);\n        }\n        el.forProcessed = true; // avoid recursion\n        return (\"\".concat(altHelper || '_l', \"((\").concat(exp, \"),\") +\n            \"function(\".concat(alias).concat(iterator1).concat(iterator2, \"){\") +\n            \"return \".concat((altGen || genElement)(el, state)) +\n            '})');\n    }\n    function genData(el, state) {\n        var data = '{';\n        // directives first.\n        // directives may mutate the el's other properties before they are generated.\n        var dirs = genDirectives(el, state);\n        if (dirs)\n            data += dirs + ',';\n        // key\n        if (el.key) {\n            data += \"key:\".concat(el.key, \",\");\n        }\n        // ref\n        if (el.ref) {\n            data += \"ref:\".concat(el.ref, \",\");\n        }\n        if (el.refInFor) {\n            data += \"refInFor:true,\";\n        }\n        // pre\n        if (el.pre) {\n            data += \"pre:true,\";\n        }\n        // record original tag name for components using \"is\" attribute\n        if (el.component) {\n            data += \"tag:\\\"\".concat(el.tag, \"\\\",\");\n        }\n        // module data generation functions\n        for (var i = 0; i < state.dataGenFns.length; i++) {\n            data += state.dataGenFns[i](el);\n        }\n        // attributes\n        if (el.attrs) {\n            data += \"attrs:\".concat(genProps(el.attrs), \",\");\n        }\n        // DOM props\n        if (el.props) {\n            data += \"domProps:\".concat(genProps(el.props), \",\");\n        }\n        // event handlers\n        if (el.events) {\n            data += \"\".concat(genHandlers(el.events, false), \",\");\n        }\n        if (el.nativeEvents) {\n            data += \"\".concat(genHandlers(el.nativeEvents, true), \",\");\n        }\n        // slot target\n        // only for non-scoped slots\n        if (el.slotTarget && !el.slotScope) {\n            data += \"slot:\".concat(el.slotTarget, \",\");\n        }\n        // scoped slots\n        if (el.scopedSlots) {\n            data += \"\".concat(genScopedSlots(el, el.scopedSlots, state), \",\");\n        }\n        // component v-model\n        if (el.model) {\n            data += \"model:{value:\".concat(el.model.value, \",callback:\").concat(el.model.callback, \",expression:\").concat(el.model.expression, \"},\");\n        }\n        // inline-template\n        if (el.inlineTemplate) {\n            var inlineTemplate = genInlineTemplate(el, state);\n            if (inlineTemplate) {\n                data += \"\".concat(inlineTemplate, \",\");\n            }\n        }\n        data = data.replace(/,$/, '') + '}';\n        // v-bind dynamic argument wrap\n        // v-bind with dynamic arguments must be applied using the same v-bind object\n        // merge helper so that class/style/mustUseProp attrs are handled correctly.\n        if (el.dynamicAttrs) {\n            data = \"_b(\".concat(data, \",\\\"\").concat(el.tag, \"\\\",\").concat(genProps(el.dynamicAttrs), \")\");\n        }\n        // v-bind data wrap\n        if (el.wrapData) {\n            data = el.wrapData(data);\n        }\n        // v-on data wrap\n        if (el.wrapListeners) {\n            data = el.wrapListeners(data);\n        }\n        return data;\n    }\n    function genDirectives(el, state) {\n        var dirs = el.directives;\n        if (!dirs)\n            return;\n        var res = 'directives:[';\n        var hasRuntime = false;\n        var i, l, dir, needRuntime;\n        for (i = 0, l = dirs.length; i < l; i++) {\n            dir = dirs[i];\n            needRuntime = true;\n            var gen = state.directives[dir.name];\n            if (gen) {\n                // compile-time directive that manipulates AST.\n                // returns true if it also needs a runtime counterpart.\n                needRuntime = !!gen(el, dir, state.warn);\n            }\n            if (needRuntime) {\n                hasRuntime = true;\n                res += \"{name:\\\"\".concat(dir.name, \"\\\",rawName:\\\"\").concat(dir.rawName, \"\\\"\").concat(dir.value\n                    ? \",value:(\".concat(dir.value, \"),expression:\").concat(JSON.stringify(dir.value))\n                    : '').concat(dir.arg ? \",arg:\".concat(dir.isDynamicArg ? dir.arg : \"\\\"\".concat(dir.arg, \"\\\"\")) : '').concat(dir.modifiers ? \",modifiers:\".concat(JSON.stringify(dir.modifiers)) : '', \"},\");\n            }\n        }\n        if (hasRuntime) {\n            return res.slice(0, -1) + ']';\n        }\n    }\n    function genInlineTemplate(el, state) {\n        var ast = el.children[0];\n        if ((el.children.length !== 1 || ast.type !== 1)) {\n            state.warn('Inline-template components must have exactly one child element.', { start: el.start });\n        }\n        if (ast && ast.type === 1) {\n            var inlineRenderFns = generate(ast, state.options);\n            return \"inlineTemplate:{render:function(){\".concat(inlineRenderFns.render, \"},staticRenderFns:[\").concat(inlineRenderFns.staticRenderFns\n                .map(function (code) { return \"function(){\".concat(code, \"}\"); })\n                .join(','), \"]}\");\n        }\n    }\n    function genScopedSlots(el, slots, state) {\n        // by default scoped slots are considered \"stable\", this allows child\n        // components with only scoped slots to skip forced updates from parent.\n        // but in some cases we have to bail-out of this optimization\n        // for example if the slot contains dynamic names, has v-if or v-for on them...\n        var needsForceUpdate = el.for ||\n            Object.keys(slots).some(function (key) {\n                var slot = slots[key];\n                return (slot.slotTargetDynamic || slot.if || slot.for || containsSlotChild(slot) // is passing down slot from parent which may be dynamic\n                );\n            });\n        // #9534: if a component with scoped slots is inside a conditional branch,\n        // it's possible for the same component to be reused but with different\n        // compiled slot content. To avoid that, we generate a unique key based on\n        // the generated code of all the slot contents.\n        var needsKey = !!el.if;\n        // OR when it is inside another scoped slot or v-for (the reactivity may be\n        // disconnected due to the intermediate scope variable)\n        // #9438, #9506\n        // TODO: this can be further optimized by properly analyzing in-scope bindings\n        // and skip force updating ones that do not actually use scope variables.\n        if (!needsForceUpdate) {\n            var parent_2 = el.parent;\n            while (parent_2) {\n                if ((parent_2.slotScope && parent_2.slotScope !== emptySlotScopeToken) ||\n                    parent_2.for) {\n                    needsForceUpdate = true;\n                    break;\n                }\n                if (parent_2.if) {\n                    needsKey = true;\n                }\n                parent_2 = parent_2.parent;\n            }\n        }\n        var generatedSlots = Object.keys(slots)\n            .map(function (key) { return genScopedSlot(slots[key], state); })\n            .join(',');\n        return \"scopedSlots:_u([\".concat(generatedSlots, \"]\").concat(needsForceUpdate ? \",null,true\" : \"\").concat(!needsForceUpdate && needsKey ? \",null,false,\".concat(hash(generatedSlots)) : \"\", \")\");\n    }\n    function hash(str) {\n        var hash = 5381;\n        var i = str.length;\n        while (i) {\n            hash = (hash * 33) ^ str.charCodeAt(--i);\n        }\n        return hash >>> 0;\n    }\n    function containsSlotChild(el) {\n        if (el.type === 1) {\n            if (el.tag === 'slot') {\n                return true;\n            }\n            return el.children.some(containsSlotChild);\n        }\n        return false;\n    }\n    function genScopedSlot(el, state) {\n        var isLegacySyntax = el.attrsMap['slot-scope'];\n        if (el.if && !el.ifProcessed && !isLegacySyntax) {\n            return genIf(el, state, genScopedSlot, \"null\");\n        }\n        if (el.for && !el.forProcessed) {\n            return genFor(el, state, genScopedSlot);\n        }\n        var slotScope = el.slotScope === emptySlotScopeToken ? \"\" : String(el.slotScope);\n        var fn = \"function(\".concat(slotScope, \"){\") +\n            \"return \".concat(el.tag === 'template'\n                ? el.if && isLegacySyntax\n                    ? \"(\".concat(el.if, \")?\").concat(genChildren(el, state) || 'undefined', \":undefined\")\n                    : genChildren(el, state) || 'undefined'\n                : genElement(el, state), \"}\");\n        // reverse proxy v-slot without scope on this.$slots\n        var reverseProxy = slotScope ? \"\" : \",proxy:true\";\n        return \"{key:\".concat(el.slotTarget || \"\\\"default\\\"\", \",fn:\").concat(fn).concat(reverseProxy, \"}\");\n    }\n    function genChildren(el, state, checkSkip, altGenElement, altGenNode) {\n        var children = el.children;\n        if (children.length) {\n            var el_1 = children[0];\n            // optimize single v-for\n            if (children.length === 1 &&\n                el_1.for &&\n                el_1.tag !== 'template' &&\n                el_1.tag !== 'slot') {\n                var normalizationType_1 = checkSkip\n                    ? state.maybeComponent(el_1)\n                        ? \",1\"\n                        : \",0\"\n                    : \"\";\n                return \"\".concat((altGenElement || genElement)(el_1, state)).concat(normalizationType_1);\n            }\n            var normalizationType = checkSkip\n                ? getNormalizationType(children, state.maybeComponent)\n                : 0;\n            var gen_1 = altGenNode || genNode;\n            return \"[\".concat(children.map(function (c) { return gen_1(c, state); }).join(','), \"]\").concat(normalizationType ? \",\".concat(normalizationType) : '');\n        }\n    }\n    // determine the normalization needed for the children array.\n    // 0: no normalization needed\n    // 1: simple normalization needed (possible 1-level deep nested array)\n    // 2: full normalization needed\n    function getNormalizationType(children, maybeComponent) {\n        var res = 0;\n        for (var i = 0; i < children.length; i++) {\n            var el = children[i];\n            if (el.type !== 1) {\n                continue;\n            }\n            if (needsNormalization(el) ||\n                (el.ifConditions &&\n                    el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n                res = 2;\n                break;\n            }\n            if (maybeComponent(el) ||\n                (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n                res = 1;\n            }\n        }\n        return res;\n    }\n    function needsNormalization(el) {\n        return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';\n    }\n    function genNode(node, state) {\n        if (node.type === 1) {\n            return genElement(node, state);\n        }\n        else if (node.type === 3 && node.isComment) {\n            return genComment(node);\n        }\n        else {\n            return genText(node);\n        }\n    }\n    function genText(text) {\n        return \"_v(\".concat(text.type === 2\n            ? text.expression // no need for () because already wrapped in _s()\n            : transformSpecialNewlines(JSON.stringify(text.text)), \")\");\n    }\n    function genComment(comment) {\n        return \"_e(\".concat(JSON.stringify(comment.text), \")\");\n    }\n    function genSlot(el, state) {\n        var slotName = el.slotName || '\"default\"';\n        var children = genChildren(el, state);\n        var res = \"_t(\".concat(slotName).concat(children ? \",function(){return \".concat(children, \"}\") : '');\n        var attrs = el.attrs || el.dynamicAttrs\n            ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) {\n                return ({\n                    // slot props are camelized\n                    name: camelize(attr.name),\n                    value: attr.value,\n                    dynamic: attr.dynamic\n                });\n            }))\n            : null;\n        var bind = el.attrsMap['v-bind'];\n        if ((attrs || bind) && !children) {\n            res += \",null\";\n        }\n        if (attrs) {\n            res += \",\".concat(attrs);\n        }\n        if (bind) {\n            res += \"\".concat(attrs ? '' : ',null', \",\").concat(bind);\n        }\n        return res + ')';\n    }\n    // componentName is el.component, take it as argument to shun flow's pessimistic refinement\n    function genComponent(componentName, el, state) {\n        var children = el.inlineTemplate ? null : genChildren(el, state, true);\n        return \"_c(\".concat(componentName, \",\").concat(genData(el, state)).concat(children ? \",\".concat(children) : '', \")\");\n    }\n    function genProps(props) {\n        var staticProps = \"\";\n        var dynamicProps = \"\";\n        for (var i = 0; i < props.length; i++) {\n            var prop = props[i];\n            var value = transformSpecialNewlines(prop.value);\n            if (prop.dynamic) {\n                dynamicProps += \"\".concat(prop.name, \",\").concat(value, \",\");\n            }\n            else {\n                staticProps += \"\\\"\".concat(prop.name, \"\\\":\").concat(value, \",\");\n            }\n        }\n        staticProps = \"{\".concat(staticProps.slice(0, -1), \"}\");\n        if (dynamicProps) {\n            return \"_d(\".concat(staticProps, \",[\").concat(dynamicProps.slice(0, -1), \"])\");\n        }\n        else {\n            return staticProps;\n        }\n    }\n    // #3895, #4268\n    function transformSpecialNewlines(text) {\n        return text.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n    }\n    // these keywords should not appear inside expressions, but operators like\n    // typeof, instanceof and in are allowed\n    var prohibitedKeywordRE = new RegExp('\\\\b' +\n        ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n            'super,throw,while,yield,delete,export,import,return,switch,default,' +\n            'extends,finally,continue,debugger,function,arguments')\n            .split(',')\n            .join('\\\\b|\\\\b') +\n        '\\\\b');\n    // these unary operators should not be used as property/method names\n    var unaryOperatorsRE = new RegExp('\\\\b' +\n        'delete,typeof,void'.split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') +\n        '\\\\s*\\\\([^\\\\)]*\\\\)');\n    // strip strings in expressions\n    var stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n    // detect problematic expressions in a template\n    function detectErrors(ast, warn) {\n        if (ast) {\n            checkNode(ast, warn);\n        }\n    }\n    function checkNode(node, warn) {\n        if (node.type === 1) {\n            for (var name_1 in node.attrsMap) {\n                if (dirRE.test(name_1)) {\n                    var value = node.attrsMap[name_1];\n                    if (value) {\n                        var range = node.rawAttrsMap[name_1];\n                        if (name_1 === 'v-for') {\n                            checkFor(node, \"v-for=\\\"\".concat(value, \"\\\"\"), warn, range);\n                        }\n                        else if (name_1 === 'v-slot' || name_1[0] === '#') {\n                            checkFunctionParameterExpression(value, \"\".concat(name_1, \"=\\\"\").concat(value, \"\\\"\"), warn, range);\n                        }\n                        else if (onRE.test(name_1)) {\n                            checkEvent(value, \"\".concat(name_1, \"=\\\"\").concat(value, \"\\\"\"), warn, range);\n                        }\n                        else {\n                            checkExpression(value, \"\".concat(name_1, \"=\\\"\").concat(value, \"\\\"\"), warn, range);\n                        }\n                    }\n                }\n            }\n            if (node.children) {\n                for (var i = 0; i < node.children.length; i++) {\n                    checkNode(node.children[i], warn);\n                }\n            }\n        }\n        else if (node.type === 2) {\n            checkExpression(node.expression, node.text, warn, node);\n        }\n    }\n    function checkEvent(exp, text, warn, range) {\n        var stripped = exp.replace(stripStringRE, '');\n        var keywordMatch = stripped.match(unaryOperatorsRE);\n        if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {\n            warn(\"avoid using JavaScript unary operator as property name: \" +\n                \"\\\"\".concat(keywordMatch[0], \"\\\" in expression \").concat(text.trim()), range);\n        }\n        checkExpression(exp, text, warn, range);\n    }\n    function checkFor(node, text, warn, range) {\n        checkExpression(node.for || '', text, warn, range);\n        checkIdentifier(node.alias, 'v-for alias', text, warn, range);\n        checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);\n        checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);\n    }\n    function checkIdentifier(ident, type, text, warn, range) {\n        if (typeof ident === 'string') {\n            try {\n                new Function(\"var \".concat(ident, \"=_\"));\n            }\n            catch (e) {\n                warn(\"invalid \".concat(type, \" \\\"\").concat(ident, \"\\\" in expression: \").concat(text.trim()), range);\n            }\n        }\n    }\n    function checkExpression(exp, text, warn, range) {\n        try {\n            new Function(\"return \".concat(exp));\n        }\n        catch (e) {\n            var keywordMatch = exp\n                .replace(stripStringRE, '')\n                .match(prohibitedKeywordRE);\n            if (keywordMatch) {\n                warn(\"avoid using JavaScript keyword as property name: \" +\n                    \"\\\"\".concat(keywordMatch[0], \"\\\"\\n  Raw expression: \").concat(text.trim()), range);\n            }\n            else {\n                warn(\"invalid expression: \".concat(e.message, \" in\\n\\n\") +\n                    \"    \".concat(exp, \"\\n\\n\") +\n                    \"  Raw expression: \".concat(text.trim(), \"\\n\"), range);\n            }\n        }\n    }\n    function checkFunctionParameterExpression(exp, text, warn, range) {\n        try {\n            new Function(exp, '');\n        }\n        catch (e) {\n            warn(\"invalid function parameter expression: \".concat(e.message, \" in\\n\\n\") +\n                \"    \".concat(exp, \"\\n\\n\") +\n                \"  Raw expression: \".concat(text.trim(), \"\\n\"), range);\n        }\n    }\n    var range = 2;\n    function generateCodeFrame(source, start, end) {\n        if (start === void 0) {\n            start = 0;\n        }\n        if (end === void 0) {\n            end = source.length;\n        }\n        var lines = source.split(/\\r?\\n/);\n        var count = 0;\n        var res = [];\n        for (var i = 0; i < lines.length; i++) {\n            count += lines[i].length + 1;\n            if (count >= start) {\n                for (var j = i - range; j <= i + range || end > count; j++) {\n                    if (j < 0 || j >= lines.length)\n                        continue;\n                    res.push(\"\".concat(j + 1).concat(repeat(\" \", 3 - String(j + 1).length), \"|  \").concat(lines[j]));\n                    var lineLength = lines[j].length;\n                    if (j === i) {\n                        // push underline\n                        var pad = start - (count - lineLength) + 1;\n                        var length_1 = end > count ? lineLength - pad : end - start;\n                        res.push(\"   |  \" + repeat(\" \", pad) + repeat(\"^\", length_1));\n                    }\n                    else if (j > i) {\n                        if (end > count) {\n                            var length_2 = Math.min(end - count, lineLength);\n                            res.push(\"   |  \" + repeat(\"^\", length_2));\n                        }\n                        count += lineLength + 1;\n                    }\n                }\n                break;\n            }\n        }\n        return res.join('\\n');\n    }\n    function repeat(str, n) {\n        var result = '';\n        if (n > 0) {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                // eslint-disable-line\n                if (n & 1)\n                    result += str;\n                n >>>= 1;\n                if (n <= 0)\n                    break;\n                str += str;\n            }\n        }\n        return result;\n    }\n    function createFunction(code, errors) {\n        try {\n            return new Function(code);\n        }\n        catch (err) {\n            errors.push({ err: err, code: code });\n            return noop;\n        }\n    }\n    function createCompileToFunctionFn(compile) {\n        var cache = Object.create(null);\n        return function compileToFunctions(template, options, vm) {\n            options = extend({}, options);\n            var warn = options.warn || warn$2;\n            delete options.warn;\n            /* istanbul ignore if */\n            {\n                // detect possible CSP restriction\n                try {\n                    new Function('return 1');\n                }\n                catch (e) {\n                    if (e.toString().match(/unsafe-eval|CSP/)) {\n                        warn('It seems you are using the standalone build of Vue.js in an ' +\n                            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n                            'The template compiler cannot work in this environment. Consider ' +\n                            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n                            'templates into render functions.');\n                    }\n                }\n            }\n            // check cache\n            var key = options.delimiters\n                ? String(options.delimiters) + template\n                : template;\n            if (cache[key]) {\n                return cache[key];\n            }\n            // compile\n            var compiled = compile(template, options);\n            // check compilation errors/tips\n            {\n                if (compiled.errors && compiled.errors.length) {\n                    if (options.outputSourceRange) {\n                        compiled.errors.forEach(function (e) {\n                            warn(\"Error compiling template:\\n\\n\".concat(e.msg, \"\\n\\n\") +\n                                generateCodeFrame(template, e.start, e.end), vm);\n                        });\n                    }\n                    else {\n                        warn(\"Error compiling template:\\n\\n\".concat(template, \"\\n\\n\") +\n                            compiled.errors.map(function (e) { return \"- \".concat(e); }).join('\\n') +\n                            '\\n', vm);\n                    }\n                }\n                if (compiled.tips && compiled.tips.length) {\n                    if (options.outputSourceRange) {\n                        compiled.tips.forEach(function (e) { return tip(e.msg, vm); });\n                    }\n                    else {\n                        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n                    }\n                }\n            }\n            // turn code into functions\n            var res = {};\n            var fnGenErrors = [];\n            res.render = createFunction(compiled.render, fnGenErrors);\n            res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n                return createFunction(code, fnGenErrors);\n            });\n            // check function generation errors.\n            // this should only happen if there is a bug in the compiler itself.\n            // mostly for codegen development use\n            /* istanbul ignore if */\n            {\n                if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n                    warn(\"Failed to generate render function:\\n\\n\" +\n                        fnGenErrors\n                            .map(function (_a) {\n                            var err = _a.err, code = _a.code;\n                            return \"\".concat(err.toString(), \" in\\n\\n\").concat(code, \"\\n\");\n                        })\n                            .join('\\n'), vm);\n                }\n            }\n            return (cache[key] = res);\n        };\n    }\n    function createCompilerCreator(baseCompile) {\n        return function createCompiler(baseOptions) {\n            function compile(template, options) {\n                var finalOptions = Object.create(baseOptions);\n                var errors = [];\n                var tips = [];\n                var warn = function (msg, range, tip) {\n                    (tip ? tips : errors).push(msg);\n                };\n                if (options) {\n                    if (options.outputSourceRange) {\n                        // $flow-disable-line\n                        var leadingSpaceLength_1 = template.match(/^\\s*/)[0].length;\n                        warn = function (msg, range, tip) {\n                            var data = typeof msg === 'string' ? { msg: msg } : msg;\n                            if (range) {\n                                if (range.start != null) {\n                                    data.start = range.start + leadingSpaceLength_1;\n                                }\n                                if (range.end != null) {\n                                    data.end = range.end + leadingSpaceLength_1;\n                                }\n                            }\n                            (tip ? tips : errors).push(data);\n                        };\n                    }\n                    // merge custom modules\n                    if (options.modules) {\n                        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\n                    }\n                    // merge custom directives\n                    if (options.directives) {\n                        finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);\n                    }\n                    // copy other options\n                    for (var key in options) {\n                        if (key !== 'modules' && key !== 'directives') {\n                            finalOptions[key] = options[key];\n                        }\n                    }\n                }\n                finalOptions.warn = warn;\n                var compiled = baseCompile(template.trim(), finalOptions);\n                {\n                    detectErrors(compiled.ast, warn);\n                }\n                compiled.errors = errors;\n                compiled.tips = tips;\n                return compiled;\n            }\n            return {\n                compile: compile,\n                compileToFunctions: createCompileToFunctionFn(compile)\n            };\n        };\n    }\n    // `createCompilerCreator` allows creating compilers that use alternative\n    // parser/optimizer/codegen, e.g the SSR optimizing compiler.\n    // Here we just export a default compiler using the default parts.\n    var createCompiler = createCompilerCreator(function baseCompile(template, options) {\n        var ast = parse(template.trim(), options);\n        if (options.optimize !== false) {\n            optimize(ast, options);\n        }\n        var code = generate(ast, options);\n        return {\n            ast: ast,\n            render: code.render,\n            staticRenderFns: code.staticRenderFns\n        };\n    });\n    var _a = createCompiler(baseOptions), compileToFunctions = _a.compileToFunctions;\n    // check whether current browser encodes a char inside attribute values\n    var div;\n    function getShouldDecode(href) {\n        div = div || document.createElement('div');\n        div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n        return div.innerHTML.indexOf('&#10;') > 0;\n    }\n    // #3663: IE encodes newlines inside attribute values while other browsers don't\n    var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n    // #6828: chrome encodes content in a[href]\n    var shouldDecodeNewlinesForHref = inBrowser\n        ? getShouldDecode(true)\n        : false;\n    var idToTemplate = cached(function (id) {\n        var el = query(id);\n        return el && el.innerHTML;\n    });\n    var mount = Vue.prototype.$mount;\n    Vue.prototype.$mount = function (el, hydrating) {\n        el = el && query(el);\n        /* istanbul ignore if */\n        if (el === document.body || el === document.documentElement) {\n            warn$2(\"Do not mount Vue to <html> or <body> - mount to normal elements instead.\");\n            return this;\n        }\n        var options = this.$options;\n        // resolve template/el and convert to render function\n        if (!options.render) {\n            var template = options.template;\n            if (template) {\n                if (typeof template === 'string') {\n                    if (template.charAt(0) === '#') {\n                        template = idToTemplate(template);\n                        /* istanbul ignore if */\n                        if (!template) {\n                            warn$2(\"Template element not found or is empty: \".concat(options.template), this);\n                        }\n                    }\n                }\n                else if (template.nodeType) {\n                    template = template.innerHTML;\n                }\n                else {\n                    {\n                        warn$2('invalid template option:' + template, this);\n                    }\n                    return this;\n                }\n            }\n            else if (el) {\n                // @ts-expect-error\n                template = getOuterHTML(el);\n            }\n            if (template) {\n                /* istanbul ignore if */\n                if (config.performance && mark) {\n                    mark('compile');\n                }\n                var _a = compileToFunctions(template, {\n                    outputSourceRange: true,\n                    shouldDecodeNewlines: shouldDecodeNewlines,\n                    shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n                    delimiters: options.delimiters,\n                    comments: options.comments\n                }, this), render = _a.render, staticRenderFns = _a.staticRenderFns;\n                options.render = render;\n                options.staticRenderFns = staticRenderFns;\n                /* istanbul ignore if */\n                if (config.performance && mark) {\n                    mark('compile end');\n                    measure(\"vue \".concat(this._name, \" compile\"), 'compile', 'compile end');\n                }\n            }\n        }\n        return mount.call(this, el, hydrating);\n    };\n    /**\n     * Get outerHTML of elements, taking care\n     * of SVG elements in IE as well.\n     */\n    function getOuterHTML(el) {\n        if (el.outerHTML) {\n            return el.outerHTML;\n        }\n        else {\n            var container = document.createElement('div');\n            container.appendChild(el.cloneNode(true));\n            return container.innerHTML;\n        }\n    }\n    Vue.compile = compileToFunctions;\n    // export type EffectScheduler = (...args: any[]) => any\n    /**\n     * @internal since we are not exposing this in Vue 2, it's used only for\n     * internal testing.\n     */\n    function effect(fn, scheduler) {\n        var watcher = new Watcher(currentInstance, fn, noop, {\n            sync: true\n        });\n        if (scheduler) {\n            watcher.update = function () {\n                scheduler(function () { return watcher.run(); });\n            };\n        }\n    }\n    extend(Vue, vca);\n    Vue.effect = effect;\n    return Vue;\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack@4.19.1_webpack-cli@2.1.5/node_modules/webpack/buildin/global.js */ \"./node_modules/.pnpm/webpack@4.19.1_webpack-cli@2.1.5/node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../timers-browserify@2.0.12/node_modules/timers-browserify/main.js */ \"./node_modules/.pnpm/timers-browserify@2.0.12/node_modules/timers-browserify/main.js\").setImmediate))\n\n//# sourceURL=webpack:///./node_modules/.pnpm/vue@2.7.15/node_modules/vue/dist/vue.js?");

/***/ }),

/***/ "./node_modules/.pnpm/webpack@4.19.1_webpack-cli@2.1.5/node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n// This works in non-strict mode\ng = (function () {\n    return this;\n})();\ntry {\n    // This works if eval is allowed (see CSP)\n    g = g || Function(\"return this\")() || (1, eval)(\"this\");\n}\ncatch (e) {\n    // This works if the window reference is available\n    if (typeof window === \"object\")\n        g = window;\n}\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/JumpThenFall/RenderingController.ts":
/*!*************************************************!*\
  !*** ./src/JumpThenFall/RenderingController.ts ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"./node_modules/.pnpm/three@0.90.0/node_modules/three/build/three.module.js\");\n/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./consts */ \"./src/JumpThenFall/consts.ts\");\n/* harmony import */ var _utils_FPSController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/FPSController */ \"./src/utils/FPSController.js\");\n/***\n * 负责利用传递过来的上下文中的信息，正确的渲染各物体、包括相机的位置场景的构成\n */\n\n\n\nvar RenderingController = /** @class */ (function () {\n    function RenderingController(context, config) {\n        if (config === void 0) { config = _consts__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; }\n        this.context = context;\n        this.config = config;\n        // 场景\n        this.scene = new three__WEBPACK_IMPORTED_MODULE_0__[\"Scene\"]();\n        this.scene.add(context.jumpableObject.object3D);\n        this.scene.add.apply(this.scene, context.landingBoxes.map(function (v) { return v.object3D; }));\n        this.scene.add(new three__WEBPACK_IMPORTED_MODULE_0__[\"AxesHelper\"](100));\n        // 监控着陆盒数组的改变 以及时地对scene做出改变 以正确的渲染\n        watchLandingBoxArray.call(this, context, 'landingBoxes');\n        // 相机\n        var left = -config.CAMERA_HORIZONAL_SIZE / 2, top = config.CAMERA_HORIZONAL_SIZE * config.CAMERA_DEFAULT_ASPECT_RATIO / 2;\n        this.camera = new three__WEBPACK_IMPORTED_MODULE_0__[\"OrthographicCamera\"](left, -left, top, -top, 0.1, 5000);\n        // 仿射变换到正确姿势\n        this.camera.position.x = -300;\n        this.camera.position.z = -300;\n        this.camera.position.y = context.consts.JUMPABLE_OBJECT_SIZE * 20;\n        this.camera.lookAt(new three__WEBPACK_IMPORTED_MODULE_0__[\"Vector3\"](0, 0, 0));\n        this.camera.position.x += 70;\n        this.camera.position.z += 70;\n        this.cameraOffsetX = -230;\n        this.cameraOffsetZ = -230;\n        // 平行光\n        this.directionLight = new three__WEBPACK_IMPORTED_MODULE_0__[\"DirectionalLight\"]();\n        this.directionLight.position.set(-2, -2, 5);\n        this.scene.add(this.directionLight);\n        // 环境光\n        this.ambientLight = new three__WEBPACK_IMPORTED_MODULE_0__[\"AmbientLight\"]();\n        this.scene.add(this.ambientLight);\n        // 渲染器\n        this.renderer = new three__WEBPACK_IMPORTED_MODULE_0__[\"WebGLRenderer\"]({\n            canvas: context.displayCanvasDom,\n            antialias: true\n        });\n        this.renderer.setSize(config.RENDERER_DEFAULT_RESOLUTION, config.RENDERER_DEFAULT_RESOLUTION * config.CAMERA_DEFAULT_ASPECT_RATIO);\n        this.renderer.setClearColor(0xffd998);\n        _utils_FPSController__WEBPACK_IMPORTED_MODULE_2__[\"default\"].delegate(this.check.bind(this));\n        this.cameraPositionLeftX = 0;\n        this.cameraPositionLeftZ = 0;\n        this.cameraDeltaDist = config.JUMPABLE_OBJECT_SIZE / 3;\n    }\n    RenderingController.prototype.check = function () {\n        if (!this.context)\n            return;\n        var context = this.context;\n        var x0 = context.landingBoxes[context.curLandingBoxIndex].position.x, z0 = context.landingBoxes[context.curLandingBoxIndex].position.z, x1 = context.landingBoxes[context.curLandingBoxIndex + 1].position.x, z1 = context.landingBoxes[context.curLandingBoxIndex + 1].position.z;\n        this.cameraPositionLeftX = this.cameraOffsetX + (x0 + x1) / 2 - this.camera.position.x;\n        this.cameraPositionLeftZ = this.cameraOffsetZ + (z0 + z1) / 2 - this.camera.position.z;\n        // 处理剩下的需要移动的相机XZ\n        var l = Math.sqrt(this.cameraPositionLeftX * this.cameraPositionLeftX + this.cameraPositionLeftZ * this.cameraPositionLeftZ);\n        var dx, dz;\n        if (l > this.cameraDeltaDist) {\n            dx = this.cameraDeltaDist * this.cameraPositionLeftX / l;\n            dz = this.cameraDeltaDist * this.cameraPositionLeftZ / l;\n        }\n        else if (l !== 0) {\n            dx = this.cameraPositionLeftX;\n            dz = this.cameraPositionLeftZ;\n        }\n        else {\n            dx = 0;\n            dz = 0;\n        }\n        this.camera.position.x += dx;\n        this.camera.position.z += dz;\n        this.renderer.render(this.scene, this.camera);\n    };\n    RenderingController.prototype.resetCameraPosition = function () {\n        this.camera.position.x = this.cameraOffsetX;\n        this.camera.position.z = this.cameraOffsetZ;\n    };\n    return RenderingController;\n}());\nfunction watchLandingBoxArray(object, property) {\n    var that = this;\n    var reDefinedProperties = {\n        push: {\n            value: function () {\n                var x = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    x[_i] = arguments[_i];\n                }\n                that.scene.add.apply(that.scene, x.map(function (v) { return v.object3D; }));\n                Array.prototype.push.apply(this, x);\n            },\n            configurable: true,\n            writable: false,\n            enumerable: false\n        }\n    };\n    object['_' + property] = object[property];\n    Object.defineProperty(object, property, {\n        set: function (v) {\n            var _v = this['_' + property];\n            // 如果赋值的不是数组 返回\n            if (!(v instanceof Array)) {\n                console.log('must assign an Array');\n                return;\n            }\n            // remove掉新数组不包含的元素\n            _v.forEach(function (element) {\n                if (!v.includes(element)) {\n                    that.scene.remove(element.object3D);\n                }\n            });\n            // add新数组的元素\n            if (v.length > 0) {\n                that.scene.add.apply(that.scene, v.map(function (vv) { return vv.object3D; }));\n            }\n            this['_' + property] = v;\n            Object.defineProperties(this['_' + property], reDefinedProperties);\n        },\n        get: function () {\n            return this['_' + property];\n        }\n    });\n    Object.defineProperties(object['_' + property], reDefinedProperties);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (RenderingController);\n\n\n//# sourceURL=webpack:///./src/JumpThenFall/RenderingController.ts?");

/***/ }),

/***/ "./src/JumpThenFall/consts.ts":
/*!************************************!*\
  !*** ./src/JumpThenFall/consts.ts ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    JUMPABLE_OBJECT_SIZE: 10,\n    // JUMPABLE_OBJECT_HEIGHT:30,\n    // 所有着陆点的高度都相同  废话嘛\n    ALL_LANDING_BOX_HEIGHT: 30,\n    // 基本着陆点尺寸 - 宽度\n    BASE_LANDING_BOX_SIZE: 42,\n    // 相机参数\n    // 默认纵横比\n    CAMERA_DEFAULT_ASPECT_RATIO: 1920 / 1080,\n    // 相机水平尺寸  大约为人的10倍\n    CAMERA_HORIZONAL_SIZE: 180,\n    // 渲染器参数\n    // 横向分辨率  纵向分辨率结合相机参数就得出来了\n    RENDERER_DEFAULT_RESOLUTION: Math.min(window.innerWidth, 400),\n});\n\n\n//# sourceURL=webpack:///./src/JumpThenFall/consts.ts?");

/***/ }),

/***/ "./src/JumpThenFall/index.ts":
/*!***********************************!*\
  !*** ./src/JumpThenFall/index.ts ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! event-emitter */ \"./node_modules/.pnpm/event-emitter@0.3.5/node_modules/event-emitter/index.js\");\n/* harmony import */ var event_emitter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(event_emitter__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _objects_landingBoxes_LandingBox__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./objects/landingBoxes/LandingBox */ \"./src/JumpThenFall/objects/landingBoxes/LandingBox.ts\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"./node_modules/.pnpm/three@0.90.0/node_modules/three/build/three.module.js\");\n/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./consts */ \"./src/JumpThenFall/consts.ts\");\n/* harmony import */ var _objects_JumpableObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./objects/JumpableObject */ \"./src/JumpThenFall/objects/JumpableObject.ts\");\n/* harmony import */ var _RenderingController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RenderingController */ \"./src/JumpThenFall/RenderingController.ts\");\n\n\n\n/***\n * 主游戏类\\游戏入口\n * 可触发的事件 ongameover\n * @param dom\n * @constructor\n */\n\n\n\nvar Game = /** @class */ (function () {\n    function Game(dom, constants) {\n        if (constants === void 0) { constants = _consts__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; }\n        /****************************************************************/\n        /*                       状态变量                          */\n        /****************************************************************/\n        this.score = 0;\n        this.gameState = 0;\n        this.WAITING_PLAYING = 0;\n        this.PLAYING = 1;\n        this.GAMA_OVER = 2;\n        // 当前着陆的盒子\n        this.curLandingBoxIndex = 0;\n        // 下个盒子的方向\n        this.nextLandingBoxDirection = 0;\n        this.LANDING_BOX_DIRECTION_X = 0;\n        this.LANDING_BOX_DIRECTION_Z = 1;\n        this.consts = _consts__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n        this.consts = _consts__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n        this.displayCanvasDom = dom;\n        // 被控制的跳跃小人~~~~\n        this.jumpableObject = new _objects_JumpableObject__WEBPACK_IMPORTED_MODULE_4__[\"default\"](constants.JUMPABLE_OBJECT_SIZE);\n        this.jumpableObject.position.y = this.consts.ALL_LANDING_BOX_HEIGHT;\n        this.jumpableObject.on('jumpover', jumpoverHandler.bind(this));\n        this.landingBoxes = [];\n        // 执行一系列初始化\n        this.reset();\n        // 总渲染控制器\n        this.renderingController = new _RenderingController__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this);\n    }\n    Game.prototype.restart = function () {\n        this.reset();\n        // renderingController初始化相机位置\n        this.renderingController.resetCameraPosition();\n        this.gameState = this.PLAYING;\n    };\n    /***\n     * 重置到WAITING_PLAYING状态\n     */\n    Game.prototype.reset = function () {\n        this.gameState = this.WAITING_PLAYING;\n        this.jumpableObject.position.x = 0;\n        this.jumpableObject.position.z = 0;\n        // 生成初始的盒子\n        this.landingBoxes = [];\n        this.landingBoxes.push(new _objects_landingBoxes_LandingBox__WEBPACK_IMPORTED_MODULE_1__[\"BaseLandingBox\"](this.consts.BASE_LANDING_BOX_SIZE, this.consts.ALL_LANDING_BOX_HEIGHT));\n        this.curLandingBoxIndex = 0;\n        this.score = 0;\n        // 生成下一个盒子 并做出类似jumpoverHandler的行为\n        // 暂时默认着陆盒都是正方形计算边界\n        this.generateNextLandingBox();\n        var box1Center = this.landingBoxes[this.curLandingBoxIndex].position, box2Center = this.landingBoxes[this.curLandingBoxIndex + 1].position, jumpableObject = this.jumpableObject;\n        // 改变小人的朝向 指向下一个盒子的中心点\n        var x0 = jumpableObject.position.x, z0 = jumpableObject.position.z, x1 = box1Center.x, z1 = box2Center.z;\n        this.jumpableObject.orientation = new three__WEBPACK_IMPORTED_MODULE_2__[\"Vector2\"](x1 - x0, z1 - z0);\n    };\n    // 根据当前站立的盒子生成下一个盒子\n    Game.prototype.generateNextLandingBox = function () {\n        var curPosX = this.landingBoxes[this.curLandingBoxIndex].position.x, curPosZ = this.landingBoxes[this.curLandingBoxIndex].position.z, curSize = this.landingBoxes[this.curLandingBoxIndex].size;\n        var nextLandingBox = new _objects_landingBoxes_LandingBox__WEBPACK_IMPORTED_MODULE_1__[\"BaseLandingBox\"](this.consts.BASE_LANDING_BOX_SIZE, this.consts.ALL_LANDING_BOX_HEIGHT);\n        // 下一个盒子的方向\n        this.nextLandingBoxDirection = Math.random() < .5 ? this.LANDING_BOX_DIRECTION_X : this.LANDING_BOX_DIRECTION_Z;\n        // 下一个盒子的距离\n        var dist = Math.floor(Math.random() * this.consts.JUMPABLE_OBJECT_SIZE * 10 + nextLandingBox.size / 2 + curSize / 2);\n        nextLandingBox.position.set(curPosX + (this.nextLandingBoxDirection === this.LANDING_BOX_DIRECTION_X ? dist : 0), 0, curPosZ + (this.nextLandingBoxDirection === this.LANDING_BOX_DIRECTION_Z ? dist : 0));\n        this.landingBoxes.push(nextLandingBox);\n    };\n    // 开始蓄力跳\n    Game.prototype.charge = function () {\n        if (this.gameState !== this.PLAYING) {\n            console.log('start game first');\n            return;\n        }\n        this.jumpableObject.charge();\n    };\n    Game.prototype.release = function () {\n        this.jumpableObject.release();\n    };\n    return Game;\n}());\nevent_emitter__WEBPACK_IMPORTED_MODULE_0___default()(Game.prototype);\nfunction jumpoverHandler(dx, dz) {\n    // 暂时默认着陆盒都是正方形计算边界\n    var box1 = this.landingBoxes[this.curLandingBoxIndex], box2 = this.landingBoxes[this.curLandingBoxIndex + 1], box1Center = box1.position, box2Center = box2.position, jumpableObject = this.jumpableObject, jumpableObjectCenter = jumpableObject.position;\n    if (jumpableObjectCenter.x - box1Center.x < box1.size / 2 && jumpableObjectCenter.z - box1Center.z < box1.size / 2) {\n        // 跳在原来的盒子上  不做动作\n    }\n    else if (Math.abs(jumpableObjectCenter.x - box2Center.x) < box2.size / 2 &&\n        Math.abs(jumpableObjectCenter.z - box2Center.z) < box2.size / 2) {\n        // 跳在下一个盒子上\n        this.curLandingBoxIndex++;\n        // 分数暂时默认和盒子数相同\n        this.score++;\n        this.generateNextLandingBox();\n        // 改变小人的朝向 指向下一个盒子的中心点\n        var x0 = jumpableObjectCenter.x, z0 = jumpableObjectCenter.z, x1 = this.landingBoxes[this.curLandingBoxIndex + 1].position.x, z1 = this.landingBoxes[this.curLandingBoxIndex + 1].position.z;\n        this.jumpableObject.orientation = new three__WEBPACK_IMPORTED_MODULE_2__[\"Vector2\"](x1 - x0, z1 - z0);\n    }\n    else {\n        // 暂时把curLandingBoxIndex看做分数\n        this.emit('gameover', this.curLandingBoxIndex);\n        this.gameState = this.GAMA_OVER;\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Game);\n\n\n//# sourceURL=webpack:///./src/JumpThenFall/index.ts?");

/***/ }),

/***/ "./src/JumpThenFall/objects/JumpableObject.ts":
/*!****************************************************!*\
  !*** ./src/JumpThenFall/objects/JumpableObject.ts ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"./node_modules/.pnpm/three@0.90.0/node_modules/three/build/three.module.js\");\n/* harmony import */ var _utils_FPSController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/FPSController */ \"./src/utils/FPSController.js\");\n/* harmony import */ var event_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! event-emitter */ \"./node_modules/.pnpm/event-emitter@0.3.5/node_modules/event-emitter/index.js\");\n/* harmony import */ var event_emitter__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(event_emitter__WEBPACK_IMPORTED_MODULE_2__);\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n/***\n * 弹跳过程模拟器,\n * x,y  朝向x轴正方向垂直于y跳跃\n * @constructor\n */\nvar BouncingSimulator = /** @class */ (function () {\n    function BouncingSimulator() {\n        this.stepsTaken = 0;\n        this.x = 0;\n        this.y = 0;\n        this.targetDist = 0;\n        this.maxHeight = 0;\n        this.totalSteps = 0;\n        this.isEnd = false;\n    }\n    /***\n     * 重置到起点  开始模拟整个过程\n     * @param maxHeight 弹跳过程中最大高度\n     * @param targetDist 目标距离\n     * @param steps 一共移动步数\n     */\n    BouncingSimulator.prototype.reset = function (maxHeight, targetDist, steps) {\n        this.x = this.y = this.stepsTaken = 0;\n        this.targetDist = targetDist;\n        this.maxHeight = maxHeight;\n        this.totalSteps = steps;\n        this.isEnd = false;\n    };\n    /***\n     * 前进一步\n     * @returns {{dx: number, dy: number}}\n     */\n    BouncingSimulator.prototype.next = function () {\n        if (this.stepsTaken >= this.totalSteps) {\n            this.isEnd = true;\n            return {\n                dx: 0,\n                dy: 0\n            };\n        }\n        this.stepsTaken++;\n        var preX = this.x, preY = this.y;\n        var stepRate = this.stepsTaken / this.totalSteps;\n        this.x = stepRate * this.targetDist;\n        this.y = 4 * this.maxHeight * (stepRate - stepRate * stepRate);\n        return {\n            dx: this.x - preX,\n            dy: this.y - preY\n        };\n    };\n    return BouncingSimulator;\n}());\nvar state;\n(function (state) {\n    state[state[\"IDLE\"] = 0] = \"IDLE\";\n    state[state[\"CHARGING\"] = 1] = \"CHARGING\";\n    state[state[\"BOUNCING\"] = 2] = \"BOUNCING\";\n})(state || (state = {}));\n/***\n * 可跳跃的物体，能够蓄力弹跳\n * 会触发的事件 onjumpover(dx,dz)\n * @constructor\n */\nvar JumpableObject = /** @class */ (function () {\n    function JumpableObject(size) {\n        /****************************************************************/\n        /*                       info                          */\n        /****************************************************************/\n        this.size = 0;\n        // 默认弹跳下落到与原来Y相同则停止\n        this.initialY = 0;\n        // 最大弹跳距离与size成正比\n        this.maxBouncingDuration = 125;\n        /****************************************************************/\n        /*                       状态量                          */\n        /****************************************************************/\n        this.state = state.IDLE;\n        this.bouncingDuration = 0;\n        this.orientation = new three__WEBPACK_IMPORTED_MODULE_0__[\"Vector2\"](1, 1);\n        /****************************************************************/\n        /*                       常量                          */\n        /****************************************************************/\n        /****************************************************************/\n        /*                       私有工具属性                          */\n        /****************************************************************/\n        this.bouncingSimulator = new BouncingSimulator();\n        // todo 这里还不确定对不对\n        this.height = 0;\n        this.size = size;\n        Object.defineProperties(this, {});\n        this.object3D = new JumpableObject3D(size);\n        this.state = state.IDLE;\n        // 委托给FPS管理器的更新函数\n        _utils_FPSController__WEBPACK_IMPORTED_MODULE_1__[\"default\"].delegate(this.update.bind(this));\n    }\n    Object.defineProperty(JumpableObject.prototype, \"maxHeight\", {\n        // 弹跳高度与size成正比\n        get: function () {\n            return this.size * 2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(JumpableObject.prototype, \"position\", {\n        get: function () {\n            if (!this.object3D)\n                throw new Error('object3D is null');\n            return this.object3D.position;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    JumpableObject.prototype.charge = function () {\n        if (this.state !== state.IDLE)\n            return;\n        this.state = state.CHARGING;\n        this.object3D.press(120);\n    };\n    JumpableObject.prototype.release = function () {\n        if (!(this.state === state.CHARGING))\n            return;\n        this.state = state.BOUNCING;\n        this.object3D.release(120);\n        var dist = Math.min(this.bouncingDuration, this.maxBouncingDuration) * 2.5;\n        this.bouncingSimulator.reset(this.maxHeight, dist, 20);\n        this.bouncingDuration = 0;\n    };\n    JumpableObject.prototype.update = function () {\n        switch (this.state) {\n            case state.IDLE: {\n                break;\n            }\n            case state.CHARGING: {\n                this.bouncingDuration++;\n                break;\n            }\n            case state.BOUNCING: {\n                var _a = this.bouncingSimulator.next(), dx = _a.dx, dy = _a.dy;\n                this.height = this.height + dy;\n                this.position.x += dx * Math.cos(this.orientation.angle());\n                this.position.z += dx * Math.sin(this.orientation.angle());\n                this.position.y += dy;\n                if (this.bouncingSimulator.isEnd) {\n                    this.state = state.IDLE;\n                    this.bouncingDuration = 0;\n                    this.emit('jumpover', this.bouncingSimulator.x, this.bouncingSimulator.y);\n                }\n                break;\n            }\n        }\n        this.object3D.update();\n    };\n    return JumpableObject;\n}());\n// 绑定事件触发器\nevent_emitter__WEBPACK_IMPORTED_MODULE_2___default()(JumpableObject.prototype);\n/***\n * 可添加到场景中的小人  初始位置为脚站在原点\n * @param size  圆柱体下底面直径\n * @constructor\n */\nvar JumpableObject3D = /** @class */ (function (_super) {\n    __extends(JumpableObject3D, _super);\n    function JumpableObject3D(size) {\n        var _this = _super.call(this) || this;\n        // 形变相关\n        _this.PRESS = 0;\n        _this.RELEASE = 1;\n        _this.morphFactor = 0;\n        _this.radiusTop = size / 2 * .7;\n        _this.radiusBottom = size / 2;\n        _this.height = size * 1.7;\n        _this.radiusSegments = size;\n        _this.heightSegments = size * 8;\n        // 颜色\n        var randomColor = new three__WEBPACK_IMPORTED_MODULE_0__[\"Color\"]().setHSL(Math.random(), .5, .5);\n        // 身体 上底半径小的圆柱体\n        // 身体几何体\n        var bodyGeometry = new three__WEBPACK_IMPORTED_MODULE_0__[\"CylinderGeometry\"](_this.radiusTop, _this.radiusBottom, _this.height, _this.radiusSegments, _this.heightSegments);\n        // 身体的骨骼\n        var bones = [], bone0 = new three__WEBPACK_IMPORTED_MODULE_0__[\"Bone\"](), bone1 = new three__WEBPACK_IMPORTED_MODULE_0__[\"Bone\"](), bone2 = new three__WEBPACK_IMPORTED_MODULE_0__[\"Bone\"]();\n        bone0.position.y = -_this.height / 2;\n        bone1.position.y = 0;\n        bone2.position.y = _this.height / 2;\n        bone0.add(bone1);\n        bone1.add(bone2);\n        bones.push(bone0, bone1, bone2);\n        var skeleton = new three__WEBPACK_IMPORTED_MODULE_0__[\"Skeleton\"](bones);\n        // 修改顶点的skinIndices/skinWeights\n        for (var heightSegment = _this.heightSegments; heightSegment >= 0; heightSegment--) {\n            var index = heightSegment > _this.heightSegments / 2 ? 1 : 0;\n            var segmentHeight = _this.height / _this.heightSegments;\n            var offset = (heightSegment * segmentHeight - bones[index].position.y - _this.height / 2) / (_this.height / 2);\n            for (var i = 0; i < _this.radiusSegments; i++) {\n                bodyGeometry.skinIndices.push(new three__WEBPACK_IMPORTED_MODULE_0__[\"Vector4\"](index, index + 1, 0, 0));\n                bodyGeometry.skinWeights.push(new three__WEBPACK_IMPORTED_MODULE_0__[\"Vector4\"](1 - offset, offset, 0, 0));\n            }\n        }\n        bodyGeometry.skinIndices.push(new three__WEBPACK_IMPORTED_MODULE_0__[\"Vector4\"](1, 2, 0, 0));\n        bodyGeometry.skinWeights.push(new three__WEBPACK_IMPORTED_MODULE_0__[\"Vector4\"](0, 1, 0, 0));\n        bodyGeometry.skinIndices.push(new three__WEBPACK_IMPORTED_MODULE_0__[\"Vector4\"](0, 1, 0, 0));\n        bodyGeometry.skinWeights.push(new three__WEBPACK_IMPORTED_MODULE_0__[\"Vector4\"](1, 0, 0, 0));\n        var bodyMaterial = new three__WEBPACK_IMPORTED_MODULE_0__[\"MeshLambertMaterial\"]({\n            color: randomColor,\n            skinning: true\n        });\n        var body = new three__WEBPACK_IMPORTED_MODULE_0__[\"SkinnedMesh\"](bodyGeometry, bodyMaterial);\n        // 绑定骨架\n        body.add(bones[0]);\n        body.bind(skeleton);\n        _this.bones = bones;\n        // 头  就是一个球体\n        var headGeometry = new three__WEBPACK_IMPORTED_MODULE_0__[\"SphereGeometry\"](_this.radiusTop), headMaterial = new three__WEBPACK_IMPORTED_MODULE_0__[\"MeshLambertMaterial\"]({\n            color: randomColor\n        });\n        var head = new three__WEBPACK_IMPORTED_MODULE_0__[\"Mesh\"](headGeometry, headMaterial);\n        body.position.y = _this.height / 2;\n        head.position.set(0, _this.height + size / 2, 0);\n        _this.body = body;\n        _this.head = head;\n        _super.prototype.add.call(_this, body, head);\n        return _this;\n    }\n    JumpableObject3D.prototype.update = function () {\n        switch (this.morphType) {\n            case this.PRESS: {\n                var c = this.morphFactor;\n                this.head.position.y -= 2 * c;\n                this.bones[2].position.y -= c;\n                this.bones[1].position.y -= c;\n                this.bones[1].scale.x += c / 10;\n                this.bones[1].scale.z += c / 10;\n                this.bones[2].scale.x += c / 50;\n                this.bones[2].scale.z += c / 50;\n                if (this.bones[2].position.y < 0) {\n                    this.morphType = null;\n                }\n                break;\n            }\n            case this.RELEASE: {\n                var c = this.morphFactor;\n                this.head.position.y += 2 * c;\n                this.bones[2].position.y += c;\n                this.bones[1].position.y += c;\n                this.bones[1].scale.x -= c / 10;\n                this.bones[1].scale.z -= c / 10;\n                this.bones[2].scale.x -= c / 50;\n                this.bones[2].scale.z -= c / 50;\n                if (this.bones[2].position.y > this.height / 2) {\n                    this.morphType = null;\n                }\n                break;\n            }\n        }\n    };\n    JumpableObject3D.prototype.press = function (duration) {\n        this.morphFactor = this.height / 2 / duration;\n        this.morphType = this.PRESS;\n    };\n    JumpableObject3D.prototype.release = function (duration) {\n        this.morphFactor = this.height / 2 / duration;\n        this.morphType = this.RELEASE;\n    };\n    return JumpableObject3D;\n}(three__WEBPACK_IMPORTED_MODULE_0__[\"Group\"]));\n/* harmony default export */ __webpack_exports__[\"default\"] = (JumpableObject);\n\n\n//# sourceURL=webpack:///./src/JumpThenFall/objects/JumpableObject.ts?");

/***/ }),

/***/ "./src/JumpThenFall/objects/landingBoxes/LandingBox.ts":
/*!*************************************************************!*\
  !*** ./src/JumpThenFall/objects/landingBoxes/LandingBox.ts ***!
  \*************************************************************/
/*! exports provided: BaseLandingBox */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseLandingBox\", function() { return BaseLandingBox; });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"./node_modules/.pnpm/three@0.90.0/node_modules/three/build/three.module.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n/***\n * 所有着陆盒的共同点是 具有相同的高度，有一个中心点和一个可着陆区域形状\n * BaseLandingBox 是所有着陆盒的父类\n * @param size 可着陆区域外接正方形的尺寸\n * @param height 高度\n * @constructor\n */\nvar BaseLandingBox = /** @class */ (function () {\n    function BaseLandingBox(size, height) {\n        this.size = size;\n        this.object3D = new BaseLandingBox3D(size, height);\n    }\n    Object.defineProperty(BaseLandingBox.prototype, \"position\", {\n        get: function () {\n            return this.object3D.position;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return BaseLandingBox;\n}());\n\nvar BaseLandingBox3D = /** @class */ (function (_super) {\n    __extends(BaseLandingBox3D, _super);\n    function BaseLandingBox3D(size, height) {\n        var _this = this;\n        var geometry = new three__WEBPACK_IMPORTED_MODULE_0__[\"BoxGeometry\"](size, height, size), material = new three__WEBPACK_IMPORTED_MODULE_0__[\"MeshLambertMaterial\"]({\n            color: new three__WEBPACK_IMPORTED_MODULE_0__[\"Color\"]().setHSL(Math.random(), .5, .5)\n        });\n        geometry.translate(0, height / 2, 0);\n        _this = _super.call(this, geometry, material) || this;\n        return _this;\n    }\n    return BaseLandingBox3D;\n}(three__WEBPACK_IMPORTED_MODULE_0__[\"Mesh\"]));\n\n\n//# sourceURL=webpack:///./src/JumpThenFall/objects/landingBoxes/LandingBox.ts?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _JumpThenFall_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JumpThenFall/index */ \"./src/JumpThenFall/index.ts\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/.pnpm/vue@2.7.15/node_modules/vue/dist/vue.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _static_green_play_png__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./static/green_play.png */ \"./src/static/green_play.png\");\n/* harmony import */ var _static_green_play_png__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_static_green_play_png__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _static_green_replay_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./static/green_replay.png */ \"./src/static/green_replay.png\");\n/* harmony import */ var _static_green_replay_png__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_static_green_replay_png__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _static_digital_number_ttf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./static/digital_number.ttf */ \"./src/static/digital_number.ttf\");\n/* harmony import */ var _static_digital_number_ttf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_static_digital_number_ttf__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nvar canvasWrapper = document.querySelector('.canvas-wrapper');\nnew vue__WEBPACK_IMPORTED_MODULE_1___default.a({\n    el: document.querySelector('#canvas-wrapper'),\n    mounted: function () {\n        var _this = this;\n        var canvasDom = document.getElementById('main-scene'), gameStartButton = document.querySelector('.game-start-button'), gameRestartButton = document.querySelector('.game-restart-button');\n        this.game = new _JumpThenFall_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvasDom);\n        this.game.on('gameover', gameoverHandler);\n        gameStartButton.addEventListener('click', function () {\n            _this.game.restart();\n        });\n        gameRestartButton.addEventListener('click', function () {\n            _this.game.restart();\n        });\n        // 正确绑定touch和click事件\n        if (document.ontouchstart !== undefined) {\n            canvasDom.addEventListener('touchstart', function () {\n                if (_this.game.gameState !== _this.game.PLAYING)\n                    return;\n                _this.game.charge();\n            });\n            canvasDom.addEventListener('touchend', function () {\n                if (_this.game.gameState !== _this.game.PLAYING)\n                    return;\n                _this.game.release();\n            });\n        }\n        else {\n            canvasDom.addEventListener('mousedown', function () {\n                if (_this.game.gameState !== _this.game.PLAYING)\n                    return;\n                _this.game.charge();\n            });\n            canvasDom.addEventListener('mouseup', function () {\n                if (_this.game.gameState !== _this.game.PLAYING)\n                    return;\n                _this.game.release();\n            });\n        }\n    },\n    data: function () {\n        return {\n            greenPlaySrc: _static_green_play_png__WEBPACK_IMPORTED_MODULE_2___default.a,\n            greenReplaySrc: _static_green_replay_png__WEBPACK_IMPORTED_MODULE_3___default.a,\n            game: null,\n        };\n    }\n});\nfunction gameoverHandler(scort) {\n    console.log('your scort is ', scort);\n}\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/static/digital_number.ttf":
/*!***************************************!*\
  !*** ./src/static/digital_number.ttf ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"digital_number.ttf\";\n\n//# sourceURL=webpack:///./src/static/digital_number.ttf?");

/***/ }),

/***/ "./src/static/green_play.png":
/*!***********************************!*\
  !*** ./src/static/green_play.png ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"afb97e6e1a706bf9d3450be176008790.png\";\n\n//# sourceURL=webpack:///./src/static/green_play.png?");

/***/ }),

/***/ "./src/static/green_replay.png":
/*!*************************************!*\
  !*** ./src/static/green_replay.png ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"690dd47e7c7377b46fc422adccd9e226.png\";\n\n//# sourceURL=webpack:///./src/static/green_replay.png?");

/***/ }),

/***/ "./src/utils/FPSController.js":
/*!************************************!*\
  !*** ./src/utils/FPSController.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar monitor = requestAnimationFrame(funcExecutor);\nvar funcList = [];\nfunction funcExecutor() {\n    funcList.forEach(function (func) {\n        func();\n    });\n    monitor = requestAnimationFrame(funcExecutor);\n}\nfunction delegate() {\n    var funcs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        funcs[_i] = arguments[_i];\n    }\n    funcList.push.apply(funcList, funcs);\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    delegate: delegate,\n});\n\n\n//# sourceURL=webpack:///./src/utils/FPSController.js?");

/***/ })

/******/ });